{
    "docs": [
        {
            "location": "/", 
            "text": "fastlane\n\n\n\n\n\n\n\n\nfastlane\n is the easiest way to automate beta deployments and releases for your iOS and Android apps. \ud83d\ude80 It handles all tedious tasks, like generating screenshots, dealing with code signing, and releasing your application.\n\n\nYou can start by creating a \nFastfile\n file in your repository, here\u2019s one that defines your beta or App Store release process:\n\n\nlane :beta do\n  increment_build_number\n  gym                       # Build your app\n  testflight                # Upload to TestFlight\nend\n\nlane :appstore do\n  snapshot                  # Generate screenshots for the App Store\n  gym                       # Build your app\n  deliver                   # Upload the screenshots and the binary to iTunes\n  slack                     # Let your team-mates know the new version is live\nend\n\n\n\n\nYou just defined 2 different lanes, one for beta deployment, one for App Store. To release your app in the App Store, all you have to do is\n\n\nfastlane appstore\n\n\n\n\nWhy fastlane?\n\n\n\n\n\n\n\n\n\n\nfastlane\n\n\n\n\n\n\n\n\n\n\n\ud83d\ude80\n\n\nSave \nhours\n every time you push a new release to the store or beta testing service\n\n\n\n\n\n\n\u2728\n\n\nIntegrates with all your existing tools and services (170 actions currently)\n\n\n\n\n\n\n\ud83d\udcd6\n\n\n100% open source under the MIT license\n\n\n\n\n\n\n\ud83c\udfa9\n\n\nEasy setup assistant to get started in a few minutes\n\n\n\n\n\n\n\u2692\n\n\nRuns on \nyour\n machine, it's your app and your data\n\n\n\n\n\n\n\ud83d\udc7b\n\n\nIntegrates with all major CI systems\n\n\n\n\n\n\n\ud83d\udda5\n\n\nSupports iOS, Mac, and Android apps\n\n\n\n\n\n\n\ud83d\udd27\n\n\nExtend and customise \nfastlane\n to fit your needs, you're not dependent on anyone\n\n\n\n\n\n\n\ud83d\udcad\n\n\nNever remember any commands any more, just \nfastlane\n\n\n\n\n\n\n\ud83d\udea2\n\n\nDeploy from any computer, including a CI server\n\n\n\n\n\n\n\n\nGetting Started\n\n\nMake sure you have the latest version of the Xcode command line tools installed:\n\n\nxcode-select --install\n\n\n\n\nChoose your installation method:\n\n\n\n\n\n\nHomebrew\n\n\nInstaller Script\n\n\nRubygems\n\n\n\n\n\n\nmacOS\n\n\nmacOS\n\n\nmacOS or Linux with Ruby 2.0.0 or above\n\n\n\n\n \n\nbrew cask install fastlane\n\n\nDownload the zip file\n. Then double click on the \ninstall\n script (or run it in a terminal window).\n\n\nsudo gem install fastlane -NV\n\n\n\n\n\n\n\nNavigate to your iOS or Android app and run\n\n\nfastlane init\n\n\n\n\nfastlane\n will automatically detect your project, and ask for any missing information.\n\n\nFor more details about how to get up and running, check out the getting started guides:\n\n\n\n\nfastlane Getting Started guide for iOS\n\n\nfastlane Getting Started guide for Android\n\n\n\n\nUsing the Fabric app\n\n\nIf you're not familiar with the terminal and prefer a graphical user interface, download the \nFabric app\n and use the built-in \nfastlane\n button.\n\n\nQuestions and support\n\n\nAll fastlane related questions, problems and feature ideas should be posted as \nGitHub issue\n. This way, other users can search existing discussions, and everybody can jump in.\n\n\nSystem requirements\n\n\nCurrently, \nfastlane\n is officially supported to run on macOS. Support for other operating systems is limited and untested at this point in time. \nfastlane\n uses system APIs that may not be implemented on other platforms, for example, we use the Ruby \nfork\n method for sub-process management, which isn't available on Windows.\n\n\nLicense\n\n\nThis project is licensed under the terms of the MIT license. See the \nLICENSE\n file.\n\n\n\n\nThis project and all fastlane tools are in no way affiliated with Apple Inc. This project is open source under the MIT license, which means you have full access to the source code and can modify it to fit your own needs. All fastlane tools run on your own computer or server, so your credentials or other sensitive information will never leave your own computer. You are responsible for how you use fastlane tools.", 
            "title": "Home"
        }, 
        {
            "location": "/#fastlane", 
            "text": "fastlane  is the easiest way to automate beta deployments and releases for your iOS and Android apps. \ud83d\ude80 It handles all tedious tasks, like generating screenshots, dealing with code signing, and releasing your application.  You can start by creating a  Fastfile  file in your repository, here\u2019s one that defines your beta or App Store release process:  lane :beta do\n  increment_build_number\n  gym                       # Build your app\n  testflight                # Upload to TestFlight\nend\n\nlane :appstore do\n  snapshot                  # Generate screenshots for the App Store\n  gym                       # Build your app\n  deliver                   # Upload the screenshots and the binary to iTunes\n  slack                     # Let your team-mates know the new version is live\nend  You just defined 2 different lanes, one for beta deployment, one for App Store. To release your app in the App Store, all you have to do is  fastlane appstore", 
            "title": "fastlane"
        }, 
        {
            "location": "/#why-fastlane", 
            "text": "fastlane      \ud83d\ude80  Save  hours  every time you push a new release to the store or beta testing service    \u2728  Integrates with all your existing tools and services (170 actions currently)    \ud83d\udcd6  100% open source under the MIT license    \ud83c\udfa9  Easy setup assistant to get started in a few minutes    \u2692  Runs on  your  machine, it's your app and your data    \ud83d\udc7b  Integrates with all major CI systems    \ud83d\udda5  Supports iOS, Mac, and Android apps    \ud83d\udd27  Extend and customise  fastlane  to fit your needs, you're not dependent on anyone    \ud83d\udcad  Never remember any commands any more, just  fastlane    \ud83d\udea2  Deploy from any computer, including a CI server", 
            "title": "Why fastlane?"
        }, 
        {
            "location": "/#getting-started", 
            "text": "Make sure you have the latest version of the Xcode command line tools installed:  xcode-select --install", 
            "title": "Getting Started"
        }, 
        {
            "location": "/#choose-your-installation-method", 
            "text": "Homebrew  Installer Script  Rubygems    macOS  macOS  macOS or Linux with Ruby 2.0.0 or above     brew cask install fastlane  Download the zip file . Then double click on the  install  script (or run it in a terminal window).  sudo gem install fastlane -NV    Navigate to your iOS or Android app and run  fastlane init  fastlane  will automatically detect your project, and ask for any missing information.  For more details about how to get up and running, check out the getting started guides:   fastlane Getting Started guide for iOS  fastlane Getting Started guide for Android", 
            "title": "Choose your installation method:"
        }, 
        {
            "location": "/#using-the-fabric-app", 
            "text": "If you're not familiar with the terminal and prefer a graphical user interface, download the  Fabric app  and use the built-in  fastlane  button.", 
            "title": "Using the Fabric app"
        }, 
        {
            "location": "/#questions-and-support", 
            "text": "All fastlane related questions, problems and feature ideas should be posted as  GitHub issue . This way, other users can search existing discussions, and everybody can jump in.", 
            "title": "Questions and support"
        }, 
        {
            "location": "/#system-requirements", 
            "text": "Currently,  fastlane  is officially supported to run on macOS. Support for other operating systems is limited and untested at this point in time.  fastlane  uses system APIs that may not be implemented on other platforms, for example, we use the Ruby  fork  method for sub-process management, which isn't available on Windows.", 
            "title": "System requirements"
        }, 
        {
            "location": "/#license", 
            "text": "This project is licensed under the terms of the MIT license. See the  LICENSE  file.   This project and all fastlane tools are in no way affiliated with Apple Inc. This project is open source under the MIT license, which means you have full access to the source code and can modify it to fit your own needs. All fastlane tools run on your own computer or server, so your credentials or other sensitive information will never leave your own computer. You are responsible for how you use fastlane tools.", 
            "title": "License"
        }, 
        {
            "location": "/getting-started/ios/setup/", 
            "text": "Getting started with \nfastlane\n for iOS\n\n\nInstalling fastlane\n\n\nMake sure you have the latest version of the Xcode command line tools installed:\n\n\nxcode-select --install\n\n\n\n\nChoose your installation method:\n\n\n\n\n\n\nHomebrew\n\n\nInstaller Script\n\n\nRubygems\n\n\n\n\n\n\nmacOS\n\n\nmacOS\n\n\nmacOS or Linux with Ruby 2.0.0 or above\n\n\n\n\n \n\nbrew cask install fastlane\n\n\nDownload the zip file\n. Then double click on the \ninstall\n script (or run it in a terminal window).\n\n\nsudo gem install fastlane -NV\n\n\n\n\n\n\n\nSetting up fastlane\n\n\nNavigate your terminal to your project's directory and run\n\n\nfastlane init\n\n\n\n\nYou'll be asked for your Apple ID, and \nfastlane\n will automatically generate a fastlane configuration for you, based on the information provided.\n\n\nYou can see the newly created \nfastlane\n directory, with all your existing metadata fetched from iTunes Connect.\n\n\n\n\nThe most interesting file is \nfastlane/Fastfile\n, which contains all the information that is needed to distribute your app.\n\n\nWhat's next?\n\n\nfastlane\n created all the required files for you, now you can go ahead and customise it to generate screenshots or to automatically distribute new builds\n\n\n\n\nfastlane\n screenshots for iOS and tvOS\n\n\niOS Beta deployment using \nfastlane\n\n\niOS App Store deployment using \nfastlane\n\n\n\n\nUse a Gemfile\n\n\nIt is recommended that you use a \nGemfile\n to define your dependency on \nfastlane\n. This will clearly define the used \nfastlane\n version, and its dependencies, and will also speed up using \nfastlane\n.\n\n\n\n\nInstall \nbundler\n using \nsudo gem install bundler\n\n\nCreate a \n./Gemfile\n in the root directory of your project with the content\n\n\n\n\nsource \nhttps://rubygems.org\n\n\ngem \nfastlane\n\n\n\n\n\n\n\nRun \n[sudo] bundle update\n and add both the \n./Gemfile\n and the \n./Gemfile.lock\n to version control\n\n\nEvery time you run \nfastlane\n, use \nbundle exec fastlane [lane]\n\n\nOn your CI, add \n[sudo] bundle install\n as your first build step\n\n\nTo update \nfastlane\n, just run \n[sudo] bundle update", 
            "title": "Setup"
        }, 
        {
            "location": "/getting-started/ios/setup/#getting-started-with-fastlane-for-ios", 
            "text": "", 
            "title": "Getting started with fastlane for iOS"
        }, 
        {
            "location": "/getting-started/ios/setup/#installing-fastlane", 
            "text": "Make sure you have the latest version of the Xcode command line tools installed:  xcode-select --install", 
            "title": "Installing fastlane"
        }, 
        {
            "location": "/getting-started/ios/setup/#choose-your-installation-method", 
            "text": "Homebrew  Installer Script  Rubygems    macOS  macOS  macOS or Linux with Ruby 2.0.0 or above     brew cask install fastlane  Download the zip file . Then double click on the  install  script (or run it in a terminal window).  sudo gem install fastlane -NV", 
            "title": "Choose your installation method:"
        }, 
        {
            "location": "/getting-started/ios/setup/#setting-up-fastlane", 
            "text": "Navigate your terminal to your project's directory and run  fastlane init  You'll be asked for your Apple ID, and  fastlane  will automatically generate a fastlane configuration for you, based on the information provided.  You can see the newly created  fastlane  directory, with all your existing metadata fetched from iTunes Connect.   The most interesting file is  fastlane/Fastfile , which contains all the information that is needed to distribute your app.", 
            "title": "Setting up fastlane"
        }, 
        {
            "location": "/getting-started/ios/setup/#whats-next", 
            "text": "fastlane  created all the required files for you, now you can go ahead and customise it to generate screenshots or to automatically distribute new builds   fastlane  screenshots for iOS and tvOS  iOS Beta deployment using  fastlane  iOS App Store deployment using  fastlane", 
            "title": "What's next?"
        }, 
        {
            "location": "/getting-started/ios/setup/#use-a-gemfile", 
            "text": "It is recommended that you use a  Gemfile  to define your dependency on  fastlane . This will clearly define the used  fastlane  version, and its dependencies, and will also speed up using  fastlane .   Install  bundler  using  sudo gem install bundler  Create a  ./Gemfile  in the root directory of your project with the content   source  https://rubygems.org \n\ngem  fastlane    Run  [sudo] bundle update  and add both the  ./Gemfile  and the  ./Gemfile.lock  to version control  Every time you run  fastlane , use  bundle exec fastlane [lane]  On your CI, add  [sudo] bundle install  as your first build step  To update  fastlane , just run  [sudo] bundle update", 
            "title": "Use a Gemfile"
        }, 
        {
            "location": "/getting-started/ios/screenshots/", 
            "text": "fastlane\n screenshots for iOS and tvOS\n\n\nYour App Store screenshots are probably the most important thing when it comes to convincing potential users to download or purchase your app. Unfortunately, many apps don't do screenshots well. This is often because taking screenshots of your app and then preparing them for display is time consuming, and it's hard to get everything right and consistent! For example:\n\n\n\n\nAre the screenshots in the App Store inconsistent with your latest app design?\n\n\nIs your app localized into many languages that require different screenshots for each?\n\n\nHave you made sure that no loading indicators are showing?\n\n\nIs the same content displayed for each of your size variations?\n\n\n\n\nfastlane\n tools can automate this process making it fast, and consistent while giving you beautiful results!\n\n\nAlternatives\n\n\nFor the full story about the many ways that developers can capture and beautify screenshots check out \nthis article\n.\n\n\nManually Capturing Screenshots\n\n\nManually taking screenshots takes too much time, which also decreases the quality of the screenshots. Since it is not automated, the screenshots will show slightly different content on the various devices and languages. Many companies choose to create screenshots in one language and use them for all languages. While this might seem okay to us developers, there are many potential users out there that cannot read the text on your app screenshots if they are not localised. Have you ever looked at a screenshots with content in a language you don't know? It won't convince you to download the app.\n\n\nHowever, the biggest disadvantage of this method is what happens when you need to repeat the process. If you notice a spelling mistake in the screenshots, if you release an update with a new design, or if you just want to show more up to date content, you'll have to create new screenshots for all languages and devices... manually.\n\n\nThe positive side of this approach is that your screenshots will all be crisp and correctly sized, with readable text.\n\n\nScaled Screenshots via iTunes Connect\n\n\nWith the \niTunes Connect screenshot update\n from August 2016, you can now use one set of screenshots for all available devices and screenshots. iTunes Connect will automatically scale the images for you, so that each device renders the same image.\n\n\nWhile this is convenient, this approach has the same problems as the device frame approach: The screenshots don't actually show how the app looks on the user's device. It's a valid way to start though, since you can gradually overwrite screenshots for specific languages and devices.\n\n\nCapture Screenshots Automatically\n\n\nsnapshot\n works with \nfastlane\n to automate the process of capturing screenshots of your app. It allows you to:\n\n\n\n\nCapture hundreds of screenshots in multiple languages on all simulators\n\n\nDo something else while the computer takes the screenshots for you\n\n\nConfigure it once, and store the configuration so anyone on the team can run it\n\n\nGenerate a beautiful web page showing all screenshots on all devices. This is perfect to send to Q\nA, marketing, or translators for verification\n\n\nAvoid having loading indicators in your App Store screenshots by intelligently waiting for network requests to be finished\n\n\nGet a summary of how your app looks like across all supported devices and languages\n\n\n\n\nAfter \nsnapshot\n successfully captures all the screenshots, it will show you a beautiful HTML page to summarize all the screens that were captured:\n\n\n\n  \n\n\n\n\nGetting Started Using UI Tests\n\n\nsnapshot\n uses the capabilities of Apple's UI Tests to drive interactions with your app. To get familiar with writing UI Tests, check out the following introductions:\n\n\n\n\nWWDC 2015 Introduction to UI Tests\n\n\nA first look into UI Tests\n\n\nUI Testing in Xcode 7\n\n\nHSTestingBackchannel : \u2018Cheat\u2019 by communicating directly with your app\n\n\nAutomating App Store screenshots using fastlane snapshot and frameit\n\n\n\n\nTo jump-start your UI tests, you can use the UI Test recorder, which you can start by clicking the red record button on the bottom of the window. By interacting with your app through the simulator while using it, Xcode will generate UI Test code for you. To learn more, check out this \nthis blog post\n!\n\n\nSetting Up \nsnapshot\n\n\n\n\nCreate a new UI Test target in your Xcode project (See the top part of \nthis article\n)\n\n\nRun \nfastlane snapshot init\n in your project folder\n\n\nAdd the \n./SnapshotHelper.swift\n file to your UI Test target (You can move the file anywhere you want)\n\n\n(Objective C only) Add the bridging header to your test class.\n\n\n#import \"MYUITests-Swift.h\"\n\n\nThe bridging header is named after your test target with -Swift.h appended.\n\n\n\n\n\n\nIn your UI Test class, click the \nRecord\n button on the bottom left and record your interaction\n\n\nTo take a screenshot, call the following between interactions\n\n\nSwift: \nsnapshot(\"01LoginScreen\")\n\n\nObjective C: \n[Snapshot snapshot:@\"01LoginScreen\" waitForLoadingIndicator:YES];\n\n\n\n\n\n\nAdd the following code to your \nsetUp()\n method:\n\n\n\n\nSwift\n\n\nlet app = XCUIApplication()\nsetupSnapshot(app)\napp.launch()\n\n\n\n\nObjective C\n\n\nXCUIApplication *app = [[XCUIApplication alloc] init];\n[Snapshot setupSnapshot:app];\n[app launch];\n\n\n\n\nThe setup process will also generate a \nSnapfile\n, looking similar to\n\n\n# A list of devices you want to take the screenshots from\n# devices([\n#   \niPhone 6\n,\n#   \niPhone 6 Plus\n,\n#   \niPhone 5\n,\n#   \niPhone 4s\n,\n#   \niPad Retina\n,\n#   \niPad Pro\n\n# ])\n\nlanguages([\n  \nen-US\n,\n  \nde-DE\n\n])\n\n# The name of the scheme which contains the UI Tests\n# scheme \nSchemeName\n\n\n# Where should the resulting screenshots be stored?\n# output_directory \n./screenshots\n\n\n# clear_previous_screenshots true # remove the '#' to clear all previously generated screenshots before creating new ones\n\n# Choose which project/workspace to use\n# project \n./Project.xcodeproj\n\n# workspace \n./Project.xcworkspace\n\n\n# For more information about all available options run\n# fastlane action snapshot\n\n\n\n\nYou can adapt this file to fit your project. Every time you run \nfastlane snapshot\n the file will be loaded automatically.\n\n\nFor a list of all available parameters that can be used in the \nSnapfile\n run \nfastlane action snapshot\n.\n\n\nIf you have \nfastlane\n installed, it's easy to give \nsnapshot\n a try. First clone the \nfastlane\n repo, head over to the \nsnapshot\n example project, and then run \nfastlane snapshot\n\n\ngit clone https://github.com/fastlane/fastlane  # Clone the fastlane repo\ncd fastlane/snapshot/example                    # Navigate to the example project\nfastlane snapshot                               # Generate screenshots for the sample app\n\n\n\n\n\n\nUpload Screenshots to the App Store\n\n\nAfter generating your screenshots using \nfastlane snapshot\n, you usually want to upload them to iTunes Connect.\n\n\nIf you followed the setup guide, you already ran \nfastlane init\n before, so you should have your existing screenshots and metadata inside the \nfastlane/screenshots\n and \nfastlane/metadata\n directory. Running \nfastlane snapshot\n will store the screenshots in the \nfastlane/screenshots\n directory by default. \n\n\nTo upload the screenshots stored in \nfastlane/screenshots\n, just run\n\n\nfastlane deliver\n\n\n\n\nThis will also show you a metadata summary, before actually uploading the screenshots, as this will overwrite the metadata and screenshots you already have on iTunes Connect. \n\n\nUse in Fastfile\n\n\nTo put all of this together so that anyone on your team could trigger generating and uploading new screenshots, you can define a \nfastlane\n lane called \nscreenshots\n. It would be responsible for:\n\n\n\n\nRunning your app through \nsnapshot\n to automatically capture your screenshots\n\n\nHaving \ndeliver\n send your final screenshots to iTunes Connect for use in the App Store\n\n\n\n\nAdd the following code to your \nfastlane/Fastfile\n:\n\n\nlane :screenshots do\n  snapshot\n  deliver\nend\n\n\n\n\nTo get a list of all available options for each of the steps, run\n\n\nfastlane action snapshot\nfastlane action deliver\n\n\n\n\nPut Your Screenshots Into Device Frames\n\n\nframeit\n helps you beautify your screenshots with devices frames and text by running one simple command. It provides support for:\n\n\n\n\nMultiple device types\n\n\nPortrait and landscape orientations\n\n\nBlack and silver devices\n\n\nSetting a background color and decorating the image with text\n\n\n\n\n\n  \n\n\n\n\nUsage\n\n\nAutomatically add device frames around all screenshots in the current directory and its subdirectories, just run\n\n\nfastlane frameit\n\n\n\n\nThis will only add a device frame around the screenshots, not the background and title. Those images can be used for your website, email newsletter and similar.\n\n\nIf you want to implement the custom titles and background, you'll have to setup a \nFramefile.json\n, more information can be found \nhere\n.\n\n\nIf you want to upload the screenshots to the App Store, you \nhave\n to provide a \nFramefile.json\n, with titles and background, otherwise the resolution of the framed screenshots doesn't match the requirements of iTunes Connect.\n\n\nDependencies\n\n\n\n\nInstalling ImageMagick\n\n\nframeit\n depends on a tool called \nimagemagick\n to do image manipulation. The easiest way to install it is through \nhomebrew\n:\n\n\nbrew install libpng jpeg imagemagick\n\n\n\n\n\n\n\n\nTroubleshooting ImageMagick\n\n\nIf you have installed \nimagemagick\n but are seeing error messages like:\n\n\nmogrify: no decode delegate for this image format `PNG'\n\n\n\n\nYou may need to reinstall and build from source. Run:\n\n\nbrew uninstall imagemagick; brew install libpng jpeg; brew install imagemagick --build-from-source\n\n\n\n\n\n\n\n\nSetting Up Device Frames\n\n\nTo download the latest device frames, you can run\n\n\nfastlane frameit setup\n\n\n\n\nThis usually happens automatically when you use \nframeit\n for the first time on a new machine\n\n\n\n\nTo add the framing to your deployment process, use the following code in your \nFastfile\n:\n\n\nlane :screenshots do\n  snapshot\n  frameit(white: true)\n  deliver\nend\n\n\n\n\nTo get a list of all available options for \nframeit\n\n\nfastlane action frameit\n\n\n\n\nAdvanced \nsnapshot\n\n\n \n\nSample uses\n\n\nlane :screenshots do\n  snapshot\nend\n\n\n\n\nYour screenshots will be stored in the \n./screenshots/\n folder by default (or \n./fastlane/screenshots\n if you're using \nfastlane\n)\n\n\nIf any error occurs while running the snapshot script on a device, that device will not have any screenshots, and \nsnapshot\n will continue with the next device or language. To stop the flow after the first error, run\n\n\nsnapshot(stop_after_first_error: true)\n\n\n\n\nAlso by default, \nsnapshot\n will open the HTML after all is done. This can be skipped with the following command\n\n\nsnapshot(skip_open_summary: true)\n\n\n\n\nThere are a lot of options available that define how to build your app, for example\n\n\nsnapshot(scheme: \nUITests\n, configuration: \nRelease\n, sdk: \niphonesimulator\n)\n\n\n\n\nReinstall the app before running \nsnapshot\n\n\nsnapshot(reinstall_app: true, app_identifier: \ntools.fastlane.app\n)\n\n\n\n\nBy default \nsnapshot\n automatically retries running UI Tests if they fail. This is due to randomly failing UI Tests (e.g. \n#372\n). You can adapt this number using\n\n\nsnapshot(number_of_retries: 3)\n\n\n\n\nAdd photos and/or videos to the simulator before running \nsnapshot\n\n\nsnapshot(add_photos: \nMyTestApp/demo.jpg\n, add_videos: \nMyTestApp/demo.mp4\n)\n\n\n\n\nFor a list for all available options run\n\n\nfastlane action snapshot\n\n\n\n\n\n\n\n\nReset Xcode simulators\n\n\nYou can run this command in the terminal to delete and re-create all iOS simulators. This is useful when Xcode duplicated your local simulators.\n\n\nfastlane snapshot reset_simulators\n\n\n\n\n\n\n\n\nLaunch Arguments\n\n\nYou can provide additional arguments to your app on launch. These strings will be available in your app (eg. not in the testing target) through \nNSProcessInfo.processInfo().arguments\n. Alternatively, use user-default syntax (\n-key value\n) and they will be available as key-value pairs in \nNSUserDefaults.standardUserDefaults()\n.\n\n\nlaunch_arguments([\n  \n-firstName Felix -lastName Krause\n\n])\n\n\n\n\nname.text = NSUserDefaults.standardUserDefaults().stringForKey(\nfirstName\n)\n// name.text = \nFelix\n\n\n\n\n\nsnapshot\n includes \n-FASTLANE_SNAPSHOT YES\n, which will set a temporary user default for the key \nFASTLANE_SNAPSHOT\n, you may use this to detect when the app is run by \nsnapshot\n.\n\n\nif NSUserDefaults.standardUserDefaults().boolForKey(\nFASTLANE_SNAPSHOT\n) {\n    // runtime check that we are in snapshot mode\n}\n\n\n\n\nSpecify multiple argument strings and \nsnapshot\n will generate screenshots for each combination of arguments, devices, and languages. This is useful for comparing the same screenshots with different feature flags, dynamic text sizes, and different data sets.\n\n\n# Snapfile for A/B Test Comparison\nlaunch_arguments([\n  \n-secretFeatureEnabled YES\n,\n  \n-secretFeatureEnabled NO\n\n])\n\n\n\n\n\n\n\n\nUpdate snapshot helpers\n\n\nSome updates require the helper files to be updated. \nsnapshot\n will automatically warn you and tell you how to update.\n\n\nBasically you can run\n\n\nfastlane snapshot update\n\n\n\n\nto update your \nSnapshotHelper.swift\n files. In case you modified your \nSnapshotHelper.swift\n and want to manually update the file, check out \nSnapshotHelper.swift\n.\n\n\n\n\n\n\nClean status bar\n\n\nTo clean the status bar (9:41, full battery and full signal), use \nSimulatorStatusMagic\n.\n\n\n\n\n\n\nHow does \nsnapshot\n work?\n\n\nThe easiest solution would be to just render the UIWindow into a file. That's not possible because UI Tests don't run on a main thread. So \nsnapshot\n uses a different approach:\n\n\nWhen you run unit tests in Xcode, the reporter generates a plist file, documenting all events that occurred during the tests (\nMore Information\n). Additionally, Xcode generates screenshots before, during and after each of these events. There is no way to manually trigger a screenshot event. The screenshots and the plist files are stored in the DerivedData directory, which \nsnapshot\n stores in a temporary folder.\n\n\nWhen the user calls \nsnapshot(...)\n in the UI Tests (Swift or Objective C) the script actually does a rotation to \n.Unknown\n which doesn't have any effect on the actual app, but is enough to trigger a screenshot. It has no effect to the application and is not something you would do in your tests. The goal was to find \nsome\n event that a user would never trigger, so that we know it's from \nsnapshot\n. On tvOS, there is no orientation so we ask for a count of app views with type \"Browser\" (which should never exist on tvOS).\n\n\nsnapshot\n then iterates through all test events and check where we either did this weird rotation (on iOS) or searched for browsers (on tvOS). Once \nsnapshot\n has all events triggered by \nsnapshot\n it collects a ordered list of all the file names of the actual screenshots of the application.\n\n\nIn the test output, the Swift \nsnapshot\n function will print out something like this\n\n\n\n\nsnapshot: [some random text here]\n\n\n\n\nsnapshot\n finds all these entries using a regex. The number of \nsnapshot\n outputs in the terminal and the number of \nsnapshot\n events in the plist file should be the same. Knowing that, \nsnapshot\n automatically matches these 2 lists to identify the name of each of these screenshots. They are then copied over to the output directory and separated by language and device.\n\n\nTwo things have to be passed on from \nsnapshot\n to the \nxcodebuild\n command line tool:\n\n\n\n\nThe device type is passed via the \ndestination\n parameter of the \nxcodebuild\n parameter\n\n\nThe language is passed via a temporary file which is written by \nsnapshot\n before running the tests and read by the UI Tests when launching the application\n\n\n\n\nIf you find a better way to do any of this, please submit an issue on GitHub or even a pull request :+1:\n\n\nAlso, feel free to duplicate radar \n23062925\n.", 
            "title": "Screenshots"
        }, 
        {
            "location": "/getting-started/ios/screenshots/#fastlane-screenshots-for-ios-and-tvos", 
            "text": "Your App Store screenshots are probably the most important thing when it comes to convincing potential users to download or purchase your app. Unfortunately, many apps don't do screenshots well. This is often because taking screenshots of your app and then preparing them for display is time consuming, and it's hard to get everything right and consistent! For example:   Are the screenshots in the App Store inconsistent with your latest app design?  Is your app localized into many languages that require different screenshots for each?  Have you made sure that no loading indicators are showing?  Is the same content displayed for each of your size variations?   fastlane  tools can automate this process making it fast, and consistent while giving you beautiful results!", 
            "title": "fastlane screenshots for iOS and tvOS"
        }, 
        {
            "location": "/getting-started/ios/screenshots/#alternatives", 
            "text": "For the full story about the many ways that developers can capture and beautify screenshots check out  this article .", 
            "title": "Alternatives"
        }, 
        {
            "location": "/getting-started/ios/screenshots/#manually-capturing-screenshots", 
            "text": "Manually taking screenshots takes too much time, which also decreases the quality of the screenshots. Since it is not automated, the screenshots will show slightly different content on the various devices and languages. Many companies choose to create screenshots in one language and use them for all languages. While this might seem okay to us developers, there are many potential users out there that cannot read the text on your app screenshots if they are not localised. Have you ever looked at a screenshots with content in a language you don't know? It won't convince you to download the app.  However, the biggest disadvantage of this method is what happens when you need to repeat the process. If you notice a spelling mistake in the screenshots, if you release an update with a new design, or if you just want to show more up to date content, you'll have to create new screenshots for all languages and devices... manually.  The positive side of this approach is that your screenshots will all be crisp and correctly sized, with readable text.", 
            "title": "Manually Capturing Screenshots"
        }, 
        {
            "location": "/getting-started/ios/screenshots/#scaled-screenshots-via-itunes-connect", 
            "text": "With the  iTunes Connect screenshot update  from August 2016, you can now use one set of screenshots for all available devices and screenshots. iTunes Connect will automatically scale the images for you, so that each device renders the same image.  While this is convenient, this approach has the same problems as the device frame approach: The screenshots don't actually show how the app looks on the user's device. It's a valid way to start though, since you can gradually overwrite screenshots for specific languages and devices.", 
            "title": "Scaled Screenshots via iTunes Connect"
        }, 
        {
            "location": "/getting-started/ios/screenshots/#capture-screenshots-automatically", 
            "text": "snapshot  works with  fastlane  to automate the process of capturing screenshots of your app. It allows you to:   Capture hundreds of screenshots in multiple languages on all simulators  Do something else while the computer takes the screenshots for you  Configure it once, and store the configuration so anyone on the team can run it  Generate a beautiful web page showing all screenshots on all devices. This is perfect to send to Q A, marketing, or translators for verification  Avoid having loading indicators in your App Store screenshots by intelligently waiting for network requests to be finished  Get a summary of how your app looks like across all supported devices and languages   After  snapshot  successfully captures all the screenshots, it will show you a beautiful HTML page to summarize all the screens that were captured:", 
            "title": "Capture Screenshots Automatically"
        }, 
        {
            "location": "/getting-started/ios/screenshots/#getting-started-using-ui-tests", 
            "text": "snapshot  uses the capabilities of Apple's UI Tests to drive interactions with your app. To get familiar with writing UI Tests, check out the following introductions:   WWDC 2015 Introduction to UI Tests  A first look into UI Tests  UI Testing in Xcode 7  HSTestingBackchannel : \u2018Cheat\u2019 by communicating directly with your app  Automating App Store screenshots using fastlane snapshot and frameit   To jump-start your UI tests, you can use the UI Test recorder, which you can start by clicking the red record button on the bottom of the window. By interacting with your app through the simulator while using it, Xcode will generate UI Test code for you. To learn more, check out this  this blog post !", 
            "title": "Getting Started Using UI Tests"
        }, 
        {
            "location": "/getting-started/ios/screenshots/#setting-up-snapshot", 
            "text": "Create a new UI Test target in your Xcode project (See the top part of  this article )  Run  fastlane snapshot init  in your project folder  Add the  ./SnapshotHelper.swift  file to your UI Test target (You can move the file anywhere you want)  (Objective C only) Add the bridging header to your test class.  #import \"MYUITests-Swift.h\"  The bridging header is named after your test target with -Swift.h appended.    In your UI Test class, click the  Record  button on the bottom left and record your interaction  To take a screenshot, call the following between interactions  Swift:  snapshot(\"01LoginScreen\")  Objective C:  [Snapshot snapshot:@\"01LoginScreen\" waitForLoadingIndicator:YES];    Add the following code to your  setUp()  method:   Swift  let app = XCUIApplication()\nsetupSnapshot(app)\napp.launch()  Objective C  XCUIApplication *app = [[XCUIApplication alloc] init];\n[Snapshot setupSnapshot:app];\n[app launch];  The setup process will also generate a  Snapfile , looking similar to  # A list of devices you want to take the screenshots from\n# devices([\n#    iPhone 6 ,\n#    iPhone 6 Plus ,\n#    iPhone 5 ,\n#    iPhone 4s ,\n#    iPad Retina ,\n#    iPad Pro \n# ])\n\nlanguages([\n   en-US ,\n   de-DE \n])\n\n# The name of the scheme which contains the UI Tests\n# scheme  SchemeName \n\n# Where should the resulting screenshots be stored?\n# output_directory  ./screenshots \n\n# clear_previous_screenshots true # remove the '#' to clear all previously generated screenshots before creating new ones\n\n# Choose which project/workspace to use\n# project  ./Project.xcodeproj \n# workspace  ./Project.xcworkspace \n\n# For more information about all available options run\n# fastlane action snapshot  You can adapt this file to fit your project. Every time you run  fastlane snapshot  the file will be loaded automatically.  For a list of all available parameters that can be used in the  Snapfile  run  fastlane action snapshot .  If you have  fastlane  installed, it's easy to give  snapshot  a try. First clone the  fastlane  repo, head over to the  snapshot  example project, and then run  fastlane snapshot  git clone https://github.com/fastlane/fastlane  # Clone the fastlane repo\ncd fastlane/snapshot/example                    # Navigate to the example project\nfastlane snapshot                               # Generate screenshots for the sample app", 
            "title": "Setting Up snapshot"
        }, 
        {
            "location": "/getting-started/ios/screenshots/#upload-screenshots-to-the-app-store", 
            "text": "After generating your screenshots using  fastlane snapshot , you usually want to upload them to iTunes Connect.  If you followed the setup guide, you already ran  fastlane init  before, so you should have your existing screenshots and metadata inside the  fastlane/screenshots  and  fastlane/metadata  directory. Running  fastlane snapshot  will store the screenshots in the  fastlane/screenshots  directory by default.   To upload the screenshots stored in  fastlane/screenshots , just run  fastlane deliver  This will also show you a metadata summary, before actually uploading the screenshots, as this will overwrite the metadata and screenshots you already have on iTunes Connect.", 
            "title": "Upload Screenshots to the App Store"
        }, 
        {
            "location": "/getting-started/ios/screenshots/#use-in-fastfile", 
            "text": "To put all of this together so that anyone on your team could trigger generating and uploading new screenshots, you can define a  fastlane  lane called  screenshots . It would be responsible for:   Running your app through  snapshot  to automatically capture your screenshots  Having  deliver  send your final screenshots to iTunes Connect for use in the App Store   Add the following code to your  fastlane/Fastfile :  lane :screenshots do\n  snapshot\n  deliver\nend  To get a list of all available options for each of the steps, run  fastlane action snapshot\nfastlane action deliver", 
            "title": "Use in Fastfile"
        }, 
        {
            "location": "/getting-started/ios/screenshots/#put-your-screenshots-into-device-frames", 
            "text": "frameit  helps you beautify your screenshots with devices frames and text by running one simple command. It provides support for:   Multiple device types  Portrait and landscape orientations  Black and silver devices  Setting a background color and decorating the image with text", 
            "title": "Put Your Screenshots Into Device Frames"
        }, 
        {
            "location": "/getting-started/ios/screenshots/#usage", 
            "text": "Automatically add device frames around all screenshots in the current directory and its subdirectories, just run  fastlane frameit  This will only add a device frame around the screenshots, not the background and title. Those images can be used for your website, email newsletter and similar.  If you want to implement the custom titles and background, you'll have to setup a  Framefile.json , more information can be found  here .  If you want to upload the screenshots to the App Store, you  have  to provide a  Framefile.json , with titles and background, otherwise the resolution of the framed screenshots doesn't match the requirements of iTunes Connect.", 
            "title": "Usage"
        }, 
        {
            "location": "/getting-started/ios/screenshots/#dependencies", 
            "text": "Installing ImageMagick  frameit  depends on a tool called  imagemagick  to do image manipulation. The easiest way to install it is through  homebrew :  brew install libpng jpeg imagemagick    Troubleshooting ImageMagick  If you have installed  imagemagick  but are seeing error messages like:  mogrify: no decode delegate for this image format `PNG'  You may need to reinstall and build from source. Run:  brew uninstall imagemagick; brew install libpng jpeg; brew install imagemagick --build-from-source    Setting Up Device Frames  To download the latest device frames, you can run  fastlane frameit setup  This usually happens automatically when you use  frameit  for the first time on a new machine   To add the framing to your deployment process, use the following code in your  Fastfile :  lane :screenshots do\n  snapshot\n  frameit(white: true)\n  deliver\nend  To get a list of all available options for  frameit  fastlane action frameit", 
            "title": "Dependencies"
        }, 
        {
            "location": "/getting-started/ios/screenshots/#advanced-snapshot", 
            "text": "Sample uses  lane :screenshots do\n  snapshot\nend  Your screenshots will be stored in the  ./screenshots/  folder by default (or  ./fastlane/screenshots  if you're using  fastlane )  If any error occurs while running the snapshot script on a device, that device will not have any screenshots, and  snapshot  will continue with the next device or language. To stop the flow after the first error, run  snapshot(stop_after_first_error: true)  Also by default,  snapshot  will open the HTML after all is done. This can be skipped with the following command  snapshot(skip_open_summary: true)  There are a lot of options available that define how to build your app, for example  snapshot(scheme:  UITests , configuration:  Release , sdk:  iphonesimulator )  Reinstall the app before running  snapshot  snapshot(reinstall_app: true, app_identifier:  tools.fastlane.app )  By default  snapshot  automatically retries running UI Tests if they fail. This is due to randomly failing UI Tests (e.g.  #372 ). You can adapt this number using  snapshot(number_of_retries: 3)  Add photos and/or videos to the simulator before running  snapshot  snapshot(add_photos:  MyTestApp/demo.jpg , add_videos:  MyTestApp/demo.mp4 )  For a list for all available options run  fastlane action snapshot    Reset Xcode simulators  You can run this command in the terminal to delete and re-create all iOS simulators. This is useful when Xcode duplicated your local simulators.  fastlane snapshot reset_simulators    Launch Arguments  You can provide additional arguments to your app on launch. These strings will be available in your app (eg. not in the testing target) through  NSProcessInfo.processInfo().arguments . Alternatively, use user-default syntax ( -key value ) and they will be available as key-value pairs in  NSUserDefaults.standardUserDefaults() .  launch_arguments([\n   -firstName Felix -lastName Krause \n])  name.text = NSUserDefaults.standardUserDefaults().stringForKey( firstName )\n// name.text =  Felix   snapshot  includes  -FASTLANE_SNAPSHOT YES , which will set a temporary user default for the key  FASTLANE_SNAPSHOT , you may use this to detect when the app is run by  snapshot .  if NSUserDefaults.standardUserDefaults().boolForKey( FASTLANE_SNAPSHOT ) {\n    // runtime check that we are in snapshot mode\n}  Specify multiple argument strings and  snapshot  will generate screenshots for each combination of arguments, devices, and languages. This is useful for comparing the same screenshots with different feature flags, dynamic text sizes, and different data sets.  # Snapfile for A/B Test Comparison\nlaunch_arguments([\n   -secretFeatureEnabled YES ,\n   -secretFeatureEnabled NO \n])    Update snapshot helpers  Some updates require the helper files to be updated.  snapshot  will automatically warn you and tell you how to update.  Basically you can run  fastlane snapshot update  to update your  SnapshotHelper.swift  files. In case you modified your  SnapshotHelper.swift  and want to manually update the file, check out  SnapshotHelper.swift .    Clean status bar  To clean the status bar (9:41, full battery and full signal), use  SimulatorStatusMagic .    How does  snapshot  work?  The easiest solution would be to just render the UIWindow into a file. That's not possible because UI Tests don't run on a main thread. So  snapshot  uses a different approach:  When you run unit tests in Xcode, the reporter generates a plist file, documenting all events that occurred during the tests ( More Information ). Additionally, Xcode generates screenshots before, during and after each of these events. There is no way to manually trigger a screenshot event. The screenshots and the plist files are stored in the DerivedData directory, which  snapshot  stores in a temporary folder.  When the user calls  snapshot(...)  in the UI Tests (Swift or Objective C) the script actually does a rotation to  .Unknown  which doesn't have any effect on the actual app, but is enough to trigger a screenshot. It has no effect to the application and is not something you would do in your tests. The goal was to find  some  event that a user would never trigger, so that we know it's from  snapshot . On tvOS, there is no orientation so we ask for a count of app views with type \"Browser\" (which should never exist on tvOS).  snapshot  then iterates through all test events and check where we either did this weird rotation (on iOS) or searched for browsers (on tvOS). Once  snapshot  has all events triggered by  snapshot  it collects a ordered list of all the file names of the actual screenshots of the application.  In the test output, the Swift  snapshot  function will print out something like this   snapshot: [some random text here]   snapshot  finds all these entries using a regex. The number of  snapshot  outputs in the terminal and the number of  snapshot  events in the plist file should be the same. Knowing that,  snapshot  automatically matches these 2 lists to identify the name of each of these screenshots. They are then copied over to the output directory and separated by language and device.  Two things have to be passed on from  snapshot  to the  xcodebuild  command line tool:   The device type is passed via the  destination  parameter of the  xcodebuild  parameter  The language is passed via a temporary file which is written by  snapshot  before running the tests and read by the UI Tests when launching the application   If you find a better way to do any of this, please submit an issue on GitHub or even a pull request :+1:  Also, feel free to duplicate radar  23062925 .", 
            "title": "Advanced snapshot"
        }, 
        {
            "location": "/getting-started/ios/beta-deployment/", 
            "text": "iOS Beta deployment using \nfastlane\n\n\nBuilding your app\n\n\nfastlane\n takes care of building your app using a feature called \ngym\n, just add the following to your \nFastfile\n:\n\n\nlane :beta do\n  gym(scheme: \nMyApp\n)\nend\n\n\n\n\nAdditionally you can specify more options for building your app, for example\n\n\nlane :beta do\n  gym(scheme: \nMyApp\n,\n      workspace: \nExample.xcworkspace\n,\n      include_bitcode: true)\nend\n\n\n\n\nTry running the lane using\n\n\nfastlane beta\n\n\n\n\nIf everything works, you should have a \n[ProductName].ipa\n file in the current directory. To get a list of all available parameters for \ngym\n, run \nfastlane action gym\n.\n\n\nCodesigning\n\n\nChances are that something went wrong because of code signing at the previous step. We prepared our own \nCode Signing Guide\n that helps you setting up the right code signing approach for your project.\n\n\nUploading your app\n\n\nAfter building your app, it's ready to be uploaded to a beta testing service of your choice. The beauty of \nfastlane\n is that you can easily switch beta provider, or even upload to multiple at once, without any extra work.\n\n\nAll you have to do is to put the name of the beta testing provider of your choice after building the app using \ngym\n:\n\n\nlane :beta do\n  match(type: \nappstore\n)       # see code signing guide for more information\n  gym(scheme: \nMyApp\n)          # build your app\n  testflight                    # upload your app to TestFlight\n  slack(message: \nSuccessfully distributed a new beta build\n)\nend\n\n\n\n\nfastlane\n automatically passes on information about the generated \n.ipa\n file from \ngym\n to the beta testing provider of your choice.\n\n\nTo get a list of all available parameters for a given action, run\n\n\nfastlane action slack\n\n\n\n\nSupported beta testing services\n\n\n\n\nTestFlight\n\n\nYou can easily upload new builds to TestFlight (which is part of iTunes Connect) using \nfastlane\n. To do so, just use the built-in \ntestflight\n action after building your app\n\n\nlane :beta do\n  # ...\n  gym\n  testflight\nend\n\n\n\n\nSome example use cases\n\n\nlane :beta do\n  # ...\n  gym\n\n  # Variant 1: Provide a changelog to your build\n  testflight(changelog: \nAdd rocket emoji\n)\n\n  # Variant 2: Skip the \nWaiting for processing\n of the binary\n  #   While this will speed up your build, it will not distribute\n  #   the binary to your tests, nor set a changelog\n  testflight(skip_waiting_for_build_processing: true)\nend\n\n\n\n\nIf you used \nfastlane init\n to setup \nfastlane\n, your Apple ID is stored in the \nfastlane/Appfile\n. You can also overwrite the username, using \ntestflight(username: \"bot@fastlane.tools\")\n.\n\n\nTo get a list of all available options, run\n\n\nfastlane action testflight\n\n\n\n\nWith \nfastlane\n, you can also automatically manage your beta testers, check out TODO for more information.\n\n\n\n\n\n\n\n\nCrashlytics\n\n\nlane :beta do\n  # ...\n  gym\n  crashlytics(api_token: \n[insert_key_here]\n,\n              build_secret: \n[insert_key_here]\n)\nend\n\n\n\n\nTo get your API token, open the \norganizations settings page\n and click on the API key and build secret links. \n\n\nTo get a list of all available options, run\n\n\nfastlane action crashlytics\n\n\n\n\nTODO: Also mention the other onboarding method\n\n\n\n\n\n\n\n\nHockeyApp\n\n\nlane :beta do\n  # ...\n  gym\n  hockey(api_token: \n[insert_key_here]\n)\nend\n\n\n\n\nTo get your API token, open \nAPI Tokens in Account Settings\n. From there, you can find your existing API token, or create a new one. \n\n\nTo get a list of all available options see the \nhockey\n action docs\n, or run \n\n\nfastlane action hockey\n\n\n\n\n\n\n\n\nTestFairy\n\n\nlane :beta do\n  # ...\n  gym\n\n  testfairy(api_key: \n[insert_key_here]\n)\n\n  # Variant 1: Provide a changelog\n  testfairy(api_key: \n[insert_key_here]\n, \n            comment: \nAdd rocket emoji\n)\n\n  # Variant 2: Specify tester groups\n  testfairy(api_key: \n[insert_key_here]\n, testers_groups: [\ngroup1\n])\nend\n\n\n\n\nTo get a list of all available options, run\n\n\nfastlane action testfairy\n\n\n\n\nMore information about the service on \nTestFairy.com\n.\n\n\n\nRelease Notes\n\n\n\n\nAutomatically based on git commits\n\n\nYour changelog changes, so it doesn't make a lot of sense to store a static release note in the \nFastfile\n.\n\n\nlane :beta do\n  match\n  gym\n\n  changelog_from_git_commits # this will generate the changelog based on your last commits\n  testflight\nend\n\n\n\n\nGet a list of all available options using \nfastlane action changelog_from_git_commits\n, here are some examples\n\n\nchangelog_from_git_commits(\n  between: ['7b092b3', 'HEAD'], # Optional, lets you specify a revision/tag range between which to collect commit info\n  include_merges: true # Optional, lets you filter out merge commits\n)\n\n\n\n\n\n\n\n\n\n\nPrompt for changelog\n\n\nYou can automatically be asked for the changelog in your terminal using the \nprompt\n action:\n\n\nlane :beta do\n  # Variant 1: Ask for a one line input\n  changelog = prompt(\nChangelog: \n)\n\n  # Variant 2: Ask for a multi-line input\n  #   The user confirms their input by typing `END` and Enter\n  changelog = prompt(\n    text: \nChangelog: \n,\n    multi_line_end_keyword: \nEND\n\n  )\n\n  match\n  gym\n\n  testflight(changelog: changelog)\nend\n\n\n\n\n\n\n\n\n\n\nFetching the changelog from the file system or remote server\n\n\nYou can fetch values from anywhere in your \nFastfile\n, including the file system and remote server\n\n\nlane :beta do\n  # Variant 1: Read from file system\n  #   note the `..`, since fastlane runs in the _fastlane_ directory\n  changelog = File.read(\n../Changelog.txt\n)\n\n  # Variant 2: Fetch data from a remote web server\n  changelog = download(url: \nhttps://lookatmycms.com/changelog.txt\n)\n\n  match\n  gym\n\n  testflight(changelog: changelog)\nend\n\n\n\n\n\n\n\n\nBest Practices\n\n\n\n\nManage devices and testers using \nfastlane\n\n\n\n\nTestFlight\n\n\nIf you're using TestFlight you don't need to worry about UDIDs of your devices. Instead you just maintain a list of testers based on their Apple ID email address.\n\n\nfastlane\n supports automatically registering devices using different approaches\n\n\nboarding\n\n\nboarding\n allows you set up a registration page for your beta testers, so they can enter their email address and start testing your application.\n\n\n\n\nCheck out the \nboarding GitHub repo\n for more information.\n\n\npilot\n\n\npilot\n is automatically installed with \nfastlane\n, you can use it to register individual testers to TestFlight\n\n\n# Register a new external tester\nfastlane pilot add email@invite.com\n\n# Register a new external tester and add them to your app\nfastlane pilot add email@invite.com -a com.app.name\n\n\n\n\n\n\n\n\n\n\nThird party beta testing services\n\n\nIf you're using a third party beta testing service, you'll need to manage your registered devices and their UDIDs. \nfastlane\n already supports device registrations and updating provisioning profiles out of the box. \n\n\nlane :beta do\n  # Before calling match, we make sure all our devices are registered on the Apple Developer Portal\n  register_devices(devices_file: \ndevices.txt\n)\n\n  # After registering the new devices, we'll make sure to update the provisioning profile if necessary\n  # Note how we make sure to pass \nadhoc\n to get and use a provisioning profile for Ad Hoc distribution\n  match(force_for_new_devices: true, type: \nadhoc\n)\n  gym\n  # ...\nend\n\n\n\n\nThe \ndevices.txt\n should look like this:\n\n\nDevice ID Device Name\nA123456789012345678901234567890123456789  DeviceName1\nB123456789012345678901234567890123456789  DeviceName2\n\n\n\n\n\n\n\n\n\n\nIncrementing the build number\n\n\nDepending on the beta testing service you use, you'll have to increment the build number each time you upload a new build. This is a requirement for TestFlight for example.\n\n\nTo do so, there are some built-in fastlane actions available, here are some examples\n\n\nCommitting the build number to version control\n\n\nThe code sample below will increment the build number and commit the project changes to version control.\n\n\nlane :beta do\n  # Ensure that your git status is not dirty\n  ensure_git_status_clean\n\n  # Increment the build number (not the version number)\n  # Providing the xcodeproj is optional\n  increment_build_number(xcodeproj: \nExample.xcodeproj\n)\n\n  # Commit the version bump\n  commit_version_bump(xcodeproj: \nExample.xcodeproj\n)\n\n  # Add a git tag for this build. This will automatically\n  # use an appropriate git tag name\n  add_git_tag\n\n  # Push the new commit and tag back to your git remote\n  push_to_git_remote\nend\n\n\n\n\nFetching the latest build number from TestFlight\n\n\nThe code sample below will use the latest build number from TestFlight and temporarily set it. \n\n\nlane :beta do\n  increment_build_number(\n    build_number: latest_testflight_build_number + 1,\n    xcodeproj: \nExample.xcodeproj\n\n  )\nend\n\n\n\n\nFor all the steps above, there are more parameters available, run the following to get a full list:\n\n\nfastlane action [action_name]", 
            "title": "Beta Deployment"
        }, 
        {
            "location": "/getting-started/ios/beta-deployment/#ios-beta-deployment-using-fastlane", 
            "text": "", 
            "title": "iOS Beta deployment using fastlane"
        }, 
        {
            "location": "/getting-started/ios/beta-deployment/#building-your-app", 
            "text": "fastlane  takes care of building your app using a feature called  gym , just add the following to your  Fastfile :  lane :beta do\n  gym(scheme:  MyApp )\nend  Additionally you can specify more options for building your app, for example  lane :beta do\n  gym(scheme:  MyApp ,\n      workspace:  Example.xcworkspace ,\n      include_bitcode: true)\nend  Try running the lane using  fastlane beta  If everything works, you should have a  [ProductName].ipa  file in the current directory. To get a list of all available parameters for  gym , run  fastlane action gym .", 
            "title": "Building your app"
        }, 
        {
            "location": "/getting-started/ios/beta-deployment/#codesigning", 
            "text": "Chances are that something went wrong because of code signing at the previous step. We prepared our own  Code Signing Guide  that helps you setting up the right code signing approach for your project.", 
            "title": "Codesigning"
        }, 
        {
            "location": "/getting-started/ios/beta-deployment/#uploading-your-app", 
            "text": "After building your app, it's ready to be uploaded to a beta testing service of your choice. The beauty of  fastlane  is that you can easily switch beta provider, or even upload to multiple at once, without any extra work.  All you have to do is to put the name of the beta testing provider of your choice after building the app using  gym :  lane :beta do\n  match(type:  appstore )       # see code signing guide for more information\n  gym(scheme:  MyApp )          # build your app\n  testflight                    # upload your app to TestFlight\n  slack(message:  Successfully distributed a new beta build )\nend  fastlane  automatically passes on information about the generated  .ipa  file from  gym  to the beta testing provider of your choice.  To get a list of all available parameters for a given action, run  fastlane action slack", 
            "title": "Uploading your app"
        }, 
        {
            "location": "/getting-started/ios/beta-deployment/#supported-beta-testing-services", 
            "text": "TestFlight  You can easily upload new builds to TestFlight (which is part of iTunes Connect) using  fastlane . To do so, just use the built-in  testflight  action after building your app  lane :beta do\n  # ...\n  gym\n  testflight\nend  Some example use cases  lane :beta do\n  # ...\n  gym\n\n  # Variant 1: Provide a changelog to your build\n  testflight(changelog:  Add rocket emoji )\n\n  # Variant 2: Skip the  Waiting for processing  of the binary\n  #   While this will speed up your build, it will not distribute\n  #   the binary to your tests, nor set a changelog\n  testflight(skip_waiting_for_build_processing: true)\nend  If you used  fastlane init  to setup  fastlane , your Apple ID is stored in the  fastlane/Appfile . You can also overwrite the username, using  testflight(username: \"bot@fastlane.tools\") .  To get a list of all available options, run  fastlane action testflight  With  fastlane , you can also automatically manage your beta testers, check out TODO for more information.     Crashlytics  lane :beta do\n  # ...\n  gym\n  crashlytics(api_token:  [insert_key_here] ,\n              build_secret:  [insert_key_here] )\nend  To get your API token, open the  organizations settings page  and click on the API key and build secret links.   To get a list of all available options, run  fastlane action crashlytics  TODO: Also mention the other onboarding method     HockeyApp  lane :beta do\n  # ...\n  gym\n  hockey(api_token:  [insert_key_here] )\nend  To get your API token, open  API Tokens in Account Settings . From there, you can find your existing API token, or create a new one.   To get a list of all available options see the  hockey  action docs , or run   fastlane action hockey    TestFairy  lane :beta do\n  # ...\n  gym\n\n  testfairy(api_key:  [insert_key_here] )\n\n  # Variant 1: Provide a changelog\n  testfairy(api_key:  [insert_key_here] , \n            comment:  Add rocket emoji )\n\n  # Variant 2: Specify tester groups\n  testfairy(api_key:  [insert_key_here] , testers_groups: [ group1 ])\nend  To get a list of all available options, run  fastlane action testfairy  More information about the service on  TestFairy.com .", 
            "title": "Supported beta testing services"
        }, 
        {
            "location": "/getting-started/ios/beta-deployment/#release-notes", 
            "text": "Automatically based on git commits  Your changelog changes, so it doesn't make a lot of sense to store a static release note in the  Fastfile .  lane :beta do\n  match\n  gym\n\n  changelog_from_git_commits # this will generate the changelog based on your last commits\n  testflight\nend  Get a list of all available options using  fastlane action changelog_from_git_commits , here are some examples  changelog_from_git_commits(\n  between: ['7b092b3', 'HEAD'], # Optional, lets you specify a revision/tag range between which to collect commit info\n  include_merges: true # Optional, lets you filter out merge commits\n)     Prompt for changelog  You can automatically be asked for the changelog in your terminal using the  prompt  action:  lane :beta do\n  # Variant 1: Ask for a one line input\n  changelog = prompt( Changelog:  )\n\n  # Variant 2: Ask for a multi-line input\n  #   The user confirms their input by typing `END` and Enter\n  changelog = prompt(\n    text:  Changelog:  ,\n    multi_line_end_keyword:  END \n  )\n\n  match\n  gym\n\n  testflight(changelog: changelog)\nend     Fetching the changelog from the file system or remote server  You can fetch values from anywhere in your  Fastfile , including the file system and remote server  lane :beta do\n  # Variant 1: Read from file system\n  #   note the `..`, since fastlane runs in the _fastlane_ directory\n  changelog = File.read( ../Changelog.txt )\n\n  # Variant 2: Fetch data from a remote web server\n  changelog = download(url:  https://lookatmycms.com/changelog.txt )\n\n  match\n  gym\n\n  testflight(changelog: changelog)\nend", 
            "title": "Release Notes"
        }, 
        {
            "location": "/getting-started/ios/beta-deployment/#best-practices", 
            "text": "Manage devices and testers using  fastlane   TestFlight  If you're using TestFlight you don't need to worry about UDIDs of your devices. Instead you just maintain a list of testers based on their Apple ID email address.  fastlane  supports automatically registering devices using different approaches", 
            "title": "Best Practices"
        }, 
        {
            "location": "/getting-started/ios/beta-deployment/#boarding", 
            "text": "boarding  allows you set up a registration page for your beta testers, so they can enter their email address and start testing your application.   Check out the  boarding GitHub repo  for more information.", 
            "title": "boarding"
        }, 
        {
            "location": "/getting-started/ios/beta-deployment/#pilot", 
            "text": "pilot  is automatically installed with  fastlane , you can use it to register individual testers to TestFlight  # Register a new external tester\nfastlane pilot add email@invite.com\n\n# Register a new external tester and add them to your app\nfastlane pilot add email@invite.com -a com.app.name     Third party beta testing services  If you're using a third party beta testing service, you'll need to manage your registered devices and their UDIDs.  fastlane  already supports device registrations and updating provisioning profiles out of the box.   lane :beta do\n  # Before calling match, we make sure all our devices are registered on the Apple Developer Portal\n  register_devices(devices_file:  devices.txt )\n\n  # After registering the new devices, we'll make sure to update the provisioning profile if necessary\n  # Note how we make sure to pass  adhoc  to get and use a provisioning profile for Ad Hoc distribution\n  match(force_for_new_devices: true, type:  adhoc )\n  gym\n  # ...\nend  The  devices.txt  should look like this:  Device ID Device Name\nA123456789012345678901234567890123456789  DeviceName1\nB123456789012345678901234567890123456789  DeviceName2     Incrementing the build number  Depending on the beta testing service you use, you'll have to increment the build number each time you upload a new build. This is a requirement for TestFlight for example.  To do so, there are some built-in fastlane actions available, here are some examples", 
            "title": "pilot"
        }, 
        {
            "location": "/getting-started/ios/beta-deployment/#committing-the-build-number-to-version-control", 
            "text": "The code sample below will increment the build number and commit the project changes to version control.  lane :beta do\n  # Ensure that your git status is not dirty\n  ensure_git_status_clean\n\n  # Increment the build number (not the version number)\n  # Providing the xcodeproj is optional\n  increment_build_number(xcodeproj:  Example.xcodeproj )\n\n  # Commit the version bump\n  commit_version_bump(xcodeproj:  Example.xcodeproj )\n\n  # Add a git tag for this build. This will automatically\n  # use an appropriate git tag name\n  add_git_tag\n\n  # Push the new commit and tag back to your git remote\n  push_to_git_remote\nend", 
            "title": "Committing the build number to version control"
        }, 
        {
            "location": "/getting-started/ios/beta-deployment/#fetching-the-latest-build-number-from-testflight", 
            "text": "The code sample below will use the latest build number from TestFlight and temporarily set it.   lane :beta do\n  increment_build_number(\n    build_number: latest_testflight_build_number + 1,\n    xcodeproj:  Example.xcodeproj \n  )\nend  For all the steps above, there are more parameters available, run the following to get a full list:  fastlane action [action_name]", 
            "title": "Fetching the latest build number from TestFlight"
        }, 
        {
            "location": "/getting-started/ios/appstore-deployment/", 
            "text": "iOS App Store deployment using \nfastlane\n\n\nBuilding your app\n\n\nfastlane\n takes care of building your app using a feature called \ngym\n, just add the following to your \nFastfile\n:\n\n\nlane :appstore do\n  gym(scheme: \nMyApp\n)\nend\n\n\n\n\nAdditionally you can specify more options for building your app, for example\n\n\nlane :appstore do\n  gym(scheme: \nMyApp\n,\n      workspace: \nExample.xcworkspace\n,\n      include_bitcode: true)\nend\n\n\n\n\nTry running the lane using\n\n\nfastlane appstore\n\n\n\n\nIf everything works, you should have a \n[ProductName].ipa\n file in the current directory. To get a list of all available parameters for \ngym\n, run \nfastlane action gym\n.\n\n\nCodesigning\n\n\nChances are that something went wrong because of code signing at the previous step. We prepared our own \nCode Signing Guide\n that helps you setting up the right code signing approach for your project.\n\n\nSubmitting your app\n\n\nGenerating screenshots\n\n\nTo find out more about how to automatically generate screenshots for the App Store, check out \nfastlane\n screenshots for iOS and tvOS\n.\n\n\nUpload the binary and app metadata\n\n\nAfter building your app, it's ready to be uploaded to the App Store. If you've already followed \niOS Beta deployment using \nfastlane\n, the following code might look similar already.\n\n\nlane :appstore do\n  snapshot                      # generate new screenshots for the App Store\n  match(type: \nappstore\n)       # see code signing guide for more information\n  gym(scheme: \nMyApp\n)          # build your app\n  appstore                      # upload your app to iTunes Connect\n  slack(message: \nSuccessfully uploaded a new App Store build\n)\nend\n\n\n\n\nfastlane\n automatically passes on information about the generated screenshots and the binary to the \nappstore\n action of your \nFastfile\n.\n\n\nFor a list of all options for each of the steps run \nfastlane action [action_name]\n.\n\n\nBest Practices\n\n\n\n\nPush Notifications\n\n\nTo make sure your latest push notification certificate is still valid during your submission process, add the following at the beginning of your lane:\n\n\nlane :appstore do\n  pem\n  # ...\nend\n\n\n\n\npem\n will ensure your certificate is valid for at least another 2 weeks, and create a new one if it isn't.\n\n\nIf you don't have any push certificates already, \npem\n will create one for you and store locally in your project's directory. To get more information about the available options run \nfastlane action pem\n.", 
            "title": "App Store Deployment"
        }, 
        {
            "location": "/getting-started/ios/appstore-deployment/#ios-app-store-deployment-using-fastlane", 
            "text": "", 
            "title": "iOS App Store deployment using fastlane"
        }, 
        {
            "location": "/getting-started/ios/appstore-deployment/#building-your-app", 
            "text": "fastlane  takes care of building your app using a feature called  gym , just add the following to your  Fastfile :  lane :appstore do\n  gym(scheme:  MyApp )\nend  Additionally you can specify more options for building your app, for example  lane :appstore do\n  gym(scheme:  MyApp ,\n      workspace:  Example.xcworkspace ,\n      include_bitcode: true)\nend  Try running the lane using  fastlane appstore  If everything works, you should have a  [ProductName].ipa  file in the current directory. To get a list of all available parameters for  gym , run  fastlane action gym .", 
            "title": "Building your app"
        }, 
        {
            "location": "/getting-started/ios/appstore-deployment/#codesigning", 
            "text": "Chances are that something went wrong because of code signing at the previous step. We prepared our own  Code Signing Guide  that helps you setting up the right code signing approach for your project.", 
            "title": "Codesigning"
        }, 
        {
            "location": "/getting-started/ios/appstore-deployment/#submitting-your-app", 
            "text": "", 
            "title": "Submitting your app"
        }, 
        {
            "location": "/getting-started/ios/appstore-deployment/#generating-screenshots", 
            "text": "To find out more about how to automatically generate screenshots for the App Store, check out  fastlane  screenshots for iOS and tvOS .", 
            "title": "Generating screenshots"
        }, 
        {
            "location": "/getting-started/ios/appstore-deployment/#upload-the-binary-and-app-metadata", 
            "text": "After building your app, it's ready to be uploaded to the App Store. If you've already followed  iOS Beta deployment using  fastlane , the following code might look similar already.  lane :appstore do\n  snapshot                      # generate new screenshots for the App Store\n  match(type:  appstore )       # see code signing guide for more information\n  gym(scheme:  MyApp )          # build your app\n  appstore                      # upload your app to iTunes Connect\n  slack(message:  Successfully uploaded a new App Store build )\nend  fastlane  automatically passes on information about the generated screenshots and the binary to the  appstore  action of your  Fastfile .  For a list of all options for each of the steps run  fastlane action [action_name] .", 
            "title": "Upload the binary and app metadata"
        }, 
        {
            "location": "/getting-started/ios/appstore-deployment/#best-practices", 
            "text": "Push Notifications  To make sure your latest push notification certificate is still valid during your submission process, add the following at the beginning of your lane:  lane :appstore do\n  pem\n  # ...\nend  pem  will ensure your certificate is valid for at least another 2 weeks, and create a new one if it isn't.  If you don't have any push certificates already,  pem  will create one for you and store locally in your project's directory. To get more information about the available options run  fastlane action pem .", 
            "title": "Best Practices"
        }, 
        {
            "location": "/getting-started/android/setup/", 
            "text": "Getting started with \nfastlane\n for Android\n\n\nInstalling \nfastlane\n\n\n\n\n\n\nHomebrew\n\n\nInstaller Script\n\n\nRubygems\n\n\n\n\n\n\nmacOS\n\n\nmacOS\n\n\nmacOS or Linux with Ruby 2.0.0 or above\n\n\n\n\n \n\nbrew cask install fastlane\n\n\nDownload the zip file\n. Then double click on the \ninstall\n script (or run it in a terminal window).\n\n\nsudo gem install fastlane -NV\n\n\n\n\n\n\n\nSetting up \nfastlane\n\n\nNavigate your terminal to your project's directory and run\n\n\nfastlane init\n\n\n\n\nYou'll be asked to confirm that you're ready to begin, and then for a few pieces of information. To get started quickly:\n\n\n\n\nProvide the package name for your application when asked (e.g. io.fabric.yourapp)\n\n\nPress enter when asked for the path to your json secret file\n\n\nAnswer 'n' when asked if you plan on uploading info to Google Play via fastlane (we can set this up later)\n\n\n\n\nThat's it! \nfastlane\n will automatically generate a configuration for you based on the information provided.\n\n\nYou can see the newly created \n./fastlane\n directory, with the following files:\n\n\n\n\nAppfile\n which defines configuration information that is global to your app\n\n\nFastfile\n which defines the \"lanes\" that drive the behavior of \nfastlane\n\n\n\n\n\n\nThe most interesting file is \nfastlane/Fastfile\n, which contains all the information that is needed to distribute your app.\n\n\nSetting up \nsupply\n\n\nsupply\n is a \nfastlane\n tool that uploads app metadata, screenshots and binaries to Google Play. You can also select tracks for builds and promote builds to production!\n\n\nSetting it up requires downloading a credentials file from your Google Developers Service Account.\n\n\nCollect your Google credentials\n\n\n\n\nOpen the \nGoogle Play Console\n\n\nSelect \nSettings\n tab, followed by the \nAPI access\n tab\n\n\nClick the \nCreate Service Account\n button and follow the \nGoogle Developers Console\n link in the dialog\n\n\nClick the \nCreate Service account\n button at the top of the developers console screen\n\n\nProvide a name for the service account\n\n\nClick \nSelect a role\n and choose \nProject \n Service Account Actor\n\n\nCheck the \nFurnish a new private key\n checkbox\n\n\nSelect \nJSON\n as the Key type\n\n\nClick \nCreate\n to close the dialog\n\n\nMake a note of the file name of the JSON file downloaded to your computer\n\n\nBack on the Google Play developer console, click \nDone\n to close the dialog\n\n\nClick on \nGrant Access\n for the newly added service account\n\n\nChoose \nRelease Manager\n from the \nRole\n dropdown\n\n\nClick \nAdd user\n to close the dialog\n\n\n\n\nConfigure \nsupply\n\n\nEdit your \nfastlane/Appfile\n and change the \njson_key_file\n line to have the path to your credentials file:\n\n\njson_key_file \n/path/to/your/downloaded/key.json\n\n\n\n\n\nFetch your app metadata\n\n\nIf your app has been created on the Google Play developer console, you're ready to start using \nsupply\n to manage it! Run:\n\n\nfastlane supply init\n\n\n\n\nand all of your current Google Play store metadata will be downloaded to \nfastlane/metadata/android\n.\n\n\n\n\nDue to limitations of the Google Play API, \nsupply\n can't download existing screenshots or videos.\n\n\nWhat's next?\n\n\nfastlane\n is ready to generate screenshots and automatically distribute new builds! To learn more, check out:\n\n\n\n\nfastlane\n screenshots for Android\n\n\nDeploy to Google Play using \nfastlane\n\n\n\n\nUse a Gemfile\n\n\nIt is recommended that you use a \nGemfile\n to define your dependency on \nfastlane\n. This will clearly define the used \nfastlane\n version, and its dependencies, and will also speed up using \nfastlane\n.\n\n\n\n\nInstall \nbundler\n using \nsudo gem install bundler\n\n\nCreate a \n./Gemfile\n in the root directory of your project with the content\n\n\n\n\nsource \nhttps://rubygems.org\n\n\ngem \nfastlane\n\n\n\n\n\n\n\nRun \n[sudo] bundle update\n and add both the \n./Gemfile\n and the \n./Gemfile.lock\n to version control\n\n\nEvery time you run \nfastlane\n, use \nbundle exec fastlane [lane]\n\n\nOn your CI, add \n[sudo] bundle install\n as your first build step\n\n\nTo update \nfastlane\n, just run \n[sudo] bundle update", 
            "title": "Setup"
        }, 
        {
            "location": "/getting-started/android/setup/#getting-started-with-fastlane-for-android", 
            "text": "", 
            "title": "Getting started with fastlane for Android"
        }, 
        {
            "location": "/getting-started/android/setup/#installing-fastlane", 
            "text": "Homebrew  Installer Script  Rubygems    macOS  macOS  macOS or Linux with Ruby 2.0.0 or above     brew cask install fastlane  Download the zip file . Then double click on the  install  script (or run it in a terminal window).  sudo gem install fastlane -NV", 
            "title": "Installing fastlane"
        }, 
        {
            "location": "/getting-started/android/setup/#setting-up-fastlane", 
            "text": "Navigate your terminal to your project's directory and run  fastlane init  You'll be asked to confirm that you're ready to begin, and then for a few pieces of information. To get started quickly:   Provide the package name for your application when asked (e.g. io.fabric.yourapp)  Press enter when asked for the path to your json secret file  Answer 'n' when asked if you plan on uploading info to Google Play via fastlane (we can set this up later)   That's it!  fastlane  will automatically generate a configuration for you based on the information provided.  You can see the newly created  ./fastlane  directory, with the following files:   Appfile  which defines configuration information that is global to your app  Fastfile  which defines the \"lanes\" that drive the behavior of  fastlane    The most interesting file is  fastlane/Fastfile , which contains all the information that is needed to distribute your app.", 
            "title": "Setting up fastlane"
        }, 
        {
            "location": "/getting-started/android/setup/#setting-up-supply", 
            "text": "supply  is a  fastlane  tool that uploads app metadata, screenshots and binaries to Google Play. You can also select tracks for builds and promote builds to production!  Setting it up requires downloading a credentials file from your Google Developers Service Account.", 
            "title": "Setting up supply"
        }, 
        {
            "location": "/getting-started/android/setup/#collect-your-google-credentials", 
            "text": "Open the  Google Play Console  Select  Settings  tab, followed by the  API access  tab  Click the  Create Service Account  button and follow the  Google Developers Console  link in the dialog  Click the  Create Service account  button at the top of the developers console screen  Provide a name for the service account  Click  Select a role  and choose  Project   Service Account Actor  Check the  Furnish a new private key  checkbox  Select  JSON  as the Key type  Click  Create  to close the dialog  Make a note of the file name of the JSON file downloaded to your computer  Back on the Google Play developer console, click  Done  to close the dialog  Click on  Grant Access  for the newly added service account  Choose  Release Manager  from the  Role  dropdown  Click  Add user  to close the dialog", 
            "title": "Collect your Google credentials"
        }, 
        {
            "location": "/getting-started/android/setup/#configure-supply", 
            "text": "Edit your  fastlane/Appfile  and change the  json_key_file  line to have the path to your credentials file:  json_key_file  /path/to/your/downloaded/key.json", 
            "title": "Configure supply"
        }, 
        {
            "location": "/getting-started/android/setup/#fetch-your-app-metadata", 
            "text": "If your app has been created on the Google Play developer console, you're ready to start using  supply  to manage it! Run:  fastlane supply init  and all of your current Google Play store metadata will be downloaded to  fastlane/metadata/android .   Due to limitations of the Google Play API,  supply  can't download existing screenshots or videos.", 
            "title": "Fetch your app metadata"
        }, 
        {
            "location": "/getting-started/android/setup/#whats-next", 
            "text": "fastlane  is ready to generate screenshots and automatically distribute new builds! To learn more, check out:   fastlane  screenshots for Android  Deploy to Google Play using  fastlane", 
            "title": "What's next?"
        }, 
        {
            "location": "/getting-started/android/setup/#use-a-gemfile", 
            "text": "It is recommended that you use a  Gemfile  to define your dependency on  fastlane . This will clearly define the used  fastlane  version, and its dependencies, and will also speed up using  fastlane .   Install  bundler  using  sudo gem install bundler  Create a  ./Gemfile  in the root directory of your project with the content   source  https://rubygems.org \n\ngem  fastlane    Run  [sudo] bundle update  and add both the  ./Gemfile  and the  ./Gemfile.lock  to version control  Every time you run  fastlane , use  bundle exec fastlane [lane]  On your CI, add  [sudo] bundle install  as your first build step  To update  fastlane , just run  [sudo] bundle update", 
            "title": "Use a Gemfile"
        }, 
        {
            "location": "/getting-started/android/screenshots/", 
            "text": "fastlane\n screenshots for Android\n\n\nYour app screenshots are probably the most important thing when it comes to convincing potential users to download or purchase your app. Unfortunately, many apps don't do screenshots well. This is often because taking screenshots of your app and then preparing them for display is time consuming, and it's hard to get everything right and consistent! For example:\n\n\n\n\nAre the screenshots in Google Play inconsistent with your latest app design?\n\n\nIs your app localized into many languages that require different screenshots for each?\n\n\nIs the same content displayed for each of your size variations?\n\n\n\n\nfastlane\n tools can automate this process, making it fast and consistent while giving you beautiful results!\n\n\n\n\nCapture Screenshots Automatically\n\n\nscreengrab\n works with \nfastlane\n to automate the process of capturing screenshots of your app. It allows you to:\n\n\n\n\nCapture hundreds of screenshots in multiple languages on any simulator\n\n\nDo something else while the computer takes the screenshots for you\n\n\nConfigure it once, and store the configuration so anyone on the team can run it\n\n\nGet a summary of how your app looks like across all supported devices and languages\n\n\n\n\nAfter \nscreengrab\n completes, it will show you summary of the screenshots you captured:\n\n\n\n\nGetting Started Using Espresso\n\n\nscreengrab\n uses the capabilities of Android's built-in \nInstrumented tests\n combined with \nEspresso\n to drive interactions with your app. To get familiar with writing UI Tests with Espresso, check out \nTesting UI for a Single App\n.\n\n\nInstalling \nscreengrab\n\n\nInstall the gem:\n\n\nsudo gem install screengrab\n\n\n\n\nGradle dependency\n\n\nAdd the test dependency to your Gradle build:\n\n\nandroidTestCompile 'tools.fastlane:screengrab:x.x.x'\n\n\n\n\nThe latest version can be determined by visiting the \nscreengrab\n RubyGems page\n\n\nConfiguring your Manifest Permissions\n\n\nEnsure that the following permissions exist in your \nsrc/debug/AndroidManifest.xml\n\n\n!-- Allows unlocking your device and activating its screen so UI tests can succeed --\n\n\nuses-permission android:name=\nandroid.permission.DISABLE_KEYGUARD\n/\n\n\nuses-permission android:name=\nandroid.permission.WAKE_LOCK\n/\n\n\n\n!-- Allows for storing and retrieving screenshots --\n\n\nuses-permission android:name=\nandroid.permission.WRITE_EXTERNAL_STORAGE\n /\n\n\nuses-permission android:name=\nandroid.permission.READ_EXTERNAL_STORAGE\n /\n\n\n\n!-- Allows changing locales --\n\n\nuses-permission android:name=\nandroid.permission.CHANGE_CONFIGURATION\n /\n\n\n\n\n\nConfiguring your UI Tests for \nscreengrab\n\n\n\n\nAdd \n@ClassRule public static final LocaleTestRule localeTestRule = new LocaleTestRule();\n to your tests class to handle automatic switching of locales\n\n\nTo capture screenshots, add the following to your tests \nScreengrab.screenshot(\"name_of_screenshot_here\");\n on the appropriate screens\n\n\n\n\nGenerating Screenshots with Screengrab\n\n\n\n\nRun \n./gradlew assembleDebug assembleAndroidTest\n to generate debug and test APKs\n\n\nRun \nfastlane screengrab\n in your app project directory to generate screenshots\n\n\nYou will be prompted to provide any required parameters which are not in your \nScreengrabfile\n, or provided as command line arguments\n\n\n\n\n\n\nYour screenshots will be saved to \nfastlane/metadata/android\n in the directory where you ran \nfastlane screengrab\n\n\n\n\nImproved screenshot capture with UI Automator\n\n\nAs of \nscreengrab\n 0.5.0, you can specify different strategies to control the way \nscreengrab\n captures screenshots. The newer strategy delegates to \nUI Automator\n which fixes a number of problems compared to the original strategy:\n\n\n\n\nShadows/elevation are correctly captured for Material UI\n\n\nMulti-window situations are correctly captured (dialogs, etc.)\n\n\nWorks on Android N\n\n\n\n\nHowever, UI Automator requires a device with \nAPI level \n= 18\n, so it is not yet the default strategy. To enable it for all screenshots by default, make the following call before your tests run:\n\n\nScreengrab.setDefaultScreenshotStrategy(new UiAutomatorScreenshotStrategy());\n\n\n\n\nUpload Screenshots to Google Play\n\n\nAfter generating your screenshots using \nfastlane screengrab\n, you'll usually want to upload them to Google Play.\n\n\nTo upload the screenshots stored in \nfastlane/metadata/android\n, just run:\n\n\nfastlane supply\n\n\n\n\nUse in Fastfile\n\n\nTo put all of this together so that anyone on your team could trigger generating and uploading new screenshots, you can define a \nfastlane\n lane called \nscreenshots\n. It would be responsible for:\n\n\n\n\nRunning your app through \nscreengrab\n to automatically capture your screenshots\n\n\nHaving \nsupply\n send your screenshots to Google Play for use in the store\n\n\n\n\nAdd the following code to your \nfastlane/Fastfile\n:\n\n\nlane :screenshots do\n  screengrab\n  supply\nend\n\n\n\n\nTo get a list of all available options for each of the steps, run\n\n\nfastlane action screengrab\nfastlane action supply\n\n\n\n\nAdvanced \nscreengrab\n\n\n\n\nLaunch Arguments\n\n\nYou can provide additional arguments to your testcases on launch. These strings will be available in your tests through \nInstrumentationRegistry.getArguments()\n.\n\n\nlaunch_arguments([\n  \nusername hjanuschka\n,\n  \nbuild_number 201\n\n])\n\n\n\n\nBundle extras = InstrumentationRegistry.getArguments();\nString peerID = null;\nif (extras != null) {\n  if (extras.containsKey(\nusername\n)) {\n    username = extras.getString(\nusername\n);\n    System.out.println(\nUsername: \n + username);\n  } else {\n    System.out.println(\nNo username in extras\n);\n  }\n} else {\n  System.out.println(\nNo extras\n);\n}", 
            "title": "Screenshots"
        }, 
        {
            "location": "/getting-started/android/screenshots/#fastlane-screenshots-for-android", 
            "text": "Your app screenshots are probably the most important thing when it comes to convincing potential users to download or purchase your app. Unfortunately, many apps don't do screenshots well. This is often because taking screenshots of your app and then preparing them for display is time consuming, and it's hard to get everything right and consistent! For example:   Are the screenshots in Google Play inconsistent with your latest app design?  Is your app localized into many languages that require different screenshots for each?  Is the same content displayed for each of your size variations?   fastlane  tools can automate this process, making it fast and consistent while giving you beautiful results!", 
            "title": "fastlane screenshots for Android"
        }, 
        {
            "location": "/getting-started/android/screenshots/#capture-screenshots-automatically", 
            "text": "screengrab  works with  fastlane  to automate the process of capturing screenshots of your app. It allows you to:   Capture hundreds of screenshots in multiple languages on any simulator  Do something else while the computer takes the screenshots for you  Configure it once, and store the configuration so anyone on the team can run it  Get a summary of how your app looks like across all supported devices and languages   After  screengrab  completes, it will show you summary of the screenshots you captured:", 
            "title": "Capture Screenshots Automatically"
        }, 
        {
            "location": "/getting-started/android/screenshots/#getting-started-using-espresso", 
            "text": "screengrab  uses the capabilities of Android's built-in  Instrumented tests  combined with  Espresso  to drive interactions with your app. To get familiar with writing UI Tests with Espresso, check out  Testing UI for a Single App .", 
            "title": "Getting Started Using Espresso"
        }, 
        {
            "location": "/getting-started/android/screenshots/#installing-screengrab", 
            "text": "Install the gem:  sudo gem install screengrab", 
            "title": "Installing screengrab"
        }, 
        {
            "location": "/getting-started/android/screenshots/#gradle-dependency", 
            "text": "Add the test dependency to your Gradle build:  androidTestCompile 'tools.fastlane:screengrab:x.x.x'  The latest version can be determined by visiting the  screengrab  RubyGems page", 
            "title": "Gradle dependency"
        }, 
        {
            "location": "/getting-started/android/screenshots/#configuring-your-manifest-permissions", 
            "text": "Ensure that the following permissions exist in your  src/debug/AndroidManifest.xml  !-- Allows unlocking your device and activating its screen so UI tests can succeed --  uses-permission android:name= android.permission.DISABLE_KEYGUARD /  uses-permission android:name= android.permission.WAKE_LOCK /  !-- Allows for storing and retrieving screenshots --  uses-permission android:name= android.permission.WRITE_EXTERNAL_STORAGE  /  uses-permission android:name= android.permission.READ_EXTERNAL_STORAGE  /  !-- Allows changing locales --  uses-permission android:name= android.permission.CHANGE_CONFIGURATION  /", 
            "title": "Configuring your Manifest Permissions"
        }, 
        {
            "location": "/getting-started/android/screenshots/#configuring-your-ui-tests-for-screengrab", 
            "text": "Add  @ClassRule public static final LocaleTestRule localeTestRule = new LocaleTestRule();  to your tests class to handle automatic switching of locales  To capture screenshots, add the following to your tests  Screengrab.screenshot(\"name_of_screenshot_here\");  on the appropriate screens", 
            "title": "Configuring your UI Tests for screengrab"
        }, 
        {
            "location": "/getting-started/android/screenshots/#generating-screenshots-with-screengrab", 
            "text": "Run  ./gradlew assembleDebug assembleAndroidTest  to generate debug and test APKs  Run  fastlane screengrab  in your app project directory to generate screenshots  You will be prompted to provide any required parameters which are not in your  Screengrabfile , or provided as command line arguments    Your screenshots will be saved to  fastlane/metadata/android  in the directory where you ran  fastlane screengrab", 
            "title": "Generating Screenshots with Screengrab"
        }, 
        {
            "location": "/getting-started/android/screenshots/#improved-screenshot-capture-with-ui-automator", 
            "text": "As of  screengrab  0.5.0, you can specify different strategies to control the way  screengrab  captures screenshots. The newer strategy delegates to  UI Automator  which fixes a number of problems compared to the original strategy:   Shadows/elevation are correctly captured for Material UI  Multi-window situations are correctly captured (dialogs, etc.)  Works on Android N   However, UI Automator requires a device with  API level  = 18 , so it is not yet the default strategy. To enable it for all screenshots by default, make the following call before your tests run:  Screengrab.setDefaultScreenshotStrategy(new UiAutomatorScreenshotStrategy());", 
            "title": "Improved screenshot capture with UI Automator"
        }, 
        {
            "location": "/getting-started/android/screenshots/#upload-screenshots-to-google-play", 
            "text": "After generating your screenshots using  fastlane screengrab , you'll usually want to upload them to Google Play.  To upload the screenshots stored in  fastlane/metadata/android , just run:  fastlane supply", 
            "title": "Upload Screenshots to Google Play"
        }, 
        {
            "location": "/getting-started/android/screenshots/#use-in-fastfile", 
            "text": "To put all of this together so that anyone on your team could trigger generating and uploading new screenshots, you can define a  fastlane  lane called  screenshots . It would be responsible for:   Running your app through  screengrab  to automatically capture your screenshots  Having  supply  send your screenshots to Google Play for use in the store   Add the following code to your  fastlane/Fastfile :  lane :screenshots do\n  screengrab\n  supply\nend  To get a list of all available options for each of the steps, run  fastlane action screengrab\nfastlane action supply", 
            "title": "Use in Fastfile"
        }, 
        {
            "location": "/getting-started/android/screenshots/#advanced-screengrab", 
            "text": "Launch Arguments  You can provide additional arguments to your testcases on launch. These strings will be available in your tests through  InstrumentationRegistry.getArguments() .  launch_arguments([\n   username hjanuschka ,\n   build_number 201 \n])  Bundle extras = InstrumentationRegistry.getArguments();\nString peerID = null;\nif (extras != null) {\n  if (extras.containsKey( username )) {\n    username = extras.getString( username );\n    System.out.println( Username:   + username);\n  } else {\n    System.out.println( No username in extras );\n  }\n} else {\n  System.out.println( No extras );\n}", 
            "title": "Advanced screengrab"
        }, 
        {
            "location": "/getting-started/android/beta-deployment/", 
            "text": "Deploy to Beta distribution services using \nfastlane\n\n\nIf you would like to distribute your beta builds to Google Play, please make sure you've done the steps from \nSetting up \nsupply\n before continuing.\n\n\nBuilding your app\n\n\nfastlane\n takes care of building your app by delegating to your existing Gradle build. Just add the following to your \nFastfile\n:\n\n\nlane :beta do\n  # Adjust the `build_type` and `flavor` params as needed to build the right APK for your setup\n  gradle(\n    task: 'assemble',\n    build_type: 'Release'\n  )\n\n  # ...\nend\n\n\n\n\nTry running the lane with:\n\n\nfastlane beta\n\n\n\n\nWhen that completes you should have the appropriate APK ready to go in the standard output directory.\n\n\nTo get a list of all available parameters for the \ngradle\n action, run:\n\n\nfastlane action gradle\n\n\n\n\nUploading your app\n\n\nAfter building your app, it's ready to be uploaded to a beta testing service of your choice. The beauty of \nfastlane\n is that you can easily switch beta providers, or even upload to multiple at once, with a minimum of configuration. Follow that with a notification posted to the group messaging service of your choice to let the team know that you've shipped.\n\n\nlane :beta do\n  gradle(task: 'assemble', build_type: 'Release')\n  supply(track: 'beta')\n  slack(message: 'Successfully distributed a new beta build')\nend\n\n\n\n\nSupported beta testing services\n\n\n\n\nGoogle Play\n\n\nIn order to distribute to Google Play with \nsupply\n you will need to have your Google credentials set up. Make sure you've gone through \nSetting up \nsupply\n before continuing!\n\n\nlane :beta do\n  # ...\n  gradle(\n    task: 'assemble',\n    build_type: 'Release'\n  )\n  supply(track: 'beta')\n  # ...\nend\n\n\n\n\nTo get a list of all available options, run:\n\n\nfastlane action supply\n\n\n\n\n\n\n\n\n\n\nCrashlytics\n\n\nlane :beta do\n  # ...\n  gradle(\n    task: 'assemble',\n    build_type: 'Release'\n  )\n\n  crashlytics(\n    api_token: '[insert_key_here]',\n    build_secret: '[insert_secret_here]'\n  )\n  # ...\nend\n\n\n\n\nTo get your API token, open the \norganizations settings page\n and click on the API key and build secret links.\n\n\nAdditionally you can specify \nnotes\n, \nemails\n, \ngroups\n and \nnotifications\n. To get a list of all available options, run:\n\n\nfastlane action crashlytics\n\n\n\n\n\n\n\n\nRelease Notes\n\n\n\n\nGenerate based on Git commits\n\n\nYou take the time to write great Git commit messages, right? Why not take advantage of them to automatically summarize the work done for your latest beta release?\n\n\nlane :beta do\n  # ...\n\n  # Generate the changelog based on commit messages since your last tag\n  changelog_from_git_commits\n\n  # The crashlytics action knows how to use the generated changelog automatically\n  crashlytics(\n    api_token: '[insert_key_here]',\n    build_secret: '[insert_secret_here]'\n  )\nend\n\n\n\n\nYou can get a list of all available options by running \nfastlane action changelog_from_git_commits\n, but here are some examples:\n\n\nchangelog_from_git_commits(\n  between: ['7b092b3', 'HEAD'], # Optional, lets you specify a revision/tag range between which to collect commit info\n  merge_commit_filtering: 'exclude_merges' # Optional, lets you filter out merge commits\n)\n\n\n\n\n\n\n\n\n\n\nPrompt for changelog\n\n\nYou can automatically be asked for the changelog in your terminal using the \nprompt\n action:\n\n\nlane :beta do\n  # Variant 1: Ask for a one line input\n  changelog = prompt(\nChangelog: \n)\n\n  # Variant 2: Ask for a multi-line input\n  #   The user confirms their input by typing `END` and Enter\n  changelog = prompt(\n    text: \nChangelog: \n,\n    multi_line_end_keyword: \nEND\n\n  )\n\n  crashlytics(\n    api_token: '[insert_key_here]',\n    build_secret: '[insert_secret_here]',\n    notes: changelog\n  )\nend\n\n\n\n\n\n\n\n\n\n\nFetch the changelog from the file system or remote server\n\n\nYou can fetch values from anywhere, including the file system and remote server, by writing code in your \nFastfile\n\n\nlane :beta do\n  # Variant 1: Read from file system\n  #   note the `..`, since fastlane runs in the _fastlane_ directory\n  changelog = File.read(\n../Changelog.txt\n)\n\n  # Variant 2: Fetch data from a remote web server\n  changelog = download(url: \nhttps://lookatmycms.com/changelog.txt\n)\n\n  crashlytics(\n    api_token: '[insert_key_here]',\n    build_secret: '[insert_secret_here]',\n    notes: changelog\n  )\nend", 
            "title": "Beta Deployment"
        }, 
        {
            "location": "/getting-started/android/beta-deployment/#deploy-to-beta-distribution-services-using-fastlane", 
            "text": "If you would like to distribute your beta builds to Google Play, please make sure you've done the steps from  Setting up  supply  before continuing.", 
            "title": "Deploy to Beta distribution services using fastlane"
        }, 
        {
            "location": "/getting-started/android/beta-deployment/#building-your-app", 
            "text": "fastlane  takes care of building your app by delegating to your existing Gradle build. Just add the following to your  Fastfile :  lane :beta do\n  # Adjust the `build_type` and `flavor` params as needed to build the right APK for your setup\n  gradle(\n    task: 'assemble',\n    build_type: 'Release'\n  )\n\n  # ...\nend  Try running the lane with:  fastlane beta  When that completes you should have the appropriate APK ready to go in the standard output directory.  To get a list of all available parameters for the  gradle  action, run:  fastlane action gradle", 
            "title": "Building your app"
        }, 
        {
            "location": "/getting-started/android/beta-deployment/#uploading-your-app", 
            "text": "After building your app, it's ready to be uploaded to a beta testing service of your choice. The beauty of  fastlane  is that you can easily switch beta providers, or even upload to multiple at once, with a minimum of configuration. Follow that with a notification posted to the group messaging service of your choice to let the team know that you've shipped.  lane :beta do\n  gradle(task: 'assemble', build_type: 'Release')\n  supply(track: 'beta')\n  slack(message: 'Successfully distributed a new beta build')\nend", 
            "title": "Uploading your app"
        }, 
        {
            "location": "/getting-started/android/beta-deployment/#supported-beta-testing-services", 
            "text": "Google Play  In order to distribute to Google Play with  supply  you will need to have your Google credentials set up. Make sure you've gone through  Setting up  supply  before continuing!  lane :beta do\n  # ...\n  gradle(\n    task: 'assemble',\n    build_type: 'Release'\n  )\n  supply(track: 'beta')\n  # ...\nend  To get a list of all available options, run:  fastlane action supply     Crashlytics  lane :beta do\n  # ...\n  gradle(\n    task: 'assemble',\n    build_type: 'Release'\n  )\n\n  crashlytics(\n    api_token: '[insert_key_here]',\n    build_secret: '[insert_secret_here]'\n  )\n  # ...\nend  To get your API token, open the  organizations settings page  and click on the API key and build secret links.  Additionally you can specify  notes ,  emails ,  groups  and  notifications . To get a list of all available options, run:  fastlane action crashlytics", 
            "title": "Supported beta testing services"
        }, 
        {
            "location": "/getting-started/android/beta-deployment/#release-notes", 
            "text": "Generate based on Git commits  You take the time to write great Git commit messages, right? Why not take advantage of them to automatically summarize the work done for your latest beta release?  lane :beta do\n  # ...\n\n  # Generate the changelog based on commit messages since your last tag\n  changelog_from_git_commits\n\n  # The crashlytics action knows how to use the generated changelog automatically\n  crashlytics(\n    api_token: '[insert_key_here]',\n    build_secret: '[insert_secret_here]'\n  )\nend  You can get a list of all available options by running  fastlane action changelog_from_git_commits , but here are some examples:  changelog_from_git_commits(\n  between: ['7b092b3', 'HEAD'], # Optional, lets you specify a revision/tag range between which to collect commit info\n  merge_commit_filtering: 'exclude_merges' # Optional, lets you filter out merge commits\n)     Prompt for changelog  You can automatically be asked for the changelog in your terminal using the  prompt  action:  lane :beta do\n  # Variant 1: Ask for a one line input\n  changelog = prompt( Changelog:  )\n\n  # Variant 2: Ask for a multi-line input\n  #   The user confirms their input by typing `END` and Enter\n  changelog = prompt(\n    text:  Changelog:  ,\n    multi_line_end_keyword:  END \n  )\n\n  crashlytics(\n    api_token: '[insert_key_here]',\n    build_secret: '[insert_secret_here]',\n    notes: changelog\n  )\nend     Fetch the changelog from the file system or remote server  You can fetch values from anywhere, including the file system and remote server, by writing code in your  Fastfile  lane :beta do\n  # Variant 1: Read from file system\n  #   note the `..`, since fastlane runs in the _fastlane_ directory\n  changelog = File.read( ../Changelog.txt )\n\n  # Variant 2: Fetch data from a remote web server\n  changelog = download(url:  https://lookatmycms.com/changelog.txt )\n\n  crashlytics(\n    api_token: '[insert_key_here]',\n    build_secret: '[insert_secret_here]',\n    notes: changelog\n  )\nend", 
            "title": "Release Notes"
        }, 
        {
            "location": "/getting-started/android/release-deployment/", 
            "text": "Deploy to Google Play using \nfastlane\n\n\nBuilding your app\n\n\nfastlane\n takes care of building your app by delegating to your existing Gradle build. Just add the following to your \nFastfile\n:\n\n\nlane :playstore do\n  gradle(\n    task: 'assemble',\n    build_type: 'Release'\n  )\nend\n\n\n\n\nTry running the lane with:\n\n\nfastlane playstore\n\n\n\n\nWhen that completes you should have the appropriate APK ready to go in the standard output directory. To get a list of all available parameters for the \ngradle\n action, run:\n\n\nfastlane action gradle\n\n\n\n\nUploading your APK\n\n\nTo upload your binary to Google Play, \nfastlane\n uses a tool called \nsupply\n. Because \nsupply\n needs authentication information from Google, if you haven't yet done the \nsupply\n setup steps\n, please do those now!\n\n\nWith that done, simply add a call to \nsupply\n to the lane you set up above:\n\n\nlane :playstore do\n  gradle(\n    task: 'assemble',\n    build_type: 'Release'\n  )\n  supply # Uploads the APK built in the gradle step above\nend\n\n\n\n\nThis will also upload:\n\n\n\n\nApp metadata from \nfastlane/metadata/android\n if you previously ran \nfastlane supply init\n\n\nExpansion files (obbs) found under the same directory as your APK as long as:\n\n\nThey are identified by type as \nmain\n or \npatch\n by containing \nmain\n or \npatch\n in their file names\n\n\nThere is at most one of each type\n\n\n\n\n\n\nScreenshots from \nfastlane/metadata/android\n if you previously ran \nscreengrab\n\n\n\n\nIf you would like to capture and upload screenshots automatically as part of your deployment process, check out the \nfastlane screenshots for Android\n guide to get started!\n\n\nTo gradually roll out a new build you can use:\n\n\nlane :playstore do\n  # ...\n  supply(\n    track: 'rollout',\n    rollout: '0.5'\n  )\nend\n\n\n\n\nTo get a list of all available parameters for the \nsupply\n action, run:\n\n\nfastlane action supply", 
            "title": "Release Deployment"
        }, 
        {
            "location": "/getting-started/android/release-deployment/#deploy-to-google-play-using-fastlane", 
            "text": "", 
            "title": "Deploy to Google Play using fastlane"
        }, 
        {
            "location": "/getting-started/android/release-deployment/#building-your-app", 
            "text": "fastlane  takes care of building your app by delegating to your existing Gradle build. Just add the following to your  Fastfile :  lane :playstore do\n  gradle(\n    task: 'assemble',\n    build_type: 'Release'\n  )\nend  Try running the lane with:  fastlane playstore  When that completes you should have the appropriate APK ready to go in the standard output directory. To get a list of all available parameters for the  gradle  action, run:  fastlane action gradle", 
            "title": "Building your app"
        }, 
        {
            "location": "/getting-started/android/release-deployment/#uploading-your-apk", 
            "text": "To upload your binary to Google Play,  fastlane  uses a tool called  supply . Because  supply  needs authentication information from Google, if you haven't yet done the  supply  setup steps , please do those now!  With that done, simply add a call to  supply  to the lane you set up above:  lane :playstore do\n  gradle(\n    task: 'assemble',\n    build_type: 'Release'\n  )\n  supply # Uploads the APK built in the gradle step above\nend  This will also upload:   App metadata from  fastlane/metadata/android  if you previously ran  fastlane supply init  Expansion files (obbs) found under the same directory as your APK as long as:  They are identified by type as  main  or  patch  by containing  main  or  patch  in their file names  There is at most one of each type    Screenshots from  fastlane/metadata/android  if you previously ran  screengrab   If you would like to capture and upload screenshots automatically as part of your deployment process, check out the  fastlane screenshots for Android  guide to get started!  To gradually roll out a new build you can use:  lane :playstore do\n  # ...\n  supply(\n    track: 'rollout',\n    rollout: '0.5'\n  )\nend  To get a list of all available parameters for the  supply  action, run:  fastlane action supply", 
            "title": "Uploading your APK"
        }, 
        {
            "location": "/actions/", 
            "text": "fastlane actions\n\n\nThis page contains a list of all built-in fastlane actions and their available options.\n\n\nTo get the most up-to-date information from the command line on your current version you can also run\n\n\nfastlane actions # list all available fastlane actions\nfastlane action [action_name] # more information for a specific action\n\n\n\n\nYou can import another \nFastfile\n by using the \nimport\n action. This is useful if you have shared lanes across multiple apps and you want to store a \nFastfile\n in a separate folder. The path must be relative to the \nFastfile\n this is called from.\n\n\nimport './path/to/other/Fastfile'\n\n\n\n\nFor \nfastlane\n plugins, check out the \navailable plugins\n page.\n\n\n\n\nTesting\n\n\nBuilding\n\n\nScreenshots\n\n\nProject\n\n\nCode Signing\n\n\nDocumentation\n\n\nBeta\n\n\nPush\n\n\nReleasing your app\n\n\nSource Control\n\n\nNotifications\n\n\nDeprecated\n\n\nMisc\n\n\nPlugins\n\n\n\n\nTesting\n\n\n\n\n\n\n\n### scan\n\nEasily run tests of your iOS app using _scan_\n\n\n\n> More information: https://github.com/fastlane/fastlane/tree/master/scan\n\nscan | \n-----|----\nSupported platforms | ios, mac\nAuthor | @KrauseFx\n\n\n\n\n\n\n5 Examples\n\n\n\n\u0002wzxhzdk:2\u0003\n\n\n\n\u0002wzxhzdk:3\u0003\n\n\n\n\u0002wzxhzdk:4\u0003\n\n\n\n\u0002wzxhzdk:5\u0003\n\n\n\n\u0002wzxhzdk:6\u0003\n\n\n\n\n\n\n\n\n\n\nParameters\n\n\nKey | Description\n----|------------\n  `workspace` | Path to the workspace file\n  `project` | Path to the project file\n  `device` | The name of the simulator type you want to run tests on (e.g. 'iPhone 6')\n  `toolchain` | The toolchain that should be used for building the application (e.g. com.apple.dt.toolchain.Swift_2_3, org.swift.30p620160816a)\n  `devices` | Array of devices to run the tests on (e.g. ['iPhone 6', 'iPad Air'])\n  `scheme` | The project's scheme. Make sure it's marked as `Shared`\n  `clean` | Should the project be cleaned before building it?\n  `code_coverage` | Should code coverage be generated (Xcode 7 only)?\n  `address_sanitizer` | Should the address sanitizer be turned on?\n  `thread_sanitizer` | Should the thread sanitizer be turned on?\n  `skip_build` | Should debug build be skipped before test build?\n  `output_directory` | The directory in which all reports will be stored\n  `output_style` | Define how the output should look like (standard, basic, rspec or raw)\n  `output_types` | Comma separated list of the output types (e.g. html, junit, json-compilation-database)\n  `output_files` | Comma separated list of the output files, corresponding to the types provided by :output_types (order should match). If specifying an output type of json-compilation-database with :use_clang_report_name enabled, that option will take precedence\n  `buildlog_path` | The directory where to store the raw log\n  `include_simulator_logs` | If the logs generated by the app (e.g. using NSLog, perror, etc.) in the Simulator should be written to the output_directory\n  `formatter` | A custom xcpretty formatter to use\n  `test_without_building` | Test without building, requires a derived data path\n  `build_for_testing` | Build for testing only, does not run tests\n  `xctestrun` | Run tests using the provided .xctestrun file\n  `derived_data_path` | The directory where build products and other derived data will go\n  `result_bundle` | Location of the Xcode result bundle\n  `sdk` | The SDK that should be used for building the application\n  `open_report` | Should the HTML report be opened when tests are completed?\n  `configuration` | The configuration to use when building the app. Defaults to 'Release'\n  `destination` | Use only if you're a pro, use the other options instead\n  `xcargs` | Pass additional arguments to xcodebuild. Be sure to quote the setting names and values e.g. OTHER_LDFLAGS=\"-ObjC -lstdc++\"\n  `xcconfig` | Use an extra XCCONFIG file to build your app\n  `only_testing` | Array of strings matching Test Bundle/Test Suite/Test Cases to run\n  `skip_testing` | Array of strings matching Test Bundle/Test Suite/Test Cases to skip\n  `slack_url` | Create an Incoming WebHook for your Slack group to post results there\n  `slack_channel` | #channel or @username\n  `slack_message` | The message included with each message posted to slack\n  `skip_slack` | Don't publish to slack, even when an URL is given\n  `slack_only_on_failure` | Only post on Slack if the tests fail\n  `use_clang_report_name` | Generate the json compilation database with clang naming convention (compile_commands.json)\n  `custom_report_file_name` | [DEPRECATED!] Use --output_files - Sets custom full report file name when generating a single report\n  `fail_build` | Should this step stop the build if the tests fail? Set this to false if you're using trainer\n\n\n\n\n\n\n\n\n\n### slather\n\nUse slather to generate a code coverage report\n\n\n\n> Slather works with multiple code coverage formats including Xcode7 code coverage.\nSlather is available at https://github.com/SlatherOrg/slather\n\n\nslather | \n-----|----\nSupported platforms | ios, mac\nAuthor | @mattdelves\n\n\n\n\n\n\n1 Example\n\n\n\n\u0002wzxhzdk:7\u0003\n\n\n\n\n\n\n\n\n\n\nParameters\n\n\nKey | Description\n----|------------\n  `build_directory` | The location of the build output\n  `proj` | The project file that slather looks at\n  `workspace` | The workspace that slather looks at\n  `scheme` | Scheme to use when calling slather\n  `configuration` | Configuration to use when calling slather (since slather-2.4.1)\n  `input_format` | The input format that slather should look for\n  `buildkite` | Tell slather that it is running on Buildkite\n  `teamcity` | Tell slather that it is running on TeamCity\n  `jenkins` | Tell slather that it is running on Jenkins\n  `travis` | Tell slather that it is running on TravisCI\n  `circleci` | Tell slather that it is running on CircleCI\n  `coveralls` | Tell slather that it should post data to Coveralls\n  `simple_output` | Tell slather that it should output results to the terminal\n  `gutter_json` | Tell slather that it should output results as Gutter JSON format\n  `cobertura_xml` | Tell slather that it should output results as Cobertura XML format\n  `html` | Tell slather that it should output results as static HTML pages\n  `show` | Tell slather that it should open static html pages automatically\n  `source_directory` | Tell slather the location of your source files\n  `output_directory` | Tell slather the location of for your output files\n  `ignore` | Tell slather to ignore files matching a path or any path from an array of paths\n  `verbose` | Tell slather to enable verbose mode\n  `use_bundle_exec` | Use bundle exec to execute slather. Make sure it is in the Gemfile\n  `binary_basename` | Basename of the binary file, this should match the name of your bundle excluding its extension (i.e. YourApp [for YourApp.app bundle])\n  `binary_file` | Binary file name to be used for code coverage\n  `source_files` | A Dir.glob compatible pattern used to limit the lookup to specific source files. Ignored in gcov mode\n  `decimals` | The amount of decimals to use for % coverage reporting\n\n\n\n\n\n\n\n\n\n### swiftlint\n\nRun swift code validation using SwiftLint\n\n\n\n\n\nswiftlint | \n-----|----\nSupported platforms | ios, mac\nAuthor | @KrauseFx\n\n\n\n\n\n\n1 Example\n\n\n\n\u0002wzxhzdk:8\u0003\n\n\n\n\n\n\n\n\n\n\nParameters\n\n\nKey | Description\n----|------------\n  `mode` | SwiftLint mode: :lint (default) or :autocorrect; default is :lint\n  `output_file` | Path to output SwiftLint result\n  `config_file` | Custom configuration file of SwiftLint\n  `strict` | Fail on warnings? (true/false)\n  `files` | List of files to process\n  `ignore_exit_status` | Ignore the exit status of the SwiftLint command, so that serious violations                                                     don't fail the build (true/false)\n  `reporter` | Choose output reporter\n  `quiet` | Don't print status logs like 'Linting \n' \n&\n 'Done linting'\n  `executable` | Path to the `swiftlint` executable on your machine\n\n\n\n\n\n\n\n\n\n### xcov\n\nNice code coverage reports without hassle\n\n\n\n> Create nice code coverage reports and post coverage summaries on Slack *(xcov gem is required)*.\nMore information: https://github.com/nakiostudio/xcov\n\nxcov | \n-----|----\nSupported platforms | ios, mac\nAuthor | @nakiostudio\n\n\n\n\n\n\n1 Example\n\n\n\n\u0002wzxhzdk:9\u0003\n\n\n\n\n\n\n\n\n\n\n\n\n### sonar\n\nInvokes sonar-scanner to programmatically run SonarQube analysis\n\n\n\n> See http://docs.sonarqube.org/display/SCAN/Analyzing+with+SonarQube+Scanner for details.\nIt can process unit test results if formatted as junit report as shown in [xctest](#xctest) action. It can also integrate coverage reports in Cobertura format, which can be transformed into by [slather](#slather) action.\n\nsonar | \n-----|----\nSupported platforms | ios, android, mac\nAuthor | @c_gretzki\nReturns | The exit code of the sonar-scanner binary\n\n\n\n\n\n\n1 Example\n\n\n\n\u0002wzxhzdk:10\u0003\n\n\n\n\n\n\n\n\n\n\nParameters\n\n\nKey | Description\n----|------------\n  `project_configuration_path` | The path to your sonar project configuration file; defaults to `sonar-project.properties`\n  `project_key` | The key sonar uses to identify the project, e.g. `name.gretzki.awesomeApp`. Must either be specified here or inside the sonar project configuration file\n  `project_name` | The name of the project that gets displayed on the sonar report page. Must either be specified here or inside the sonar project configuration file\n  `project_version` | The project's version that gets displayed on the sonar report page. Must either be specified here or inside the sonar project configuration file\n  `sources_path` | Comma-separated paths to directories containing source files. Must either be specified here or inside the sonar project configuration file\n  `project_language` | Language key, e.g. objc\n  `source_encoding` | Used encoding of source files, e.g., UTF-8\n  `sonar_runner_args` | Pass additional arguments to sonar-scanner. Be sure to provide the arguments with a leading `-D` e.g. FL_SONAR_RUNNER_ARGS=\"-Dsonar.verbose=true\"\n  `sonar_login` | Pass the Sonar Login token (e.g: xxxxxxprivate_token_XXXXbXX7e)\n\n\n\n\n\n\n\n\n\n### oclint\n\nLints implementation files with OCLint\n\n\n\n> Run the static analyzer tool [OCLint](http://oclint.org) for your project. You need to have a `compile_commands.json` file in your _fastlane_ directory or pass a path to your file\n\noclint | \n-----|----\nSupported platforms | ios, android, mac\nAuthor | @HeEAaD\n\n\n\n\n\n\n1 Example\n\n\n\n\u0002wzxhzdk:11\u0003\n\n\n\n\n\n\n\n\n\n\nParameters\n\n\nKey | Description\n----|------------\n  `oclint_path` | The path to oclint binary\n  `compile_commands` | The json compilation database, use xctool reporter 'json-compilation-database'\n  `select_reqex` | Select all files matching this reqex\n  `select_regex` | Select all files matching this regex\n  `exclude_regex` | Exclude all files matching this regex\n  `report_type` | The type of the report (default: html)\n  `report_path` | The reports file path\n  `list_enabled_rules` | List enabled rules\n  `rc` | Override the default behavior of rules\n  `thresholds` | List of rule thresholds to override the default behavior of rules\n  `enable_rules` | List of rules to pick explicitly\n  `disable_rules` | List of rules to disable\n  `max_priority_1` | The max allowed number of priority 1 violations\n  `max_priority_2` | The max allowed number of priority 2 violations\n  `max_priority_3` | The max allowed number of priority 3 violations\n  `enable_clang_static_analyzer` | Enable Clang Static Analyzer, and integrate results into OCLint report\n  `enable_global_analysis` | Compile every source, and analyze across global contexts (depends on number of source files, could results in high memory load)\n  `allow_duplicated_violations` | Allow duplicated violations in the OCLint report\n\n\n\n\n\n\n\n\n\n### gcovr\n\nRuns test coverage reports for your Xcode project\n\n\n\n> Generate summarized code coverage reports using [gcovr](http://gcovr.com/)\n\ngcovr | \n-----|----\nSupported platforms | ios\nAuthor | @dtrenz\n\n\n\n\n\n\n1 Example\n\n\n\n\u0002wzxhzdk:12\u0003\n\n\n\n\n\n\n\n\n\n\n\n\n### lcov\n\nGenerates coverage data using lcov\n\n\n\n\n\nlcov | \n-----|----\nSupported platforms | ios, mac\nAuthor | @thiagolioy\n\n\n\n\n\n\n1 Example\n\n\n\n\u0002wzxhzdk:13\u0003\n\n\n\n\n\n\n\n\n\n\nParameters\n\n\nKey | Description\n----|------------\n  `project_name` | Name of the project\n  `scheme` | Scheme of the project\n  `arch` | The build arch where will search .gcda files\n  `output_dir` | The output directory that coverage data will be stored. If not passed will use coverage_reports as default value\n\n\n\n\n\n\n\n\n\n### appium\n\nRun UI test by Appium with RSpec\n\n\n\n\n\nappium | \n-----|----\nSupported platforms | ios\nAuthor | @yonekawa\n\n\n\n\n\n\n1 Example\n\n\n\n\u0002wzxhzdk:14\u0003\n\n\n\n\n\n\n\n\n\n\nParameters\n\n\nKey | Description\n----|------------\n  `platform` | Appium platform name\n  `spec_path` | Path to Appium spec directory\n  `app_path` | Path to Appium target app file\n  `invoke_appium_server` | Use local Appium server with invoke automatically\n  `host` | Hostname of Appium server\n  `port` | HTTP port of Appium server\n  `appium_path` | Path to Appium executable\n  `caps` | Hash of caps for Appium::Driver\n\n\n\n\n\n\n\n\n\n### xctool\n\nRun tests using xctool\n\n\n\n> You can run any `xctool` action. This will require having [xctool](https://github.com/facebook/xctool) installed through [homebrew](http://brew.sh/). It is recommended to store the build configuration in the `.xctool-args` file. More information available on GitHub: https://docs.fastlane.tools/actions#xctool\n\nxctool | \n-----|----\nSupported platforms | ios, mac\nAuthor | @KrauseFx\n\n\n\n\n\n\n2 Examples\n\n\n\n\u0002wzxhzdk:15\u0003\n\n\n\n\u0002wzxhzdk:16\u0003\n\n\n\n\n\n\n\n\n\n\n\n\n### xcode_server_get_assets\n\nDownloads Xcode Bot assets like the `.xcarchive` and logs\n\n\n\n> This action downloads assets from your Xcode Server Bot (works with Xcode Server\n          using Xcode 6 and 7. By default this action downloads all assets, unzips them and\n          deletes everything except for the `.xcarchive`. If you'd like to keep all downloaded\n          assets, pass `:keep_all_assets: true`. This action returns the path to the downloaded\n          assets folder and puts into shared values the paths to the asset folder and to the `.xcarchive` inside it\n\nxcode_server_get_assets | \n-----|----\nSupported platforms | ios, mac\nAuthor | @czechboy0\n\n\n\n\n\n\n1 Example\n\n\n\n\u0002wzxhzdk:17\u0003\n\n\n\n\n\n\n\n\n\n\nParameters\n\n\nKey | Description\n----|------------\n  `host` | IP Address/Hostname of Xcode Server\n  `bot_name` | Name of the Bot to pull assets from\n  `integration_number` | Optionally you can override which integration's assets should be downloaded. If not provided, the latest integration is used\n  `username` | Username for your Xcode Server\n  `password` | Password for your Xcode Server\n  `target_folder` | Relative path to a folder into which to download assets\n  `keep_all_assets` | Whether to keep all assets or let the script delete everything except for the .xcarchive\n  `trust_self_signed_certs` | Whether to trust self-signed certs on your Xcode Server\n\n\n\n\n\n\n\n\n\n\nBuilding\n\n\n\n\n\n\n\n### gym\n\nEasily build and sign your app using _gym_\n\n\n\n> More information: https://fastlane.tools/gym\n\ngym | \n-----|----\nSupported platforms | ios, mac\nAuthor | @KrauseFx\nReturns | The absolute path to the generated ipa file\n\n\n\n\n\n\n2 Examples\n\n\n\n\u0002wzxhzdk:18\u0003\n\n\n\n\u0002wzxhzdk:19\u0003\n\n\n\n\n\n\n\n\n\n\nParameters\n\n\nKey | Description\n----|------------\n  `workspace` | Path to the workspace file\n  `project` | Path to the project file\n  `scheme` | The project's scheme. Make sure it's marked as `Shared`\n  `clean` | Should the project be cleaned before building it?\n  `output_directory` | The directory in which the ipa file should be stored in\n  `output_name` | The name of the resulting ipa file\n  `configuration` | The configuration to use when building the app. Defaults to 'Release'\n  `silent` | Hide all information that's not necessary while building\n  `codesigning_identity` | The name of the code signing identity to use. It has to match the name exactly. e.g. 'iPhone Distribution: SunApps GmbH'\n  `skip_package_ipa` | Should we skip packaging the ipa?\n  `include_symbols` | Should the ipa file include symbols?\n  `include_bitcode` | Should the ipa file include bitcode?\n  `export_method` | Method used to export the archive. Valid values are: app-store, ad-hoc, package, enterprise, development, developer-id\n  `export_options` | Specifies path to export options plist. Use 'xcodebuild -help' to print the full set of available options\n  `export_xcargs` | Pass additional arguments to xcodebuild for the package phase. Be sure to quote the setting names and values e.g. OTHER_LDFLAGS=\"-ObjC -lstdc++\"\n  `skip_build_archive` | Export ipa from previously built xarchive. Uses archive_path as source\n  `build_path` | The directory in which the archive should be stored in\n  `archive_path` | The path to the created archive\n  `derived_data_path` | The directory where built products and other derived data will go\n  `result_bundle` | Location of the Xcode result bundle\n  `buildlog_path` | The directory where to store the build log\n  `sdk` | The SDK that should be used for building the application\n  `toolchain` | The toolchain that should be used for building the application (e.g. com.apple.dt.toolchain.Swift_2_3, org.swift.30p620160816a)\n  `destination` | Use a custom destination for building the app\n  `export_team_id` | Optional: Sometimes you need to specify a team id when exporting the ipa file\n  `xcargs` | Pass additional arguments to xcodebuild for the build phase. Be sure to quote the setting names and values e.g. OTHER_LDFLAGS=\"-ObjC -lstdc++\"\n  `xcconfig` | Use an extra XCCONFIG file to build your app\n  `suppress_xcode_output` | Suppress the output of xcodebuild to stdout. Output is still saved in buildlog_path\n  `disable_xcpretty` | Disable xcpretty formatting of build output\n  `xcpretty_test_format` | Use the test (RSpec style) format for build output\n  `xcpretty_formatter` | A custom xcpretty formatter to use\n  `xcpretty_report_junit` | Have xcpretty create a JUnit-style XML report at the provided path\n  `xcpretty_report_html` | Have xcpretty create a simple HTML report at the provided path\n  `xcpretty_report_json` | Have xcpretty create a JSON compilation database at the provided path\n  `analyze_build_time` | Analyze the project build time and store the output in 'culprits.txt' file\n  `xcpretty_utf` | Have xcpretty use unicode encoding when reporting builds\n\n\n\n\n\n\n\n\n\n### cocoapods\n\nRuns `pod install` for the project\n\n\n\n> If you use [CocoaPods](http://cocoapods.org) you can use the `cocoapods` integration to run `pod install` before building your app.\n\ncocoapods | \n-----|----\nSupported platforms | ios, mac\nAuthor | @KrauseFx, @tadpol, @birmacher, @Liquidsoul\n\n\n\n\n\n\n2 Examples\n\n\n\n\u0002wzxhzdk:20\u0003\n\n\n\n\u0002wzxhzdk:21\u0003\n\n\n\n\n\n\n\n\n\n\nParameters\n\n\nKey | Description\n----|------------\n  `clean` | Remove SCM directories\n  `integrate` | Integrate the Pods libraries into the Xcode project(s)\n  `repo_update` | Run `pod repo update` before install\n  `silent` | Execute command without logging output\n  `verbose` | Show more debugging information\n  `ansi` | Show output with ANSI codes\n  `use_bundle_exec` | Use bundle exec when there is a Gemfile presented\n  `podfile` | Explicitly specify the path to the Cocoapods' Podfile. You can either set it to the Podfile's path or to the folder containing the Podfile file\n  `error_callback` | A callback invoked with the command output if there is a non-zero exit status\n\n\n\n\n\n\n\n\n\n### gradle\n\nAll gradle related actions, including building and testing your Android app\n\n\n\n> Run `./gradlew tasks` to get a list of all available gradle tasks for your project\n\ngradle | \n-----|----\nSupported platforms | ios, android\nAuthor | @KrauseFx, @lmirosevic\nReturns | The output of running the gradle task\n\n\n\n\n\n\n3 Examples\n\n\n\n\u0002wzxhzdk:22\u0003\n\n\n\n\u0002wzxhzdk:23\u0003\n\n\n\n\u0002wzxhzdk:24\u0003\n\n\nYou can also suppress printing the output generated by running the generated Gradle command:\n\n\u0002wzxhzdk:25\u0003\n\n\nTo pass any other CLI flags to gradle use:\n\n\u0002wzxhzdk:26\u0003\n\n\n\n\n\n\n\n\n\n\nParameters\n\n\nKey | Description\n----|------------\n  `task` | The gradle task you want to execute, e.g. `assemble` or `test`. For tasks such as `assembleMyFlavorRelease` you should use gradle(task: 'assemble', flavor: 'Myflavor', build_type: 'Release')\n  `flavor` | The flavor that you want the task for, e.g. `MyFlavor`. If you are running the `assemble` task in a multi-flavor project, and you rely on Actions.lane_context[Actions.SharedValues::GRADLE_APK_OUTPUT_PATH] then you must specify a flavor here or else this value will be undefined\n  `build_type` | The build type that you want the task for, e.g. `Release`. Useful for some tasks such as `assemble`\n  `flags` | All parameter flags you want to pass to the gradle command, e.g. `--exitcode --xml file.xml`\n  `project_dir` | The root directory of the gradle project. Defaults to `.`\n  `gradle_path` | The path to your `gradlew`. If you specify a relative path, it is assumed to be relative to the `project_dir`\n  `properties` | Gradle properties to be exposed to the gradle script\n  `serial` | Android serial, which device should be used for this command\n  `print_command` | Control whether the generated Gradle command is printed as output before running it (true/false)\n  `print_command_output` | Control whether the output produced by given Gradle command is printed while running (true/false)\n\n\n\n\n\n\n\n\n\n### clear_derived_data\n\nDeletes the Xcode Derived Data\n\n\n\n> Deletes the Derived Data from '~/Library/Developer/Xcode/DerivedData' or a supplied path\n\nclear_derived_data | \n-----|----\nSupported platforms | ios, mac\nAuthor | @KrauseFx\n\n\n\n\n\n\n2 Examples\n\n\n\n\u0002wzxhzdk:27\u0003\n\n\n\n\u0002wzxhzdk:28\u0003\n\n\n\n\n\n\n\n\n\n\nParameters\n\n\nKey | Description\n----|------------\n  `derived_data_path` | Custom path for derivedData\n\n\n\n\n\n\n\n\n\n### adb\n\nRun ADB Actions\n\n\n\n> see adb --help for more details\n\nadb | \n-----|----\nSupported platforms | android\nAuthor | @hjanuschka\nReturns | The output of the adb command\n\n\n\n\n\n\n1 Example\n\n\n\n\u0002wzxhzdk:29\u0003\n\n\n\n\n\n\n\n\n\n\nParameters\n\n\nKey | Description\n----|------------\n  `serial` | Android serial of the device to use for this command\n  `command` | All commands you want to pass to the adb command, e.g. `kill-server`\n  `adb_path` | The path to your `adb` binary\n\n\n\n\n\n\n\n\n\n### xcversion\n\nSelect an Xcode to use by version specifier\n\n\n\n> Finds and selects a version of an installed Xcode that best matches the provided [`Gem::Version` requirement specifier](http://www.rubydoc.info/github/rubygems/rubygems/Gem/Version)\n\nxcversion | \n-----|----\nSupported platforms | ios, mac\nAuthor | @oysta\n\n\n\n\n\n\n2 Examples\n\n\n\n\u0002wzxhzdk:30\u0003\n\n\n\n\u0002wzxhzdk:31\u0003\n\n\n\n\n\n\n\n\n\n\nParameters\n\n\nKey | Description\n----|------------\n  `version` | The version of Xcode to select specified as a Gem::Version requirement string (e.g. '~> 7.1.0')\n\n\n\n\n\n\n\n\n\n### xcodebuild\n\nUse the `xcodebuild` command to build and sign your app\n\n\n\n> **Note**: `xcodebuild` is a complex command, so it is recommended to use [gym](https://github.com/fastlane/fastlane/tree/master/gym) for building your ipa file and [scan](https://github.com/fastlane/fastlane/tree/master/scan) for testing your app instead.\n\nxcodebuild | \n-----|----\nSupported platforms | ios, mac\nAuthor | @dtrenz\n\n\n\n\n\n\n1 Example\n\n\n\n\u0002wzxhzdk:32\u0003\n\n\n\n\n\n\n\n\n\n\n\n\n### carthage\n\nRuns `carthage` for your project\n\n\n\n\n\ncarthage | \n-----|----\nSupported platforms | ios, mac\nAuthor | @bassrock, @petester42, @jschmid, @JaviSoto, @uny, @phatblat, @bfcrampton, @antondomashnev\n\n\n\n\n\n\n2 Examples\n\n\n\n\u0002wzxhzdk:33\u0003\n\n\n\n\u0002wzxhzdk:34\u0003\n\n\n\n\n\n\n\n\n\n\nParameters\n\n\nKey | Description\n----|------------\n  `command` | Carthage command (one of: build, bootstrap, update, archive)\n  `dependencies` | Carthage dependencies to update\n  `use_ssh` | Use SSH for downloading GitHub repositories\n  `use_submodules` | Add dependencies as Git submodules\n  `use_binaries` | Check out dependency repositories even when prebuilt frameworks exist\n  `no_build` | When bootstrapping Carthage do not build\n  `no_skip_current` | Don't skip building the Carthage project (in addition to its dependencies)\n  `derived_data` | Use derived data folder at path\n  `verbose` | Print xcodebuild output inline\n  `platform` | Define which platform to build for\n  `cache_builds` | By default Carthage will rebuild a dependency regardless of whether it's the same resolved version as before. Passing the --cache-builds will cause carthage to avoid rebuilding a dependency if it can\n  `frameworks` | Framework name or names to archive, could be applied only along with the archive command\n  `output` | Output name for the archive, could be applied only along with the archive command. Use following format *.framework.zip\n  `configuration` | Define which build configuration to use when building\n  `toolchain` | Define which xcodebuild toolchain to use when building\n  `project_directory` | Define the directory containing the Carthage project\n\n\n\n\n\n\n\n\n\n### xcode_select\n\nChange the xcode-path to use. Useful for beta versions of Xcode\n\n\n\n> Select and build with the Xcode installed at the provided path. Use the `xcversion` action if you want to select an Xcode based on a version specifier or you don't have known, stable paths as may happen in a CI environment.\n\nxcode_select | \n-----|----\nSupported platforms | ios, mac\nAuthor | @dtrenz\n\n\n\n\n\n\n1 Example\n\n\n\n\u0002wzxhzdk:35\u0003\n\n\n\n\n\n\n\n\n\n\n\n\n### ensure_xcode_version\n\nEnsure the selected Xcode version with xcode-select matches a value\n\n\n\n> If building your app requires a specific version of Xcode, you can invoke this command before using gym.\n        For example, to ensure that a beta version is not accidentally selected to build, which would make uploading to TestFlight fail.\n\nensure_xcode_version | \n-----|----\nSupported platforms | ios, mac\nAuthor | @JaviSoto\n\n\n\n\n\n\n1 Example\n\n\n\n\u0002wzxhzdk:36\u0003\n\n\n\n\n\n\n\n\n\n\nParameters\n\n\nKey | Description\n----|------------\n  `version` | Xcode version to verify that is selected\n\n\n\n\n\n\n\n\n\n### clean_cocoapods_cache\n\nRemove the cache for pods\n\n\n\n\n\nclean_cocoapods_cache | \n-----|----\nSupported platforms | ios, mac\nAuthor | @alexmx\n\n\n\n\n\n\n2 Examples\n\n\n\n\u0002wzxhzdk:37\u0003\n\n\n\n\u0002wzxhzdk:38\u0003\n\n\n\n\n\n\n\n\n\n\nParameters\n\n\nKey | Description\n----|------------\n  `name` | Pod name to be removed from cache\n\n\n\n\n\n\n\n\n\n### verify_xcode\n\nVerifies that the Xcode installation is properly signed by Apple\n\n\n\n> This action was implemented after the recent Xcode attack to make sure\nyou're not using a hacked Xcode installation.\nhttp://researchcenter.paloaltonetworks.com/2015/09/novel-malware-xcodeghost-modifies-xcode-infects-apple-ios-apps-and-hits-app-store/\n\nverify_xcode | \n-----|----\nSupported platforms | ios, mac\nAuthor | @KrauseFx\n\n\n\n\n\n\n2 Examples\n\n\n\n\u0002wzxhzdk:39\u0003\n\n\n\n\u0002wzxhzdk:40\u0003\n\n\n\n\n\n\n\n\n\n\nParameters\n\n\nKey | Description\n----|------------\n  `xcode_path` | The path to the Xcode installation to test\n\n\n\n\n\n\n\n\n\n### xcode_install\n\nMake sure a certain version of Xcode is installed\n\n\n\n> Makes sure a specific version of Xcode is installed. If that's not the case, it will automatically be downloaded by the [xcode_install](https://github.com/neonichu/xcode-install) gem. This will make sure to use the correct Xcode for later actions.\n\nxcode_install | \n-----|----\nSupported platforms | ios, mac\nAuthor | @Krausefx\nReturns | The path to the newly installed Xcode version\n\n\n\n\n\n\n1 Example\n\n\n\n\u0002wzxhzdk:41\u0003\n\n\n\n\n\n\n\n\n\n\nParameters\n\n\nKey | Description\n----|------------\n  `version` | The version number of the version of Xcode to install\n  `username` | Your Apple ID Username\n  `team_id` | The ID of your team if you're in multiple teams\n\n\n\n\n\n\n\n\n\n### verify_pod_keys\n\nVerifies all keys referenced from the Podfile are non-empty\n\n\n\n> Runs a check against all keys specified in your Podfile to make sure they're more than a single character long. This is to ensure you don't deploy with stubbed keys.\n\nverify_pod_keys | \n-----|----\nSupported platforms | ios, mac\nAuthor | @ashfurrow\n\n\n\n\n\n\n1 Example\n\n\n\n\u0002wzxhzdk:42\u0003\n\n\n\n\n\n\n\n\n\n\n\n\n### xctest\n\nRuns tests on the given simulator\n\n\n\n\n\nxctest | \n-----|----\nSupported platforms | ios, mac\nAuthor | @dtrenz\n\n\n\n\n\n\n1 Example\n\n\n\n\u0002wzxhzdk:43\u0003\n\n\n\n\n\n\n\n\n\n\n\n\n### xcarchive\n\nArchives the project using `xcodebuild`\n\n\n\n\n\nxcarchive | \n-----|----\nSupported platforms | ios, mac\nAuthor | @dtrenz\n\n\n\n\n\n\n1 Example\n\n\n\n\u0002wzxhzdk:44\u0003\n\n\n\n\n\n\n\n\n\n\n\n\n### xcbuild\n\nBuilds the project using `xcodebuild`\n\n\n\n\n\nxcbuild | \n-----|----\nSupported platforms | ios, mac\nAuthor | @dtrenz\n\n\n\n\n\n\n1 Example\n\n\n\n\u0002wzxhzdk:45\u0003\n\n\n\n\n\n\n\n\n\n\n\n\n### xcexport\n\nExports the project using `xcodebuild`\n\n\n\n\n\nxcexport | \n-----|----\nSupported platforms | ios, mac\nAuthor | @dtrenz\n\n\n\n\n\n\n1 Example\n\n\n\n\u0002wzxhzdk:46\u0003\n\n\n\n\n\n\n\n\n\n\n\n\n### xcclean\n\nCleans the project using `xcodebuild`\n\n\n\n\n\nxcclean | \n-----|----\nSupported platforms | ios, mac\nAuthor | @dtrenz\n\n\n\n\n\n\n1 Example\n\n\n\n\u0002wzxhzdk:47\u0003\n\n\n\n\n\n\n\n\n\n\n\n\n\nScreenshots\n\n\n\n\n\n\n\n### snapshot\n\nGenerate new localised screenshots on multiple devices\n\n\n\n\n\nsnapshot | \n-----|----\nSupported platforms | ios, mac\nAuthor | @KrauseFx\n\n\n\n\n\n\n2 Examples\n\n\n\n\u0002wzxhzdk:48\u0003\n\n\n\n\u0002wzxhzdk:49\u0003\n\n\n\n\n\n\n\n\n\n\nParameters\n\n\nKey | Description\n----|------------\n  `workspace` | Path the workspace file\n  `project` | Path the project file\n  `xcargs` | Pass additional arguments to xcodebuild for the test phase. Be sure to quote the setting names and values e.g. OTHER_LDFLAGS=\"-ObjC -lstdc++\"\n  `devices` | A list of devices you want to take the screenshots from\n  `languages` | A list of languages which should be used\n  `launch_arguments` | A list of launch arguments which should be used\n  `output_directory` | The directory where to store the screenshots\n  `output_simulator_logs` | If the logs generated by the app (e.g. using NSLog, perror, etc.) in the Simulator should be written to the output_directory\n  `ios_version` | By default, the latest version should be used automatically. If you want to change it, do it here\n  `skip_open_summary` | Don't open the HTML summary after running _snapshot_\n  `skip_helper_version_check` | Do not check for most recent SnapshotHelper code\n  `clear_previous_screenshots` | Enabling this option will automatically clear previously generated screenshots before running snapshot\n  `reinstall_app` | Enabling this option will automatically uninstall the application before running it\n  `erase_simulator` | Enabling this option will automatically erase the simulator before running the application\n  `localize_simulator` | Enabling this option will configure the Simulator's system language\n  `app_identifier` | The bundle identifier of the app to uninstall (only needed when enabling reinstall_app)\n  `add_photos` | A list of photos that should be added to the simulator before running the application\n  `add_videos` | A list of videos that should be added to the simulator before running the application\n  `buildlog_path` | The directory where to store the build log\n  `clean` | Should the project be cleaned before building it?\n  `configuration` | The configuration to use when building the app. Defaults to 'Release'\n  `xcpretty_args` | Additional xcpretty arguments\n  `sdk` | The SDK that should be used for building the application\n  `scheme` | The scheme you want to use, this must be the scheme for the UI Tests\n  `number_of_retries` | The number of times a test can fail before snapshot should stop retrying\n  `stop_after_first_error` | Should snapshot stop immediately after the tests completely failed on one device?\n  `derived_data_path` | The directory where build products and other derived data will go\n  `test_target_name` | The name of the target you want to test (if you desire to override the Target Application from Xcode)\n  `namespace_log_files` | Separate the log files per device and per language\n\n\n\n\n\n\n\n\n\n### screengrab\n\nAutomated localized screenshots of your Android app on every device\n\n\n\n\n\nscreengrab | \n-----|----\nSupported platforms | android\nAuthor | @asfalcone, @i2amsam, @mfurtak\n\n\n\n\n\n\n2 Examples\n\n\n\n\u0002wzxhzdk:50\u0003\n\n\n\n\u0002wzxhzdk:51\u0003\n\n\n\n\n\n\n\n\n\n\nParameters\n\n\nKey | Description\n----|------------\n  `android_home` | Path to the root of your Android SDK installation, e.g. ~/tools/android-sdk-macosx\n  `build_tools_version` | The Android build tools version to use, e.g. '23.0.2'\n  `locales` | A list of locales which should be used\n  `clear_previous_screenshots` | Enabling this option will automatically clear previously generated screenshots before running screengrab\n  `output_directory` | The directory where to store the screenshots\n  `skip_open_summary` | Don't open the summary after running _screengrab_\n  `app_package_name` | The package name of the app under test (e.g. com.yourcompany.yourapp)\n  `tests_package_name` | The package name of the tests bundle (e.g. com.yourcompany.yourapp.test)\n  `use_tests_in_packages` | Only run tests in these Java packages\n  `use_tests_in_classes` | Only run tests in these Java classes\n  `launch_arguments` | Additional launch arguments\n  `test_instrumentation_runner` | The fully qualified class name of your test instrumentation runner\n  `ending_locale` | Return the device to this locale after running tests\n  `app_apk_path` | The path to the APK for the app under test\n  `tests_apk_path` | The path to the APK for the the tests bundle\n  `specific_device` | Use the device or emulator with the given serial number or qualifier\n  `device_type` | Type of device used for screenshots. Matches Google Play Types (phone, sevenInch, tenInch, tv, wear)\n  `exit_on_test_failure` | Whether or not to exit Screengrab on test failure. Exiting on failure will not copy sceenshots to local machine nor open sceenshots summary\n  `reinstall_app` | Enabling this option will automatically uninstall the application before running it\n\n\n\n\n\n\n\n\n\n### frameit\n\nAdds device frames around the screenshots using frameit\n\n\n\n> Use [frameit](https://github.com/fastlane/fastlane/tree/master/frameit) to prepare perfect screenshots for the App Store, your website, QA\nor emails. You can add background and titles to the framed screenshots as well.\n\nframeit | \n-----|----\nSupported platforms | ios, mac\nAuthor | @KrauseFx\n\n\n\n\n\n\n4 Examples\n\n\n\n\u0002wzxhzdk:52\u0003\n\n\n\n\u0002wzxhzdk:53\u0003\n\n\n\n\u0002wzxhzdk:54\u0003\n\n\n\n\u0002wzxhzdk:55\u0003\n\n\n\n\n\n\n\n\n\n\nParameters\n\n\nKey | Description\n----|------------\n  `white` | Use white device frames\n  `silver` | Use white device frames. Alias for :white\n  `rose_gold` | Use rose gold device frames. Alias for :rose_gold\n  `gold` | Use gold device frames. Alias for :gold\n  `force_device_type` | Forces a given device type, useful for Mac screenshots, as their sizes vary\n  `use_legacy_iphone5s` | Use iPhone 5s instead of iPhone SE frames\n  `use_legacy_iphone6s` | Use iPhone 6s frames instead of iPhone 7 frames\n  `path` | The path to the directory containing the screenshots\n\n\n\n\n\n\n\n\n\n\nProject\n\n\n\n\n\n\n\n### increment_build_number\n\nIncrement the build number of your project\n\n\n\n\n\nincrement_build_number | \n-----|----\nSupported platforms | ios, mac\nAuthor | @KrauseFx\nReturns | The new build number\n\n\n\n\n\n\n4 Examples\n\n\n\n\u0002wzxhzdk:56\u0003\n\n\n\n\u0002wzxhzdk:57\u0003\n\n\n\n\u0002wzxhzdk:58\u0003\n\n\n\n\u0002wzxhzdk:59\u0003\n\n\n\n\n\n\n\n\n\n\nParameters\n\n\nKey | Description\n----|------------\n  `build_number` | Change to a specific version\n  `xcodeproj` | optional, you must specify the path to your main Xcode project if it is not in the project root directory\n\n\n\n\n\n\n\n\n\n### set_info_plist_value\n\nSets value to Info.plist of your project as native Ruby data structures\n\n\n\n\n\nset_info_plist_value | \n-----|----\nSupported platforms | ios, mac\nAuthor | @kohtenko, @uwehollatz\n\n\n\n\n\n\n2 Examples\n\n\n\n\u0002wzxhzdk:60\u0003\n\n\n\n\u0002wzxhzdk:61\u0003\n\n\n\n\n\n\n\n\n\n\nParameters\n\n\nKey | Description\n----|------------\n  `key` | Name of key in plist\n  `subkey` | Name of subkey in plist\n  `value` | Value to setup\n  `path` | Path to plist file you want to update\n\n\n\n\n\n\n\n\n\n### get_version_number\n\nGet the version number of your project\n\n\n\n> This action will return the current version number set on your project. You first have to set up your Xcode project, if you haven't done it already: https://developer.apple.com/library/ios/qa/qa1827/_index.html\n\nget_version_number | \n-----|----\nSupported platforms | ios, mac\nAuthor | @Liquidsoul\n\n\n\n\n\n\n1 Example\n\n\n\n\u0002wzxhzdk:62\u0003\n\n\n\n\n\n\n\n\n\n\nParameters\n\n\nKey | Description\n----|------------\n  `xcodeproj` | optional, you must specify the path to your main Xcode project if it is not in the project root directory\n  `scheme` | [DEPRECATED!] true - Specify a specific scheme if you have multiple per project, optional.\n                                          This parameter is deprecated and will be removed in a future release.\n                                          Please use the 'target' parameter instead. The behavior of this parameter\n                                          is currently undefined if your scheme name doesn't match your target name\n  `target` | Specify a specific target if you have multiple per project, optional\n\n\n\n\n\n\n\n\n\n### get_info_plist_value\n\nReturns value from Info.plist of your project as native Ruby data structures\n\n\n\n> Get a value from a plist file, which can be used to fetch the app identifier and more information about your app\n\nget_info_plist_value | \n-----|----\nSupported platforms | ios, mac\nAuthor | @kohtenko\n\n\n\n\n\n\n1 Example\n\n\n\n\u0002wzxhzdk:63\u0003\n\n\n\n\n\n\n\n\n\n\nParameters\n\n\nKey | Description\n----|------------\n  `key` | Name of parameter\n  `path` | Path to plist file you want to read\n\n\n\n\n\n\n\n\n\n### update_info_plist\n\nUpdate a Info.plist file with bundle identifier and display name\n\n\n\n> This action allows you to modify your `Info.plist` file before building. This may be useful if you want a separate build for alpha, beta or nightly builds, but don't want a separate target.\n\nupdate_info_plist | \n-----|----\nSupported platforms | ios\nAuthor | @tobiasstrebitzer\n\n\n\n\n\n\n5 Examples\n\n\n\n\u0002wzxhzdk:64\u0003\n\n\n\n\u0002wzxhzdk:65\u0003\n\n\n\n\u0002wzxhzdk:66\u0003\n\n\n\n\u0002wzxhzdk:67\u0003\n\n\n\n\u0002wzxhzdk:68\u0003\n\n\n\n\n\n\n\n\n\n\nParameters\n\n\nKey | Description\n----|------------\n  `xcodeproj` | Path to your Xcode project\n  `plist_path` | Path to info plist\n  `scheme` | Scheme of info plist\n  `app_identifier` | The App Identifier of your app\n  `display_name` | The Display Name of your app\n  `block` | A block to process plist with custom logic\n\n\n\n\n\n\n\n\n\n### update_app_identifier\n\nUpdate the project's bundle identifier\n\n\n\n> Update an app identifier by either setting `CFBundleIdentifier` or `PRODUCT_BUNDLE_IDENTIFIER`, depending on which is already in use.\n\nupdate_app_identifier | \n-----|----\nSupported platforms | ios\nAuthor | @squarefrog, @tobiasstrebitzer\n\n\n\n\n\n\n1 Example\n\n\n\n\u0002wzxhzdk:69\u0003\n\n\n\n\n\n\n\n\n\n\nParameters\n\n\nKey | Description\n----|------------\n  `xcodeproj` | Path to your Xcode project\n  `plist_path` | Path to info plist, relative to your Xcode project\n  `app_identifier` | The app Identifier you want to set\n\n\n\n\n\n\n\n\n\n### get_build_number\n\nGet the build number of your project\n\n\n\n> This action will return the current build number set on your project. You first have to set up your Xcode project, if you haven't done it already: https://developer.apple.com/library/ios/qa/qa1827/_index.html\n\nget_build_number | \n-----|----\nSupported platforms | ios, mac\nAuthor | @Liquidsoul\n\n\n\n\n\n\n1 Example\n\n\n\n\u0002wzxhzdk:70\u0003\n\n\n\n\n\n\n\n\n\n\nParameters\n\n\nKey | Description\n----|------------\n  `xcodeproj` | optional, you must specify the path to your main Xcode project if it is not in the project root directory\n\n\n\n\n\n\n\n\n\n### increment_version_number\n\nIncrement the version number of your project\n\n\n\n> This action will increment the version number. \nYou first have to set up your Xcode project, if you haven't done it already:\nhttps://developer.apple.com/library/ios/qa/qa1827/_index.html\n\nincrement_version_number | \n-----|----\nSupported platforms | ios, mac\nAuthor | @serluca\nReturns | The new version number\n\n\n\n\n\n\n7 Examples\n\n\n\n\u0002wzxhzdk:71\u0003\n\n\n\n\u0002wzxhzdk:72\u0003\n\n\n\n\u0002wzxhzdk:73\u0003\n\n\n\n\u0002wzxhzdk:74\u0003\n\n\n\n\u0002wzxhzdk:75\u0003\n\n\n\n\u0002wzxhzdk:76\u0003\n\n\n\n\u0002wzxhzdk:77\u0003\n\n\n\n\n\n\n\n\n\n\nParameters\n\n\nKey | Description\n----|------------\n  `bump_type` | The type of this version bump. Available: patch, minor, major\n  `version_number` | Change to a specific version. This will replace the bump type value\n  `xcodeproj` | optional, you must specify the path to your main Xcode project if it is not in the project root directory\n\n\n\n\n\n\n\n\n\n### update_project_team\n\nUpdate Xcode Development Team ID\n\n\n\n> This action update the Developer Team ID of your Xcode Project.\n\nupdate_project_team | \n-----|----\nSupported platforms | ios, mac\nAuthor | @lgaches\n\n\n\n\n\n\n1 Example\n\n\n\n\u0002wzxhzdk:78\u0003\n\n\n\n\n\n\n\n\n\n\nParameters\n\n\nKey | Description\n----|------------\n  `path` | Path to your Xcode project\n  `teamid` | The Team ID you want to use\n\n\n\n\n\n\n\n\n\n### update_app_group_identifiers\n\nThis action changes the app group identifiers in the entitlements file\n\n\n\n> Updates the App Group Identifiers in the given Entitlements file, so you can have app groups for the app store build and app groups for an enterprise build.\n\nupdate_app_group_identifiers | \n-----|----\nSupported platforms | ios\nAuthor | @mathiasAichinger\n\n\n\n\n\n\n1 Example\n\n\n\n\u0002wzxhzdk:79\u0003\n\n\n\n\n\n\n\n\n\n\nParameters\n\n\nKey | Description\n----|------------\n  `entitlements_file` | The path to the entitlement file which contains the app group identifiers\n  `app_group_identifiers` | An Array of unique identifiers for the app groups. Eg. ['group.com.test.testapp']\n\n\n\n\n\n\n\n\n\n### get_ipa_info_plist_value\n\nReturns a value from Info.plist inside a .ipa file\n\n\n\n> This is useful for introspecting Info.plist files for .ipa files that have already been built.\n\nget_ipa_info_plist_value | \n-----|----\nSupported platforms | ios, mac\nAuthor | @johnboiles\nReturns | Returns the value in the .ipa's Info.plist corresponding to the passed in Key\n\n\n\n\n\n\n1 Example\n\n\n\n\u0002wzxhzdk:80\u0003\n\n\n\n\n\n\n\n\n\n\nParameters\n\n\nKey | Description\n----|------------\n  `key` | Name of parameter\n  `ipa` | Path to IPA\n\n\n\n\n\n\n\n\n\n### recreate_schemes\n\nRecreate not shared Xcode project schemes\n\n\n\n\n\nrecreate_schemes | \n-----|----\nSupported platforms | ios, mac\nAuthor | @jerolimov\n\n\n\n\n\n\n1 Example\n\n\n\n\u0002wzxhzdk:81\u0003\n\n\n\n\n\n\n\n\n\n\nParameters\n\n\nKey | Description\n----|------------\n  `project` | The Xcode project\n\n\n\n\n\n\n\n\n\n### update_url_schemes\n\nUpdates the URL schemes in the given Info.plist\n\n\n\n> This action allows you to update the URL schemes of the app before building it.\nFor example, you can use this to set a different url scheme for the alpha\nor beta version of the app.\n\nupdate_url_schemes | \n-----|----\nSupported platforms | ios, mac\nAuthor | @kmikael\n\n\n\n\n\n\n1 Example\n\n\n\n\u0002wzxhzdk:82\u0003\n\n\n\n\n\n\n\n\n\n\nParameters\n\n\nKey | Description\n----|------------\n  `path` | The Plist file's path\n  `url_schemes` | The new URL schemes\n\n\n\n\n\n\n\n\n\n### set_build_number_repository\n\nSet the build number from the current repository\n\n\n\n> This action will set the **build number** according to what the SCM HEAD reports.\nCurrently supported SCMs are svn (uses root revision), git-svn (uses svn revision) and git (uses short hash) and mercurial (uses short hash or revision number).\nThere is an option, `:use_hg_revision_number`, which allows to use mercurial revision number instead of hash\n\nset_build_number_repository | \n-----|----\nSupported platforms | ios, mac\nAuthor | @pbrooks, @armadsen, @AndrewSB\n\n\n\n\n\n\n2 Examples\n\n\n\n\u0002wzxhzdk:83\u0003\n\n\n\n\u0002wzxhzdk:84\u0003\n\n\n\n\n\n\n\n\n\n\nParameters\n\n\nKey | Description\n----|------------\n  `use_hg_revision_number` | Use hg revision number instead of hash (ignored for non-hg repos)\n  `xcodeproj` | explicitly specify which xcodeproj to use\n\n\n\n\n\n\n\n\n\n### set_pod_key\n\nSets a value for a key with cocoapods-keys\n\n\n\n> Adds a key to [cocoapods-keys](https://github.com/orta/cocoapods-keys)\n\nset_pod_key | \n-----|----\nSupported platforms | ios, mac\nAuthor | @marcelofabri\n\n\n\n\n\n\n1 Example\n\n\n\n\u0002wzxhzdk:85\u0003\n\n\n\n\n\n\n\n\n\n\nParameters\n\n\nKey | Description\n----|------------\n  `use_bundle_exec` | Use bundle exec when there is a Gemfile presented\n  `key` | The key to be saved with cocoapods-keys\n  `value` | The value to be saved with cocoapods-keys\n  `project` | The project name\n\n\n\n\n\n\n\n\n\n\nCode Signing\n\n\n\n\n\n\n\n### sigh\n\nGenerates a provisioning profile. Stores the profile in the current folder\n\n\n\n> **Note**: It is recommended to use [match](https://github.com/fastlane/fastlane/tree/master/match) according to the [codesigning.guide](https://codesigning.guide) for generating and maintaining your provisioning profiles. Use _sigh_ directly only if you want full control over what's going on and know more about codesigning.\n\nsigh | \n-----|----\nSupported platforms | ios\nAuthor | @KrauseFx\nReturns | The UUID of the profile sigh just fetched/generated\n\n\n\n\n\n\n2 Examples\n\n\n\n\u0002wzxhzdk:86\u0003\n\n\n\n\u0002wzxhzdk:87\u0003\n\n\n\n\n\n\n\n\n\n\nParameters\n\n\nKey | Description\n----|------------\n  `adhoc` | Setting this flag will generate AdHoc profiles instead of App Store Profiles\n  `development` | Renew the development certificate instead of the production one\n  `skip_install` | By default, the certificate will be added to your local machine. Setting this flag will skip this action\n  `force` | Renew provisioning profiles regardless of its state - to automatically add all devices for ad hoc profiles\n  `app_identifier` | The bundle identifier of your app\n  `username` | Your Apple ID Username\n  `team_id` | The ID of your Developer Portal team if you're in multiple teams\n  `team_name` | The name of your Developer Portal team if you're in multiple teams\n  `provisioning_name` | The name of the profile that is used on the Apple Developer Portal\n  `ignore_profiles_with_different_name` | Use in combination with :provisioning_name - when true only profiles matching this exact name will be downloaded\n  `output_path` | Directory in which the profile should be stored\n  `cert_id` | The ID of the code signing certificate to use (e.g. 78ADL6LVAA) \n  `cert_owner_name` | The certificate name to use for new profiles, or to renew with. (e.g. \"Felix Krause\")\n  `filename` | Filename to use for the generated provisioning profile (must include .mobileprovision)\n  `skip_fetch_profiles` | Skips the verification of existing profiles which is useful if you have thousands of profiles\n  `skip_certificate_verification` | Skips the verification of the certificates for every existing profiles. This will make sure the provisioning profile can be used on the local machine\n  `platform` | Set the provisioning profile's platform (i.e. ios, tvos)\n\n\n\n\n\n\n\n\n\n### match\n\nEasily sync your certificates and profiles across your team using git\n\n\n\n> More details https://github.com/fastlane/fastlane/tree/master/match\n\nmatch | \n-----|----\nSupported platforms | ios\nAuthor | @KrauseFx\n\n\n\n\n\n\n3 Examples\n\n\n\n\u0002wzxhzdk:88\u0003\n\n\n\n\u0002wzxhzdk:89\u0003\n\n\n\n\u0002wzxhzdk:90\u0003\n\n\n\n\n\n\n\n\n\n\nParameters\n\n\nKey | Description\n----|------------\n  `git_url` | URL to the git repo containing all the certificates\n  `git_branch` | Specific git branch to use\n  `type` | Define the profile type, can be appstore, adhoc, development, enterprise\n  `app_identifier` | The bundle identifier(s) of your app (comma-separated)\n  `username` | Your Apple ID Username\n  `keychain_name` | Keychain the items should be imported to\n  `keychain_password` | This might be required the first time you access certificates on a new mac. For the login/default keychain this is your account password\n  `readonly` | Only fetch existing certificates and profiles, don't generate new ones\n  `team_id` | The ID of your Developer Portal team if you're in multiple teams\n  `git_full_name` | git user full name to commit\n  `git_user_email` | git user email to commit\n  `team_name` | The name of your Developer Portal team if you're in multiple teams\n  `verbose` | Print out extra information and all commands\n  `force` | Renew the provisioning profiles every time you run match\n  `skip_confirmation` | Disables confirmation prompts during nuke, answering them with yes\n  `shallow_clone` | Make a shallow clone of the repository (truncate the history to 1 revision)\n  `clone_branch_directly` | Clone just the branch specified, instead of the whole repo. This requires that the branch already exists. Otherwise the command will fail\n  `force_for_new_devices` | Renew the provisioning profiles if the device count on the developer portal has changed\n  `skip_docs` | Skip generation of a README.md for the created git repository\n  `platform` | Set the provisioning profile's platform to work with (i.e. ios, tvos)\n\n\n\n\n\n\n\n\n\n### cert\n\nFetch or generate the latest available code signing identity\n\n\n\n> **Important**: It is recommended to use [match](https://github.com/fastlane/fastlane/tree/master/match) according to the [codesigning.guide](https://codesigning.guide) for generating and maintaining your certificates. Use _cert_ directly only if you want full control over what's going on and know more about codesigning.\nUse this action to download the latest code signing identity\n\ncert | \n-----|----\nSupported platforms | ios\nAuthor | @KrauseFx\n\n\n\n\n\n\n2 Examples\n\n\n\n\u0002wzxhzdk:91\u0003\n\n\n\n\u0002wzxhzdk:92\u0003\n\n\n\n\n\n\n\n\n\n\nParameters\n\n\nKey | Description\n----|------------\n  `development` | Create a development certificate instead of a distribution one\n  `force` | Create a certificate even if an existing certificate exists\n  `username` | Your Apple ID Username\n  `team_id` | The ID of your Developer Portal team if you're in multiple teams\n  `team_name` | The name of your Developer Portal team if you're in multiple teams\n  `output_path` | The path to a directory in which all certificates and private keys should be stored\n  `keychain_path` | Path to a custom keychain\n  `keychain_password` | This might be required the first time you access certificates on a new mac. For the login/default keychain this is your account password\n  `platform` | Set the provisioning profile's platform (ios, macos)\n\n\n\n\n\n\n\n\n\n### import_certificate\n\nImport certificate from inputfile into a keychain\n\n\n\n> Import certificates into the current default keychain. Use `create_keychain` to create a new keychain.\n\nimport_certificate | \n-----|----\nSupported platforms | ios, android, mac\nAuthor | @gin0606\n\n\n\n\n\n\n2 Examples\n\n\n\n\u0002wzxhzdk:93\u0003\n\n\n\n\u0002wzxhzdk:94\u0003\n\n\n\n\n\n\n\n\n\n\nParameters\n\n\nKey | Description\n----|------------\n  `keychain_name` | Keychain the items should be imported to\n  `keychain_password` | The password for the keychain. Note that for the login keychain this is your user's password\n  `certificate_path` | Path to certificate\n  `certificate_password` | Certificate password\n  `log_output` | If output should be logged to the console\n\n\n\n\n\n\n\n\n\n### update_project_provisioning\n\nUpdate projects code signing settings from your provisioning profile\n\n\n\n> You should check out the code signing gide before using this action: https://docs.fastlane.tools/codesigning/getting-started/\nThis action retrieves a provisioning profile UUID from a provisioning profile (.mobileprovision) to set\nup the xcode projects' code signing settings in *.xcodeproj/project.pbxproj\nThe `target_filter` value can be used to only update code signing for specified targets\nThe `build_configuration` value can be used to only update code signing for specified build configurations of the targets passing through the `target_filter`\nExample Usage is the WatchKit Extension or WatchKit App, where you need separate provisioning profiles\nExample: `update_project_provisioning(xcodeproj: \"..\", target_filter: \".*WatchKit App.*\")\n\nupdate_project_provisioning | \n-----|----\nSupported platforms | ios, mac\nAuthor | @tobiasstrebitzer, @czechboy0\n\n\n\n\n\n\n1 Example\n\n\n\n\u0002wzxhzdk:95\u0003\n\n\n\n\n\n\n\n\n\n\nParameters\n\n\nKey | Description\n----|------------\n  `xcodeproj` | Path to your Xcode project\n  `profile` | Path to provisioning profile (.mobileprovision)\n  `target_filter` | A filter for the target name. Use a standard regex\n  `build_configuration_filter` | Legacy option, use 'target_filter' instead\n  `build_configuration` | A filter for the build configuration name. Use a standard regex. Applied to all configurations if not specified\n  `certificate` | Path to apple root certificate\n\n\n\n\n\n\n\n\n\n### resign\n\nCodesign an existing ipa file\n\n\n\n> You may provide multiple provisioning profiles if the application contains\nnested applications or app extensions, which need their own provisioning\nprofile. You can do so by passing an array of provisiong profile strings or a\nhash that associates provisioning profile values to bundle identifier keys.\nresign(ipa: \"path\", signing_identity: \"identity\", provisioning_profile: {\n  \"com.example.awesome-app\" => \"App.mobileprovision\",\n  \"com.example.awesome-app.app-extension\" => \"Extension.mobileprovision\"\n})\n\nresign | \n-----|----\nSupported platforms | ios\nAuthor | @lmirosevic\n\n\n\n\n\n\n2 Examples\n\n\n\n\u0002wzxhzdk:96\u0003\n\n\n\n\u0002wzxhzdk:97\u0003\n\n\n\n\n\n\n\n\n\n\nParameters\n\n\nKey | Description\n----|------------\n  `ipa` | Path to the ipa file to resign. Optional if you use the _gym_ or _xcodebuild_ action\n  `signing_identity` | Code signing identity to use. e.g. \"iPhone Distribution: Luka Mirosevic (0123456789)\"\n  `entitlements` | Path to the entitlement file to use, e.g. \"myApp/MyApp.entitlements\"\n  `provisioning_profile` | Path to your provisioning_profile. Optional if you use _sigh_\n  `version` | Version number to force resigned ipa to use.\nUpdates both CFBundleShortVersionString and CFBundleVersion values in Info.plist.\nApplies for main app and all nested apps or extensions\n  `display_name` | Display name to force resigned ipa to use\n  `short_version` | Short version string to force resigned ipa to use (CFBundleShortVersionString)\n  `bundle_version` | Bundle version to force resigned ipa to use (CFBundleVersion)\n  `bundle_id` | Set new bundle ID during resign (CFBundleIdentifier)\n  `use_app_entitlements` | Extract app bundle codesigning entitlements\nand combine with entitlements from new provisionin profile\n  `keychain_path` | Provide a path to a keychain file that should be used by /usr/bin/codesign\n\n\n\n\n\n\n\n\n\n### register_devices\n\nRegisters new devices to the Apple Dev Portal\n\n\n\n> This will register iOS devices with the Developer Portal so that you can include them in your provisioning profiles.\nThis is an optimistic action, in that it will only ever add new devices to the member center, and never remove devices. If a device which has already been registered within the member center is not passed to this action, it will be left alone in the member center and continue to work.\nThe action will connect to the Apple Developer Portal using the username you specified in your `Appfile` with `apple_id`, but you can override it using the `username` option, or by setting the env variable `ENV['DELIVER_USER']`.\n\nregister_devices | \n-----|----\nSupported platforms | ios\nAuthor | @lmirosevic\n\n\n\n\n\n\n3 Examples\n\n\n\n\u0002wzxhzdk:98\u0003\n\n\n\n\u0002wzxhzdk:99\u0003\n\n\n\n\u0002wzxhzdk:100\u0003\n\n\n\n\n\n\n\n\n\n\nParameters\n\n\nKey | Description\n----|------------\n  `devices` | A hash of devices, with the name as key and the UDID as value\n  `devices_file` | Provide a path to a file with the devices to register. For the format of the file see the examples\n  `team_id` | The ID of your Developer Portal team if you're in multiple teams\n  `team_name` | The name of your Developer Portal team if you're in multiple teams\n  `username` | Optional: Your Apple ID\n\n\n\n\n\n\n\n\n\n### automatic_code_signing\n\nUpdates the Xcode 8 Automatic Codesigning Flag\n\n\n\n> Updates the Xcode 8 Automatic Codesigning Flag of all targets in the project\n\nautomatic_code_signing | \n-----|----\nSupported platforms | ios, mac\nAuthor | @mathiasAichinger, @hjanuschka\nReturns | The current status (boolean) of codesigning after modification\n\n\n\n\n\n\n8 Examples\n\n\n\n\u0002wzxhzdk:101\u0003\n\n\n\n\u0002wzxhzdk:102\u0003\n\n\n\n\u0002wzxhzdk:103\u0003\n\n\n\n\u0002wzxhzdk:104\u0003\n\n\n\n\u0002wzxhzdk:105\u0003\n\n\n\n\u0002wzxhzdk:106\u0003\n\n\n\n\u0002wzxhzdk:107\u0003\n\n\n\n\u0002wzxhzdk:108\u0003\n\n\n\n\n\n\n\n\n\n\nParameters\n\n\nKey | Description\n----|------------\n  `path` | Path to your Xcode project\n  `use_automatic_signing` | Defines if project should use automatic signing\n  `team_id` | Team ID, is used when upgrading project\n  `targets` | Specify targets you want to toggle the signing mech. (default to all targets)\n\n\n\n\n\n\n\n\n\n### register_device\n\nRegisters a new device to the Apple Dev Portal\n\n\n\n> This will register an iOS device with the Developer Portal so that you can include it in your provisioning profiles.\nThis is an optimistic action, in that it will only ever add a device to the member center. If the device has already been registered within the member center, it will be left alone in the member center.\nThe action will connect to the Apple Developer Portal using the username you specified in your `Appfile` with `apple_id`, but you can override it using the `username` option.\n\nregister_device | \n-----|----\nSupported platforms | ios\nAuthor | @pvinis\n\n\n\n\n\n\n2 Examples\n\n\n\n\u0002wzxhzdk:109\u0003\n\n\n\n\u0002wzxhzdk:110\u0003\n\n\n\n\n\n\n\n\n\n\nParameters\n\n\nKey | Description\n----|------------\n  `name` | Provide the name of the device to register as\n  `udid` | Provide the UDID of the device to register as\n  `team_id` | The ID of your Developer Portal team if you're in multiple teams\n  `team_name` | The name of your Developer Portal team if you're in multiple teams\n  `username` | Optional: Your Apple ID\n\n\n\n\n\n\n\n\n\n\nDocumentation\n\n\n\n\n\n\n\n### jazzy\n\nGenerate docs using Jazzy\n\n\n\n\n\njazzy | \n-----|----\nSupported platforms | ios, mac\nAuthor | @KrauseFx\n\n\n\n\n\n\n1 Example\n\n\n\n\u0002wzxhzdk:111\u0003\n\n\n\n\n\n\n\n\n\n\nParameters\n\n\nKey | Description\n----|------------\n  `config` | Path to jazzy config file\n\n\n\n\n\n\n\n\n\n### appledoc\n\nGenerate Apple-like source code documentation from the source code\n\n\n\n> Runs `appledoc [OPTIONS] \n` for the project\n\nappledoc | \n-----|----\nSupported platforms | ios, mac\nAuthor | @alexmx\n\n\n\n\n\n\n1 Example\n\n\n\n\u0002wzxhzdk:112\u0003\n\n\n\n\n\n\n\n\n\n\nParameters\n\n\nKey | Description\n----|------------\n  `input` | Path to source files\n  `output` | Output path\n  `templates` | Template files path\n  `docset_install_path` | DocSet installation path\n  `include` | Include static doc(s) at path\n  `ignore` | Ignore given path\n  `exclude_output` | Exclude given path from output\n  `index_desc` | File including main index description\n  `project_name` | Project name\n  `project_version` | Project version\n  `project_company` | Project company\n  `company_id` | Company UTI (i.e. reverse DNS name)\n  `create_html` | Create HTML\n  `create_docset` | Create documentation set\n  `install_docset` | Install documentation set to Xcode\n  `publish_docset` | Prepare DocSet for publishing\n  `html_anchors` | The html anchor format to use in DocSet HTML\n  `clean_output` | Remove contents of output path before starting\n  `docset_bundle_id` | DocSet bundle identifier\n  `docset_bundle_name` | DocSet bundle name\n  `docset_desc` | DocSet description\n  `docset_copyright` | DocSet copyright message\n  `docset_feed_name` | DocSet feed name\n  `docset_feed_url` | DocSet feed URL\n  `docset_feed_formats` | DocSet feed formats. Separated by a comma [atom,xml]\n  `docset_package_url` | DocSet package (.xar) URL\n  `docset_fallback_url` | DocSet fallback URL\n  `docset_publisher_id` | DocSet publisher identifier\n  `docset_publisher_name` | DocSet publisher name\n  `docset_min_xcode_version` | DocSet min. Xcode version\n  `docset_platform_family` | DocSet platform family\n  `docset_cert_issuer` | DocSet certificate issuer\n  `docset_cert_signer` | DocSet certificate signer\n  `docset_bundle_filename` | DocSet bundle filename\n  `docset_atom_filename` | DocSet atom feed filename\n  `docset_xml_filename` | DocSet xml feed filename\n  `docset_package_filename` | DocSet package (.xar,.tgz) filename\n  `options` | Documentation generation options\n  `crossref_format` | Cross reference template regex\n  `exit_threshold` | Exit code threshold below which 0 is returned\n  `docs_section_title` | Title of the documentation section (defaults to \"Programming Guides\"\n  `warnings` | Documentation generation warnings\n  `logformat` | Log format [0-3]\n  `verbose` | Log verbosity level [0-6,xcode]\n\n\n\n\n\n\n\n\n\n\nBeta\n\n\n\n\n\n\n\n### pilot\n\nUpload a new binary to iTunes Connect for TestFlight beta testing\n\n\n\n> More details can be found on https://github.com/fastlane/fastlane/tree/master/pilot\nThis integration will only do the TestFlight upload\n\npilot | \n-----|----\nSupported platforms | ios, android, mac\nAuthor | @KrauseFx\n\n\n\n\n\n\n4 Examples\n\n\n\n\u0002wzxhzdk:113\u0003\n\n\n\n\u0002wzxhzdk:114\u0003\n\n\n\n\u0002wzxhzdk:115\u0003\n\n\n\n\u0002wzxhzdk:116\u0003\n\n\n\n\n\n\n\n\n\n\nParameters\n\n\nKey | Description\n----|------------\n  `username` | Your Apple ID Username\n  `app_identifier` | The bundle identifier of the app to upload or manage testers (optional)\n  `app_platform` | The platform to use (optional)\n  `ipa` | Path to the ipa file to upload\n  `changelog` | Provide the 'what's new' text when uploading a new build\n  `beta_app_description` | Provide the beta app description when uploading a new build\n  `beta_app_feedback_email` | Provide the beta app email when uploading a new build\n  `skip_submission` | Skip the distributing action of pilot and only upload the ipa file\n  `skip_waiting_for_build_processing` | Don't wait for the build to process. If set to true, the changelog won't be set, `distribute_external` option won't work and no build will be distributed to testers\n  `update_build_info_on_upload` | [DEPRECATED!] true - Update build info immediately after validation. This is deprecated and will be removed in a future release. iTunesConnect no longer supports setting build info until after build processing has completed, which is when build info is updated by default\n  `apple_id` | The unique App ID provided by iTunes Connect\n  `distribute_external` | Should the build be distributed to external testers?\n  `first_name` | The tester's first name\n  `last_name` | The tester's last name\n  `email` | The tester's email\n  `testers_file_path` | Path to a CSV file of testers\n  `wait_processing_interval` | Interval in seconds to wait for iTunes Connect processing\n  `team_id` | The ID of your iTunes Connect team if you're in multiple teams\n  `team_name` | The name of your iTunes Connect team if you're in multiple teams\n  `dev_portal_team_id` | The short ID of your team in the developer portal, if you're in multiple teams. Different from your iTC team ID!\n  `itc_provider` | The provider short name to be used with the iTMSTransporter to identify your team\n  `groups` | Associate tester to one group or more by group name / group id. E.g. '-g \"Team 1\",\"Team 2\"'\n\n\n\n\n\n\n\n\n\n### crashlytics\n\nUpload a new build to Crashlytics Beta\n\n\n\n> Additionally you can specify `notes`, `emails`, `groups` and `notifications`.\nDistributing to Groups: When using the `groups` parameter, it's important to use the group **alias** names for each group you'd like to distribute to. A group's alias can be found in the web UI. If you're viewing the Beta page, you can open the groups dialog here:\n\ncrashlytics | \n-----|----\nSupported platforms | ios, android, mac\nAuthor | @KrauseFx, @pedrogimenez\n\n\n\n\n\n\n2 Examples\n\n\n\n\u0002wzxhzdk:117\u0003\n\n\n\n\u0002wzxhzdk:118\u0003\n\n\n\n\n\n\n\n\n\n\nParameters\n\n\nKey | Description\n----|------------\n  `ipa_path` | Path to your IPA file. Optional if you use the _gym_ or _xcodebuild_ action\n  `apk_path` | Path to your APK file\n  `crashlytics_path` | Path to the submit binary in the Crashlytics bundle (iOS) or `crashlytics-devtools.jar` file (Android)\n  `api_token` | Crashlytics API Key\n  `build_secret` | Crashlytics Build Secret\n  `notes_path` | Path to the release notes\n  `notes` | The release notes as string - uses :notes_path under the hood\n  `groups` | The groups used for distribution, separated by commas\n  `emails` | Pass email addresses of testers, separated by commas\n  `notifications` | Crashlytics notification option (true/false)\n  `debug` | Crashlytics debug option (true/false)\n\n\n\n\n\n\n\n\n\n### hockey\n\nUpload a new build to HockeyApp\n\n\n\n> Symbols will also be uploaded automatically if a `app.dSYM.zip` file is found next to `app.ipa`. In case it is located in a different place you can specify the path explicitly in `:dsym` parameter.\nMore information about the available options can be found in the [HockeyApp Docs](http://support.hockeyapp.net/kb/api/api-versions#upload-version).\n\nhockey | \n-----|----\nSupported platforms | ios, android, mac\nAuthor | @KrauseFx, @modzelewski, @lacostej\n\n\n\n\n\n\n2 Examples\n\n\n\n\u0002wzxhzdk:119\u0003\n\n\n\n\u0002wzxhzdk:120\u0003\n\n\n\n\n\n\n\n\n\n\nParameters\n\n\nKey | Description\n----|------------\n  `apk` | Path to your APK file\n  `api_token` | API Token for Hockey Access\n  `ipa` | Path to your IPA file. Optional if you use the _gym_ or _xcodebuild_ action. For Mac zip the .app. For Android provide path to .apk file. In addition you could use this to upload .msi, .zip, .pkg, etc if you use the 'create_update' mechanism\n  `dsym` | Path to your symbols file. For iOS and Mac provide path to app.dSYM.zip. For Android provide path to mappings.txt file\n  `create_update` | Set true if you want to create then update your app as opposed to just upload it. You will need the 'public_identifier', 'bundle_version' and 'bundle_short_version'\n  `notes` | Beta Notes\n  `notify` | Notify testers? \"1\" for yes\n  `status` | Download status: \"1\" = No user can download; \"2\" = Available for download (only possible with full-access token)\n  `notes_type` | Notes type for your :notes, \"0\" = Textile, \"1\" = Markdown (default)\n  `release_type` | Release type of the app: \"0\" = Beta (default), \"1\" = Store, \"2\" = Alpha, \"3\" = Enterprise\n  `mandatory` | Set to \"1\" to make this update mandatory\n  `teams` | Comma separated list of team ID numbers to which this build will be restricted\n  `users` | Comma separated list of user ID numbers to which this build will be restricted\n  `tags` | Comma separated list of tags which will receive access to the build\n  `bundle_short_version` | The bundle_short_version of your application, required when using `create_update`\n  `bundle_version` | The bundle_version of your application, required when using `create_update`\n  `public_identifier` | App id of the app you are targeting, usually you won't need this value. Required, if `upload_dsym_only` set to `true`\n  `commit_sha` | The Git commit SHA for this build\n  `repository_url` | The URL of your source repository\n  `build_server_url` | The URL of the build job on your build server\n  `upload_dsym_only` | Flag to upload only the dSYM file to hockey app\n  `owner_id` | ID for the owner of the app\n  `strategy` | Strategy: 'add' = to add the build as a new build even if it has the same build number (default); 'replace' = to replace a build with the same build number\n  `bypass_cdn` | Flag to bypass Hockey CDN when it uploads successfully but reports error\n  `dsa_signature` | DSA signature for sparkle updates for macOS\n\n\n\n\n\n\n\n\n\n### testflight\n\nAlias for the pilot action\n\n\n\n\n\ntestflight | \n-----|----\nSupported platforms | ios, android, mac\nAuthor | @KrauseFx\n\n\n\n\n\n\n4 Examples\n\n\n\n\u0002wzxhzdk:121\u0003\n\n\n\n\u0002wzxhzdk:122\u0003\n\n\n\n\u0002wzxhzdk:123\u0003\n\n\n\n\u0002wzxhzdk:124\u0003\n\n\n\n\n\n\n\n\n\n\nParameters\n\n\nKey | Description\n----|------------\n  `username` | Your Apple ID Username\n  `app_identifier` | The bundle identifier of the app to upload or manage testers (optional)\n  `app_platform` | The platform to use (optional)\n  `ipa` | Path to the ipa file to upload\n  `changelog` | Provide the 'what's new' text when uploading a new build\n  `beta_app_description` | Provide the beta app description when uploading a new build\n  `beta_app_feedback_email` | Provide the beta app email when uploading a new build\n  `skip_submission` | Skip the distributing action of pilot and only upload the ipa file\n  `skip_waiting_for_build_processing` | Don't wait for the build to process. If set to true, the changelog won't be set, `distribute_external` option won't work and no build will be distributed to testers\n  `update_build_info_on_upload` | [DEPRECATED!] true - Update build info immediately after validation. This is deprecated and will be removed in a future release. iTunesConnect no longer supports setting build info until after build processing has completed, which is when build info is updated by default\n  `apple_id` | The unique App ID provided by iTunes Connect\n  `distribute_external` | Should the build be distributed to external testers?\n  `first_name` | The tester's first name\n  `last_name` | The tester's last name\n  `email` | The tester's email\n  `testers_file_path` | Path to a CSV file of testers\n  `wait_processing_interval` | Interval in seconds to wait for iTunes Connect processing\n  `team_id` | The ID of your iTunes Connect team if you're in multiple teams\n  `team_name` | The name of your iTunes Connect team if you're in multiple teams\n  `dev_portal_team_id` | The short ID of your team in the developer portal, if you're in multiple teams. Different from your iTC team ID!\n  `itc_provider` | The provider short name to be used with the iTMSTransporter to identify your team\n  `groups` | Associate tester to one group or more by group name / group id. E.g. '-g \"Team 1\",\"Team 2\"'\n\n\n\n\n\n\n\n\n\n### deploygate\n\nUpload a new build to [DeployGate](https://deploygate.com/)\n\n\n\n> You can retrieve your username and API token on [your settings page](https://deploygate.com/settings)\nMore information about the available options can be found in the [DeployGate Push API document](https://deploygate.com/docs/api).\n\ndeploygate | \n-----|----\nSupported platforms | ios, android\nAuthor | @tnj, @tomorrowkey\n\n\n\n\n\n\n2 Examples\n\n\n\n\u0002wzxhzdk:125\u0003\n\n\n\n\u0002wzxhzdk:126\u0003\n\n\n\n\n\n\n\n\n\n\nParameters\n\n\nKey | Description\n----|------------\n  `api_token` | Deploygate API Token\n  `user` | Target username or organization name\n  `ipa` | Path to your IPA file. Optional if you use the _gym_ or _xcodebuild_ action\n  `apk` | Path to your APK file\n  `message` | Release Notes\n  `distribution_key` | Target Distribution Key\n  `release_note` | Release note for distribution page\n  `disable_notify` | Disables Push notification emails\n\n\n\n\n\n\n\n\n\n### apteligent\n\nUpload dSYM file to Apteligent (Crittercism)\n\n\n\n\n\napteligent | \n-----|----\nSupported platforms | ios\nAuthor | @Mo7amedFouad\n\n\n\n\n\n\n1 Example\n\n\n\n\u0002wzxhzdk:127\u0003\n\n\n\n\n\n\n\n\n\n\nParameters\n\n\nKey | Description\n----|------------\n  `dsym` | dSYM.zip file to upload to Apteligent\n  `app_id` | Apteligent App ID key e.g. 569f5c87cb99e10e00c7xxxx\n  `api_key` | Apteligent App API key e.g. IXPQIi8yCbHaLliqzRoo065tH0lxxxxx\n\n\n\n\n\n\n\n\n\n### appetize\n\nUpload your app to Appetize.io to stream it in the browser\n\n\n\n> If you provide a `public_key`, this will overwrite an existing application. If you want to have this build as a new app version, you shouldn't provide this value.\nTo integrate appetize into your GitHub workflow check out the [device_grid guide](https://github.com/fastlane/fastlane/blob/master/fastlane/lib/fastlane/actions/device_grid/README.md)\n\nappetize | \n-----|----\nSupported platforms | ios, android\nAuthor | @klundberg, @giginet\n\n\n\n\n\n\n1 Example\n\n\n\n\u0002wzxhzdk:128\u0003\n\n\n\n\n\n\n\n\n\n\nParameters\n\n\nKey | Description\n----|------------\n  `api_token` | Appetize.io API Token\n  `url` | URL from which the ipa file can be fetched. Alternative to :path\n  `platform` | Platform. Either `ios` or `android`. Default is `ios`\n  `path` | Path to zipped build on the local filesystem. Either this or `url` must be specified\n  `public_key` | If not provided, a new app will be created. If provided, the existing build will be overwritten\n  `note` | Notes you wish to add to the uploaded app\n\n\n\n\n\n\n\n\n\n### testfairy\n\nUpload a new build to TestFairy\n\n\n\n> You can retrieve your API key on [your settings page](https://free.testfairy.com/settings/)\n\ntestfairy | \n-----|----\nSupported platforms | ios, android\nAuthor | @taka0125, @tcurdt\n\n\n\n\n\n\n1 Example\n\n\n\n\u0002wzxhzdk:129\u0003\n\n\n\n\n\n\n\n\n\n\nParameters\n\n\nKey | Description\n----|------------\n  `api_key` | API Key for TestFairy\n  `ipa` | Path to your IPA file for iOS or APK for Android\n  `symbols_file` | Symbols mapping file\n  `testers_groups` | Array of tester groups to be notified\n  `metrics` | Array of metrics to record (cpu,memory,network,phone_signal,gps,battery,mic,wifi)\n  `icon_watermark` | Add a small watermark to app icon\n  `comment` | Additional release notes for this upload. This text will be added to email notifications\n  `auto_update` | Allows easy upgrade of all users to current version\n  `notify` | Send email to testers\n  `options` | Array of options (shake,video_only_wifi,anonymous)\n\n\n\n\n\n\n\n\n\n### appaloosa\n\nUpload your app to Appaloosa Store\n\n\n\n> Appaloosa is a private mobile application store. This action \noffers a quick deployment on the platform. You can create an \naccount, push to your existing account, or manage your user \ngroups. We accept iOS and Android applications.\n\nappaloosa | \n-----|----\nSupported platforms | ios, android, mac\nAuthor | @Appaloosa\n\n\n\n\n\n\n1 Example\n\n\n\n\u0002wzxhzdk:130\u0003\n\n\n\n\n\n\n\n\n\n\nParameters\n\n\nKey | Description\n----|------------\n  `binary` | Binary path. Optional for ipa if you use the `ipa` or `xcodebuild` action\n  `api_token` | Your API token\n  `store_id` | Your Store id\n  `group_ids` | Your app is limited to special users? Give us the group ids\n  `screenshots` | Add some screenshots application to your store or hit [enter]\n  `locale` | Select the folder locale for your screenshots\n  `device` | Select the device format for your screenshots\n  `description` | Your app description\n\n\n\n\n\n\n\n\n\n### nexus_upload\n\nUpload a file to Sonatype Nexus platform\n\n\n\n\n\nnexus_upload | \n-----|----\nSupported platforms | ios, android, mac\nAuthor | @xfreebird\n\n\n\n\n\n\n1 Example\n\n\n\n\u0002wzxhzdk:131\u0003\n\n\n\n\n\n\n\n\n\n\nParameters\n\n\nKey | Description\n----|------------\n  `file` | File to be uploaded to Nexus\n  `repo_id` | Nexus repository id e.g. artefacts\n  `repo_group_id` | Nexus repository group id e.g. com.company\n  `repo_project_name` | Nexus repository commandect name. Only letters, digits, underscores(_), hyphens(-), and dots(.) are allowed\n  `repo_project_version` | Nexus repository commandect version\n  `repo_classifier` | Nexus repository artifact classifier (optional)\n  `endpoint` | Nexus endpoint e.g. http://nexus:8081\n  `mount_path` | Nexus mount path. Defaults to /nexus\n  `username` | Nexus username\n  `password` | Nexus password\n  `ssl_verify` | Verify SSL\n  `verbose` | Make detailed output\n  `proxy_username` | Proxy username\n  `proxy_password` | Proxy password\n  `proxy_address` | Proxy address\n  `proxy_port` | Proxy port\n\n\n\n\n\n\n\n\n\n### installr\n\nUpload a new build to Installr\n\n\n\n\n\ninstallr | \n-----|----\nSupported platforms | ios\nAuthor | @scottrhoyt\n\n\n\n\n\n\n1 Example\n\n\n\n\u0002wzxhzdk:132\u0003\n\n\n\n\n\n\n\n\n\n\nParameters\n\n\nKey | Description\n----|------------\n  `api_token` | API Token for Installr Access\n  `ipa` | Path to your IPA file. Optional if you use the _gym_ or _xcodebuild_ action\n  `notes` | Release notes\n  `notify` | Groups to notify (e.g. 'dev,qa')\n  `add` | Groups to add (e.g. 'exec,ops')\n\n\n\n\n\n\n\n\n\n### set_changelog\n\nSet the changelog for all languages on iTunes Connect\n\n\n\n> This is useful if you have only one changelog for all languages.\nYou can store the changelog in `./fastlane/changelog.txt` and it will automatically get loaded from there. This integration is useful if you support e.g. 10 languages and want to use the same \"What's new\"-text for all languages.\n\nset_changelog | \n-----|----\nSupported platforms | ios, mac\nAuthor | @KrauseFx\n\n\n\n\n\n\n1 Example\n\n\n\n\u0002wzxhzdk:133\u0003\n\n\n\n\n\n\n\n\n\n\nParameters\n\n\nKey | Description\n----|------------\n  `app_identifier` | The bundle identifier of your app\n  `username` | Your Apple ID Username\n  `version` | The version number to create/update\n  `changelog` | Changelog text that should be uploaded to iTunes Connect\n  `team_id` | The ID of your iTunes Connect team if you're in multiple teams\n  `team_name` | The name of your iTunes Connect team if you're in multiple teams\n\n\n\n\n\n\n\n\n\n### splunkmint\n\nUpload dSYM file to Splunk MINT\n\n\n\n\n\nsplunkmint | \n-----|----\nSupported platforms | ios\nAuthor | @xfreebird\n\n\n\n\n\n\n1 Example\n\n\n\n\u0002wzxhzdk:134\u0003\n\n\n\n\n\n\n\n\n\n\nParameters\n\n\nKey | Description\n----|------------\n  `dsym` | dSYM.zip file to upload to Splunk MINT\n  `api_key` | Splunk MINT App API key e.g. f57a57ca\n  `api_token` | Splunk MINT API token e.g. e05ba40754c4869fb7e0b61\n  `verbose` | Make detailed output\n  `upload_progress` | Show upload progress\n  `proxy_username` | Proxy username\n  `proxy_password` | Proxy password\n  `proxy_address` | Proxy address\n  `proxy_port` | Proxy port\n\n\n\n\n\n\n\n\n\n### podio_item\n\nCreates or updates an item within your Podio app\n\n\n\n> Use this action to create or update an item within your Podio app\n        (see https://help.podio.com/hc/en-us/articles/201019278-Creating-apps-).\n        Pass in dictionary with field keys and their values.\n        Field key is located under Modify app -> Advanced -> Developer -> External ID\n        (see https://developers.podio.com/examples/items)\n\npodio_item | \n-----|----\nSupported platforms | ios, android, mac\nAuthor | @pprochazka72, @laugejepsen\n\n\n\n\n\n\n1 Example\n\n\n\n\u0002wzxhzdk:135\u0003\n\n\n\n\n\n\n\n\n\n\nParameters\n\n\nKey | Description\n----|------------\n  `client_id` | Client ID for Podio API (see https://developers.podio.com/api-key)\n  `client_secret` | Client secret for Podio API (see https://developers.podio.com/api-key)\n  `app_id` | App ID of the app you intend to authenticate with (see https://developers.podio.com/authentication/app_auth)\n  `app_token` | App token of the app you intend to authenticate with (see https://developers.podio.com/authentication/app_auth)\n  `identifying_field` | String specifying the field key used for identification of an item\n  `identifying_value` | String uniquely specifying an item within the app\n  `other_fields` | Dictionary of your app fields. Podio supports several field types, see https://developers.podio.com/doc/items\n\n\n\n\n\n\n\n\n\n\nPush\n\n\n\n\n\n\n\n### pem\n\nMakes sure a valid push profile is active and creates a new one if needed\n\n\n\n> Additionally to the available options, you can also specify a block that only gets executed if a new\nprofile was created. You can use it to upload the new profile to your server.\nUse it like this: \npem(\n  new_profile: proc do \n    # your upload code\n  end\n)\n\npem | \n-----|----\nSupported platforms | ios\nAuthor | @KrauseFx\n\n\n\n\n\n\n2 Examples\n\n\n\n\u0002wzxhzdk:136\u0003\n\n\n\n\u0002wzxhzdk:137\u0003\n\n\n\n\n\n\n\n\n\n\nParameters\n\n\nKey | Description\n----|------------\n  `development` | Renew the development push certificate instead of the production one\n  `generate_p12` | Generate a p12 file additionally to a PEM file\n  `force` | Create a new push certificate, even if the current one is active for 30 more days\n  `save_private_key` | Set to save the private RSA key\n  `app_identifier` | The bundle identifier of your app\n  `username` | Your Apple ID Username\n  `team_id` | The ID of your Developer Portal team if you're in multiple teams\n  `team_name` | The name of your Developer Portal team if you're in multiple teams\n  `p12_password` | The password that is used for your p12 file\n  `pem_name` | The file name of the generated .pem file\n  `output_path` | The path to a directory in which all certificates and private keys should be stored\n  `new_profile` | Block that is called if there is a new profile\n\n\n\n\n\n\n\n\n\n### update_urban_airship_configuration\n\nSet the Urban Airship plist configuration values\n\n\n\n> This action updates the AirshipConfig.plist need to configure the Urban Airship SDK at runtime, allowing keys and secrets to easily be set for Enterprise and Production versions of the application.\n\nupdate_urban_airship_configuration | \n-----|----\nSupported platforms | ios\nAuthor | @kcharwood\n\n\n\n\n\n\n1 Example\n\n\n\n\u0002wzxhzdk:138\u0003\n\n\n\n\n\n\n\n\n\n\nParameters\n\n\nKey | Description\n----|------------\n  `plist_path` | Path to Urban Airship configuration Plist\n  `development_app_key` | The development app key\n  `development_app_secret` | The development app secret\n  `production_app_key` | The production app key\n  `production_app_secret` | The production app secret\n  `detect_provisioning_mode` | Automatically detect provisioning mode\n\n\n\n\n\n\n\n\n\n### onesignal\n\nCreate a new OneSignal application\n\n\n\n> You can use this action to automatically create a OneSignal application. You can also upload a .p12 with password, a GCM key, or both\n\nonesignal | \n-----|----\nSupported platforms | ios\nAuthor | @timothybarraclough, @smartshowltd\n\n\n\n\n\n\n1 Example\n\n\n\n\u0002wzxhzdk:139\u0003\n\n\n\n\n\n\n\n\n\n\nParameters\n\n\nKey | Description\n----|------------\n  `auth_token` | OneSignal Authorization Key\n  `app_name` | OneSignal App Name\n  `android_token` | ANDROID GCM KEY\n  `apns_p12` | APNS P12 File (in .p12 format)\n  `apns_p12_password` | APNS P12 password\n  `apns_env` | APNS environment\n\n\n\n\n\n\n\n\n\n\nReleasing your app\n\n\n\n\n\n\n\n### deliver\n\nUses deliver to upload new app metadata and builds to iTunes Connect\n\n\n\n> Using _deliver_ after _gym_ and _snapshot_ will automatically upload the\nlatest ipa and screenshots with no other configuration\nIf you don't want a PDF report for App Store builds, use the `:force` option.\nThis is useful when running _fastlane_ on your Continuous Integration server: `deliver(force: true)`\nIf your account is on multiple teams and you need to tell the `iTMSTransporter`\nwhich 'provider' to use, you can set the `itc_provider` option to pass this info.\n\ndeliver | \n-----|----\nSupported platforms | ios, mac\nAuthor | @KrauseFx\n\n\n\n\n\n\n1 Example\n\n\n\n\u0002wzxhzdk:140\u0003\n\n\n\n\n\n\n\n\n\n\nParameters\n\n\nKey | Description\n----|------------\n  `username` | Your Apple ID Username\n  `app_identifier` | The bundle identifier of your app\n  `app` | The app ID of the app you want to use/modify\n  `edit_live` | Modify live metadata, this option disables ipa upload and screenshot upload\n  `ipa` | Path to your ipa file\n  `pkg` | Path to your pkg file\n  `platform` | The platform to use (optional)\n  `metadata_path` | Path to the folder containing the metadata files\n  `screenshots_path` | Path to the folder containing the screenshots\n  `skip_binary_upload` | Skip uploading an ipa or pkg to iTunes Connect\n  `skip_screenshots` | Don't upload the screenshots\n  `app_version` | The version that should be edited or created\n  `skip_metadata` | Don't upload the metadata (e.g. title, description). This will still upload screenshots\n  `skip_app_version_update` | Don't update app version for submission\n  `force` | Skip the HTML report file verification\n  `submit_for_review` | Submit the new version for Review after uploading everything\n  `automatic_release` | Should the app be automatically released once it's approved?\n  `phased_release` | Enable the phased release feature of iTC\n  `price_tier` | The price tier of this application\n  `build_number` | If set the given build number (already uploaded to iTC) will be used instead of the current built one\n  `app_rating_config_path` | Path to the app rating's config\n  `submission_information` | Extra information for the submission (e.g. third party content)\n  `team_id` | The ID of your iTunes Connect team if you're in multiple teams\n  `team_name` | The name of your iTunes Connect team if you're in multiple teams\n  `dev_portal_team_id` | The short ID of your Developer Portal team, if you're in multiple teams. Different from your iTC team ID!\n  `dev_portal_team_name` | The name of your Developer Portal team if you're in multiple teams\n  `itc_provider` | The provider short name to be used with the iTMSTransporter to identify your team\n  `overwrite_screenshots` | Clear all previously uploaded screenshots before uploading the new ones\n  `run_precheck_before_submit` | Run precheck before submitting to app review\n  `precheck_default_rule_level` | The default rule level unless otherwise configured\n  `app_icon` | Metadata: The path to the app icon\n  `apple_watch_app_icon` | Metadata: The path to the Apple Watch app icon\n  `copyright` | Metadata: The copyright notice\n  `primary_category` | Metadata: The english name of the primary category (e.g. `Business`, `Books`)\n  `secondary_category` | Metadata: The english name of the secondary category (e.g. `Business`, `Books`)\n  `primary_first_sub_category` | Metadata: The english name of the primary first sub category (e.g. `Educational`, `Puzzle`)\n  `primary_second_sub_category` | Metadata: The english name of the primary second sub category (e.g. `Educational`, `Puzzle`)\n  `secondary_first_sub_category` | Metadata: The english name of the secondary first sub category (e.g. `Educational`, `Puzzle`)\n  `secondary_second_sub_category` | Metadata: The english name of the secondary second sub category (e.g. `Educational`, `Puzzle`)\n  `trade_representative_contact_information` | Metadata: A hash containing the trade representative contact information\n  `app_review_information` | Metadata: A hash containing the review information\n  `description` | Metadata: The localised app description\n  `name` | Metadata: The localised app name\n  `subtitle` | Metadata: The localised app subtitle\n  `keywords` | Metadata: An array of localised keywords\n  `promotional_text` | Metadata: An array of localised promotional texts\n  `release_notes` | Metadata: Localised release notes for this version\n  `privacy_url` | Metadata: Localised privacy url\n  `support_url` | Metadata: Localised support url\n  `marketing_url` | Metadata: Localised marketing url\n\n\n\n\n\n\n\n\n\n### supply\n\nUpload metadata, screenshots and binaries to Google Play\n\n\n\n> More information: https://github.com/fastlane/fastlane/tree/master/supply\n\nsupply | \n-----|----\nSupported platforms | android\nAuthor | @KrauseFx\n\n\n\n\n\n\n1 Example\n\n\n\n\u0002wzxhzdk:141\u0003\n\n\n\n\n\n\n\n\n\n\nParameters\n\n\nKey | Description\n----|------------\n  `package_name` | The package name of the application to use\n  `track` | The track of the application to use: production, beta, alpha, rollout\n  `rollout` | The percentage of the user fraction when uploading to the rollout track\n  `metadata_path` | Path to the directory containing the metadata files\n  `key` | [DEPRECATED!] Use --json_key instead - The p12 File used to authenticate with Google\n  `issuer` | [DEPRECATED!] Use --json_key instead - The issuer of the p12 file (email address of the service account)\n  `json_key` | The service account json file used to authenticate with Google\n  `json_key_data` | The service account json used to authenticate with Google\n  `apk` | Path to the APK file to upload\n  `apk_paths` | An array of paths to APK files to upload\n  `skip_upload_apk` | Whether to skip uploading APK\n  `skip_upload_metadata` | Whether to skip uploading metadata\n  `skip_upload_images` | Whether to skip uploading images, screenshots not included\n  `skip_upload_screenshots` | Whether to skip uploading SCREENSHOTS\n  `track_promote_to` | The track to promote to: production, beta, alpha, rollout\n  `validate_only` | Only validate changes with Google Play rather than actually publish\n  `mapping` | Path to the mapping file to upload\n  `mapping_paths` | An array of paths to mapping files to upload\n  `root_url` | Root URL for the Google Play API. The provided URL will be used for API calls in place of https://www.googleapis.com/\n  `check_superseded_tracks` | Check the other tracks for superseded versions and disable them\n\n\n\n\n\n\n\n\n\n### appstore\n\nAlias for the deliver action\n\n\n\n\n\nappstore | \n-----|----\nSupported platforms | ios, mac\nAuthor | @KrauseFx\n\n\n\n\n\n\n1 Example\n\n\n\n\u0002wzxhzdk:142\u0003\n\n\n\n\n\n\n\n\n\n\nParameters\n\n\nKey | Description\n----|------------\n  `username` | Your Apple ID Username\n  `app_identifier` | The bundle identifier of your app\n  `app` | The app ID of the app you want to use/modify\n  `edit_live` | Modify live metadata, this option disables ipa upload and screenshot upload\n  `ipa` | Path to your ipa file\n  `pkg` | Path to your pkg file\n  `platform` | The platform to use (optional)\n  `metadata_path` | Path to the folder containing the metadata files\n  `screenshots_path` | Path to the folder containing the screenshots\n  `skip_binary_upload` | Skip uploading an ipa or pkg to iTunes Connect\n  `skip_screenshots` | Don't upload the screenshots\n  `app_version` | The version that should be edited or created\n  `skip_metadata` | Don't upload the metadata (e.g. title, description). This will still upload screenshots\n  `skip_app_version_update` | Don't update app version for submission\n  `force` | Skip the HTML report file verification\n  `submit_for_review` | Submit the new version for Review after uploading everything\n  `automatic_release` | Should the app be automatically released once it's approved?\n  `phased_release` | Enable the phased release feature of iTC\n  `price_tier` | The price tier of this application\n  `build_number` | If set the given build number (already uploaded to iTC) will be used instead of the current built one\n  `app_rating_config_path` | Path to the app rating's config\n  `submission_information` | Extra information for the submission (e.g. third party content)\n  `team_id` | The ID of your iTunes Connect team if you're in multiple teams\n  `team_name` | The name of your iTunes Connect team if you're in multiple teams\n  `dev_portal_team_id` | The short ID of your Developer Portal team, if you're in multiple teams. Different from your iTC team ID!\n  `dev_portal_team_name` | The name of your Developer Portal team if you're in multiple teams\n  `itc_provider` | The provider short name to be used with the iTMSTransporter to identify your team\n  `overwrite_screenshots` | Clear all previously uploaded screenshots before uploading the new ones\n  `run_precheck_before_submit` | Run precheck before submitting to app review\n  `precheck_default_rule_level` | The default rule level unless otherwise configured\n  `app_icon` | Metadata: The path to the app icon\n  `apple_watch_app_icon` | Metadata: The path to the Apple Watch app icon\n  `copyright` | Metadata: The copyright notice\n  `primary_category` | Metadata: The english name of the primary category (e.g. `Business`, `Books`)\n  `secondary_category` | Metadata: The english name of the secondary category (e.g. `Business`, `Books`)\n  `primary_first_sub_category` | Metadata: The english name of the primary first sub category (e.g. `Educational`, `Puzzle`)\n  `primary_second_sub_category` | Metadata: The english name of the primary second sub category (e.g. `Educational`, `Puzzle`)\n  `secondary_first_sub_category` | Metadata: The english name of the secondary first sub category (e.g. `Educational`, `Puzzle`)\n  `secondary_second_sub_category` | Metadata: The english name of the secondary second sub category (e.g. `Educational`, `Puzzle`)\n  `trade_representative_contact_information` | Metadata: A hash containing the trade representative contact information\n  `app_review_information` | Metadata: A hash containing the review information\n  `description` | Metadata: The localised app description\n  `name` | Metadata: The localised app name\n  `subtitle` | Metadata: The localised app subtitle\n  `keywords` | Metadata: An array of localised keywords\n  `promotional_text` | Metadata: An array of localised promotional texts\n  `release_notes` | Metadata: Localised release notes for this version\n  `privacy_url` | Metadata: Localised privacy url\n  `support_url` | Metadata: Localised support url\n  `marketing_url` | Metadata: Localised marketing url\n\n\n\n\n\n\n\n\n\n\nSource Control\n\n\n\n\n\n\n\n### ensure_git_status_clean\n\nRaises an exception if there are uncommitted git changes\n\n\n\n> A sanity check to make sure you are working in a repo that is clean. Especially\nuseful to put at the beginning of your Fastfile in the `before_all` block, if\nsome of your other actions will touch your filesystem, do things to your git repo,\nor just as a general reminder to save your work. Also needed as a prerequisite for\nsome other actions like `reset_git_repo`.\n\nensure_git_status_clean | \n-----|----\nSupported platforms | ios, android, mac\nAuthor | @lmirosevic, @antondomashnev\n\n\n\n\n\n\n1 Example\n\n\n\n\u0002wzxhzdk:143\u0003\n\n\n\n\n\n\n\n\n\n\nParameters\n\n\nKey | Description\n----|------------\n  `show_uncommitted_changes` | The flag whether to show uncommitted changes if the repo is dirty\n\n\n\n\n\n\n\n\n\n### git_branch\n\nReturns the name of the current git branch, possibly as managed by CI ENV vars\n\n\n\n> If no branch could be found, this action will return an empty string\n\ngit_branch | \n-----|----\nSupported platforms | ios, android, mac\nAuthor | @KrauseFx\n\n\n\n\n\n\n1 Example\n\n\n\n\u0002wzxhzdk:144\u0003\n\n\n\n\n\n\n\n\n\n\n\n\n### last_git_commit\n\nReturn last git commit hash, abbreviated commit hash, commit message and author\n\n\n\n\n\nlast_git_commit | \n-----|----\nSupported platforms | ios, android, mac\nAuthor | @ngutman\nReturns | Returns the following dict: {commit_hash: \"commit hash\", abbreviated_commit_hash: \"abbreviated commit hash\" author: \"Author\", message: \"commit message\"}\n\n\n\n\n\n\n1 Example\n\n\n\n\u0002wzxhzdk:145\u0003\n\n\n\n\n\n\n\n\n\n\n\n\n### reset_git_repo\n\nResets git repo to a clean state by discarding uncommitted changes\n\n\n\n> This action will reset your git repo to a clean state, discarding any uncommitted and untracked changes. Useful in case you need to revert the repo back to a clean state, e.g. after the fastlane run. Untracked files like `.env` will also be deleted, unless `:skip_clean` is true. It's a pretty drastic action so it comes with a sort of safety latch. It will only proceed with the reset if either of these conditions are met: You have called the ensure_git_status_clean action prior to calling this action. This ensures that your repo started off in a clean state, so the only things that will get destroyed by this action are files that are created as a byproduct of the fastlane run.\n\nreset_git_repo | \n-----|----\nSupported platforms | ios, android, mac\nAuthor | @lmirosevic\n\n\n\n\n\n\n4 Examples\n\n\n\n\u0002wzxhzdk:146\u0003\n\n\n\n\u0002wzxhzdk:147\u0003\n\n\n\n\u0002wzxhzdk:148\u0003\n\n\n\n\u0002wzxhzdk:149\u0003\n\n\n\n\n\n\n\n\n\n\nParameters\n\n\nKey | Description\n----|------------\n  `files` | Array of files the changes should be discarded. If not given, all files will be discarded\n  `force` | Skip verifying of previously clean state of repo. Only recommended in combination with `files` option\n  `skip_clean` | Skip 'git clean' to avoid removing untracked files like `.env`. Defaults to false\n  `disregard_gitignore` | Setting this to true will clean the whole repository, ignoring anything in your local .gitignore. Set this to true if you want the equivalent of a fresh clone, and for all untracked and ignore files to also be removed\n  `exclude` | You can pass a string, or array of, file pattern(s) here which you want to have survive the cleaning process, and remain on disk, e.g. to leave the `artifacts` directory you would specify `exclude: 'artifacts'`. Make sure this pattern is also in your gitignore! See the gitignore documentation for info on patterns\n\n\n\n\n\n\n\n\n\n### changelog_from_git_commits\n\nCollect git commit messages into a changelog\n\n\n\n> By default, messages will be collected back to the last tag, but the range can be controlled\n\nchangelog_from_git_commits | \n-----|----\nSupported platforms | ios, android, mac\nAuthor | @mfurtak, @asfalcone, @SiarheiFedartsou, @allewun\nReturns | Returns a String containing your formatted git commits\n\n\n\n\n\n\n2 Examples\n\n\n\n\u0002wzxhzdk:150\u0003\n\n\n\n\u0002wzxhzdk:151\u0003\n\n\n\n\n\n\n\n\n\n\nParameters\n\n\nKey | Description\n----|------------\n  `between` | Array containing two Git revision values between which to collect messages, you mustn't use it with :commits_count key at the same time\n  `commits_count` | Number of commits to include in changelog, you mustn't use it with :between key at the same time\n  `pretty` | The format applied to each commit while generating the collected value\n  `date_format` | The date format applied to each commit while generating the collected value\n  `ancestry_path` | Whether or not to use ancestry-path param\n  `tag_match_pattern` | A glob(7) pattern to match against when finding the last git tag\n  `match_lightweight_tag` | Whether or not to match a lightweight tag when searching for the last one\n  `include_merges` | Whether or not to include any commits that are merges\n\u001b[31m(DEPRECATED - use :merge_commit_filtering)\u001b[0m\n  `merge_commit_filtering` | Controls inclusion of merge commits when collecting the changelog.\nValid values: 'include_merges', 'exclude_merges', 'only_include_merges'\n\n\n\n\n\n\n\n\n\n### number_of_commits\n\nReturn the number of commits in current git branch\n\n\n\n> You can use this action to get the number of commits of this branch. This is useful if you want to set the build number to the number of commits. See `fastlane actions number_of_commits` for more details\n\nnumber_of_commits | \n-----|----\nSupported platforms | ios, android, mac\nAuthor | @onevcat, @samuelbeek\nReturns | The total number of all commits in current git branch\n\n\n\n\n\n\n2 Examples\n\n\n\n\u0002wzxhzdk:152\u0003\n\n\n\n\u0002wzxhzdk:153\u0003\n\n\n\n\n\n\n\n\n\n\nParameters\n\n\nKey | Description\n----|------------\n  `all` | Returns number of all commits instead of current branch\n\n\n\n\n\n\n\n\n\n### git_pull\n\nExecutes a simple git pull command\n\n\n\n\n\ngit_pull | \n-----|----\nSupported platforms | ios, android, mac\nAuthor | @KrauseFx, @JaviSoto\n\n\n\n\n\n\n2 Examples\n\n\n\n\u0002wzxhzdk:154\u0003\n\n\n\n\u0002wzxhzdk:155\u0003\n\n\n\n\n\n\n\n\n\n\nParameters\n\n\nKey | Description\n----|------------\n  `only_tags` | Simply pull the tags, and not bring new commits to the current branch from the remote\n\n\n\n\n\n\n\n\n\n### last_git_tag\n\nGet the most recent git tag\n\n\n\n> If you are using this action on a **shallow clone**, *the default with some CI systems like Bamboo*, you need to ensure that you have also have pulled all the git tags appropriately. Assuming your git repo has the correct remote set you can issue `sh('git fetch --tags')`\n\nlast_git_tag | \n-----|----\nSupported platforms | ios, android, mac\nAuthor | @KrauseFx\n\n\n\n\n\n\n1 Example\n\n\n\n\u0002wzxhzdk:156\u0003\n\n\n\n\n\n\n\n\n\n\n\n\n### push_to_git_remote\n\nPush local changes to the remote branch\n\n\n\n> Lets you push your local commits to a remote git repo. Useful if you make local changes such as adding a version bump commit (using `commit_version_bump`) or a git tag (using 'add_git_tag') on a CI server, and you want to push those changes back to your canonical/main repo.\n\npush_to_git_remote | \n-----|----\nSupported platforms | ios, android, mac\nAuthor | @lmirosevic\n\n\n\n\n\n\n2 Examples\n\n\n\n\u0002wzxhzdk:157\u0003\n\n\n\n\u0002wzxhzdk:158\u0003\n\n\n\n\n\n\n\n\n\n\nParameters\n\n\nKey | Description\n----|------------\n  `local_branch` | The local branch to push from. Defaults to the current branch\n  `remote_branch` | The remote branch to push to. Defaults to the local branch\n  `force` | Force push to remote. Defaults to false\n  `tags` | Whether tags are pushed to remote. Defaults to true\n  `remote` | The remote to push to. Defaults to `origin`\n\n\n\n\n\n\n\n\n\n### add_git_tag\n\nThis will add an annotated git tag to the current branch\n\n\n\n> This will automatically tag your build with the following format: `\n/\n/\n`, where:\n- `grouping` is just to keep your tags organised under one 'folder', defaults to 'builds'\n- `lane` is the name of the current fastlane lane\n- `prefix` is anything you want to stick in front of the version number, e.g. 'v'\n- `build_number` is the build number, which defaults to the value emitted by the `increment_build_number` action\nFor example for build 1234 in the 'appstore' lane it will tag the commit with `builds/appstore/1234`\n\nadd_git_tag | \n-----|----\nSupported platforms | ios, android, mac\nAuthor | @lmirosevic, @maschall\n\n\n\n\n\n\n3 Examples\n\n\n\n\u0002wzxhzdk:159\u0003\n\n\n\n\u0002wzxhzdk:160\u0003\n\n\n\n\u0002wzxhzdk:161\u0003\n\n\n\n\n\n\n\n\n\n\nParameters\n\n\nKey | Description\n----|------------\n  `tag` | Define your own tag text. This will replace all other parameters\n  `grouping` | Is used to keep your tags organised under one 'folder'. Defaults to 'builds'\n  `prefix` | Anything you want to put in front of the version number (e.g. 'v')\n  `build_number` | The build number. Defaults to the result of increment_build_number if you're using it\n  `message` | The tag message. Defaults to the tag's name\n  `commit` | The commit or object where the tag will be set. Defaults to the current HEAD\n  `force` | Force adding the tag\n  `sign` | Make a GPG-signed tag, using the default e-mail address's key\n\n\n\n\n\n\n\n\n\n### commit_version_bump\n\nCreates a 'Version Bump' commit. Run after `increment_build_number`\n\n\n\n> This action will create a 'Version Bump' commit in your repo. Useful in conjunction with `increment_build_number`.\nIt checks the repo to make sure that only the relevant files have changed, these are the files that `increment_build_number` (`agvtool`) touches:\n- All .plist files\n- The `.xcodeproj/project.pbxproj` file\nThen commits those files to the repo.\nCustomise the message with the `:message` option, defaults to 'Version Bump'\nIf you have other uncommitted changes in your repo, this action will fail. If you started off in a clean repo, and used the _ipa_ and or _sigh_ actions, then you can use the `clean_build_artifacts` action to clean those temporary files up before running this action.\n\ncommit_version_bump | \n-----|----\nSupported platforms | ios, mac\nAuthor | @lmirosevic\n\n\n\n\n\n\n5 Examples\n\n\n\n\u0002wzxhzdk:162\u0003\n\n\n\n\u0002wzxhzdk:163\u0003\n\n\n\n\u0002wzxhzdk:164\u0003\n\n\n\n\u0002wzxhzdk:165\u0003\n\n\n\n\u0002wzxhzdk:166\u0003\n\n\n\n\n\n\n\n\n\n\nParameters\n\n\nKey | Description\n----|------------\n  `message` | The commit message when committing the version bump\n  `xcodeproj` | The path to your project file (Not the workspace). If you have only one, this is optional\n  `force` | Forces the commit, even if other files than the ones containing the version number have been modified\n  `settings` | Include Settings.bundle/Root.plist with version bump\n  `ignore` | A regular expression used to filter matched plist files to be modified\n\n\n\n\n\n\n\n\n\n### git_tag_exists\n\nChecks if the git tag with the given name exists in the current repo\n\n\n\n\n\ngit_tag_exists | \n-----|----\nSupported platforms | ios, android, mac\nAuthor | @antondomashnev\nReturns | Boolean value whether the tag exists or not\n\n\n\n\n\n\n1 Example\n\n\n\n\u0002wzxhzdk:167\u0003\n\n\n\n\n\n\n\n\n\n\nParameters\n\n\nKey | Description\n----|------------\n  `tag` | The tag name that should be checked\n\n\n\n\n\n\n\n\n\n### ensure_git_branch\n\nRaises an exception if not on a specific git branch\n\n\n\n> This action will check if your git repo is checked out to a specific branch.\nYou may only want to make releases from a specific branch, so `ensure_git_branch`\nwill stop a lane if it was accidentally executed on an incorrect branch.\n\nensure_git_branch | \n-----|----\nSupported platforms | ios, android, mac\nAuthor | @dbachrach, @Liquidsoul\n\n\n\n\n\n\n2 Examples\n\n\n\n\u0002wzxhzdk:168\u0003\n\n\n\n\u0002wzxhzdk:169\u0003\n\n\n\n\n\n\n\n\n\n\nParameters\n\n\nKey | Description\n----|------------\n  `branch` | The branch that should be checked for. String that can be either the full name of the branch or a regex to match\n\n\n\n\n\n\n\n\n\n### git_commit\n\nDirectly commit the given file with the given message\n\n\n\n\n\ngit_commit | \n-----|----\nSupported platforms | ios, android, mac\nAuthor | @KrauseFx\n\n\n\n\n\n\n3 Examples\n\n\n\n\u0002wzxhzdk:170\u0003\n\n\n\n\u0002wzxhzdk:171\u0003\n\n\n\n\u0002wzxhzdk:172\u0003\n\n\n\n\n\n\n\n\n\n\nParameters\n\n\nKey | Description\n----|------------\n  `path` | The file you want to commit\n  `message` | The commit message that should be used\n\n\n\n\n\n\n\n\n\n### push_git_tags\n\nPush local tags to the remote - this will only push tags\n\n\n\n> If you only want to push the tags and nothing else, you can use the `push_git_tags` action\n\npush_git_tags | \n-----|----\nSupported platforms | ios, android, mac\nAuthor | @vittoriom\n\n\n\n\n\n\n1 Example\n\n\n\n\u0002wzxhzdk:173\u0003\n\n\n\n\n\n\n\n\n\n\nParameters\n\n\nKey | Description\n----|------------\n  `force` | Force push to remote. Defaults to false\n  `remote` | The remote to push tags to\n\n\n\n\n\n\n\n\n\n### git_add\n\nDirectly add the given file or all files\n\n\n\n\n\ngit_add | \n-----|----\nSupported platforms | ios, android, mac\nAuthor | @4brunu, @antondomashnev\n\n\n\n\n\n\n5 Examples\n\n\n\n\u0002wzxhzdk:174\u0003\n\n\n\n\u0002wzxhzdk:175\u0003\n\n\n\n\u0002wzxhzdk:176\u0003\n\n\n\n\u0002wzxhzdk:177\u0003\n\n\n\n\u0002wzxhzdk:178\u0003\n\n\n\n\n\n\n\n\n\n\nParameters\n\n\nKey | Description\n----|------------\n  `path` | The file you want to add\n  `pathspec` | The pathspec you want to add files from\n\n\n\n\n\n\n\n\n\n### get_build_number_repository\n\nGet the build number from the current repository\n\n\n\n> This action will get the **build number** according to what the SCM HEAD reports.\nCurrently supported SCMs are svn (uses root revision), git-svn (uses svn revision) and git (uses short hash) and mercurial (uses short hash or revision number).\nThere is an option, `:use_hg_revision_number`, which allows to use mercurial revision number instead of hash.\n\nget_build_number_repository | \n-----|----\nSupported platforms | ios, mac\nAuthor | @bartoszj, @pbrooks, @armadsen\nReturns | The build number from the current repository\n\n\n\n\n\n\n1 Example\n\n\n\n\u0002wzxhzdk:179\u0003\n\n\n\n\n\n\n\n\n\n\nParameters\n\n\nKey | Description\n----|------------\n  `use_hg_revision_number` | Use hg revision number instead of hash (ignored for non-hg repos)\n\n\n\n\n\n\n\n\n\n### set_github_release\n\nThis will create a new release on GitHub and upload assets for it\n\n\n\n> Creates a new release on GitHub. You must provide your GitHub Personal token\n        (get one from https://github.com/settings/tokens/new), the repository name\n        and tag name. By default that's 'master'. If the tag doesn't exist, one will be created on the commit or branch passed-in as\n        commitish. Out parameters provide the release's id, which can be used for later editing and the\n        release html link to GitHub. You can also specify a list of assets to be uploaded to the release with the upload_assets parameter.\n\nset_github_release | \n-----|----\nSupported platforms | ios, android, mac\nAuthor | @czechboy0, @tommeier\nReturns | A hash containing all relevant information of this release\nAccess things like 'html_url', 'tag_name', 'name', 'body'\n\n\n\n\n\n\n1 Example\n\n\n\n\u0002wzxhzdk:180\u0003\n\n\n\n\n\n\n\n\n\n\nParameters\n\n\nKey | Description\n----|------------\n  `repository_name` | The path to your repo, e.g. 'fastlane/fastlane'\n  `server_url` | The server url. e.g. 'https://your.internal.github.host/api/v3' (Default: 'https://api.github.com')\n  `api_token` | Personal API Token for GitHub - generate one at https://github.com/settings/tokens\n  `tag_name` | Pass in the tag name\n  `name` | Name of this release\n  `commitish` | Specifies the commitish value that determines where the Git tag is created from. Can be any branch or commit SHA. Unused if the Git tag already exists. Default: the repository's default branch (usually master)\n  `description` | Description of this release\n  `is_draft` | Whether the release should be marked as draft\n  `is_prerelease` | Whether the release should be marked as prerelease\n  `upload_assets` | Path to assets to be uploaded with the release\n\n\n\n\n\n\n\n\n\n### create_pull_request\n\nThis will create a new pull request on GitHub\n\n\n\n\n\ncreate_pull_request | \n-----|----\nSupported platforms | ios, android, mac\nAuthor | @seei, @tommeier\nReturns | The parsed JSON when successful\n\n\n\n\n\n\n1 Example\n\n\n\n\u0002wzxhzdk:181\u0003\n\n\n\n\n\n\n\n\n\n\nParameters\n\n\nKey | Description\n----|------------\n  `api_token` | Personal API Token for GitHub - generate one at https://github.com/settings/tokens\n  `repo` | The name of the repository you want to submit the pull request to\n  `title` | The title of the pull request\n  `body` | The contents of the pull request\n  `head` | The name of the branch where your changes are implemented (defaults to the current branch name)\n  `base` | The name of the branch you want your changes pulled into (defaults to `master`)\n  `api_url` | The URL of Github API - used when the Enterprise (default to `https://api.github.com`)\n\n\n\n\n\n\n\n\n\n### get_github_release\n\nThis will verify if a given release version is available on GitHub\n\n\n\n> This will return all information about a release. For example:\n              {\"url\"=>\"https://api.github.com/repos/KrauseFx/fastlane/releases/1537713\",\n                 \"assets_url\"=>\"https://api.github.com/repos/KrauseFx/fastlane/releases/1537713/assets\",\n                 \"upload_url\"=>\"https://uploads.github.com/repos/KrauseFx/fastlane/releases/1537713/assets{?name}\",\n                 \"html_url\"=>\"https://github.com/fastlane/fastlane/releases/tag/1.8.0\",\n                 \"id\"=>1537713,\n                 \"tag_name\"=>\"1.8.0\",\n                 \"target_commitish\"=>\"master\",\n                 \"name\"=>\"1.8.0 Switch Lanes \n&\n Pass Parameters\",\n                 \"draft\"=>false,\n                 \"author\"=>\n                  {\"login\"=>\"KrauseFx\",\n                   \"id\"=>869950,\n                   \"avatar_url\"=>\"https://avatars.githubusercontent.com/u/869950?v=3\",\n                   \"gravatar_id\"=>\"\",\n                   \"url\"=>\"https://api.github.com/users/KrauseFx\",\n                   \"html_url\"=>\"https://github.com/fastlane\",\n                   \"followers_url\"=>\"https://api.github.com/users/KrauseFx/followers\",\n                   \"following_url\"=>\"https://api.github.com/users/KrauseFx/following{/other_user}\",\n                   \"gists_url\"=>\"https://api.github.com/users/KrauseFx/gists{/gist_id}\",\n                   \"starred_url\"=>\"https://api.github.com/users/KrauseFx/starred{/owner}{/repo}\",\n                   \"subscriptions_url\"=>\"https://api.github.com/users/KrauseFx/subscriptions\",\n                   \"organizations_url\"=>\"https://api.github.com/users/KrauseFx/orgs\",\n                   \"repos_url\"=>\"https://api.github.com/users/KrauseFx/repos\",\n                   \"events_url\"=>\"https://api.github.com/users/KrauseFx/events{/privacy}\",\n                   \"received_events_url\"=>\"https://api.github.com/users/KrauseFx/received_events\",\n                   \"type\"=>\"User\",\n                   \"site_admin\"=>false},\n                 \"prerelease\"=>false,\n                 \"created_at\"=>\"2015-07-14T23:33:01Z\",\n                 \"published_at\"=>\"2015-07-14T23:44:10Z\",\n                 \"assets\"=>[],\n                 \"tarball_url\"=>\"https://api.github.com/repos/KrauseFx/fastlane/tarball/1.8.0\",\n                 \"zipball_url\"=>\"https://api.github.com/repos/KrauseFx/fastlane/zipball/1.8.0\",\n                 \"body\"=> ...Markdown...\n                \"This is one of the biggest updates of _fastlane_ yet\"\n              }\n\nget_github_release | \n-----|----\nSupported platforms | ios, android, mac\nAuthor | @KrauseFx, @czechboy0, @jaleksynas, @tommeier\n\n\n\n\n\n\n1 Example\n\n\n\n\u0002wzxhzdk:182\u0003\n\n\n\n\n\n\n\n\n\n\nParameters\n\n\nKey | Description\n----|------------\n  `url` | The path to your repo, e.g. 'KrauseFx/fastlane'\n  `server_url` | The server url. e.g. 'https://your.github.server/api/v3' (Default: 'https://api.github.com')\n  `version` | The version tag of the release to check\n  `api_token` | GitHub Personal Token (required for private repositories)\n\n\n\n\n\n\n\n\n\n### hg_ensure_clean_status\n\nRaises an exception if there are uncommitted hg changes\n\n\n\n> Along the same lines as the [`ensure_git_status_clean`](#ensure_git_status_clean) action, this is a sanity check to ensure the working mercurial repo is clean. Especially useful to put at the beginning of your Fastfile in the `before_all` block.\n\nhg_ensure_clean_status | \n-----|----\nSupported platforms | ios, android, mac\nAuthor | @sjrmanning\n\n\n\n\n\n\n1 Example\n\n\n\n\u0002wzxhzdk:183\u0003\n\n\n\n\n\n\n\n\n\n\n\n\n### hg_commit_version_bump\n\nThis will commit a version bump to the hg repo\n\n\n\n> The mercurial equivalent of the [`commit_version_bump`](#commit_version_bump) git action. Like the git version, it is useful in conjunction with [`increment_build_number`](#increment_build_number).\nIt checks the repo to make sure that only the relevant files have changed, these are the files that `increment_build_number` (`agvtool`) touches:\n- All .plist files\n- The `.xcodeproj/project.pbxproj` file\nThen commits those files to the repo.\nCustomise the message with the `:message` option, defaults to 'Version Bump'\nIf you have other uncommitted changes in your repo, this action will fail. If you started off in a clean repo, and used the _ipa_ and or _sigh_ actions, then you can use the [`clean_build_artifacts`](#clean_build_artifacts) action to clean those temporary files up before running this action.\n\nhg_commit_version_bump | \n-----|----\nSupported platforms | ios, android, mac\nAuthor | @sjrmanning\n\n\n\n\n\n\n2 Examples\n\n\n\n\u0002wzxhzdk:184\u0003\n\n\n\n\u0002wzxhzdk:185\u0003\n\n\n\n\n\n\n\n\n\n\nParameters\n\n\nKey | Description\n----|------------\n  `message` | The commit message when committing the version bump\n  `xcodeproj` | The path to your project file (Not the workspace). If you have only one, this is optional\n  `force` | Forces the commit, even if other files than the ones containing the version number have been modified\n  `test_dirty_files` | A list of dirty files passed in for testing\n  `test_expected_files` | A list of expected changed files passed in for testing\n\n\n\n\n\n\n\n\n\n### hg_push\n\nThis will push changes to the remote hg repository\n\n\n\n> The mercurial equivalent of [`push_to_git_remote`](#push_to_git_remote) \u2014 pushes your local commits to a remote mercurial repo. Useful when local changes such as adding a version bump commit or adding a tag are part of your lane\u2019s actions.\n\nhg_push | \n-----|----\nSupported platforms | ios, android, mac\nAuthor | @sjrmanning\n\n\n\n\n\n\n2 Examples\n\n\n\n\u0002wzxhzdk:186\u0003\n\n\n\n\u0002wzxhzdk:187\u0003\n\n\n\n\n\n\n\n\n\n\nParameters\n\n\nKey | Description\n----|------------\n  `force` | Force push to remote. Defaults to false\n  `destination` | The destination to push to\n\n\n\n\n\n\n\n\n\n### hg_add_tag\n\nThis will add a hg tag to the current branch\n\n\n\n\n\nhg_add_tag | \n-----|----\nSupported platforms | ios, android, mac\nAuthor | @sjrmanning\n\n\n\n\n\n\n1 Example\n\n\n\n\u0002wzxhzdk:188\u0003\n\n\n\n\n\n\n\n\n\n\nParameters\n\n\nKey | Description\n----|------------\n  `tag` | Tag to create\n\n\n\n\n\n\n\n\n\n### github_api\n\nCall a GitHub API endpoint and get the resulting JSON response\n\n\n\n> Calls any GitHub API endpoint. You must provide your GitHub Personal token (get one from https://github.com/settings/tokens/new).\n          Out parameters provide the status code and the full response JSON if valid, otherwise the raw response body.\n          Documentation: https://developer.github.com/v3\n\ngithub_api | \n-----|----\nSupported platforms | ios, android, mac\nAuthor | @tommeier\nReturns | A hash including the HTTP status code (:status), the response body (:body), and if valid JSON has been returned the parsed JSON (:json).\n\n\n\n\n\n\n2 Examples\n\n\n\n\u0002wzxhzdk:189\u0003\n\n\n\n\u0002wzxhzdk:190\u0003\n\n\n\n\n\n\n\n\n\n\nParameters\n\n\nKey | Description\n----|------------\n  `server_url` | The server url. e.g. 'https://your.internal.github.host/api/v3' (Default: 'https://api.github.com')\n  `api_token` | Personal API Token for GitHub - generate one at https://github.com/settings/tokens\n  `http_method` | The HTTP method. e.g. GET / POST\n  `body` | The request body in JSON or hash format\n  `raw_body` | The request body taken vertabim instead of as JSON, useful for file uploads\n  `path` | The endpoint path. e.g. '/repos/:owner/:repo/readme'\n  `url` | The complete full url - used instead of path. e.g. 'https://uploads.github.com/repos/fastlane...'\n  `error_handlers` | Optional error handling hash based on status code, or pass '*' to handle all errors\n  `headers` | Optional headers to apply\n  `secure` | Optionally disable secure requests (ssl_verify_peer)\n\n\n\n\n\n\n\n\n\n### commit_github_file\n\nThis will commit a file directly on GitHub via the API\n\n\n\n> Commits a file directly to GitHub. You must provide your GitHub Personal token\n        (get one from https://github.com/settings/tokens/new), the repository name and the relative file path from the root git project.\n        Out parameters provide the commit sha created, which can be used for later usage for examples such as releases, the direct download link and the full response JSON.\n        Documentation: https://developer.github.com/v3/repos/contents/#create-a-file\n\ncommit_github_file | \n-----|----\nSupported platforms | ios, android, mac\nAuthor | @tommeier\nReturns | A hash containing all relevant information for this commit\nAccess things like 'html_url', 'sha', 'message'\n\n\n\n\n\n\n1 Example\n\n\n\n\u0002wzxhzdk:191\u0003\n\n\n\n\n\n\n\n\n\n\nParameters\n\n\nKey | Description\n----|------------\n  `repository_name` | The path to your repo, e.g. 'fastlane/fastlane'\n  `server_url` | The server url. e.g. 'https://your.internal.github.host/api/v3' (Default: 'https://api.github.com')\n  `api_token` | Personal API Token for GitHub - generate one at https://github.com/settings/tokens\n  `branch` | The branch that the file should be committed on (default: master)\n  `path` | The relative path to your file from project root e.g. assets/my_app.xcarchive\n  `message` | The commit message. Defaults to the file name\n  `secure` | Optionally disable secure requests (ssl_verify_peer)\n\n\n\n\n\n\n\n\n\n\nNotifications\n\n\n\n\n\n\n\n### slack\n\nSend a success/error message to your Slack group\n\n\n\n> Create an Incoming WebHook and export this as `SLACK_URL`. Can send a message to **#channel** (by default), a direct message to **@username** or a message to a private group **group** with success (green) or failure (red) status.\n\nslack | \n-----|----\nSupported platforms | ios, android, mac\nAuthor | @KrauseFx\n\n\n\n\n\n\n2 Examples\n\n\n\n\u0002wzxhzdk:192\u0003\n\n\n\n\u0002wzxhzdk:193\u0003\n\n\n\n\n\n\n\n\n\n\nParameters\n\n\nKey | Description\n----|------------\n  `message` | The message that should be displayed on Slack. This supports the standard Slack markup language\n  `channel` | #channel or @username\n  `use_webhook_configured_username_and_icon` | Use webhook's default username and icon settings? (true/false)\n  `slack_url` | Create an Incoming WebHook for your Slack group\n  `username` | Overrides the webhook's username property if use_webhook_configured_username_and_icon is false\n  `icon_url` | Overrides the webhook's image property if use_webhook_configured_username_and_icon is false\n  `payload` | Add additional information to this post. payload must be a hash containing any key with any value\n  `default_payloads` | Remove some of the default payloads. More information about the available payloads on GitHub\n  `attachment_properties` | Merge additional properties in the slack attachment, see https://api.slack.com/docs/attachments\n  `success` | Was this build successful? (true/false)\n\n\n\n\n\n\n\n\n\n### notification\n\nDisplay a macOS notification with custom message and title\n\n\n\n\n\nnotification | \n-----|----\nSupported platforms | ios, android, mac\nAuthor | @champo, @cbowns, @KrauseFx, @amarcadet, @dusek\n\n\n\n\n\n\n1 Example\n\n\n\n\u0002wzxhzdk:194\u0003\n\n\n\n\n\n\n\n\n\n\nParameters\n\n\nKey | Description\n----|------------\n  `title` | The title to display in the notification\n  `subtitle` | A subtitle to display in the notification\n  `message` | The message to display in the notification\n  `sound` | The name of a sound to play when the notification appears (names are listed in Sound Preferences)\n  `activate` | Bundle identifier of application to be opened when the notification is clicked\n  `app_icon` | The URL of an image to display instead of the application icon (Mavericks+ only)\n  `content_image` | The URL of an image to display attached to the notification (Mavericks+ only)\n  `open` | URL of the resource to be opened when the notification is clicked\n  `execute` | Shell command to run when the notification is clicked\n\n\n\n\n\n\n\n\n\n### hipchat\n\nSend a error/success message to HipChat\n\n\n\n> Send a message to **room** (by default) or a direct message to **@username** with success (green) or failure (red) status.\n\nhipchat | \n-----|----\nSupported platforms | ios, android, mac\nAuthor | @jingx23\n\n\n\n\n\n\n1 Example\n\n\n\n\u0002wzxhzdk:195\u0003\n\n\n\n\n\n\n\n\n\n\nParameters\n\n\nKey | Description\n----|------------\n  `message` | The message to post on HipChat\n  `channel` | The room or @username\n  `api_token` | Hipchat API Token\n  `custom_color` | Specify a custom color, this overrides the success boolean. Can be one of 'yellow', 'red', 'green', 'purple', 'gray', or 'random'\n  `success` | Was this build successful? (true/false)\n  `version` | Version of the Hipchat API. Must be 1 or 2\n  `notify_room` | Should the people in the room be notified? (true/false)\n  `api_host` | The host of the HipChat-Server API\n  `message_format` | Format of the message to post. Must be either 'html' or 'text'\n  `include_html_header` | Should html formatted messages include a preformatted header? (true/false)\n  `from` | Name the message will appear to be sent from\n\n\n\n\n\n\n\n\n\n### mailgun\n\nSend a success/error message to an email group\n\n\n\n\n\nmailgun | \n-----|----\nSupported platforms | ios, android, mac\nAuthor | @thiagolioy\n\n\n\n\n\n\n2 Examples\n\n\n\n\u0002wzxhzdk:196\u0003\n\n\n\n\u0002wzxhzdk:197\u0003\n\n\n\n\n\n\n\n\n\n\nParameters\n\n\nKey | Description\n----|------------\n  `mailgun_sandbox_domain` | Mailgun sandbox domain postmaster for your mail. Please use postmaster instead\n  `mailgun_sandbox_postmaster` | Mailgun sandbox domain postmaster for your mail. Please use postmaster instead\n  `mailgun_apikey` | Mailgun apikey for your mail. Please use postmaster instead\n  `postmaster` | Mailgun sandbox domain postmaster for your mail\n  `apikey` | Mailgun apikey for your mail\n  `to` | Destination of your mail\n  `from` | Mailgun sender name\n  `message` | Message of your mail\n  `subject` | Subject of your mail\n  `success` | Was this build successful? (true/false)\n  `app_link` | App Release link\n  `ci_build_link` | CI Build Link\n  `template_path` | Mail HTML template\n  `reply_to` | Mail Reply to\n  `attachment` | Mail Attachment filenames, either an array or just one string\n\n\n\n\n\n\n\n\n\n### chatwork\n\nSend a success/error message to ChatWork\n\n\n\n> Information on how to obtain an API token: http://developer.chatwork.com/ja/authenticate.html\n\nchatwork | \n-----|----\nSupported platforms | ios, android, mac\nAuthor | @astronaughts\n\n\n\n\n\n\n1 Example\n\n\n\n\u0002wzxhzdk:198\u0003\n\n\n\n\n\n\n\n\n\n\nParameters\n\n\nKey | Description\n----|------------\n  `api_token` | ChatWork API Token\n  `message` | The message to post on ChatWork\n  `roomid` | The room ID\n  `success` | Was this build successful? (true/false)\n\n\n\n\n\n\n\n\n\n### ifttt\n\nConnect to the IFTTT Maker Channel. https://ifttt.com/maker\n\n\n\n> Connect to the IFTTT [Maker Channel](https://ifttt.com/maker). An IFTTT Recipe has two components: a Trigger and an Action. In this case, the Trigger will fire every time the Maker Channel receives a web request (made by this _fastlane_ action) to notify it of an event. The Action can be anything that IFTTT supports: email, SMS, etc.\n\nifttt | \n-----|----\nSupported platforms | ios, android, mac\nAuthor | @vpolouchkine\n\n\n\n\n\n\n1 Example\n\n\n\n\u0002wzxhzdk:199\u0003\n\n\n\n\n\n\n\n\n\n\nParameters\n\n\nKey | Description\n----|------------\n  `api_key` | API key\n  `event_name` | The name of the event that will be triggered\n  `value1` | Extra data sent with the event\n  `value2` | Extra data sent with the event\n  `value3` | Extra data sent with the event\n\n\n\n\n\n\n\n\n\n### flock\n\nSend a message to a Flock group\n\n\n\n> To obtain the token, create a new [incoming message webhook](https://dev.flock.co/wiki/display/FlockAPI/Incoming+Webhooks)\nin your Flock admin panel.\n\nflock | \n-----|----\nSupported platforms | ios, android, mac\nAuthor | @Manav\n\n\n\n\n\n\n1 Example\n\n\n\n\u0002wzxhzdk:200\u0003\n\n\n\n\n\n\n\n\n\n\nParameters\n\n\nKey | Description\n----|------------\n  `message` | Message text\n  `token` | Token for the Flock incoming webhook\n  `base_url` | Base URL of the Flock incoming message webhook\n\n\n\n\n\n\n\n\n\n### twitter\n\nPost a tweet on Twitter.com\n\n\n\n> Post a tweet on twitter. Requires you to setup an app on twitter.com and obtain consumer and access_token.\n\ntwitter | \n-----|----\nSupported platforms | ios, android, mac\nAuthor | @hjanuschka\n\n\n\n\n\n\n1 Example\n\n\n\n\u0002wzxhzdk:201\u0003\n\n\n\n\n\n\n\n\n\n\nParameters\n\n\nKey | Description\n----|------------\n  `consumer_key` | Consumer Key\n  `consumer_secret` | Consumer Secret\n  `access_token` | Access Token\n  `access_token_secret` | Access Token Secret\n  `message` | The tweet\n\n\n\n\n\n\n\n\n\n### typetalk\n\nPost a message to Typetalk\n\n\n\n\n\ntypetalk | \n-----|----\nSupported platforms | ios, android, mac\nAuthor | @Nulab Inc.\n\n\n\n\n\n\n1 Example\n\n\n\n\u0002wzxhzdk:202\u0003\n\n\n\n\n\n\n\n\n\n\n\n\n\nDeprecated\n\n\n\n\n\n\n\n### s3\n\nGenerates a plist file and uploads all to AWS S3\n\n> Please use the `aws_s3` plugin instead.\nInstall using `fastlane add_plugin aws_s3`.\n\n> Upload a new build to Amazon S3 to distribute the build to beta testers.  Works for both Ad Hoc and Enterprise signed applications. This step will generate the necessary HTML, plist, and version files for you. It is recommended to **not** store the AWS access keys in the `Fastfile`. The uploaded `version.json` file provides an easy way for apps to poll if a new update is available.\n\ns3 | \n-----|----\nSupported platforms | ios\nAuthor | @joshdholtz\n\n\n\n\n\n\n2 Examples\n\n\n\n\u0002wzxhzdk:203\u0003\n\n\n\n\u0002wzxhzdk:204\u0003\n\n\n\n\n\n\n\n\n\n\nParameters\n\n\nKey | Description\n----|------------\n  `ipa` | .ipa file for the build \n  `dsym` | zipped .dsym package for the build \n  `upload_metadata` | Upload relevant metadata for this build\n  `plist_template_path` | plist template path\n  `plist_file_name` | uploaded plist filename\n  `html_template_path` | html erb template path\n  `html_file_name` | uploaded html filename\n  `version_template_path` | version erb template path\n  `version_file_name` | uploaded version filename\n  `access_key` | AWS Access Key ID \n  `secret_access_key` | AWS Secret Access Key \n  `bucket` | AWS bucket name\n  `region` | AWS region (for bucket creation) \n  `path` | S3 'path'. Values from Info.plist will be substituted for keys wrapped in {}  \n  `source` | Optional source directory e.g. ./build \n  `acl` | Uploaded object permissions e.g public_read (default), private, public_read_write, authenticated_read \n\n\n\n\n\n\n\n\n\n### notify\n\nShows a macOS notification - use `notification` instead\n\n> It's recommended to use the new 'notification' method instead of 'notify'\n\n\n\nnotify | \n-----|----\nSupported platforms | ios, android, mac\nAuthor | @champo, @KrauseFx\n\n\n\n\n\n\n\n\n\n\n\n### update_project_code_signing\n\nUpdated code signing settings from 'Automatic' to a specific profile\n\n> You shouldn't use update_project_code_signing.\nHave you considered using the recommended way to do code signing?\nhttps://docs.fastlane.tools/codesigning/getting-started/\n\n\n\nupdate_project_code_signing | \n-----|----\nSupported platforms | ios\nAuthor | @KrauseFx\n\n\n\n\n\n\n\n\n\nParameters\n\n\nKey | Description\n----|------------\n  `path` | Path to your Xcode project\n  `udid` | DEPRECATED: see :uuid\n  `uuid` | The UUID of the provisioning profile you want to use\n\n\n\n\n\n\n\n\n\n### ipa\n\nEasily build and sign your app using shenzhen\n\n> You are using legacy `shenzhen` to build your app, which will be removed soon!\nIt is recommended to upgrade to _gym_\nTo do so, just replace `ipa(...)` with `gym(...)` in your Fastfile\nTo make code signing work, follow https://docs.fastlane.tools/codesigning/xcode-project/#\n\n\n\nipa | \n-----|----\nSupported platforms | ios\nAuthor | @joshdholtz\n\n\n\n\n\n\n1 Example\n\n\n\n\u0002wzxhzdk:205\u0003\n\n\n\n\n\n\n\n\n\n\nParameters\n\n\nKey | Description\n----|------------\n  `workspace` | WORKSPACE Workspace (.xcworkspace) file to use to build app (automatically detected in current directory)\n  `project` | Project (.xcodeproj) file to use to build app (automatically detected in current directory, overridden by --workspace option, if passed)\n  `configuration` | Configuration used to build\n  `scheme` | Scheme used to build app\n  `clean` | Clean project before building\n  `archive` | Archive project after building\n  `destination` | Build destination. Defaults to current directory\n  `embed` | Sign .ipa file with .mobileprovision\n  `identity` | Identity to be used along with --embed\n  `sdk` | Use SDK as the name or path of the base SDK when building the project\n  `ipa` | Specify the name of the .ipa file to generate (including file extension)\n  `xcconfig` | Use an extra XCCONFIG file to build the app\n  `xcargs` | Pass additional arguments to xcodebuild when building the app. Be sure to quote multiple args\n\n\n\n\n\n\n\n\n\n### upload_symbols_to_sentry\n\nUpload dSYM symbolication files to Sentry\n\n> Please use the `sentry` plugin instead.\nInstall using `fastlane add_plugin sentry`.\nReplace `upload_symbols_to_sentry` with `sentry_upload_dsym`\n\n> This action allows you to upload symbolication files to Sentry. It's extra useful if you use it to download the latest dSYM files from Apple when you use Bitcode\n\nupload_symbols_to_sentry | \n-----|----\nSupported platforms | ios\nAuthor | @joshdholtz\nReturns | The uploaded dSYM path(s)\n\n\n\n\n\n\n1 Example\n\n\n\n\u0002wzxhzdk:206\u0003\n\n\n\n\n\n\n\n\n\n\nParameters\n\n\nKey | Description\n----|------------\n  `api_host` | API host url for Sentry\n  `api_key` | API key for Sentry\n  `auth_token` | Authentication token for Sentry\n  `org_slug` | Organization slug for Sentry project\n  `project_slug` | Project slug for Sentry\n  `dsym_path` | Path to your symbols file. For iOS and Mac provide path to app.dSYM.zip\n  `dsym_paths` | Path to an array of your symbols file. For iOS and Mac provide path to app.dSYM.zip\n\n\n\n\n\n\n\n\n\n\nMisc\n\n\n\n\n\n\n\n### puts\n\nPrints out the given text\n\n\n\n\n\nputs | \n-----|----\nSupported platforms | ios, android, mac\nAuthor | @KrauseFx\n\n\n\n\n\n\n1 Example\n\n\n\n\u0002wzxhzdk:207\u0003\n\n\n\n\n\n\n\n\n\n\n\n\n### default_platform\n\nDefines a default platform to not have to specify the platform\n\n\n\n\n\ndefault_platform | \n-----|----\nSupported platforms | ios, android, mac\nAuthor | @KrauseFx\n\n\n\n\n\n\n1 Example\n\n\n\n\u0002wzxhzdk:208\u0003\n\n\n\n\n\n\n\n\n\n\n\n\n### fastlane_version\n\nVerifies the minimum fastlane version required\n\n\n\n> Add this to your `Fastfile` to require a certain version of _fastlane_.\nUse it if you use an action that just recently came out and you need it\n\nfastlane_version | \n-----|----\nSupported platforms | ios, android, mac\nAuthor | @KrauseFx\n\n\n\n\n\n\n1 Example\n\n\n\n\u0002wzxhzdk:209\u0003\n\n\n\n\n\n\n\n\n\n\n\n\n### lane_context\n\nAn alias to `Actions.lane_context`\n\n\n\n\n\nlane_context | \n-----|----\nSupported platforms | ios, android, mac\nAuthor | @KrauseFx\n\n\n\n\n\n\n\n\n\n\n\n### import\n\nImport another Fastfile to use its lanes\n\n\n\n> This is useful if you have shared lanes across multiple apps and you want to store a Fastfile\nin a separate folder. The path must be relative to the Fastfile this is called from.\n\nimport | \n-----|----\nSupported platforms | ios, android, mac\nAuthor | @KrauseFx\n\n\n\n\n\n\n1 Example\n\n\n\n\u0002wzxhzdk:210\u0003\n\n\n\n\n\n\n\n\n\n\n\n\n### import_from_git\n\nImport another Fastfile from a remote git repository to use its lanes\n\n\n\n> This is useful if you have shared lanes across multiple apps and you want to store the Fastfile\nin a remote git repository.\n\nimport_from_git | \n-----|----\nSupported platforms | ios, android, mac\nAuthor | @fabiomassimo, @KrauseFx, @Liquidsoul\n\n\n\n\n\n\n1 Example\n\n\n\n\u0002wzxhzdk:211\u0003\n\n\n\n\n\n\n\n\n\n\nParameters\n\n\nKey | Description\n----|------------\n  `url` | The URL of the repository to import the Fastfile from\n  `branch` | The branch or tag to check-out on the repository\n  `path` | The path of the Fastfile in the repository\n\n\n\n\n\n\n\n\n\n### clean_build_artifacts\n\nDeletes files created as result of running gym, cert, sigh or download_dsyms\n\n\n\n> This action deletes the files that get created in your repo as a result of running the _gym_ and _sigh_ commands. It doesn't delete the `fastlane/report.xml` though, this is probably more suited for the .gitignore.\nUseful if you quickly want to send out a test build by dropping down to the command line and typing something like `fastlane beta`, without leaving your repo in a messy state afterwards.\n\nclean_build_artifacts | \n-----|----\nSupported platforms | ios, mac\nAuthor | @lmirosevic\n\n\n\n\n\n\n1 Example\n\n\n\n\u0002wzxhzdk:212\u0003\n\n\n\n\n\n\n\n\n\n\nParameters\n\n\nKey | Description\n----|------------\n  `exclude_pattern` | Exclude all files from clearing that match the given Regex pattern: e.g. '.*.mobileprovision'\n\n\n\n\n\n\n\n\n\n### skip_docs\n\nSkip the creation of the fastlane/README.md file when running fastlane\n\n\n\n> Tell _fastlane_ to not automatically create a `fastlane/README.md` when running _fastlane_. You can always trigger the creation of this file manually by running `fastlane docs`\n\nskip_docs | \n-----|----\nSupported platforms | ios, android, mac\nAuthor | @KrauseFx\n\n\n\n\n\n\n1 Example\n\n\n\n\u0002wzxhzdk:213\u0003\n\n\n\n\n\n\n\n\n\n\n\n\n### produce\n\nCreates the given application on iTC and the Dev Portal if necessary\n\n\n\n\n\nproduce | \n-----|----\nSupported platforms | ios\nAuthor | @KrauseFx\n\n\n\n\n\n\n1 Example\n\n\n\n\u0002wzxhzdk:214\u0003\n\n\n\n\n\n\n\n\n\n\nParameters\n\n\nKey | Description\n----|------------\n  `username` | Your Apple ID Username\n  `app_identifier` | App Identifier (Bundle ID, e.g. com.krausefx.app)\n  `bundle_identifier_suffix` | App Identifier Suffix (Ignored if App Identifier does not end with .*)\n  `app_name` | App Name\n  `app_version` | Initial version number (e.g. '1.0')\n  `sku` | SKU Number (e.g. '1234')\n  `platform` | The platform to use (optional)\n  `language` | Primary Language (e.g. 'English', 'German')\n  `company_name` | The name of your company. Only required if it's the first app you create\n  `skip_itc` | Skip the creation of the app on iTunes Connect\n  `enabled_features` | [DEPRECATED!] Please use `enable_services` instead - Array with Spaceship App Services\n  `enable_services` | Array with Spaceship App Services (e.g. app_group: (on|off), apple_pay: (on|off), associated_domains: (on|off), data_protection: (complete|unlessopen|untilfirstauth), game_center: (on|off), health_kit: (on|off), home_kit: (on|off), wireless_accessory: (on|off), icloud: (legacy|cloudkit), in_app_purchase: (on|off), inter_app_audio: (on|off), passbook: (on|off), push_notification: (on|off), siri_kit: (on|off), vpn_configuration: (on|off))\n  `skip_devcenter` | Skip the creation of the app on the Apple Developer Portal\n  `team_id` | The ID of your Developer Portal team if you're in multiple teams\n  `team_name` | The name of your Developer Portal team if you're in multiple teams\n  `itc_team_id` | The ID of your iTunes Connect team if you're in multiple teams\n  `itc_team_name` | The name of your iTunes Connect team if you're in multiple teams\n\n\n\n\n\n\n\n\n\n### is_ci\n\nIs the current run being executed on a CI system, like Jenkins or Travis\n\n\n\n> The return value of this method is true if fastlane is currently executed on\nTravis, Jenkins, Circle or a similar CI service\n\nis_ci | \n-----|----\nSupported platforms | ios, android, mac\nAuthor | @KrauseFx\n\n\n\n\n\n\n1 Example\n\n\n\n\u0002wzxhzdk:215\u0003\n\n\n\n\n\n\n\n\n\n\n\n\n### setup_jenkins\n\nSetup xcodebuild, gym and scan for easier Jenkins integration\n\n\n\n> - Adds and unlocks keychains from Jenkins 'Keychains and Provisioning Profiles Plugin'\n- Sets code signing identity from Jenkins 'Keychains and Provisioning Profiles Plugin'\n- Sets output directory to './output' (gym, scan and backup_xcarchive).\n- Sets derived data path to './derivedData' (xcodebuild, gym, scan and clear_derived_data, carthage).\n- Produce result bundle (gym and scan).\nThis action helps with Jenkins integration. Creates own derived data for each job. All build results like IPA files and archives will be stored in the `./output` directory.\nThe action also works with [Keychains and Provisioning Profiles Plugin](https://wiki.jenkins-ci.org/display/JENKINS/Keychains+and+Provisioning+Profiles+Plugin), selected keychain\nwill be automatically unlocked and the selected code signing identity will be used. By default this action will only work when fastlane is executed on a CI system.\n\nsetup_jenkins | \n-----|----\nSupported platforms | ios, mac\nAuthor | @bartoszj\n\n\n\n\n\n\n1 Example\n\n\n\n\u0002wzxhzdk:216\u0003\n\n\n\n\n\n\n\n\n\n\nParameters\n\n\nKey | Description\n----|------------\n  `force` | Force setup, even if not executed by Jenkins\n  `unlock_keychain` | Unlocks keychain\n  `add_keychain_to_search_list` | Add to keychain search list\n  `set_default_keychain` | Set keychain as default\n  `keychain_path` | Path to keychain\n  `keychain_password` | Keychain password\n  `set_code_signing_identity` | Set code signing identity from CODE_SIGNING_IDENTITY environment\n  `code_signing_identity` | Code signing identity\n  `output_directory` | The directory in which the ipa file should be stored in\n  `derived_data_path` | The directory where built products and other derived data will go\n  `result_bundle` | Produce the result bundle describing what occurred will be placed\n\n\n\n\n\n\n\n\n\n### unlock_keychain\n\nUnlock a keychain\n\n\n\n> Unlocks the given keychain file and adds it to the keychain search list\nKeychains can be replaced with `add_to_search_list: :replace`\n\nunlock_keychain | \n-----|----\nSupported platforms | ios, android, mac\nAuthor | @xfreebird\n\n\n\n\n\n\n4 Examples\n\n\n\n\u0002wzxhzdk:217\u0003\n\n\n\n\u0002wzxhzdk:218\u0003\n\n\n\n\u0002wzxhzdk:219\u0003\n\n\n\n\u0002wzxhzdk:220\u0003\n\n\n\n\n\n\n\n\n\n\nParameters\n\n\nKey | Description\n----|------------\n  `path` | Path to the keychain file\n  `password` | Keychain password\n  `add_to_search_list` | Add to keychain search list\n  `set_default` | Set as default keychain\n\n\n\n\n\n\n\n\n\n### badge\n\nAutomatically add a badge to your app icon\n\n\n\n> This action will add a light/dark badge onto your app icon.\nYou can also provide your custom badge/overlay or add an shield for more customization more info:\nhttps://github.com/HazAT/badge\n**Note** If you want to reset the badge back to default you can use `sh 'git checkout -- \n/Assets.xcassets/'`\n\nbadge | \n-----|----\nSupported platforms | ios, android, mac\nAuthor | @DanielGri\n\n\n\n\n\n\n4 Examples\n\n\n\n\u0002wzxhzdk:221\u0003\n\n\n\n\u0002wzxhzdk:222\u0003\n\n\n\n\u0002wzxhzdk:223\u0003\n\n\n\n\u0002wzxhzdk:224\u0003\n\n\n\n\n\n\n\n\n\n\nParameters\n\n\nKey | Description\n----|------------\n  `dark` | Adds a dark flavored badge ontop of your icon\n  `custom` | Add your custom overlay/badge image\n  `no_badge` | Hides the beta badge\n  `shield` | Add a shield to your app icon from shields.io\n  `alpha` | Adds and alpha badge instead of the default beta one\n  `path` | Sets the root path to look for AppIcons\n  `shield_io_timeout` | Set custom duration for the timeout of the shields.io request in seconds\n  `glob` | Glob pattern for finding image files\n  `alpha_channel` | Keeps/adds an alpha channel to the icon (useful for android icons)\n  `shield_gravity` | Position of shield on icon. Default: North - Choices include: NorthWest, North, NorthEast, West, Center, East, SouthWest, South, SouthEast\n  `shield_no_resize` | Shield image will no longer be resized to aspect fill the full icon. Instead it will only be shrunk to not exceed the icon graphic\n\n\n\n\n\n\n\n\n\n### update_fastlane\n\nMakes sure fastlane-tools are up-to-date when running fastlane\n\n\n\n> This action will update fastlane to the most recent version - major version updates will not be performed automatically, as they might include breaking changes. If an update was performed, fastlane will be restarted before the run continues.\nIf you are using rbenv or rvm, everything should be good to go. However, if you are using the system's default ruby, some additional setup is needed for this action to work correctly. In short, fastlane needs to be able to access your gem library without running in `sudo` mode.\nThe simplest possible fix for this is putting the following lines into your `~/.bashrc` or `~/.zshrc` file:\n\n\u0002wzxhzdk:225\u0003\n\nAfter the above changes, restart your terminal, then run `mkdir $GEM_HOME` to create the new gem directory. After this, you're good to go!\nRecommended usage of the `update_fastlane` action is at the top inside of the `before_all` block, before running any other action\n\nupdate_fastlane | \n-----|----\nSupported platforms | ios, android, mac\nAuthor | @milch, @KrauseFx\n\n\n\n\n\n\n1 Example\n\n\n\n\u0002wzxhzdk:226\u0003\n\n\n\n\n\n\n\n\n\n\nParameters\n\n\nKey | Description\n----|------------\n  `nightly` | Opt-in to install and use nightly fastlane builds\n  `no_update` | Don't update during this run. Defaults to false. This is used internally\n  `tools` | [DEPRECATED!] true - Comma separated list of fastlane tools to update (e.g. fastlane,deliver,sigh)\n\n\n\n\n\n\n\n\n\n### precheck\n\nCheck your app's metadata before you submit your app to review using _precheck_\n\n\n\n> More information: https://fastlane.tools/precheck\n\nprecheck | \n-----|----\nSupported platforms | ios\nAuthor | @taquitos\nReturns | true if precheck passes, else, false\n\n\n\n\n\n\n1 Example\n\n\n\n\u0002wzxhzdk:227\u0003\n\n\n\n\n\n\n\n\n\n\nParameters\n\n\nKey | Description\n----|------------\n  `app_identifier` | The bundle identifier of your app\n  `username` | Your Apple ID Username\n  `team_id` | The ID of your iTunes Connect team if you're in multiple teams\n  `team_name` | The name of your iTunes Connect team if you're in multiple teams\n  `default_rule_level` | The default rule level unless otherwise configured\n  `negative_apple_sentiment` | mentioning \uf8ff in a way that could be considered negative\n  `placeholder_text` | using placeholder text (e.g.:\"lorem ipsum\", \"text here\", etc...)\n  `other_platforms` | mentioning other platforms, like Android or Blackberry\n  `future_functionality` | mentioning features or content that is not currently available in your app\n  `test_words` | using text indicating this release is a test\n  `curse_words` | including words that might be considered objectionable\n  `custom_text` | mentioning any of the user-specified words passed to custom_text(data: [words])\n  `copyright_date` | using a copyright date that is any different from this current year, or missing a date\n  `unreachable_urls` | unreachable URLs in app metadata\n\n\n\n\n\n\n\n\n\n### bundle_install\n\nThis action runs `bundle install` (if available)\n\n\n\n\n\nbundle_install | \n-----|----\nSupported platforms | ios, android, mac\nAuthor | @birmacher, @koglinjg\n\n\n\n\n\n\n\n\n\nParameters\n\n\nKey | Description\n----|------------\n  `binstubs` | Generate bin stubs for bundled gems to ./bin\n  `clean` | Run bundle clean automatically after install\n  `full_index` | Use the rubygems modern index instead of the API endpoint\n  `gemfile` | Use the specified gemfile instead of Gemfile\n  `jobs` | Install gems using parallel workers\n  `local` | Do not attempt to fetch gems remotely and use the gem cache instead\n  `deployment` | Install using defaults tuned for deployment and CI environments\n  `no_cache` | Don't update the existing gem cache\n  `no_prune` | Don't remove stale gems from the cache\n  `path` | Specify a different path than the system default ($BUNDLE_PATH or $GEM_HOME). Bundler will remember this value for future installs on this machine\n  `system` | Install to the system location ($BUNDLE_PATH or $GEM_HOME) even if the bundle was previously installed somewhere else for this application\n  `quiet` | Only output warnings and errors\n  `retry` | Retry network and git requests that have failed\n  `shebang` | Specify a different shebang executable name than the default (usually 'ruby')\n  `standalone` | Make a bundle that can work without the Bundler runtime\n  `trust_policy` | Sets level of security when dealing with signed gems. Accepts `LowSecurity`, `MediumSecurity` and `HighSecurity` as values\n  `without` | Exclude gems that are part of the specified named group\n  `with` | Include gems that are part of the specified named group\n\n\n\n\n\n\n\n\n\n### upload_symbols_to_crashlytics\n\nUpload dSYM symbolication files to Crashlytics\n\n\n\n> This action allows you to upload symbolication files to Crashlytics. It's extra useful if you use it to download the latest dSYM files from Apple when you use Bitcode. This action will not fail the build if one of the uploads failed. The reason for that is that sometimes some of dSYM files are invalid, and we don't want them to fail the complete build.\n\nupload_symbols_to_crashlytics | \n-----|----\nSupported platforms | ios\nAuthor | @KrauseFx\n\n\n\n\n\n\n1 Example\n\n\n\n\u0002wzxhzdk:228\u0003\n\n\n\n\n\n\n\n\n\n\nParameters\n\n\nKey | Description\n----|------------\n  `dsym_path` | Path to the DSYM file or zip to upload\n  `api_token` | Crashlytics API Key\n  `binary_path` | The path to the upload-symbols file of the Fabric app\n  `platform` | The platform of the app (ios, appletvos, mac)\n\n\n\n\n\n\n\n\n\n### create_keychain\n\nCreate a new Keychain\n\n\n\n\n\ncreate_keychain | \n-----|----\nSupported platforms | ios, android, mac\nAuthor | @gin0606\n\n\n\n\n\n\n1 Example\n\n\n\n\u0002wzxhzdk:229\u0003\n\n\n\n\n\n\n\n\n\n\nParameters\n\n\nKey | Description\n----|------------\n  `name` | Keychain name\n  `path` | Path to keychain\n  `password` | Password for the keychain\n  `default_keychain` | Should the newly created Keychain be the new system default keychain\n  `unlock` | Unlock keychain after create\n  `timeout` | timeout interval in seconds. Set `false` if you want to specify \"no time-out\"\n  `lock_when_sleeps` | Lock keychain when the system sleeps\n  `lock_after_timeout` | Lock keychain after timeout interval\n  `add_to_search_list` | Add keychain to search list\n\n\n\n\n\n\n\n\n\n### delete_keychain\n\nDelete keychains and remove them from the search list\n\n\n\n> Keychains can be deleted after being creating with `create_keychain`\n\ndelete_keychain | \n-----|----\nSupported platforms | ios, android, mac\nAuthor | @gin0606, @koenpunt\n\n\n\n\n\n\n2 Examples\n\n\n\n\u0002wzxhzdk:230\u0003\n\n\n\n\u0002wzxhzdk:231\u0003\n\n\n\n\n\n\n\n\n\n\nParameters\n\n\nKey | Description\n----|------------\n  `name` | Keychain name\n  `keychain_path` | Keychain path\n\n\n\n\n\n\n\n\n\n### latest_testflight_build_number\n\nFetches most recent build number from TestFlight\n\n\n\n> Provides a way to have increment_build_number be based on the latest build you uploaded to iTC.\nFetches most recent build number from TestFlight based on the version number. Provides a way to have `increment_build_number` be based on the latest build you uploaded to iTC.\n\nlatest_testflight_build_number | \n-----|----\nSupported platforms | ios\nAuthor | @daveanderson\nReturns | Integer representation of the latest build number uploaded to TestFlight\n\n\n\n\n\n\n2 Examples\n\n\n\n\u0002wzxhzdk:232\u0003\n\n\n\n\u0002wzxhzdk:233\u0003\n\n\n\n\n\n\n\n\n\n\nParameters\n\n\nKey | Description\n----|------------\n  `live` | Query the live version (ready-for-sale)\n  `app_identifier` | The bundle identifier of your app\n  `username` | Your Apple ID Username\n  `version` | The version number whose latest build number we want\n  `initial_build_number` | sets the build number to given value if no build is in current train\n  `team_id` | The ID of your iTunes Connect team if you're in multiple teams\n  `team_name` | The name of your iTunes Connect team if you're in multiple teams\n\n\n\n\n\n\n\n\n\n### backup_file\n\nThis action backs up your file to \"[path].back\"\n\n\n\n\n\nbackup_file | \n-----|----\nSupported platforms | ios, android, mac\nAuthor | @gin0606\n\n\n\n\n\n\n1 Example\n\n\n\n\u0002wzxhzdk:234\u0003\n\n\n\n\n\n\n\n\n\n\nParameters\n\n\nKey | Description\n----|------------\n  `path` | Path to the file you want to backup\n\n\n\n\n\n\n\n\n\n### copy_artifacts\n\nSmall action to save your build artifacts. Useful when you use reset_git_repo\n\n\n\n> This action copies artifacts to a target directory. It's useful if you have a CI that will pick up these artifacts and attach them to the build. Useful e.g. for storing your `.ipa`s, `.dSYM.zip`s, `.mobileprovision`s, `.cert`s\nMake sure your target_path is gitignored, and if you use `reset_git_repo`, make sure the artifacts are added to the exclude list\n\ncopy_artifacts | \n-----|----\nSupported platforms | ios, android, mac\nAuthor | @lmirosevic\n\n\n\n\n\n\n1 Example\n\n\n\n\u0002wzxhzdk:235\u0003\n\n\n\n\n\n\n\n\n\n\nParameters\n\n\nKey | Description\n----|------------\n  `keep_original` | Set this to true if you want copy, rather than move, semantics\n  `target_path` | The directory in which you want your artifacts placed\n  `artifacts` | An array of file patterns of the files/folders you want to preserve\n  `fail_on_missing` | Fail when a source file isn't found\n\n\n\n\n\n\n\n\n\n### prompt\n\nAsk the user for a value or for confirmation\n\n\n\n> You can use `prompt` to ask the user for a value or to just let the user confirm the next step\nWhen this is executed on a CI service, the passed `ci_input` value will be returned\nThis action also supports multi-line inputs using the `multi_line_end_keyword` option.\n\nprompt | \n-----|----\nSupported platforms | ios, android, mac\nAuthor | @KrauseFx\n\n\n\n\n\n\n2 Examples\n\n\n\n\u0002wzxhzdk:236\u0003\n\n\n\n\u0002wzxhzdk:237\u0003\n\n\n\n\n\n\n\n\n\n\nParameters\n\n\nKey | Description\n----|------------\n  `text` | The text that will be displayed to the user\n  `ci_input` | The default text that will be used when being executed on a CI service\n  `boolean` | Is that a boolean question (yes/no)? This will add (y/n) at the end\n  `multi_line_end_keyword` | Enable multi-line inputs by providing an end text (e.g. 'END') which will stop the user input\n\n\n\n\n\n\n\n\n\n### reset_simulator_contents\n\nShutdown and reset running simulators\n\n\n\n\n\nreset_simulator_contents | \n-----|----\nSupported platforms | ios\nAuthor | @danramteke\n\n\n\n\n\n\n1 Example\n\n\n\n\u0002wzxhzdk:238\u0003\n\n\n\n\n\n\n\n\n\n\nParameters\n\n\nKey | Description\n----|------------\n  `ios` | Which versions of Simulators you want to reset content and settings, this does not remove/recreate the simulators\n\n\n\n\n\n\n\n\n\n### restore_file\n\nThis action restore your file that was backuped with the `backup_file` action\n\n\n\n\n\nrestore_file | \n-----|----\nSupported platforms | ios, android, mac\nAuthor | @gin0606\n\n\n\n\n\n\n1 Example\n\n\n\n\u0002wzxhzdk:239\u0003\n\n\n\n\n\n\n\n\n\n\nParameters\n\n\nKey | Description\n----|------------\n  `path` | Original file name you want to restore\n\n\n\n\n\n\n\n\n\n### say\n\nThis action speaks out loud the given text\n\n\n\n\n\nsay | \n-----|----\nSupported platforms | ios, android, mac\nAuthor | @KrauseFx\n\n\n\n\n\n\n1 Example\n\n\n\n\u0002wzxhzdk:240\u0003\n\n\n\n\n\n\n\n\n\n\n\n\n### zip\n\nCompress a file or folder to a zip\n\n\n\n\n\nzip | \n-----|----\nSupported platforms | ios, android, mac\nAuthor | @KrauseFx\nReturns | The path to the output zip file\n\n\n\n\n\n\n3 Examples\n\n\n\n\u0002wzxhzdk:241\u0003\n\n\n\n\u0002wzxhzdk:242\u0003\n\n\n\n\u0002wzxhzdk:243\u0003\n\n\n\n\n\n\n\n\n\n\nParameters\n\n\nKey | Description\n----|------------\n  `path` | Path to the directory or file to be zipped\n  `output_path` | The name of the resulting zip file\n  `verbose` | Enable verbose output of zipped file\n\n\n\n\n\n\n\n\n\n### danger\n\nRuns `danger` for the project\n\n\n\n> Formalize your Pull Request etiquette.\nMore information: https://github.com/danger/danger\n\ndanger | \n-----|----\nSupported platforms | ios, android, mac\nAuthor | @KrauseFx\n\n\n\n\n\n\n2 Examples\n\n\n\n\u0002wzxhzdk:244\u0003\n\n\n\n\u0002wzxhzdk:245\u0003\n\n\n\n\n\n\n\n\n\n\nParameters\n\n\nKey | Description\n----|------------\n  `use_bundle_exec` | Use bundle exec when there is a Gemfile presented\n  `verbose` | Show more debugging information\n  `danger_id` | The identifier of this Danger instance\n  `dangerfile` | The location of your Dangerfile\n  `github_api_token` | GitHub API token for danger\n  `fail_on_errors` | Should always fail the build process, defaults to false\n  `new_comment` | Makes Danger post a new comment instead of editing its previous one\n  `base` | A branch/tag/commit to use as the base of the diff. [master|dev|stable]\n  `head` | A branch/tag/commit to use as the head. [master|dev|stable]\n\n\n\n\n\n\n\n\n\n### artifactory\n\nThis action uploads an artifact to artifactory\n\n\n\n\n\nartifactory | \n-----|----\nSupported platforms | ios, android, mac\nAuthor | @koglinjg, @tommeier\n\n\n\n\n\n\n1 Example\n\n\n\n\u0002wzxhzdk:246\u0003\n\n\n\n\n\n\n\n\n\n\nParameters\n\n\nKey | Description\n----|------------\n  `file` | File to be uploaded to artifactory\n  `repo` | Artifactory repo to put the file in\n  `repo_path` | Path to deploy within the repo, including filename\n  `endpoint` | Artifactory endpoint\n  `username` | Artifactory username\n  `password` | Artifactory password\n  `properties` | Artifact properties hash\n  `ssl_pem_file` | Location of pem file to use for ssl verification\n  `ssl_verify` | Verify SSL\n  `proxy_username` | Proxy username\n  `proxy_password` | Proxy password\n  `proxy_address` | Proxy address\n  `proxy_port` | Proxy port\n\n\n\n\n\n\n\n\n\n### download_dsyms\n\nDownload dSYM files from Apple iTunes Connect for Bitcode apps\n\n\n\n> This action downloads dSYM files from Apple iTunes Connect after\nthe ipa got re-compiled by Apple. Useful if you have Bitcode enabled\n\n\u0002wzxhzdk:247\u0003\n\n\ndownload_dsyms | \n-----|----\nSupported platforms | ios\nAuthor | @KrauseFx\n\n\n\n\n\n\n2 Examples\n\n\n\n\u0002wzxhzdk:248\u0003\n\n\n\n\u0002wzxhzdk:249\u0003\n\n\n\n\n\n\n\n\n\n\nParameters\n\n\nKey | Description\n----|------------\n  `username` | Your Apple ID Username for iTunes Connect\n  `app_identifier` | The bundle identifier of your app\n  `team_id` | The ID of your iTunes Connect team if you're in multiple teams\n  `team_name` | The name of your iTunes Connect team if you're in multiple teams\n  `platform` | The app platform for dSYMs you wish to download\n  `version` | The app version for dSYMs you wish to download\n  `build_number` | The app build_number for dSYMs you wish to download\n\n\n\n\n\n\n\n\n\n### version_bump_podspec\n\nIncrement or set the version in a podspec file\n\n\n\n> You can use this action to manipulate any 'version' variable contained in a ruby file.\nFor example, you can use it to bump the version of a cocoapods' podspec file.\nIt also supports versions that are not semantic: 1.4.14.4.1\nFor such versions there is an option to change appendix (4.1)\n\nversion_bump_podspec | \n-----|----\nSupported platforms | ios, mac\nAuthor | @Liquidsoul, @KrauseFx\n\n\n\n\n\n\n2 Examples\n\n\n\n\u0002wzxhzdk:250\u0003\n\n\n\n\u0002wzxhzdk:251\u0003\n\n\n\n\n\n\n\n\n\n\nParameters\n\n\nKey | Description\n----|------------\n  `path` | You must specify the path to the podspec file to update\n  `bump_type` | The type of this version bump. Available: patch, minor, major\n  `version_number` | Change to a specific version. This will replace the bump type value\n  `version_appendix` | Change version appendix to a specific value. For example 1.4.14.4.1 -> 1.4.14.5\n\n\n\n\n\n\n\n\n\n### team_id\n\nSpecify the Team ID you want to use for the Apple Developer Portal\n\n\n\n\n\nteam_id | \n-----|----\nSupported platforms | ios\nAuthor | @KrauseFx\n\n\n\n\n\n\n1 Example\n\n\n\n\u0002wzxhzdk:252\u0003\n\n\n\n\n\n\n\n\n\n\n\n\n### backup_xcarchive\n\nSave your [zipped] xcarchive elsewhere from default path\n\n\n\n\n\nbackup_xcarchive | \n-----|----\nSupported platforms | ios, mac\nAuthor | @dral3x\n\n\n\n\n\n\n1 Example\n\n\n\n\u0002wzxhzdk:253\u0003\n\n\n\n\n\n\n\n\n\n\nParameters\n\n\nKey | Description\n----|------------\n  `xcarchive` | Path to your xcarchive file. Optional if you use the `xcodebuild` action\n  `destination` | Where your archive will be placed\n  `zip` | Enable compression of the archive. Default value `true`\n  `versioned` | Create a versioned (date and app version) subfolder where to put the archive. Default value `true`\n\n\n\n\n\n\n\n\n\n### pod_lib_lint\n\nPod lib lint\n\n\n\n> Test the syntax of your Podfile by linting the pod against the files of its directory\n\npod_lib_lint | \n-----|----\nSupported platforms | ios, mac\nAuthor | @thierryxing\n\n\n\n\n\n\n4 Examples\n\n\n\n\u0002wzxhzdk:254\u0003\n\n\n\n\u0002wzxhzdk:255\u0003\n\n\n\n\u0002wzxhzdk:256\u0003\n\n\n\n\u0002wzxhzdk:257\u0003\n\n\n\n\n\n\n\n\n\n\nParameters\n\n\nKey | Description\n----|------------\n  `use_bundle_exec` | Use bundle exec when there is a Gemfile presented\n  `verbose` | Allow output detail in console\n  `allow_warnings` | Allow warnings during pod lint\n  `sources` | The sources of repos you want the pod spec to lint with, separated by commas\n  `use_libraries` | Lint uses static libraries to install the spec\n  `fail_fast` | Lint stops on the first failing platform or subspec\n  `private` | Lint skips checks that apply only to public specs\n  `quick` | Lint skips checks that would require to download and build the spec\n\n\n\n\n\n\n\n\n\n### erb\n\nAllows to Generate output files based on ERB templates\n\n\n\n> Renders an ERB template with `placeholders` given as a hash via parameter,\nif no :destination is set, returns rendered template as string\n\nerb | \n-----|----\nSupported platforms | ios, android, mac\nAuthor | @hjanuschka\n\n\n\n\n\n\n1 Example\n\n\n\n\u0002wzxhzdk:258\u0003\n\n\n\n\n\n\n\n\n\n\nParameters\n\n\nKey | Description\n----|------------\n  `template` | ERB Template File\n  `destination` | Destination file\n  `placeholders` | Placeholders given as a hash\n\n\n\n\n\n\n\n\n\n### download\n\nDownload a file from a remote server (e.g. JSON file)\n\n\n\n> Specify the URL to download and get the content as a return value\nFor more advanced networking code, use the Ruby functions instead:\nhttp://docs.ruby-lang.org/en/2.0.0/Net/HTTP.html\n\ndownload | \n-----|----\nSupported platforms | ios, android, mac\nAuthor | @KrauseFx\n\n\n\n\n\n\n1 Example\n\n\n\n\u0002wzxhzdk:259\u0003\n\n\n\n\n\n\n\n\n\n\nParameters\n\n\nKey | Description\n----|------------\n  `url` | The URL that should be downloaded\n\n\n\n\n\n\n\n\n\n### rocket\n\nOutputs ascii-art for a rocket \ud83d\ude80\n\n\n\n> Print an ascii Rocket :rocket:. Useful after using _crashlytics_ or _pilot_ to indicate that your new build has been shipped to outer-space.\n\nrocket | \n-----|----\nSupported platforms | ios, android, mac\nAuthor | @JaviSoto, @radex\n\n\n\n\n\n\n1 Example\n\n\n\n\u0002wzxhzdk:260\u0003\n\n\n\n\n\n\n\n\n\n\n\n\n### debug\n\nPrint out an overview of the lane context values\n\n\n\n\n\ndebug | \n-----|----\nSupported platforms | ios, android, mac\nAuthor | @KrauseFx\n\n\n\n\n\n\n1 Example\n\n\n\n\u0002wzxhzdk:261\u0003\n\n\n\n\n\n\n\n\n\n\n\n\n### make_changelog_from_jenkins\n\nGenerate a changelog using the Changes section from the current Jenkins build\n\n\n\n> This is useful when deploying automated builds. The changelog from Jenkins lists all the commit messages since the last build.\n\nmake_changelog_from_jenkins | \n-----|----\nSupported platforms | ios, android, mac\nAuthor | @mandrizzle\n\n\n\n\n\n\n1 Example\n\n\n\n\u0002wzxhzdk:262\u0003\n\n\n\n\n\n\n\n\n\n\nParameters\n\n\nKey | Description\n----|------------\n  `fallback_changelog` | Fallback changelog if there is not one on Jenkins, or it couldn't be read\n  `include_commit_body` | Include the commit body along with the summary\n\n\n\n\n\n\n\n\n\n### pod_push\n\nPush a Podspec to Trunk or a private repository\n\n\n\n\n\npod_push | \n-----|----\nSupported platforms | ios, mac\nAuthor | @squarefrog\n\n\n\n\n\n\n4 Examples\n\n\n\n\u0002wzxhzdk:263\u0003\n\n\n\n\u0002wzxhzdk:264\u0003\n\n\n\n\u0002wzxhzdk:265\u0003\n\n\n\n\u0002wzxhzdk:266\u0003\n\n\n\n\n\n\n\n\n\n\nParameters\n\n\nKey | Description\n----|------------\n  `path` | The Podspec you want to push\n  `repo` | The repo you want to push. Pushes to Trunk by default\n  `allow_warnings` | Allow warnings during pod push\n  `use_libraries` | Allow lint to use static libraries to install the spec\n  `sources` | The sources of repos you want the pod spec to lint with, separated by commas\n  `verbose` | Show more debugging information\n\n\n\n\n\n\n\n\n\n### dsym_zip\n\nCreates a zipped dSYM in the project root from the .xcarchive\n\n\n\n> You can manually specify the path to the xcarchive (not needed if you use `xcodebuild`/`xcarchive` to build your archive)\n\ndsym_zip | \n-----|----\nSupported platforms | ios, mac\nAuthor | @lmirosevic\n\n\n\n\n\n\n2 Examples\n\n\n\n\u0002wzxhzdk:267\u0003\n\n\n\n\u0002wzxhzdk:268\u0003\n\n\n\n\n\n\n\n\n\n\nParameters\n\n\nKey | Description\n----|------------\n  `archive_path` | Path to your xcarchive file. Optional if you use the `xcodebuild` action\n  `dsym_path` | Path for generated dsym. Optional, default is your apps root directory\n  `all` | Whether or not all dSYM files are to be included. Optional, default is false in which only your app dSYM is included\n\n\n\n\n\n\n\n\n\n### ensure_no_debug_code\n\nEnsures the given text is nowhere in the code base\n\n\n\n> You don't want any debug code to slip into production. This can be used\nto check if there is any debug code still in your code base or if you have\nthings like // TO DO or similar\n\nensure_no_debug_code | \n-----|----\nSupported platforms | ios, android, mac\nAuthor | @KrauseFx\n\n\n\n\n\n\n5 Examples\n\n\n\n\u0002wzxhzdk:269\u0003\n\n\n\n\u0002wzxhzdk:270\u0003\n\n\n\n\u0002wzxhzdk:271\u0003\n\n\n\n\u0002wzxhzdk:272\u0003\n\n\n\n\u0002wzxhzdk:273\u0003\n\n\n\n\n\n\n\n\n\n\nParameters\n\n\nKey | Description\n----|------------\n  `text` | The text that must not be in the code base\n  `path` | The directory containing all the source files\n  `extension` | The extension that should be searched for\n  `extensions` | An array of file extensions that should be searched for\n  `exclude` | Exclude a certain pattern from the search\n  `exclude_dirs` | An array of dirs that should not be included in the search\n\n\n\n\n\n\n\n\n\n### cloc\n\nGenerates a Code Count that can be read by Jenkins (xml format)\n\n\n\n> This action will run cloc to generate a SLOC report that the Jenkins SLOCCount plugin can read.\nSee https://wiki.jenkins-ci.org/display/JENKINS/SLOCCount+Plugin and https://github.com/AlDanial/cloc for more information.\n\ncloc | \n-----|----\nSupported platforms | ios, mac\nAuthor | @intere\n\n\n\n\n\n\n1 Example\n\n\n\n\u0002wzxhzdk:274\u0003\n\n\n\n\n\n\n\n\n\n\nParameters\n\n\nKey | Description\n----|------------\n  `binary_path` | Where the cloc binary lives on your system (full path including 'cloc')\n  `exclude_dir` | Comma separated list of directories to exclude\n  `output_directory` | Where to put the generated report file\n  `source_directory` | Where to look for the source code (relative to the project root folder)\n  `xml` | Should we generate an XML File (if false, it will generate a plain text file)?\n\n\n\n\n\n\n\n\n\n### team_name\n\nSet a team to use by its name\n\n\n\n\n\nteam_name | \n-----|----\nSupported platforms | ios\nAuthor | @KrauseFx\n\n\n\n\n\n\n1 Example\n\n\n\n\u0002wzxhzdk:275\u0003\n\n\n\n\n\n\n\n\n\n\n\n\n### scp\n\nTransfer files via SCP\n\n\n\n\n\nscp | \n-----|----\nSupported platforms | ios, android, mac\nAuthor | @hjanuschka\n\n\n\n\n\n\n2 Examples\n\n\n\n\u0002wzxhzdk:276\u0003\n\n\n\n\u0002wzxhzdk:277\u0003\n\n\n\n\n\n\n\n\n\n\nParameters\n\n\nKey | Description\n----|------------\n  `username` | Username\n  `password` | Password\n  `host` | Hostname\n  `port` | Port\n  `upload` | Upload\n  `download` | Download\n\n\n\n\n\n\n\n\n\n### verify_build\n\nAble to verify various settings in ipa file\n\n\n\n> Verifies that the built app was built using the expected build resources. This is relevant for people who build on machines that are used to build apps with different profiles, certificates and/or bundle identifiers to guard against configuration mistakes.\n\nverify_build | \n-----|----\nSupported platforms | ios\nAuthor | @CodeReaper\n\n\n\n\n\n\n1 Example\n\n\n\n\u0002wzxhzdk:278\u0003\n\n\n\n\n\n\n\n\n\n\nParameters\n\n\nKey | Description\n----|------------\n  `provisioning_type` | Required type of provisioning\n  `provisioning_uuid` | Required UUID of provisioning profile\n  `team_identifier` | Required team identifier\n  `team_name` | Required team name\n  `app_name` | Required app name\n  `bundle_identifier` | Required bundle identifier\n  `ipa_path` | Explicitly set the ipa path\n\n\n\n\n\n\n\n\n\n### install_on_device\n\nInstalls an .ipa file on a connected iOS-device via usb or wifi\n\n\n\n> Installs the ipa on the device, if no id is given, the first found iOS device will be used, works via USB or Wi-Fi. This requires `ios-deploy` to be installed please have a look at [ios-deploy](https://github.com/phonegap/ios-deploy). to quickly install it, use `npm -g i ios-deploy`\n\ninstall_on_device | \n-----|----\nSupported platforms | ios\nAuthor | @hjanuschka\n\n\n\n\n\n\n1 Example\n\n\n\n\u0002wzxhzdk:279\u0003\n\n\n\n\n\n\n\n\n\n\nParameters\n\n\nKey | Description\n----|------------\n  `extra` | Extra Commandline arguments passed to ios-deploy\n  `device_id` | id of the device / if not set defaults to first found device\n  `skip_wifi` | Do not search for devices via WiFi\n  `ipa` | The IPA file to put on the device\n\n\n\n\n\n\n\n\n\n### version_get_podspec\n\nReceive the version number from a podspec file\n\n\n\n\n\nversion_get_podspec | \n-----|----\nSupported platforms | ios, mac\nAuthor | @Liquidsoul, @KrauseFx\n\n\n\n\n\n\n1 Example\n\n\n\n\u0002wzxhzdk:280\u0003\n\n\n\n\n\n\n\n\n\n\nParameters\n\n\nKey | Description\n----|------------\n  `path` | You must specify the path to the podspec file\n\n\n\n\n\n\n\n\n\n### rsync\n\nRsync files from :source to :destination\n\n\n\n> A wrapper around rsync, rsync is a tool that lets you synchronize files, including permissions and so on for a more detailed information about rsync please see rsync(1) manpage.\n\nrsync | \n-----|----\nSupported platforms | ios, android, mac\nAuthor | @hjanuschka\n\n\n\n\n\n\n1 Example\n\n\n\n\u0002wzxhzdk:281\u0003\n\n\n\n\n\n\n\n\n\n\nParameters\n\n\nKey | Description\n----|------------\n  `extra` | Port\n  `source` | source file/folder\n  `destination` | destination file/folder\n\n\n\n\n\n\n\n\n\n### adb_devices\n\nGet an array of Connected android device serials\n\n\n\n> Fetches device list via adb, e.g. run an adb command on all connected devices.\n\nadb_devices | \n-----|----\nSupported platforms | android\nAuthor | @hjanuschka\nReturns | Returns an array of all currently connected android devices\n\n\n\n\n\n\n1 Example\n\n\n\n\u0002wzxhzdk:282\u0003\n\n\n\n\n\n\n\n\n\n\nParameters\n\n\nKey | Description\n----|------------\n  `adb_path` | The path to your `adb` binary\n\n\n\n\n\n\n\n\n\n### dotgpg_environment\n\nReads in production secrets set in a dotgpg file and puts them in ENV\n\n\n\n> More information about dotgpg can be found at https://github.com/ConradIrwin/dotgpg\n\ndotgpg_environment | \n-----|----\nSupported platforms | ios, android, mac\nAuthor | @simonlevy5\n\n\n\n\n\n\n1 Example\n\n\n\n\u0002wzxhzdk:283\u0003\n\n\n\n\n\n\n\n\n\n\nParameters\n\n\nKey | Description\n----|------------\n  `dotgpg_file` | Path to your gpg file\n\n\n\n\n\n\n\n\n\n### jira\n\nLeave a comment on JIRA tickets\n\n\n\n\n\njira | \n-----|----\nSupported platforms | ios, android, mac\nAuthor | @iAmChrisTruman\n\n\n\n\n\n\n1 Example\n\n\n\n\u0002wzxhzdk:284\u0003\n\n\n\n\n\n\n\n\n\n\nParameters\n\n\nKey | Description\n----|------------\n  `url` | URL for Jira instance\n  `username` | Username for JIRA instance\n  `password` | Password for Jira\n  `ticket_id` | Ticket ID for Jira, i.e. IOS-123\n  `comment_text` | Text to add to the ticket as a comment\n\n\n\n\n\n\n\n\n\n### read_podspec\n\nLoads a CocoaPods spec as JSON\n\n\n\n> This can be used for only specifying a version string in your podspec\n- and during your release process you'd read it from the podspec by running\n`version = read_podspec['version']` at the beginning of your lane\nLoads the specified (or the first found) podspec in the folder as JSON, so that you can inspect its `version`, `files` etc. \nThis can be useful when basing your release process on the version string only stored in one place - in the podspec. As one of \nthe first steps you'd read the podspec and its version and the rest of the workflow can use that version string (when e.g. creating a new git tag or a GitHub Release).\n\nread_podspec | \n-----|----\nSupported platforms | ios, mac\nAuthor | @czechboy0\n\n\n\n\n\n\n2 Examples\n\n\n\n\u0002wzxhzdk:285\u0003\n\n\n\n\u0002wzxhzdk:286\u0003\n\n\n\n\n\n\n\n\n\n\nParameters\n\n\nKey | Description\n----|------------\n  `path` | Path to the podspec to be read\n\n\n\n\n\n\n\n\n\n### ssh\n\nAllows remote command execution using ssh\n\n\n\n> Lets you execute remote commands via ssh using username/password or ssh-agent. If one of the commands in command-array returns non 0 - it fails.\n\nssh | \n-----|----\nSupported platforms | ios, android, mac\nAuthor | @hjanuschka\n\n\n\n\n\n\n1 Example\n\n\n\n\u0002wzxhzdk:287\u0003\n\n\n\n\n\n\n\n\n\n\nParameters\n\n\nKey | Description\n----|------------\n  `username` | Username\n  `password` | Password\n  `host` | Hostname\n  `port` | Port\n  `commands` | Commands\n  `log` | Log commands and output\n\n\n\n\n\n\n\n\n\n### app_store_build_number\n\nReturns the current build_number of either live or edit version\n\n\n\n> Returns the current build number of either the live or testflight version - it is useful for getting the build_number of the current or ready-for-sale app version, and it also works on non-live testflight version. If you need to handle more build-trains please see `latest_testflight_build_number`\n\napp_store_build_number | \n-----|----\nSupported platforms | ios, mac\nAuthor | @hjanuschka\n\n\n\n\n\n\n3 Examples\n\n\n\n\u0002wzxhzdk:288\u0003\n\n\n\n\u0002wzxhzdk:289\u0003\n\n\n\n\u0002wzxhzdk:290\u0003\n\n\n\n\n\n\n\n\n\n\nParameters\n\n\nKey | Description\n----|------------\n  `initial_build_number` | sets the build number to given value if no build is in current train\n  `app_identifier` | The bundle identifier of your app\n  `username` | Your Apple ID Username\n  `team_id` | The ID of your iTunes Connect team if you're in multiple teams\n  `live` | Query the live version (ready-for-sale)\n  `version` | The version number whose latest build number we want\n  `team_name` | The name of your iTunes Connect team if you're in multiple teams\n\n\n\n\n\n\n\n\n\n### appetize_viewing_url_generator\n\nGenerate an URL for appetize simulator\n\n\n\n> Check out the [device_grid guide](https://github.com/fastlane/fastlane/blob/master/fastlane/lib/fastlane/actions/device_grid/README.md) for more information\n\nappetize_viewing_url_generator | \n-----|----\nSupported platforms | ios\nAuthor | @KrauseFx\nReturns | The URL to preview the iPhone app\n\n\n\n\n\n\n\n\n\nParameters\n\n\nKey | Description\n----|------------\n  `public_key` | Public key of the app you wish to update\n  `device` | Device type: iphone4s, iphone5s, iphone6, iphone6plus, ipadair, iphone6s, iphone6splus, ipadair2, nexus5, nexus7 or nexus9\n  `scale` | Scale of the simulator\n  `orientation` | Device orientation\n  `language` | Device language in ISO 639-1 language code, e.g. 'de'\n  `color` | Color of the device\n  `launch_url` | Specify a deep link to open when your app is launched\n  `os_version` | The operating system version on which to run your app, e.g. 10.3, 8.0\n\n\n\n\n\n\n\n\n\n### install_xcode_plugin\n\nInstall an Xcode plugin for the current user\n\n\n\n\n\ninstall_xcode_plugin | \n-----|----\nSupported platforms | ios, mac\nAuthor | @NeoNachoSoto, @tommeier\n\n\n\n\n\n\n2 Examples\n\n\n\n\u0002wzxhzdk:291\u0003\n\n\n\n\u0002wzxhzdk:292\u0003\n\n\n\n\n\n\n\n\n\n\nParameters\n\n\nKey | Description\n----|------------\n  `url` | URL for Xcode plugin ZIP file\n  `github` | GitHub repository URL for Xcode plugin\n\n\n\n\n\n\n\n\n\n### add_extra_platforms\n\nModify the default list of supported platforms\n\n\n\n\n\nadd_extra_platforms | \n-----|----\nSupported platforms | ios, android, mac\nAuthor | @lacostej\n\n\n\n\n\n\n1 Example\n\n\n\n\u0002wzxhzdk:293\u0003\n\n\n\n\n\n\n\n\n\n\nParameters\n\n\nKey | Description\n----|------------\n  `platforms` | The optional extra platforms to support\n\n\n\n\n\n\n\n\n\n### clipboard\n\nCopies a given string into the clipboard. Works only on macOS\n\n\n\n\n\nclipboard | \n-----|----\nSupported platforms | ios, android, mac\nAuthor | @KrauseFx\n\n\n\n\n\n\n2 Examples\n\n\n\n\u0002wzxhzdk:294\u0003\n\n\n\n\u0002wzxhzdk:295\u0003\n\n\n\n\n\n\n\n\n\n\nParameters\n\n\nKey | Description\n----|------------\n  `value` | The string that should be copied into the clipboard\n\n\n\n\n\n\n\n\n\n### build_and_upload_to_appetize\n\nGenerate and upload an ipa file to appetize.io\n\n\n\n> This should be called from danger\nMore information in the [device_grid guide](https://github.com/fastlane/fastlane/blob/master/fastlane/lib/fastlane/actions/device_grid/README.md)\n\nbuild_and_upload_to_appetize | \n-----|----\nSupported platforms | ios\nAuthor | @KrauseFx\n\n\n\n\n\n\n\n\n\nParameters\n\n\nKey | Description\n----|------------\n  `xcodebuild` | Parameters that are passed to the xcodebuild action\n  `scheme` | The scheme to build. Can also be passed using the `xcodebuild` parameter\n  `api_token` | Appetize.io API Token\n\n\n\n\n\n\n\n\n\n### update_icloud_container_identifiers\n\nThis action changes the iCloud container identifiers in the entitlements file\n\n\n\n> Updates the iCloud Container Identifiers in the given Entitlements file, so you can use different iCloud containers for different builds like Adhoc, App Store, etc.\n\nupdate_icloud_container_identifiers | \n-----|----\nSupported platforms | ios\nAuthor | @JamesKuang\n\n\n\n\n\n\n1 Example\n\n\n\n\u0002wzxhzdk:296\u0003\n\n\n\n\n\n\n\n\n\n\nParameters\n\n\nKey | Description\n----|------------\n  `entitlements_file` | The path to the entitlement file which contains the iCloud container identifiers\n  `icloud_container_identifiers` | An Array of unique identifiers for the iCloud containers. Eg. ['iCloud.com.test.testapp']\n\n\n\n\n\n\n\n\n\n### sh\n\nRuns a shell command\n\n\n\n> Allows running an arbitrary shell command.\nBe aware of a specific behavior of 'sh' action with regard to the working directory. For details refer to Advanced.md\n\nsh | \n-----|----\nSupported platforms | ios, android, mac\nAuthor | @KrauseFx\nReturns | Outputs the string and executes it. When running in tests, it returns the actual command instead of executing it\n\n\n\n\n\n\n2 Examples\n\n\n\n\u0002wzxhzdk:297\u0003\n\n\n\n\u0002wzxhzdk:298\u0003\n\n\n\n\n\n\n\n\n\n\nParameters\n\n\nKey | Description\n----|------------\n  `command` | Shell command to be executed\n  `log` | Determines whether fastlane should print out the executed command itself and output of the executed command. If command line option --troubleshoot is used, then it overrides this option to true\n  `error_callback` | A callback invoked with the command output if there is a non-zero exit status\n\n\n\n\n\n\n\n\n\n### tryouts\n\nUpload a new build to Tryouts\n\n\n\n> More information http://tryouts.readthedocs.org/en/latest/releases.html#create-release\n\ntryouts | \n-----|----\nSupported platforms | ios, android\nAuthor | @alicertel\n\n\n\n\n\n\n1 Example\n\n\n\n\u0002wzxhzdk:299\u0003\n\n\n\n\n\n\n\n\n\n\nParameters\n\n\nKey | Description\n----|------------\n  `app_id` | Tryouts application hash\n  `api_token` | API Token for Tryouts Access\n  `build_file` | Path to your IPA or APK file. Optional if you use the _gym_ or _xcodebuild_ action\n  `notes` | Release notes\n  `notes_path` | Release notes text file path. Overrides the :notes parameter\n  `notify` | Notify testers? 0 for no\n  `status` | 2 to make your release public. Release will be distributed to available testers. 1 to make your release private. Release won't be distributed to testers. This also prevents release from showing up for SDK update\n\n\n\n\n\n\n\n\n\n### ruby_version\n\nVerifies the minimum ruby version required\n\n\n\n> Add this to your `Fastfile` to require a certain version of _ruby_.\nPut it at the top of your `Fastfile to ensure that _fastlane_ is executed appropriately.\n\nruby_version | \n-----|----\nSupported platforms | ios, android, mac\nAuthor | @sebastianvarela\n\n\n\n\n\n\n1 Example\n\n\n\n\u0002wzxhzdk:300\u0003\n\n\n\n\n\n\n\n\n\n\n\n\n### setup_travis\n\nSetup the keychain and match to work with Travis CI\n\n\n\n> - Creates a new temporary keychain for use with match\n- Switches match to `readonly` mode to not create new profiles/cert on CI\nThis action helps with Travis integration, add this to the top of your Fastfile if you use Travis\n\nsetup_travis | \n-----|----\nSupported platforms | ios, mac\nAuthor | @KrauseFx\n\n\n\n\n\n\n1 Example\n\n\n\n\u0002wzxhzdk:301\u0003\n\n\n\n\n\n\n\n\n\n\nParameters\n\n\nKey | Description\n----|------------\n  `force` | Force setup, even if not executed by travis\n\n\n\n\n\n\n\n\n\n### plugin_scores\n\n\u001b[31mNo description provided\u001b[0m\n\n\n\n\n\nplugin_scores | \n-----|----\nSupported platforms | ios, android, mac\nAuthor | @KrauseFx\n\n\n\n\n\n\n\n\n\nParameters\n\n\nKey | Description\n----|------------\n\n\n\n\n\n\n\n\n\n### google_play_track_version_codes\n\nRetrieves version codes for a Google Play track\n\n\n\n> More information: https://github.com/fastlane/fastlane/tree/master/supply\n\ngoogle_play_track_version_codes | \n-----|----\nSupported platforms | android\nAuthor | @panthomakos\nReturns | Array of integers representing the version codes for the given Google Play track\n\n\n\n\n\n\n1 Example\n\n\n\n\u0002wzxhzdk:302\u0003\n\n\n\n\n\n\n\n\n\n\nParameters\n\n\nKey | Description\n----|------------\n  `package_name` | The package name of the application to use\n  `track` | The track of the application to use: production, beta, alpha, rollout\n  `key` | [DEPRECATED!] Use --json_key instead - The p12 File used to authenticate with Google\n  `issuer` | [DEPRECATED!] Use --json_key instead - The issuer of the p12 file (email address of the service account)\n  `json_key` | The service account json file used to authenticate with Google\n  `json_key_data` | The service account json used to authenticate with Google\n  `root_url` | Root URL for the Google Play API. The provided URL will be used for API calls in place of https://www.googleapis.com/\n\n\n\n\n\n\n\n\n\n### opt_out_usage\n\nThis will stop uploading the information which actions were run\n\n\n\n> By default, fastlane will track what actions are being used No personal/sensitive information is recorded. Learn more at https://github.com/fastlane/fastlane#metrics Add `opt_out_usage` at the top of your Fastfile to disable metrics collection\n\nopt_out_usage | \n-----|----\nSupported platforms | ios, android, mac\nAuthor | @KrauseFx\n\n\n\n\n\n\n1 Example\n\n\n\n\u0002wzxhzdk:303\u0003\n\n\n\n\n\n\n\n\n\n\n\n\n### opt_out_crash_reporting\n\nThis will prevent reports from being uploaded when _fastlane_ crashes\n\n\n\n> By default, fastlane will send a report when it crashes The stacktrace is sanitized so no personal information is sent. Learn more at https://github.com/fastlane/fastlane#crash-reporting Add `opt_out_crash_reporting` at the top of your Fastfile to disable crash reporting\n\nopt_out_crash_reporting | \n-----|----\nSupported platforms | ios, android, mac\nAuthor | @mpirri, @ohayon\n\n\n\n\n\n\n1 Example\n\n\n\n\u0002wzxhzdk:304\u0003", 
            "title": "Actions"
        }, 
        {
            "location": "/actions/#fastlane-actions", 
            "text": "This page contains a list of all built-in fastlane actions and their available options.  To get the most up-to-date information from the command line on your current version you can also run  fastlane actions # list all available fastlane actions\nfastlane action [action_name] # more information for a specific action  You can import another  Fastfile  by using the  import  action. This is useful if you have shared lanes across multiple apps and you want to store a  Fastfile  in a separate folder. The path must be relative to the  Fastfile  this is called from.  import './path/to/other/Fastfile'  For  fastlane  plugins, check out the  available plugins  page.   Testing  Building  Screenshots  Project  Code Signing  Documentation  Beta  Push  Releasing your app  Source Control  Notifications  Deprecated  Misc  Plugins", 
            "title": "fastlane actions"
        }, 
        {
            "location": "/actions/#testing", 
            "text": "### scan\n\nEasily run tests of your iOS app using _scan_\n\n\n\n> More information: https://github.com/fastlane/fastlane/tree/master/scan\n\nscan | \n-----|----\nSupported platforms | ios, mac\nAuthor | @KrauseFx  5 Examples \n\n\n\u0002wzxhzdk:2\u0003\n\n\n\n\u0002wzxhzdk:3\u0003\n\n\n\n\u0002wzxhzdk:4\u0003\n\n\n\n\u0002wzxhzdk:5\u0003\n\n\n\n\u0002wzxhzdk:6\u0003   Parameters \n\nKey | Description\n----|------------\n  `workspace` | Path to the workspace file\n  `project` | Path to the project file\n  `device` | The name of the simulator type you want to run tests on (e.g. 'iPhone 6')\n  `toolchain` | The toolchain that should be used for building the application (e.g. com.apple.dt.toolchain.Swift_2_3, org.swift.30p620160816a)\n  `devices` | Array of devices to run the tests on (e.g. ['iPhone 6', 'iPad Air'])\n  `scheme` | The project's scheme. Make sure it's marked as `Shared`\n  `clean` | Should the project be cleaned before building it?\n  `code_coverage` | Should code coverage be generated (Xcode 7 only)?\n  `address_sanitizer` | Should the address sanitizer be turned on?\n  `thread_sanitizer` | Should the thread sanitizer be turned on?\n  `skip_build` | Should debug build be skipped before test build?\n  `output_directory` | The directory in which all reports will be stored\n  `output_style` | Define how the output should look like (standard, basic, rspec or raw)\n  `output_types` | Comma separated list of the output types (e.g. html, junit, json-compilation-database)\n  `output_files` | Comma separated list of the output files, corresponding to the types provided by :output_types (order should match). If specifying an output type of json-compilation-database with :use_clang_report_name enabled, that option will take precedence\n  `buildlog_path` | The directory where to store the raw log\n  `include_simulator_logs` | If the logs generated by the app (e.g. using NSLog, perror, etc.) in the Simulator should be written to the output_directory\n  `formatter` | A custom xcpretty formatter to use\n  `test_without_building` | Test without building, requires a derived data path\n  `build_for_testing` | Build for testing only, does not run tests\n  `xctestrun` | Run tests using the provided .xctestrun file\n  `derived_data_path` | The directory where build products and other derived data will go\n  `result_bundle` | Location of the Xcode result bundle\n  `sdk` | The SDK that should be used for building the application\n  `open_report` | Should the HTML report be opened when tests are completed?\n  `configuration` | The configuration to use when building the app. Defaults to 'Release'\n  `destination` | Use only if you're a pro, use the other options instead\n  `xcargs` | Pass additional arguments to xcodebuild. Be sure to quote the setting names and values e.g. OTHER_LDFLAGS=\"-ObjC -lstdc++\"\n  `xcconfig` | Use an extra XCCONFIG file to build your app\n  `only_testing` | Array of strings matching Test Bundle/Test Suite/Test Cases to run\n  `skip_testing` | Array of strings matching Test Bundle/Test Suite/Test Cases to skip\n  `slack_url` | Create an Incoming WebHook for your Slack group to post results there\n  `slack_channel` | #channel or @username\n  `slack_message` | The message included with each message posted to slack\n  `skip_slack` | Don't publish to slack, even when an URL is given\n  `slack_only_on_failure` | Only post on Slack if the tests fail\n  `use_clang_report_name` | Generate the json compilation database with clang naming convention (compile_commands.json)\n  `custom_report_file_name` | [DEPRECATED!] Use --output_files - Sets custom full report file name when generating a single report\n  `fail_build` | Should this step stop the build if the tests fail? Set this to false if you're using trainer   \n\n### slather\n\nUse slather to generate a code coverage report\n\n\n\n> Slather works with multiple code coverage formats including Xcode7 code coverage.\nSlather is available at https://github.com/SlatherOrg/slather\n\n\nslather | \n-----|----\nSupported platforms | ios, mac\nAuthor | @mattdelves  1 Example \n\n\n\u0002wzxhzdk:7\u0003   Parameters \n\nKey | Description\n----|------------\n  `build_directory` | The location of the build output\n  `proj` | The project file that slather looks at\n  `workspace` | The workspace that slather looks at\n  `scheme` | Scheme to use when calling slather\n  `configuration` | Configuration to use when calling slather (since slather-2.4.1)\n  `input_format` | The input format that slather should look for\n  `buildkite` | Tell slather that it is running on Buildkite\n  `teamcity` | Tell slather that it is running on TeamCity\n  `jenkins` | Tell slather that it is running on Jenkins\n  `travis` | Tell slather that it is running on TravisCI\n  `circleci` | Tell slather that it is running on CircleCI\n  `coveralls` | Tell slather that it should post data to Coveralls\n  `simple_output` | Tell slather that it should output results to the terminal\n  `gutter_json` | Tell slather that it should output results as Gutter JSON format\n  `cobertura_xml` | Tell slather that it should output results as Cobertura XML format\n  `html` | Tell slather that it should output results as static HTML pages\n  `show` | Tell slather that it should open static html pages automatically\n  `source_directory` | Tell slather the location of your source files\n  `output_directory` | Tell slather the location of for your output files\n  `ignore` | Tell slather to ignore files matching a path or any path from an array of paths\n  `verbose` | Tell slather to enable verbose mode\n  `use_bundle_exec` | Use bundle exec to execute slather. Make sure it is in the Gemfile\n  `binary_basename` | Basename of the binary file, this should match the name of your bundle excluding its extension (i.e. YourApp [for YourApp.app bundle])\n  `binary_file` | Binary file name to be used for code coverage\n  `source_files` | A Dir.glob compatible pattern used to limit the lookup to specific source files. Ignored in gcov mode\n  `decimals` | The amount of decimals to use for % coverage reporting   \n\n### swiftlint\n\nRun swift code validation using SwiftLint\n\n\n\n\n\nswiftlint | \n-----|----\nSupported platforms | ios, mac\nAuthor | @KrauseFx  1 Example \n\n\n\u0002wzxhzdk:8\u0003   Parameters \n\nKey | Description\n----|------------\n  `mode` | SwiftLint mode: :lint (default) or :autocorrect; default is :lint\n  `output_file` | Path to output SwiftLint result\n  `config_file` | Custom configuration file of SwiftLint\n  `strict` | Fail on warnings? (true/false)\n  `files` | List of files to process\n  `ignore_exit_status` | Ignore the exit status of the SwiftLint command, so that serious violations                                                     don't fail the build (true/false)\n  `reporter` | Choose output reporter\n  `quiet` | Don't print status logs like 'Linting  '  &  'Done linting'\n  `executable` | Path to the `swiftlint` executable on your machine   \n\n### xcov\n\nNice code coverage reports without hassle\n\n\n\n> Create nice code coverage reports and post coverage summaries on Slack *(xcov gem is required)*.\nMore information: https://github.com/nakiostudio/xcov\n\nxcov | \n-----|----\nSupported platforms | ios, mac\nAuthor | @nakiostudio  1 Example \n\n\n\u0002wzxhzdk:9\u0003  \n\n### sonar\n\nInvokes sonar-scanner to programmatically run SonarQube analysis\n\n\n\n> See http://docs.sonarqube.org/display/SCAN/Analyzing+with+SonarQube+Scanner for details.\nIt can process unit test results if formatted as junit report as shown in [xctest](#xctest) action. It can also integrate coverage reports in Cobertura format, which can be transformed into by [slather](#slather) action.\n\nsonar | \n-----|----\nSupported platforms | ios, android, mac\nAuthor | @c_gretzki\nReturns | The exit code of the sonar-scanner binary  1 Example \n\n\n\u0002wzxhzdk:10\u0003   Parameters \n\nKey | Description\n----|------------\n  `project_configuration_path` | The path to your sonar project configuration file; defaults to `sonar-project.properties`\n  `project_key` | The key sonar uses to identify the project, e.g. `name.gretzki.awesomeApp`. Must either be specified here or inside the sonar project configuration file\n  `project_name` | The name of the project that gets displayed on the sonar report page. Must either be specified here or inside the sonar project configuration file\n  `project_version` | The project's version that gets displayed on the sonar report page. Must either be specified here or inside the sonar project configuration file\n  `sources_path` | Comma-separated paths to directories containing source files. Must either be specified here or inside the sonar project configuration file\n  `project_language` | Language key, e.g. objc\n  `source_encoding` | Used encoding of source files, e.g., UTF-8\n  `sonar_runner_args` | Pass additional arguments to sonar-scanner. Be sure to provide the arguments with a leading `-D` e.g. FL_SONAR_RUNNER_ARGS=\"-Dsonar.verbose=true\"\n  `sonar_login` | Pass the Sonar Login token (e.g: xxxxxxprivate_token_XXXXbXX7e)   \n\n### oclint\n\nLints implementation files with OCLint\n\n\n\n> Run the static analyzer tool [OCLint](http://oclint.org) for your project. You need to have a `compile_commands.json` file in your _fastlane_ directory or pass a path to your file\n\noclint | \n-----|----\nSupported platforms | ios, android, mac\nAuthor | @HeEAaD  1 Example \n\n\n\u0002wzxhzdk:11\u0003   Parameters \n\nKey | Description\n----|------------\n  `oclint_path` | The path to oclint binary\n  `compile_commands` | The json compilation database, use xctool reporter 'json-compilation-database'\n  `select_reqex` | Select all files matching this reqex\n  `select_regex` | Select all files matching this regex\n  `exclude_regex` | Exclude all files matching this regex\n  `report_type` | The type of the report (default: html)\n  `report_path` | The reports file path\n  `list_enabled_rules` | List enabled rules\n  `rc` | Override the default behavior of rules\n  `thresholds` | List of rule thresholds to override the default behavior of rules\n  `enable_rules` | List of rules to pick explicitly\n  `disable_rules` | List of rules to disable\n  `max_priority_1` | The max allowed number of priority 1 violations\n  `max_priority_2` | The max allowed number of priority 2 violations\n  `max_priority_3` | The max allowed number of priority 3 violations\n  `enable_clang_static_analyzer` | Enable Clang Static Analyzer, and integrate results into OCLint report\n  `enable_global_analysis` | Compile every source, and analyze across global contexts (depends on number of source files, could results in high memory load)\n  `allow_duplicated_violations` | Allow duplicated violations in the OCLint report   \n\n### gcovr\n\nRuns test coverage reports for your Xcode project\n\n\n\n> Generate summarized code coverage reports using [gcovr](http://gcovr.com/)\n\ngcovr | \n-----|----\nSupported platforms | ios\nAuthor | @dtrenz  1 Example \n\n\n\u0002wzxhzdk:12\u0003  \n\n### lcov\n\nGenerates coverage data using lcov\n\n\n\n\n\nlcov | \n-----|----\nSupported platforms | ios, mac\nAuthor | @thiagolioy  1 Example \n\n\n\u0002wzxhzdk:13\u0003   Parameters \n\nKey | Description\n----|------------\n  `project_name` | Name of the project\n  `scheme` | Scheme of the project\n  `arch` | The build arch where will search .gcda files\n  `output_dir` | The output directory that coverage data will be stored. If not passed will use coverage_reports as default value   \n\n### appium\n\nRun UI test by Appium with RSpec\n\n\n\n\n\nappium | \n-----|----\nSupported platforms | ios\nAuthor | @yonekawa  1 Example \n\n\n\u0002wzxhzdk:14\u0003   Parameters \n\nKey | Description\n----|------------\n  `platform` | Appium platform name\n  `spec_path` | Path to Appium spec directory\n  `app_path` | Path to Appium target app file\n  `invoke_appium_server` | Use local Appium server with invoke automatically\n  `host` | Hostname of Appium server\n  `port` | HTTP port of Appium server\n  `appium_path` | Path to Appium executable\n  `caps` | Hash of caps for Appium::Driver   \n\n### xctool\n\nRun tests using xctool\n\n\n\n> You can run any `xctool` action. This will require having [xctool](https://github.com/facebook/xctool) installed through [homebrew](http://brew.sh/). It is recommended to store the build configuration in the `.xctool-args` file. More information available on GitHub: https://docs.fastlane.tools/actions#xctool\n\nxctool | \n-----|----\nSupported platforms | ios, mac\nAuthor | @KrauseFx  2 Examples \n\n\n\u0002wzxhzdk:15\u0003\n\n\n\n\u0002wzxhzdk:16\u0003  \n\n### xcode_server_get_assets\n\nDownloads Xcode Bot assets like the `.xcarchive` and logs\n\n\n\n> This action downloads assets from your Xcode Server Bot (works with Xcode Server\n          using Xcode 6 and 7. By default this action downloads all assets, unzips them and\n          deletes everything except for the `.xcarchive`. If you'd like to keep all downloaded\n          assets, pass `:keep_all_assets: true`. This action returns the path to the downloaded\n          assets folder and puts into shared values the paths to the asset folder and to the `.xcarchive` inside it\n\nxcode_server_get_assets | \n-----|----\nSupported platforms | ios, mac\nAuthor | @czechboy0  1 Example \n\n\n\u0002wzxhzdk:17\u0003   Parameters \n\nKey | Description\n----|------------\n  `host` | IP Address/Hostname of Xcode Server\n  `bot_name` | Name of the Bot to pull assets from\n  `integration_number` | Optionally you can override which integration's assets should be downloaded. If not provided, the latest integration is used\n  `username` | Username for your Xcode Server\n  `password` | Password for your Xcode Server\n  `target_folder` | Relative path to a folder into which to download assets\n  `keep_all_assets` | Whether to keep all assets or let the script delete everything except for the .xcarchive\n  `trust_self_signed_certs` | Whether to trust self-signed certs on your Xcode Server", 
            "title": "Testing"
        }, 
        {
            "location": "/actions/#building", 
            "text": "### gym\n\nEasily build and sign your app using _gym_\n\n\n\n> More information: https://fastlane.tools/gym\n\ngym | \n-----|----\nSupported platforms | ios, mac\nAuthor | @KrauseFx\nReturns | The absolute path to the generated ipa file  2 Examples \n\n\n\u0002wzxhzdk:18\u0003\n\n\n\n\u0002wzxhzdk:19\u0003   Parameters \n\nKey | Description\n----|------------\n  `workspace` | Path to the workspace file\n  `project` | Path to the project file\n  `scheme` | The project's scheme. Make sure it's marked as `Shared`\n  `clean` | Should the project be cleaned before building it?\n  `output_directory` | The directory in which the ipa file should be stored in\n  `output_name` | The name of the resulting ipa file\n  `configuration` | The configuration to use when building the app. Defaults to 'Release'\n  `silent` | Hide all information that's not necessary while building\n  `codesigning_identity` | The name of the code signing identity to use. It has to match the name exactly. e.g. 'iPhone Distribution: SunApps GmbH'\n  `skip_package_ipa` | Should we skip packaging the ipa?\n  `include_symbols` | Should the ipa file include symbols?\n  `include_bitcode` | Should the ipa file include bitcode?\n  `export_method` | Method used to export the archive. Valid values are: app-store, ad-hoc, package, enterprise, development, developer-id\n  `export_options` | Specifies path to export options plist. Use 'xcodebuild -help' to print the full set of available options\n  `export_xcargs` | Pass additional arguments to xcodebuild for the package phase. Be sure to quote the setting names and values e.g. OTHER_LDFLAGS=\"-ObjC -lstdc++\"\n  `skip_build_archive` | Export ipa from previously built xarchive. Uses archive_path as source\n  `build_path` | The directory in which the archive should be stored in\n  `archive_path` | The path to the created archive\n  `derived_data_path` | The directory where built products and other derived data will go\n  `result_bundle` | Location of the Xcode result bundle\n  `buildlog_path` | The directory where to store the build log\n  `sdk` | The SDK that should be used for building the application\n  `toolchain` | The toolchain that should be used for building the application (e.g. com.apple.dt.toolchain.Swift_2_3, org.swift.30p620160816a)\n  `destination` | Use a custom destination for building the app\n  `export_team_id` | Optional: Sometimes you need to specify a team id when exporting the ipa file\n  `xcargs` | Pass additional arguments to xcodebuild for the build phase. Be sure to quote the setting names and values e.g. OTHER_LDFLAGS=\"-ObjC -lstdc++\"\n  `xcconfig` | Use an extra XCCONFIG file to build your app\n  `suppress_xcode_output` | Suppress the output of xcodebuild to stdout. Output is still saved in buildlog_path\n  `disable_xcpretty` | Disable xcpretty formatting of build output\n  `xcpretty_test_format` | Use the test (RSpec style) format for build output\n  `xcpretty_formatter` | A custom xcpretty formatter to use\n  `xcpretty_report_junit` | Have xcpretty create a JUnit-style XML report at the provided path\n  `xcpretty_report_html` | Have xcpretty create a simple HTML report at the provided path\n  `xcpretty_report_json` | Have xcpretty create a JSON compilation database at the provided path\n  `analyze_build_time` | Analyze the project build time and store the output in 'culprits.txt' file\n  `xcpretty_utf` | Have xcpretty use unicode encoding when reporting builds   \n\n### cocoapods\n\nRuns `pod install` for the project\n\n\n\n> If you use [CocoaPods](http://cocoapods.org) you can use the `cocoapods` integration to run `pod install` before building your app.\n\ncocoapods | \n-----|----\nSupported platforms | ios, mac\nAuthor | @KrauseFx, @tadpol, @birmacher, @Liquidsoul  2 Examples \n\n\n\u0002wzxhzdk:20\u0003\n\n\n\n\u0002wzxhzdk:21\u0003   Parameters \n\nKey | Description\n----|------------\n  `clean` | Remove SCM directories\n  `integrate` | Integrate the Pods libraries into the Xcode project(s)\n  `repo_update` | Run `pod repo update` before install\n  `silent` | Execute command without logging output\n  `verbose` | Show more debugging information\n  `ansi` | Show output with ANSI codes\n  `use_bundle_exec` | Use bundle exec when there is a Gemfile presented\n  `podfile` | Explicitly specify the path to the Cocoapods' Podfile. You can either set it to the Podfile's path or to the folder containing the Podfile file\n  `error_callback` | A callback invoked with the command output if there is a non-zero exit status   \n\n### gradle\n\nAll gradle related actions, including building and testing your Android app\n\n\n\n> Run `./gradlew tasks` to get a list of all available gradle tasks for your project\n\ngradle | \n-----|----\nSupported platforms | ios, android\nAuthor | @KrauseFx, @lmirosevic\nReturns | The output of running the gradle task  3 Examples \n\n\n\u0002wzxhzdk:22\u0003\n\n\n\n\u0002wzxhzdk:23\u0003\n\n\n\n\u0002wzxhzdk:24\u0003\n\n\nYou can also suppress printing the output generated by running the generated Gradle command:\n\n\u0002wzxhzdk:25\u0003\n\n\nTo pass any other CLI flags to gradle use:\n\n\u0002wzxhzdk:26\u0003   Parameters \n\nKey | Description\n----|------------\n  `task` | The gradle task you want to execute, e.g. `assemble` or `test`. For tasks such as `assembleMyFlavorRelease` you should use gradle(task: 'assemble', flavor: 'Myflavor', build_type: 'Release')\n  `flavor` | The flavor that you want the task for, e.g. `MyFlavor`. If you are running the `assemble` task in a multi-flavor project, and you rely on Actions.lane_context[Actions.SharedValues::GRADLE_APK_OUTPUT_PATH] then you must specify a flavor here or else this value will be undefined\n  `build_type` | The build type that you want the task for, e.g. `Release`. Useful for some tasks such as `assemble`\n  `flags` | All parameter flags you want to pass to the gradle command, e.g. `--exitcode --xml file.xml`\n  `project_dir` | The root directory of the gradle project. Defaults to `.`\n  `gradle_path` | The path to your `gradlew`. If you specify a relative path, it is assumed to be relative to the `project_dir`\n  `properties` | Gradle properties to be exposed to the gradle script\n  `serial` | Android serial, which device should be used for this command\n  `print_command` | Control whether the generated Gradle command is printed as output before running it (true/false)\n  `print_command_output` | Control whether the output produced by given Gradle command is printed while running (true/false)   \n\n### clear_derived_data\n\nDeletes the Xcode Derived Data\n\n\n\n> Deletes the Derived Data from '~/Library/Developer/Xcode/DerivedData' or a supplied path\n\nclear_derived_data | \n-----|----\nSupported platforms | ios, mac\nAuthor | @KrauseFx  2 Examples \n\n\n\u0002wzxhzdk:27\u0003\n\n\n\n\u0002wzxhzdk:28\u0003   Parameters \n\nKey | Description\n----|------------\n  `derived_data_path` | Custom path for derivedData   \n\n### adb\n\nRun ADB Actions\n\n\n\n> see adb --help for more details\n\nadb | \n-----|----\nSupported platforms | android\nAuthor | @hjanuschka\nReturns | The output of the adb command  1 Example \n\n\n\u0002wzxhzdk:29\u0003   Parameters \n\nKey | Description\n----|------------\n  `serial` | Android serial of the device to use for this command\n  `command` | All commands you want to pass to the adb command, e.g. `kill-server`\n  `adb_path` | The path to your `adb` binary   \n\n### xcversion\n\nSelect an Xcode to use by version specifier\n\n\n\n> Finds and selects a version of an installed Xcode that best matches the provided [`Gem::Version` requirement specifier](http://www.rubydoc.info/github/rubygems/rubygems/Gem/Version)\n\nxcversion | \n-----|----\nSupported platforms | ios, mac\nAuthor | @oysta  2 Examples \n\n\n\u0002wzxhzdk:30\u0003\n\n\n\n\u0002wzxhzdk:31\u0003   Parameters \n\nKey | Description\n----|------------\n  `version` | The version of Xcode to select specified as a Gem::Version requirement string (e.g. '~> 7.1.0')   \n\n### xcodebuild\n\nUse the `xcodebuild` command to build and sign your app\n\n\n\n> **Note**: `xcodebuild` is a complex command, so it is recommended to use [gym](https://github.com/fastlane/fastlane/tree/master/gym) for building your ipa file and [scan](https://github.com/fastlane/fastlane/tree/master/scan) for testing your app instead.\n\nxcodebuild | \n-----|----\nSupported platforms | ios, mac\nAuthor | @dtrenz  1 Example \n\n\n\u0002wzxhzdk:32\u0003  \n\n### carthage\n\nRuns `carthage` for your project\n\n\n\n\n\ncarthage | \n-----|----\nSupported platforms | ios, mac\nAuthor | @bassrock, @petester42, @jschmid, @JaviSoto, @uny, @phatblat, @bfcrampton, @antondomashnev  2 Examples \n\n\n\u0002wzxhzdk:33\u0003\n\n\n\n\u0002wzxhzdk:34\u0003   Parameters \n\nKey | Description\n----|------------\n  `command` | Carthage command (one of: build, bootstrap, update, archive)\n  `dependencies` | Carthage dependencies to update\n  `use_ssh` | Use SSH for downloading GitHub repositories\n  `use_submodules` | Add dependencies as Git submodules\n  `use_binaries` | Check out dependency repositories even when prebuilt frameworks exist\n  `no_build` | When bootstrapping Carthage do not build\n  `no_skip_current` | Don't skip building the Carthage project (in addition to its dependencies)\n  `derived_data` | Use derived data folder at path\n  `verbose` | Print xcodebuild output inline\n  `platform` | Define which platform to build for\n  `cache_builds` | By default Carthage will rebuild a dependency regardless of whether it's the same resolved version as before. Passing the --cache-builds will cause carthage to avoid rebuilding a dependency if it can\n  `frameworks` | Framework name or names to archive, could be applied only along with the archive command\n  `output` | Output name for the archive, could be applied only along with the archive command. Use following format *.framework.zip\n  `configuration` | Define which build configuration to use when building\n  `toolchain` | Define which xcodebuild toolchain to use when building\n  `project_directory` | Define the directory containing the Carthage project   \n\n### xcode_select\n\nChange the xcode-path to use. Useful for beta versions of Xcode\n\n\n\n> Select and build with the Xcode installed at the provided path. Use the `xcversion` action if you want to select an Xcode based on a version specifier or you don't have known, stable paths as may happen in a CI environment.\n\nxcode_select | \n-----|----\nSupported platforms | ios, mac\nAuthor | @dtrenz  1 Example \n\n\n\u0002wzxhzdk:35\u0003  \n\n### ensure_xcode_version\n\nEnsure the selected Xcode version with xcode-select matches a value\n\n\n\n> If building your app requires a specific version of Xcode, you can invoke this command before using gym.\n        For example, to ensure that a beta version is not accidentally selected to build, which would make uploading to TestFlight fail.\n\nensure_xcode_version | \n-----|----\nSupported platforms | ios, mac\nAuthor | @JaviSoto  1 Example \n\n\n\u0002wzxhzdk:36\u0003   Parameters \n\nKey | Description\n----|------------\n  `version` | Xcode version to verify that is selected   \n\n### clean_cocoapods_cache\n\nRemove the cache for pods\n\n\n\n\n\nclean_cocoapods_cache | \n-----|----\nSupported platforms | ios, mac\nAuthor | @alexmx  2 Examples \n\n\n\u0002wzxhzdk:37\u0003\n\n\n\n\u0002wzxhzdk:38\u0003   Parameters \n\nKey | Description\n----|------------\n  `name` | Pod name to be removed from cache   \n\n### verify_xcode\n\nVerifies that the Xcode installation is properly signed by Apple\n\n\n\n> This action was implemented after the recent Xcode attack to make sure\nyou're not using a hacked Xcode installation.\nhttp://researchcenter.paloaltonetworks.com/2015/09/novel-malware-xcodeghost-modifies-xcode-infects-apple-ios-apps-and-hits-app-store/\n\nverify_xcode | \n-----|----\nSupported platforms | ios, mac\nAuthor | @KrauseFx  2 Examples \n\n\n\u0002wzxhzdk:39\u0003\n\n\n\n\u0002wzxhzdk:40\u0003   Parameters \n\nKey | Description\n----|------------\n  `xcode_path` | The path to the Xcode installation to test   \n\n### xcode_install\n\nMake sure a certain version of Xcode is installed\n\n\n\n> Makes sure a specific version of Xcode is installed. If that's not the case, it will automatically be downloaded by the [xcode_install](https://github.com/neonichu/xcode-install) gem. This will make sure to use the correct Xcode for later actions.\n\nxcode_install | \n-----|----\nSupported platforms | ios, mac\nAuthor | @Krausefx\nReturns | The path to the newly installed Xcode version  1 Example \n\n\n\u0002wzxhzdk:41\u0003   Parameters \n\nKey | Description\n----|------------\n  `version` | The version number of the version of Xcode to install\n  `username` | Your Apple ID Username\n  `team_id` | The ID of your team if you're in multiple teams   \n\n### verify_pod_keys\n\nVerifies all keys referenced from the Podfile are non-empty\n\n\n\n> Runs a check against all keys specified in your Podfile to make sure they're more than a single character long. This is to ensure you don't deploy with stubbed keys.\n\nverify_pod_keys | \n-----|----\nSupported platforms | ios, mac\nAuthor | @ashfurrow  1 Example \n\n\n\u0002wzxhzdk:42\u0003  \n\n### xctest\n\nRuns tests on the given simulator\n\n\n\n\n\nxctest | \n-----|----\nSupported platforms | ios, mac\nAuthor | @dtrenz  1 Example \n\n\n\u0002wzxhzdk:43\u0003  \n\n### xcarchive\n\nArchives the project using `xcodebuild`\n\n\n\n\n\nxcarchive | \n-----|----\nSupported platforms | ios, mac\nAuthor | @dtrenz  1 Example \n\n\n\u0002wzxhzdk:44\u0003  \n\n### xcbuild\n\nBuilds the project using `xcodebuild`\n\n\n\n\n\nxcbuild | \n-----|----\nSupported platforms | ios, mac\nAuthor | @dtrenz  1 Example \n\n\n\u0002wzxhzdk:45\u0003  \n\n### xcexport\n\nExports the project using `xcodebuild`\n\n\n\n\n\nxcexport | \n-----|----\nSupported platforms | ios, mac\nAuthor | @dtrenz  1 Example \n\n\n\u0002wzxhzdk:46\u0003  \n\n### xcclean\n\nCleans the project using `xcodebuild`\n\n\n\n\n\nxcclean | \n-----|----\nSupported platforms | ios, mac\nAuthor | @dtrenz  1 Example \n\n\n\u0002wzxhzdk:47\u0003", 
            "title": "Building"
        }, 
        {
            "location": "/actions/#screenshots", 
            "text": "### snapshot\n\nGenerate new localised screenshots on multiple devices\n\n\n\n\n\nsnapshot | \n-----|----\nSupported platforms | ios, mac\nAuthor | @KrauseFx  2 Examples \n\n\n\u0002wzxhzdk:48\u0003\n\n\n\n\u0002wzxhzdk:49\u0003   Parameters \n\nKey | Description\n----|------------\n  `workspace` | Path the workspace file\n  `project` | Path the project file\n  `xcargs` | Pass additional arguments to xcodebuild for the test phase. Be sure to quote the setting names and values e.g. OTHER_LDFLAGS=\"-ObjC -lstdc++\"\n  `devices` | A list of devices you want to take the screenshots from\n  `languages` | A list of languages which should be used\n  `launch_arguments` | A list of launch arguments which should be used\n  `output_directory` | The directory where to store the screenshots\n  `output_simulator_logs` | If the logs generated by the app (e.g. using NSLog, perror, etc.) in the Simulator should be written to the output_directory\n  `ios_version` | By default, the latest version should be used automatically. If you want to change it, do it here\n  `skip_open_summary` | Don't open the HTML summary after running _snapshot_\n  `skip_helper_version_check` | Do not check for most recent SnapshotHelper code\n  `clear_previous_screenshots` | Enabling this option will automatically clear previously generated screenshots before running snapshot\n  `reinstall_app` | Enabling this option will automatically uninstall the application before running it\n  `erase_simulator` | Enabling this option will automatically erase the simulator before running the application\n  `localize_simulator` | Enabling this option will configure the Simulator's system language\n  `app_identifier` | The bundle identifier of the app to uninstall (only needed when enabling reinstall_app)\n  `add_photos` | A list of photos that should be added to the simulator before running the application\n  `add_videos` | A list of videos that should be added to the simulator before running the application\n  `buildlog_path` | The directory where to store the build log\n  `clean` | Should the project be cleaned before building it?\n  `configuration` | The configuration to use when building the app. Defaults to 'Release'\n  `xcpretty_args` | Additional xcpretty arguments\n  `sdk` | The SDK that should be used for building the application\n  `scheme` | The scheme you want to use, this must be the scheme for the UI Tests\n  `number_of_retries` | The number of times a test can fail before snapshot should stop retrying\n  `stop_after_first_error` | Should snapshot stop immediately after the tests completely failed on one device?\n  `derived_data_path` | The directory where build products and other derived data will go\n  `test_target_name` | The name of the target you want to test (if you desire to override the Target Application from Xcode)\n  `namespace_log_files` | Separate the log files per device and per language   \n\n### screengrab\n\nAutomated localized screenshots of your Android app on every device\n\n\n\n\n\nscreengrab | \n-----|----\nSupported platforms | android\nAuthor | @asfalcone, @i2amsam, @mfurtak  2 Examples \n\n\n\u0002wzxhzdk:50\u0003\n\n\n\n\u0002wzxhzdk:51\u0003   Parameters \n\nKey | Description\n----|------------\n  `android_home` | Path to the root of your Android SDK installation, e.g. ~/tools/android-sdk-macosx\n  `build_tools_version` | The Android build tools version to use, e.g. '23.0.2'\n  `locales` | A list of locales which should be used\n  `clear_previous_screenshots` | Enabling this option will automatically clear previously generated screenshots before running screengrab\n  `output_directory` | The directory where to store the screenshots\n  `skip_open_summary` | Don't open the summary after running _screengrab_\n  `app_package_name` | The package name of the app under test (e.g. com.yourcompany.yourapp)\n  `tests_package_name` | The package name of the tests bundle (e.g. com.yourcompany.yourapp.test)\n  `use_tests_in_packages` | Only run tests in these Java packages\n  `use_tests_in_classes` | Only run tests in these Java classes\n  `launch_arguments` | Additional launch arguments\n  `test_instrumentation_runner` | The fully qualified class name of your test instrumentation runner\n  `ending_locale` | Return the device to this locale after running tests\n  `app_apk_path` | The path to the APK for the app under test\n  `tests_apk_path` | The path to the APK for the the tests bundle\n  `specific_device` | Use the device or emulator with the given serial number or qualifier\n  `device_type` | Type of device used for screenshots. Matches Google Play Types (phone, sevenInch, tenInch, tv, wear)\n  `exit_on_test_failure` | Whether or not to exit Screengrab on test failure. Exiting on failure will not copy sceenshots to local machine nor open sceenshots summary\n  `reinstall_app` | Enabling this option will automatically uninstall the application before running it   \n\n### frameit\n\nAdds device frames around the screenshots using frameit\n\n\n\n> Use [frameit](https://github.com/fastlane/fastlane/tree/master/frameit) to prepare perfect screenshots for the App Store, your website, QA\nor emails. You can add background and titles to the framed screenshots as well.\n\nframeit | \n-----|----\nSupported platforms | ios, mac\nAuthor | @KrauseFx  4 Examples \n\n\n\u0002wzxhzdk:52\u0003\n\n\n\n\u0002wzxhzdk:53\u0003\n\n\n\n\u0002wzxhzdk:54\u0003\n\n\n\n\u0002wzxhzdk:55\u0003   Parameters \n\nKey | Description\n----|------------\n  `white` | Use white device frames\n  `silver` | Use white device frames. Alias for :white\n  `rose_gold` | Use rose gold device frames. Alias for :rose_gold\n  `gold` | Use gold device frames. Alias for :gold\n  `force_device_type` | Forces a given device type, useful for Mac screenshots, as their sizes vary\n  `use_legacy_iphone5s` | Use iPhone 5s instead of iPhone SE frames\n  `use_legacy_iphone6s` | Use iPhone 6s frames instead of iPhone 7 frames\n  `path` | The path to the directory containing the screenshots", 
            "title": "Screenshots"
        }, 
        {
            "location": "/actions/#project", 
            "text": "### increment_build_number\n\nIncrement the build number of your project\n\n\n\n\n\nincrement_build_number | \n-----|----\nSupported platforms | ios, mac\nAuthor | @KrauseFx\nReturns | The new build number  4 Examples \n\n\n\u0002wzxhzdk:56\u0003\n\n\n\n\u0002wzxhzdk:57\u0003\n\n\n\n\u0002wzxhzdk:58\u0003\n\n\n\n\u0002wzxhzdk:59\u0003   Parameters \n\nKey | Description\n----|------------\n  `build_number` | Change to a specific version\n  `xcodeproj` | optional, you must specify the path to your main Xcode project if it is not in the project root directory   \n\n### set_info_plist_value\n\nSets value to Info.plist of your project as native Ruby data structures\n\n\n\n\n\nset_info_plist_value | \n-----|----\nSupported platforms | ios, mac\nAuthor | @kohtenko, @uwehollatz  2 Examples \n\n\n\u0002wzxhzdk:60\u0003\n\n\n\n\u0002wzxhzdk:61\u0003   Parameters \n\nKey | Description\n----|------------\n  `key` | Name of key in plist\n  `subkey` | Name of subkey in plist\n  `value` | Value to setup\n  `path` | Path to plist file you want to update   \n\n### get_version_number\n\nGet the version number of your project\n\n\n\n> This action will return the current version number set on your project. You first have to set up your Xcode project, if you haven't done it already: https://developer.apple.com/library/ios/qa/qa1827/_index.html\n\nget_version_number | \n-----|----\nSupported platforms | ios, mac\nAuthor | @Liquidsoul  1 Example \n\n\n\u0002wzxhzdk:62\u0003   Parameters \n\nKey | Description\n----|------------\n  `xcodeproj` | optional, you must specify the path to your main Xcode project if it is not in the project root directory\n  `scheme` | [DEPRECATED!] true - Specify a specific scheme if you have multiple per project, optional.\n                                          This parameter is deprecated and will be removed in a future release.\n                                          Please use the 'target' parameter instead. The behavior of this parameter\n                                          is currently undefined if your scheme name doesn't match your target name\n  `target` | Specify a specific target if you have multiple per project, optional   \n\n### get_info_plist_value\n\nReturns value from Info.plist of your project as native Ruby data structures\n\n\n\n> Get a value from a plist file, which can be used to fetch the app identifier and more information about your app\n\nget_info_plist_value | \n-----|----\nSupported platforms | ios, mac\nAuthor | @kohtenko  1 Example \n\n\n\u0002wzxhzdk:63\u0003   Parameters \n\nKey | Description\n----|------------\n  `key` | Name of parameter\n  `path` | Path to plist file you want to read   \n\n### update_info_plist\n\nUpdate a Info.plist file with bundle identifier and display name\n\n\n\n> This action allows you to modify your `Info.plist` file before building. This may be useful if you want a separate build for alpha, beta or nightly builds, but don't want a separate target.\n\nupdate_info_plist | \n-----|----\nSupported platforms | ios\nAuthor | @tobiasstrebitzer  5 Examples \n\n\n\u0002wzxhzdk:64\u0003\n\n\n\n\u0002wzxhzdk:65\u0003\n\n\n\n\u0002wzxhzdk:66\u0003\n\n\n\n\u0002wzxhzdk:67\u0003\n\n\n\n\u0002wzxhzdk:68\u0003   Parameters \n\nKey | Description\n----|------------\n  `xcodeproj` | Path to your Xcode project\n  `plist_path` | Path to info plist\n  `scheme` | Scheme of info plist\n  `app_identifier` | The App Identifier of your app\n  `display_name` | The Display Name of your app\n  `block` | A block to process plist with custom logic   \n\n### update_app_identifier\n\nUpdate the project's bundle identifier\n\n\n\n> Update an app identifier by either setting `CFBundleIdentifier` or `PRODUCT_BUNDLE_IDENTIFIER`, depending on which is already in use.\n\nupdate_app_identifier | \n-----|----\nSupported platforms | ios\nAuthor | @squarefrog, @tobiasstrebitzer  1 Example \n\n\n\u0002wzxhzdk:69\u0003   Parameters \n\nKey | Description\n----|------------\n  `xcodeproj` | Path to your Xcode project\n  `plist_path` | Path to info plist, relative to your Xcode project\n  `app_identifier` | The app Identifier you want to set   \n\n### get_build_number\n\nGet the build number of your project\n\n\n\n> This action will return the current build number set on your project. You first have to set up your Xcode project, if you haven't done it already: https://developer.apple.com/library/ios/qa/qa1827/_index.html\n\nget_build_number | \n-----|----\nSupported platforms | ios, mac\nAuthor | @Liquidsoul  1 Example \n\n\n\u0002wzxhzdk:70\u0003   Parameters \n\nKey | Description\n----|------------\n  `xcodeproj` | optional, you must specify the path to your main Xcode project if it is not in the project root directory   \n\n### increment_version_number\n\nIncrement the version number of your project\n\n\n\n> This action will increment the version number. \nYou first have to set up your Xcode project, if you haven't done it already:\nhttps://developer.apple.com/library/ios/qa/qa1827/_index.html\n\nincrement_version_number | \n-----|----\nSupported platforms | ios, mac\nAuthor | @serluca\nReturns | The new version number  7 Examples \n\n\n\u0002wzxhzdk:71\u0003\n\n\n\n\u0002wzxhzdk:72\u0003\n\n\n\n\u0002wzxhzdk:73\u0003\n\n\n\n\u0002wzxhzdk:74\u0003\n\n\n\n\u0002wzxhzdk:75\u0003\n\n\n\n\u0002wzxhzdk:76\u0003\n\n\n\n\u0002wzxhzdk:77\u0003   Parameters \n\nKey | Description\n----|------------\n  `bump_type` | The type of this version bump. Available: patch, minor, major\n  `version_number` | Change to a specific version. This will replace the bump type value\n  `xcodeproj` | optional, you must specify the path to your main Xcode project if it is not in the project root directory   \n\n### update_project_team\n\nUpdate Xcode Development Team ID\n\n\n\n> This action update the Developer Team ID of your Xcode Project.\n\nupdate_project_team | \n-----|----\nSupported platforms | ios, mac\nAuthor | @lgaches  1 Example \n\n\n\u0002wzxhzdk:78\u0003   Parameters \n\nKey | Description\n----|------------\n  `path` | Path to your Xcode project\n  `teamid` | The Team ID you want to use   \n\n### update_app_group_identifiers\n\nThis action changes the app group identifiers in the entitlements file\n\n\n\n> Updates the App Group Identifiers in the given Entitlements file, so you can have app groups for the app store build and app groups for an enterprise build.\n\nupdate_app_group_identifiers | \n-----|----\nSupported platforms | ios\nAuthor | @mathiasAichinger  1 Example \n\n\n\u0002wzxhzdk:79\u0003   Parameters \n\nKey | Description\n----|------------\n  `entitlements_file` | The path to the entitlement file which contains the app group identifiers\n  `app_group_identifiers` | An Array of unique identifiers for the app groups. Eg. ['group.com.test.testapp']   \n\n### get_ipa_info_plist_value\n\nReturns a value from Info.plist inside a .ipa file\n\n\n\n> This is useful for introspecting Info.plist files for .ipa files that have already been built.\n\nget_ipa_info_plist_value | \n-----|----\nSupported platforms | ios, mac\nAuthor | @johnboiles\nReturns | Returns the value in the .ipa's Info.plist corresponding to the passed in Key  1 Example \n\n\n\u0002wzxhzdk:80\u0003   Parameters \n\nKey | Description\n----|------------\n  `key` | Name of parameter\n  `ipa` | Path to IPA   \n\n### recreate_schemes\n\nRecreate not shared Xcode project schemes\n\n\n\n\n\nrecreate_schemes | \n-----|----\nSupported platforms | ios, mac\nAuthor | @jerolimov  1 Example \n\n\n\u0002wzxhzdk:81\u0003   Parameters \n\nKey | Description\n----|------------\n  `project` | The Xcode project   \n\n### update_url_schemes\n\nUpdates the URL schemes in the given Info.plist\n\n\n\n> This action allows you to update the URL schemes of the app before building it.\nFor example, you can use this to set a different url scheme for the alpha\nor beta version of the app.\n\nupdate_url_schemes | \n-----|----\nSupported platforms | ios, mac\nAuthor | @kmikael  1 Example \n\n\n\u0002wzxhzdk:82\u0003   Parameters \n\nKey | Description\n----|------------\n  `path` | The Plist file's path\n  `url_schemes` | The new URL schemes   \n\n### set_build_number_repository\n\nSet the build number from the current repository\n\n\n\n> This action will set the **build number** according to what the SCM HEAD reports.\nCurrently supported SCMs are svn (uses root revision), git-svn (uses svn revision) and git (uses short hash) and mercurial (uses short hash or revision number).\nThere is an option, `:use_hg_revision_number`, which allows to use mercurial revision number instead of hash\n\nset_build_number_repository | \n-----|----\nSupported platforms | ios, mac\nAuthor | @pbrooks, @armadsen, @AndrewSB  2 Examples \n\n\n\u0002wzxhzdk:83\u0003\n\n\n\n\u0002wzxhzdk:84\u0003   Parameters \n\nKey | Description\n----|------------\n  `use_hg_revision_number` | Use hg revision number instead of hash (ignored for non-hg repos)\n  `xcodeproj` | explicitly specify which xcodeproj to use   \n\n### set_pod_key\n\nSets a value for a key with cocoapods-keys\n\n\n\n> Adds a key to [cocoapods-keys](https://github.com/orta/cocoapods-keys)\n\nset_pod_key | \n-----|----\nSupported platforms | ios, mac\nAuthor | @marcelofabri  1 Example \n\n\n\u0002wzxhzdk:85\u0003   Parameters \n\nKey | Description\n----|------------\n  `use_bundle_exec` | Use bundle exec when there is a Gemfile presented\n  `key` | The key to be saved with cocoapods-keys\n  `value` | The value to be saved with cocoapods-keys\n  `project` | The project name", 
            "title": "Project"
        }, 
        {
            "location": "/actions/#code-signing", 
            "text": "### sigh\n\nGenerates a provisioning profile. Stores the profile in the current folder\n\n\n\n> **Note**: It is recommended to use [match](https://github.com/fastlane/fastlane/tree/master/match) according to the [codesigning.guide](https://codesigning.guide) for generating and maintaining your provisioning profiles. Use _sigh_ directly only if you want full control over what's going on and know more about codesigning.\n\nsigh | \n-----|----\nSupported platforms | ios\nAuthor | @KrauseFx\nReturns | The UUID of the profile sigh just fetched/generated  2 Examples \n\n\n\u0002wzxhzdk:86\u0003\n\n\n\n\u0002wzxhzdk:87\u0003   Parameters \n\nKey | Description\n----|------------\n  `adhoc` | Setting this flag will generate AdHoc profiles instead of App Store Profiles\n  `development` | Renew the development certificate instead of the production one\n  `skip_install` | By default, the certificate will be added to your local machine. Setting this flag will skip this action\n  `force` | Renew provisioning profiles regardless of its state - to automatically add all devices for ad hoc profiles\n  `app_identifier` | The bundle identifier of your app\n  `username` | Your Apple ID Username\n  `team_id` | The ID of your Developer Portal team if you're in multiple teams\n  `team_name` | The name of your Developer Portal team if you're in multiple teams\n  `provisioning_name` | The name of the profile that is used on the Apple Developer Portal\n  `ignore_profiles_with_different_name` | Use in combination with :provisioning_name - when true only profiles matching this exact name will be downloaded\n  `output_path` | Directory in which the profile should be stored\n  `cert_id` | The ID of the code signing certificate to use (e.g. 78ADL6LVAA) \n  `cert_owner_name` | The certificate name to use for new profiles, or to renew with. (e.g. \"Felix Krause\")\n  `filename` | Filename to use for the generated provisioning profile (must include .mobileprovision)\n  `skip_fetch_profiles` | Skips the verification of existing profiles which is useful if you have thousands of profiles\n  `skip_certificate_verification` | Skips the verification of the certificates for every existing profiles. This will make sure the provisioning profile can be used on the local machine\n  `platform` | Set the provisioning profile's platform (i.e. ios, tvos)   \n\n### match\n\nEasily sync your certificates and profiles across your team using git\n\n\n\n> More details https://github.com/fastlane/fastlane/tree/master/match\n\nmatch | \n-----|----\nSupported platforms | ios\nAuthor | @KrauseFx  3 Examples \n\n\n\u0002wzxhzdk:88\u0003\n\n\n\n\u0002wzxhzdk:89\u0003\n\n\n\n\u0002wzxhzdk:90\u0003   Parameters \n\nKey | Description\n----|------------\n  `git_url` | URL to the git repo containing all the certificates\n  `git_branch` | Specific git branch to use\n  `type` | Define the profile type, can be appstore, adhoc, development, enterprise\n  `app_identifier` | The bundle identifier(s) of your app (comma-separated)\n  `username` | Your Apple ID Username\n  `keychain_name` | Keychain the items should be imported to\n  `keychain_password` | This might be required the first time you access certificates on a new mac. For the login/default keychain this is your account password\n  `readonly` | Only fetch existing certificates and profiles, don't generate new ones\n  `team_id` | The ID of your Developer Portal team if you're in multiple teams\n  `git_full_name` | git user full name to commit\n  `git_user_email` | git user email to commit\n  `team_name` | The name of your Developer Portal team if you're in multiple teams\n  `verbose` | Print out extra information and all commands\n  `force` | Renew the provisioning profiles every time you run match\n  `skip_confirmation` | Disables confirmation prompts during nuke, answering them with yes\n  `shallow_clone` | Make a shallow clone of the repository (truncate the history to 1 revision)\n  `clone_branch_directly` | Clone just the branch specified, instead of the whole repo. This requires that the branch already exists. Otherwise the command will fail\n  `force_for_new_devices` | Renew the provisioning profiles if the device count on the developer portal has changed\n  `skip_docs` | Skip generation of a README.md for the created git repository\n  `platform` | Set the provisioning profile's platform to work with (i.e. ios, tvos)   \n\n### cert\n\nFetch or generate the latest available code signing identity\n\n\n\n> **Important**: It is recommended to use [match](https://github.com/fastlane/fastlane/tree/master/match) according to the [codesigning.guide](https://codesigning.guide) for generating and maintaining your certificates. Use _cert_ directly only if you want full control over what's going on and know more about codesigning.\nUse this action to download the latest code signing identity\n\ncert | \n-----|----\nSupported platforms | ios\nAuthor | @KrauseFx  2 Examples \n\n\n\u0002wzxhzdk:91\u0003\n\n\n\n\u0002wzxhzdk:92\u0003   Parameters \n\nKey | Description\n----|------------\n  `development` | Create a development certificate instead of a distribution one\n  `force` | Create a certificate even if an existing certificate exists\n  `username` | Your Apple ID Username\n  `team_id` | The ID of your Developer Portal team if you're in multiple teams\n  `team_name` | The name of your Developer Portal team if you're in multiple teams\n  `output_path` | The path to a directory in which all certificates and private keys should be stored\n  `keychain_path` | Path to a custom keychain\n  `keychain_password` | This might be required the first time you access certificates on a new mac. For the login/default keychain this is your account password\n  `platform` | Set the provisioning profile's platform (ios, macos)   \n\n### import_certificate\n\nImport certificate from inputfile into a keychain\n\n\n\n> Import certificates into the current default keychain. Use `create_keychain` to create a new keychain.\n\nimport_certificate | \n-----|----\nSupported platforms | ios, android, mac\nAuthor | @gin0606  2 Examples \n\n\n\u0002wzxhzdk:93\u0003\n\n\n\n\u0002wzxhzdk:94\u0003   Parameters \n\nKey | Description\n----|------------\n  `keychain_name` | Keychain the items should be imported to\n  `keychain_password` | The password for the keychain. Note that for the login keychain this is your user's password\n  `certificate_path` | Path to certificate\n  `certificate_password` | Certificate password\n  `log_output` | If output should be logged to the console   \n\n### update_project_provisioning\n\nUpdate projects code signing settings from your provisioning profile\n\n\n\n> You should check out the code signing gide before using this action: https://docs.fastlane.tools/codesigning/getting-started/\nThis action retrieves a provisioning profile UUID from a provisioning profile (.mobileprovision) to set\nup the xcode projects' code signing settings in *.xcodeproj/project.pbxproj\nThe `target_filter` value can be used to only update code signing for specified targets\nThe `build_configuration` value can be used to only update code signing for specified build configurations of the targets passing through the `target_filter`\nExample Usage is the WatchKit Extension or WatchKit App, where you need separate provisioning profiles\nExample: `update_project_provisioning(xcodeproj: \"..\", target_filter: \".*WatchKit App.*\")\n\nupdate_project_provisioning | \n-----|----\nSupported platforms | ios, mac\nAuthor | @tobiasstrebitzer, @czechboy0  1 Example \n\n\n\u0002wzxhzdk:95\u0003   Parameters \n\nKey | Description\n----|------------\n  `xcodeproj` | Path to your Xcode project\n  `profile` | Path to provisioning profile (.mobileprovision)\n  `target_filter` | A filter for the target name. Use a standard regex\n  `build_configuration_filter` | Legacy option, use 'target_filter' instead\n  `build_configuration` | A filter for the build configuration name. Use a standard regex. Applied to all configurations if not specified\n  `certificate` | Path to apple root certificate   \n\n### resign\n\nCodesign an existing ipa file\n\n\n\n> You may provide multiple provisioning profiles if the application contains\nnested applications or app extensions, which need their own provisioning\nprofile. You can do so by passing an array of provisiong profile strings or a\nhash that associates provisioning profile values to bundle identifier keys.\nresign(ipa: \"path\", signing_identity: \"identity\", provisioning_profile: {\n  \"com.example.awesome-app\" => \"App.mobileprovision\",\n  \"com.example.awesome-app.app-extension\" => \"Extension.mobileprovision\"\n})\n\nresign | \n-----|----\nSupported platforms | ios\nAuthor | @lmirosevic  2 Examples \n\n\n\u0002wzxhzdk:96\u0003\n\n\n\n\u0002wzxhzdk:97\u0003   Parameters \n\nKey | Description\n----|------------\n  `ipa` | Path to the ipa file to resign. Optional if you use the _gym_ or _xcodebuild_ action\n  `signing_identity` | Code signing identity to use. e.g. \"iPhone Distribution: Luka Mirosevic (0123456789)\"\n  `entitlements` | Path to the entitlement file to use, e.g. \"myApp/MyApp.entitlements\"\n  `provisioning_profile` | Path to your provisioning_profile. Optional if you use _sigh_\n  `version` | Version number to force resigned ipa to use.\nUpdates both CFBundleShortVersionString and CFBundleVersion values in Info.plist.\nApplies for main app and all nested apps or extensions\n  `display_name` | Display name to force resigned ipa to use\n  `short_version` | Short version string to force resigned ipa to use (CFBundleShortVersionString)\n  `bundle_version` | Bundle version to force resigned ipa to use (CFBundleVersion)\n  `bundle_id` | Set new bundle ID during resign (CFBundleIdentifier)\n  `use_app_entitlements` | Extract app bundle codesigning entitlements\nand combine with entitlements from new provisionin profile\n  `keychain_path` | Provide a path to a keychain file that should be used by /usr/bin/codesign   \n\n### register_devices\n\nRegisters new devices to the Apple Dev Portal\n\n\n\n> This will register iOS devices with the Developer Portal so that you can include them in your provisioning profiles.\nThis is an optimistic action, in that it will only ever add new devices to the member center, and never remove devices. If a device which has already been registered within the member center is not passed to this action, it will be left alone in the member center and continue to work.\nThe action will connect to the Apple Developer Portal using the username you specified in your `Appfile` with `apple_id`, but you can override it using the `username` option, or by setting the env variable `ENV['DELIVER_USER']`.\n\nregister_devices | \n-----|----\nSupported platforms | ios\nAuthor | @lmirosevic  3 Examples \n\n\n\u0002wzxhzdk:98\u0003\n\n\n\n\u0002wzxhzdk:99\u0003\n\n\n\n\u0002wzxhzdk:100\u0003   Parameters \n\nKey | Description\n----|------------\n  `devices` | A hash of devices, with the name as key and the UDID as value\n  `devices_file` | Provide a path to a file with the devices to register. For the format of the file see the examples\n  `team_id` | The ID of your Developer Portal team if you're in multiple teams\n  `team_name` | The name of your Developer Portal team if you're in multiple teams\n  `username` | Optional: Your Apple ID   \n\n### automatic_code_signing\n\nUpdates the Xcode 8 Automatic Codesigning Flag\n\n\n\n> Updates the Xcode 8 Automatic Codesigning Flag of all targets in the project\n\nautomatic_code_signing | \n-----|----\nSupported platforms | ios, mac\nAuthor | @mathiasAichinger, @hjanuschka\nReturns | The current status (boolean) of codesigning after modification  8 Examples \n\n\n\u0002wzxhzdk:101\u0003\n\n\n\n\u0002wzxhzdk:102\u0003\n\n\n\n\u0002wzxhzdk:103\u0003\n\n\n\n\u0002wzxhzdk:104\u0003\n\n\n\n\u0002wzxhzdk:105\u0003\n\n\n\n\u0002wzxhzdk:106\u0003\n\n\n\n\u0002wzxhzdk:107\u0003\n\n\n\n\u0002wzxhzdk:108\u0003   Parameters \n\nKey | Description\n----|------------\n  `path` | Path to your Xcode project\n  `use_automatic_signing` | Defines if project should use automatic signing\n  `team_id` | Team ID, is used when upgrading project\n  `targets` | Specify targets you want to toggle the signing mech. (default to all targets)   \n\n### register_device\n\nRegisters a new device to the Apple Dev Portal\n\n\n\n> This will register an iOS device with the Developer Portal so that you can include it in your provisioning profiles.\nThis is an optimistic action, in that it will only ever add a device to the member center. If the device has already been registered within the member center, it will be left alone in the member center.\nThe action will connect to the Apple Developer Portal using the username you specified in your `Appfile` with `apple_id`, but you can override it using the `username` option.\n\nregister_device | \n-----|----\nSupported platforms | ios\nAuthor | @pvinis  2 Examples \n\n\n\u0002wzxhzdk:109\u0003\n\n\n\n\u0002wzxhzdk:110\u0003   Parameters \n\nKey | Description\n----|------------\n  `name` | Provide the name of the device to register as\n  `udid` | Provide the UDID of the device to register as\n  `team_id` | The ID of your Developer Portal team if you're in multiple teams\n  `team_name` | The name of your Developer Portal team if you're in multiple teams\n  `username` | Optional: Your Apple ID", 
            "title": "Code Signing"
        }, 
        {
            "location": "/actions/#documentation", 
            "text": "### jazzy\n\nGenerate docs using Jazzy\n\n\n\n\n\njazzy | \n-----|----\nSupported platforms | ios, mac\nAuthor | @KrauseFx  1 Example \n\n\n\u0002wzxhzdk:111\u0003   Parameters \n\nKey | Description\n----|------------\n  `config` | Path to jazzy config file   \n\n### appledoc\n\nGenerate Apple-like source code documentation from the source code\n\n\n\n> Runs `appledoc [OPTIONS]  ` for the project\n\nappledoc | \n-----|----\nSupported platforms | ios, mac\nAuthor | @alexmx  1 Example \n\n\n\u0002wzxhzdk:112\u0003   Parameters \n\nKey | Description\n----|------------\n  `input` | Path to source files\n  `output` | Output path\n  `templates` | Template files path\n  `docset_install_path` | DocSet installation path\n  `include` | Include static doc(s) at path\n  `ignore` | Ignore given path\n  `exclude_output` | Exclude given path from output\n  `index_desc` | File including main index description\n  `project_name` | Project name\n  `project_version` | Project version\n  `project_company` | Project company\n  `company_id` | Company UTI (i.e. reverse DNS name)\n  `create_html` | Create HTML\n  `create_docset` | Create documentation set\n  `install_docset` | Install documentation set to Xcode\n  `publish_docset` | Prepare DocSet for publishing\n  `html_anchors` | The html anchor format to use in DocSet HTML\n  `clean_output` | Remove contents of output path before starting\n  `docset_bundle_id` | DocSet bundle identifier\n  `docset_bundle_name` | DocSet bundle name\n  `docset_desc` | DocSet description\n  `docset_copyright` | DocSet copyright message\n  `docset_feed_name` | DocSet feed name\n  `docset_feed_url` | DocSet feed URL\n  `docset_feed_formats` | DocSet feed formats. Separated by a comma [atom,xml]\n  `docset_package_url` | DocSet package (.xar) URL\n  `docset_fallback_url` | DocSet fallback URL\n  `docset_publisher_id` | DocSet publisher identifier\n  `docset_publisher_name` | DocSet publisher name\n  `docset_min_xcode_version` | DocSet min. Xcode version\n  `docset_platform_family` | DocSet platform family\n  `docset_cert_issuer` | DocSet certificate issuer\n  `docset_cert_signer` | DocSet certificate signer\n  `docset_bundle_filename` | DocSet bundle filename\n  `docset_atom_filename` | DocSet atom feed filename\n  `docset_xml_filename` | DocSet xml feed filename\n  `docset_package_filename` | DocSet package (.xar,.tgz) filename\n  `options` | Documentation generation options\n  `crossref_format` | Cross reference template regex\n  `exit_threshold` | Exit code threshold below which 0 is returned\n  `docs_section_title` | Title of the documentation section (defaults to \"Programming Guides\"\n  `warnings` | Documentation generation warnings\n  `logformat` | Log format [0-3]\n  `verbose` | Log verbosity level [0-6,xcode]", 
            "title": "Documentation"
        }, 
        {
            "location": "/actions/#beta", 
            "text": "### pilot\n\nUpload a new binary to iTunes Connect for TestFlight beta testing\n\n\n\n> More details can be found on https://github.com/fastlane/fastlane/tree/master/pilot\nThis integration will only do the TestFlight upload\n\npilot | \n-----|----\nSupported platforms | ios, android, mac\nAuthor | @KrauseFx  4 Examples \n\n\n\u0002wzxhzdk:113\u0003\n\n\n\n\u0002wzxhzdk:114\u0003\n\n\n\n\u0002wzxhzdk:115\u0003\n\n\n\n\u0002wzxhzdk:116\u0003   Parameters \n\nKey | Description\n----|------------\n  `username` | Your Apple ID Username\n  `app_identifier` | The bundle identifier of the app to upload or manage testers (optional)\n  `app_platform` | The platform to use (optional)\n  `ipa` | Path to the ipa file to upload\n  `changelog` | Provide the 'what's new' text when uploading a new build\n  `beta_app_description` | Provide the beta app description when uploading a new build\n  `beta_app_feedback_email` | Provide the beta app email when uploading a new build\n  `skip_submission` | Skip the distributing action of pilot and only upload the ipa file\n  `skip_waiting_for_build_processing` | Don't wait for the build to process. If set to true, the changelog won't be set, `distribute_external` option won't work and no build will be distributed to testers\n  `update_build_info_on_upload` | [DEPRECATED!] true - Update build info immediately after validation. This is deprecated and will be removed in a future release. iTunesConnect no longer supports setting build info until after build processing has completed, which is when build info is updated by default\n  `apple_id` | The unique App ID provided by iTunes Connect\n  `distribute_external` | Should the build be distributed to external testers?\n  `first_name` | The tester's first name\n  `last_name` | The tester's last name\n  `email` | The tester's email\n  `testers_file_path` | Path to a CSV file of testers\n  `wait_processing_interval` | Interval in seconds to wait for iTunes Connect processing\n  `team_id` | The ID of your iTunes Connect team if you're in multiple teams\n  `team_name` | The name of your iTunes Connect team if you're in multiple teams\n  `dev_portal_team_id` | The short ID of your team in the developer portal, if you're in multiple teams. Different from your iTC team ID!\n  `itc_provider` | The provider short name to be used with the iTMSTransporter to identify your team\n  `groups` | Associate tester to one group or more by group name / group id. E.g. '-g \"Team 1\",\"Team 2\"'   \n\n### crashlytics\n\nUpload a new build to Crashlytics Beta\n\n\n\n> Additionally you can specify `notes`, `emails`, `groups` and `notifications`.\nDistributing to Groups: When using the `groups` parameter, it's important to use the group **alias** names for each group you'd like to distribute to. A group's alias can be found in the web UI. If you're viewing the Beta page, you can open the groups dialog here:\n\ncrashlytics | \n-----|----\nSupported platforms | ios, android, mac\nAuthor | @KrauseFx, @pedrogimenez  2 Examples \n\n\n\u0002wzxhzdk:117\u0003\n\n\n\n\u0002wzxhzdk:118\u0003   Parameters \n\nKey | Description\n----|------------\n  `ipa_path` | Path to your IPA file. Optional if you use the _gym_ or _xcodebuild_ action\n  `apk_path` | Path to your APK file\n  `crashlytics_path` | Path to the submit binary in the Crashlytics bundle (iOS) or `crashlytics-devtools.jar` file (Android)\n  `api_token` | Crashlytics API Key\n  `build_secret` | Crashlytics Build Secret\n  `notes_path` | Path to the release notes\n  `notes` | The release notes as string - uses :notes_path under the hood\n  `groups` | The groups used for distribution, separated by commas\n  `emails` | Pass email addresses of testers, separated by commas\n  `notifications` | Crashlytics notification option (true/false)\n  `debug` | Crashlytics debug option (true/false)   \n\n### hockey\n\nUpload a new build to HockeyApp\n\n\n\n> Symbols will also be uploaded automatically if a `app.dSYM.zip` file is found next to `app.ipa`. In case it is located in a different place you can specify the path explicitly in `:dsym` parameter.\nMore information about the available options can be found in the [HockeyApp Docs](http://support.hockeyapp.net/kb/api/api-versions#upload-version).\n\nhockey | \n-----|----\nSupported platforms | ios, android, mac\nAuthor | @KrauseFx, @modzelewski, @lacostej  2 Examples \n\n\n\u0002wzxhzdk:119\u0003\n\n\n\n\u0002wzxhzdk:120\u0003   Parameters \n\nKey | Description\n----|------------\n  `apk` | Path to your APK file\n  `api_token` | API Token for Hockey Access\n  `ipa` | Path to your IPA file. Optional if you use the _gym_ or _xcodebuild_ action. For Mac zip the .app. For Android provide path to .apk file. In addition you could use this to upload .msi, .zip, .pkg, etc if you use the 'create_update' mechanism\n  `dsym` | Path to your symbols file. For iOS and Mac provide path to app.dSYM.zip. For Android provide path to mappings.txt file\n  `create_update` | Set true if you want to create then update your app as opposed to just upload it. You will need the 'public_identifier', 'bundle_version' and 'bundle_short_version'\n  `notes` | Beta Notes\n  `notify` | Notify testers? \"1\" for yes\n  `status` | Download status: \"1\" = No user can download; \"2\" = Available for download (only possible with full-access token)\n  `notes_type` | Notes type for your :notes, \"0\" = Textile, \"1\" = Markdown (default)\n  `release_type` | Release type of the app: \"0\" = Beta (default), \"1\" = Store, \"2\" = Alpha, \"3\" = Enterprise\n  `mandatory` | Set to \"1\" to make this update mandatory\n  `teams` | Comma separated list of team ID numbers to which this build will be restricted\n  `users` | Comma separated list of user ID numbers to which this build will be restricted\n  `tags` | Comma separated list of tags which will receive access to the build\n  `bundle_short_version` | The bundle_short_version of your application, required when using `create_update`\n  `bundle_version` | The bundle_version of your application, required when using `create_update`\n  `public_identifier` | App id of the app you are targeting, usually you won't need this value. Required, if `upload_dsym_only` set to `true`\n  `commit_sha` | The Git commit SHA for this build\n  `repository_url` | The URL of your source repository\n  `build_server_url` | The URL of the build job on your build server\n  `upload_dsym_only` | Flag to upload only the dSYM file to hockey app\n  `owner_id` | ID for the owner of the app\n  `strategy` | Strategy: 'add' = to add the build as a new build even if it has the same build number (default); 'replace' = to replace a build with the same build number\n  `bypass_cdn` | Flag to bypass Hockey CDN when it uploads successfully but reports error\n  `dsa_signature` | DSA signature for sparkle updates for macOS   \n\n### testflight\n\nAlias for the pilot action\n\n\n\n\n\ntestflight | \n-----|----\nSupported platforms | ios, android, mac\nAuthor | @KrauseFx  4 Examples \n\n\n\u0002wzxhzdk:121\u0003\n\n\n\n\u0002wzxhzdk:122\u0003\n\n\n\n\u0002wzxhzdk:123\u0003\n\n\n\n\u0002wzxhzdk:124\u0003   Parameters \n\nKey | Description\n----|------------\n  `username` | Your Apple ID Username\n  `app_identifier` | The bundle identifier of the app to upload or manage testers (optional)\n  `app_platform` | The platform to use (optional)\n  `ipa` | Path to the ipa file to upload\n  `changelog` | Provide the 'what's new' text when uploading a new build\n  `beta_app_description` | Provide the beta app description when uploading a new build\n  `beta_app_feedback_email` | Provide the beta app email when uploading a new build\n  `skip_submission` | Skip the distributing action of pilot and only upload the ipa file\n  `skip_waiting_for_build_processing` | Don't wait for the build to process. If set to true, the changelog won't be set, `distribute_external` option won't work and no build will be distributed to testers\n  `update_build_info_on_upload` | [DEPRECATED!] true - Update build info immediately after validation. This is deprecated and will be removed in a future release. iTunesConnect no longer supports setting build info until after build processing has completed, which is when build info is updated by default\n  `apple_id` | The unique App ID provided by iTunes Connect\n  `distribute_external` | Should the build be distributed to external testers?\n  `first_name` | The tester's first name\n  `last_name` | The tester's last name\n  `email` | The tester's email\n  `testers_file_path` | Path to a CSV file of testers\n  `wait_processing_interval` | Interval in seconds to wait for iTunes Connect processing\n  `team_id` | The ID of your iTunes Connect team if you're in multiple teams\n  `team_name` | The name of your iTunes Connect team if you're in multiple teams\n  `dev_portal_team_id` | The short ID of your team in the developer portal, if you're in multiple teams. Different from your iTC team ID!\n  `itc_provider` | The provider short name to be used with the iTMSTransporter to identify your team\n  `groups` | Associate tester to one group or more by group name / group id. E.g. '-g \"Team 1\",\"Team 2\"'   \n\n### deploygate\n\nUpload a new build to [DeployGate](https://deploygate.com/)\n\n\n\n> You can retrieve your username and API token on [your settings page](https://deploygate.com/settings)\nMore information about the available options can be found in the [DeployGate Push API document](https://deploygate.com/docs/api).\n\ndeploygate | \n-----|----\nSupported platforms | ios, android\nAuthor | @tnj, @tomorrowkey  2 Examples \n\n\n\u0002wzxhzdk:125\u0003\n\n\n\n\u0002wzxhzdk:126\u0003   Parameters \n\nKey | Description\n----|------------\n  `api_token` | Deploygate API Token\n  `user` | Target username or organization name\n  `ipa` | Path to your IPA file. Optional if you use the _gym_ or _xcodebuild_ action\n  `apk` | Path to your APK file\n  `message` | Release Notes\n  `distribution_key` | Target Distribution Key\n  `release_note` | Release note for distribution page\n  `disable_notify` | Disables Push notification emails   \n\n### apteligent\n\nUpload dSYM file to Apteligent (Crittercism)\n\n\n\n\n\napteligent | \n-----|----\nSupported platforms | ios\nAuthor | @Mo7amedFouad  1 Example \n\n\n\u0002wzxhzdk:127\u0003   Parameters \n\nKey | Description\n----|------------\n  `dsym` | dSYM.zip file to upload to Apteligent\n  `app_id` | Apteligent App ID key e.g. 569f5c87cb99e10e00c7xxxx\n  `api_key` | Apteligent App API key e.g. IXPQIi8yCbHaLliqzRoo065tH0lxxxxx   \n\n### appetize\n\nUpload your app to Appetize.io to stream it in the browser\n\n\n\n> If you provide a `public_key`, this will overwrite an existing application. If you want to have this build as a new app version, you shouldn't provide this value.\nTo integrate appetize into your GitHub workflow check out the [device_grid guide](https://github.com/fastlane/fastlane/blob/master/fastlane/lib/fastlane/actions/device_grid/README.md)\n\nappetize | \n-----|----\nSupported platforms | ios, android\nAuthor | @klundberg, @giginet  1 Example \n\n\n\u0002wzxhzdk:128\u0003   Parameters \n\nKey | Description\n----|------------\n  `api_token` | Appetize.io API Token\n  `url` | URL from which the ipa file can be fetched. Alternative to :path\n  `platform` | Platform. Either `ios` or `android`. Default is `ios`\n  `path` | Path to zipped build on the local filesystem. Either this or `url` must be specified\n  `public_key` | If not provided, a new app will be created. If provided, the existing build will be overwritten\n  `note` | Notes you wish to add to the uploaded app   \n\n### testfairy\n\nUpload a new build to TestFairy\n\n\n\n> You can retrieve your API key on [your settings page](https://free.testfairy.com/settings/)\n\ntestfairy | \n-----|----\nSupported platforms | ios, android\nAuthor | @taka0125, @tcurdt  1 Example \n\n\n\u0002wzxhzdk:129\u0003   Parameters \n\nKey | Description\n----|------------\n  `api_key` | API Key for TestFairy\n  `ipa` | Path to your IPA file for iOS or APK for Android\n  `symbols_file` | Symbols mapping file\n  `testers_groups` | Array of tester groups to be notified\n  `metrics` | Array of metrics to record (cpu,memory,network,phone_signal,gps,battery,mic,wifi)\n  `icon_watermark` | Add a small watermark to app icon\n  `comment` | Additional release notes for this upload. This text will be added to email notifications\n  `auto_update` | Allows easy upgrade of all users to current version\n  `notify` | Send email to testers\n  `options` | Array of options (shake,video_only_wifi,anonymous)   \n\n### appaloosa\n\nUpload your app to Appaloosa Store\n\n\n\n> Appaloosa is a private mobile application store. This action \noffers a quick deployment on the platform. You can create an \naccount, push to your existing account, or manage your user \ngroups. We accept iOS and Android applications.\n\nappaloosa | \n-----|----\nSupported platforms | ios, android, mac\nAuthor | @Appaloosa  1 Example \n\n\n\u0002wzxhzdk:130\u0003   Parameters \n\nKey | Description\n----|------------\n  `binary` | Binary path. Optional for ipa if you use the `ipa` or `xcodebuild` action\n  `api_token` | Your API token\n  `store_id` | Your Store id\n  `group_ids` | Your app is limited to special users? Give us the group ids\n  `screenshots` | Add some screenshots application to your store or hit [enter]\n  `locale` | Select the folder locale for your screenshots\n  `device` | Select the device format for your screenshots\n  `description` | Your app description   \n\n### nexus_upload\n\nUpload a file to Sonatype Nexus platform\n\n\n\n\n\nnexus_upload | \n-----|----\nSupported platforms | ios, android, mac\nAuthor | @xfreebird  1 Example \n\n\n\u0002wzxhzdk:131\u0003   Parameters \n\nKey | Description\n----|------------\n  `file` | File to be uploaded to Nexus\n  `repo_id` | Nexus repository id e.g. artefacts\n  `repo_group_id` | Nexus repository group id e.g. com.company\n  `repo_project_name` | Nexus repository commandect name. Only letters, digits, underscores(_), hyphens(-), and dots(.) are allowed\n  `repo_project_version` | Nexus repository commandect version\n  `repo_classifier` | Nexus repository artifact classifier (optional)\n  `endpoint` | Nexus endpoint e.g. http://nexus:8081\n  `mount_path` | Nexus mount path. Defaults to /nexus\n  `username` | Nexus username\n  `password` | Nexus password\n  `ssl_verify` | Verify SSL\n  `verbose` | Make detailed output\n  `proxy_username` | Proxy username\n  `proxy_password` | Proxy password\n  `proxy_address` | Proxy address\n  `proxy_port` | Proxy port   \n\n### installr\n\nUpload a new build to Installr\n\n\n\n\n\ninstallr | \n-----|----\nSupported platforms | ios\nAuthor | @scottrhoyt  1 Example \n\n\n\u0002wzxhzdk:132\u0003   Parameters \n\nKey | Description\n----|------------\n  `api_token` | API Token for Installr Access\n  `ipa` | Path to your IPA file. Optional if you use the _gym_ or _xcodebuild_ action\n  `notes` | Release notes\n  `notify` | Groups to notify (e.g. 'dev,qa')\n  `add` | Groups to add (e.g. 'exec,ops')   \n\n### set_changelog\n\nSet the changelog for all languages on iTunes Connect\n\n\n\n> This is useful if you have only one changelog for all languages.\nYou can store the changelog in `./fastlane/changelog.txt` and it will automatically get loaded from there. This integration is useful if you support e.g. 10 languages and want to use the same \"What's new\"-text for all languages.\n\nset_changelog | \n-----|----\nSupported platforms | ios, mac\nAuthor | @KrauseFx  1 Example \n\n\n\u0002wzxhzdk:133\u0003   Parameters \n\nKey | Description\n----|------------\n  `app_identifier` | The bundle identifier of your app\n  `username` | Your Apple ID Username\n  `version` | The version number to create/update\n  `changelog` | Changelog text that should be uploaded to iTunes Connect\n  `team_id` | The ID of your iTunes Connect team if you're in multiple teams\n  `team_name` | The name of your iTunes Connect team if you're in multiple teams   \n\n### splunkmint\n\nUpload dSYM file to Splunk MINT\n\n\n\n\n\nsplunkmint | \n-----|----\nSupported platforms | ios\nAuthor | @xfreebird  1 Example \n\n\n\u0002wzxhzdk:134\u0003   Parameters \n\nKey | Description\n----|------------\n  `dsym` | dSYM.zip file to upload to Splunk MINT\n  `api_key` | Splunk MINT App API key e.g. f57a57ca\n  `api_token` | Splunk MINT API token e.g. e05ba40754c4869fb7e0b61\n  `verbose` | Make detailed output\n  `upload_progress` | Show upload progress\n  `proxy_username` | Proxy username\n  `proxy_password` | Proxy password\n  `proxy_address` | Proxy address\n  `proxy_port` | Proxy port   \n\n### podio_item\n\nCreates or updates an item within your Podio app\n\n\n\n> Use this action to create or update an item within your Podio app\n        (see https://help.podio.com/hc/en-us/articles/201019278-Creating-apps-).\n        Pass in dictionary with field keys and their values.\n        Field key is located under Modify app -> Advanced -> Developer -> External ID\n        (see https://developers.podio.com/examples/items)\n\npodio_item | \n-----|----\nSupported platforms | ios, android, mac\nAuthor | @pprochazka72, @laugejepsen  1 Example \n\n\n\u0002wzxhzdk:135\u0003   Parameters \n\nKey | Description\n----|------------\n  `client_id` | Client ID for Podio API (see https://developers.podio.com/api-key)\n  `client_secret` | Client secret for Podio API (see https://developers.podio.com/api-key)\n  `app_id` | App ID of the app you intend to authenticate with (see https://developers.podio.com/authentication/app_auth)\n  `app_token` | App token of the app you intend to authenticate with (see https://developers.podio.com/authentication/app_auth)\n  `identifying_field` | String specifying the field key used for identification of an item\n  `identifying_value` | String uniquely specifying an item within the app\n  `other_fields` | Dictionary of your app fields. Podio supports several field types, see https://developers.podio.com/doc/items", 
            "title": "Beta"
        }, 
        {
            "location": "/actions/#push", 
            "text": "### pem\n\nMakes sure a valid push profile is active and creates a new one if needed\n\n\n\n> Additionally to the available options, you can also specify a block that only gets executed if a new\nprofile was created. You can use it to upload the new profile to your server.\nUse it like this: \npem(\n  new_profile: proc do \n    # your upload code\n  end\n)\n\npem | \n-----|----\nSupported platforms | ios\nAuthor | @KrauseFx  2 Examples \n\n\n\u0002wzxhzdk:136\u0003\n\n\n\n\u0002wzxhzdk:137\u0003   Parameters \n\nKey | Description\n----|------------\n  `development` | Renew the development push certificate instead of the production one\n  `generate_p12` | Generate a p12 file additionally to a PEM file\n  `force` | Create a new push certificate, even if the current one is active for 30 more days\n  `save_private_key` | Set to save the private RSA key\n  `app_identifier` | The bundle identifier of your app\n  `username` | Your Apple ID Username\n  `team_id` | The ID of your Developer Portal team if you're in multiple teams\n  `team_name` | The name of your Developer Portal team if you're in multiple teams\n  `p12_password` | The password that is used for your p12 file\n  `pem_name` | The file name of the generated .pem file\n  `output_path` | The path to a directory in which all certificates and private keys should be stored\n  `new_profile` | Block that is called if there is a new profile   \n\n### update_urban_airship_configuration\n\nSet the Urban Airship plist configuration values\n\n\n\n> This action updates the AirshipConfig.plist need to configure the Urban Airship SDK at runtime, allowing keys and secrets to easily be set for Enterprise and Production versions of the application.\n\nupdate_urban_airship_configuration | \n-----|----\nSupported platforms | ios\nAuthor | @kcharwood  1 Example \n\n\n\u0002wzxhzdk:138\u0003   Parameters \n\nKey | Description\n----|------------\n  `plist_path` | Path to Urban Airship configuration Plist\n  `development_app_key` | The development app key\n  `development_app_secret` | The development app secret\n  `production_app_key` | The production app key\n  `production_app_secret` | The production app secret\n  `detect_provisioning_mode` | Automatically detect provisioning mode   \n\n### onesignal\n\nCreate a new OneSignal application\n\n\n\n> You can use this action to automatically create a OneSignal application. You can also upload a .p12 with password, a GCM key, or both\n\nonesignal | \n-----|----\nSupported platforms | ios\nAuthor | @timothybarraclough, @smartshowltd  1 Example \n\n\n\u0002wzxhzdk:139\u0003   Parameters \n\nKey | Description\n----|------------\n  `auth_token` | OneSignal Authorization Key\n  `app_name` | OneSignal App Name\n  `android_token` | ANDROID GCM KEY\n  `apns_p12` | APNS P12 File (in .p12 format)\n  `apns_p12_password` | APNS P12 password\n  `apns_env` | APNS environment", 
            "title": "Push"
        }, 
        {
            "location": "/actions/#releasing-your-app", 
            "text": "### deliver\n\nUses deliver to upload new app metadata and builds to iTunes Connect\n\n\n\n> Using _deliver_ after _gym_ and _snapshot_ will automatically upload the\nlatest ipa and screenshots with no other configuration\nIf you don't want a PDF report for App Store builds, use the `:force` option.\nThis is useful when running _fastlane_ on your Continuous Integration server: `deliver(force: true)`\nIf your account is on multiple teams and you need to tell the `iTMSTransporter`\nwhich 'provider' to use, you can set the `itc_provider` option to pass this info.\n\ndeliver | \n-----|----\nSupported platforms | ios, mac\nAuthor | @KrauseFx  1 Example \n\n\n\u0002wzxhzdk:140\u0003   Parameters \n\nKey | Description\n----|------------\n  `username` | Your Apple ID Username\n  `app_identifier` | The bundle identifier of your app\n  `app` | The app ID of the app you want to use/modify\n  `edit_live` | Modify live metadata, this option disables ipa upload and screenshot upload\n  `ipa` | Path to your ipa file\n  `pkg` | Path to your pkg file\n  `platform` | The platform to use (optional)\n  `metadata_path` | Path to the folder containing the metadata files\n  `screenshots_path` | Path to the folder containing the screenshots\n  `skip_binary_upload` | Skip uploading an ipa or pkg to iTunes Connect\n  `skip_screenshots` | Don't upload the screenshots\n  `app_version` | The version that should be edited or created\n  `skip_metadata` | Don't upload the metadata (e.g. title, description). This will still upload screenshots\n  `skip_app_version_update` | Don't update app version for submission\n  `force` | Skip the HTML report file verification\n  `submit_for_review` | Submit the new version for Review after uploading everything\n  `automatic_release` | Should the app be automatically released once it's approved?\n  `phased_release` | Enable the phased release feature of iTC\n  `price_tier` | The price tier of this application\n  `build_number` | If set the given build number (already uploaded to iTC) will be used instead of the current built one\n  `app_rating_config_path` | Path to the app rating's config\n  `submission_information` | Extra information for the submission (e.g. third party content)\n  `team_id` | The ID of your iTunes Connect team if you're in multiple teams\n  `team_name` | The name of your iTunes Connect team if you're in multiple teams\n  `dev_portal_team_id` | The short ID of your Developer Portal team, if you're in multiple teams. Different from your iTC team ID!\n  `dev_portal_team_name` | The name of your Developer Portal team if you're in multiple teams\n  `itc_provider` | The provider short name to be used with the iTMSTransporter to identify your team\n  `overwrite_screenshots` | Clear all previously uploaded screenshots before uploading the new ones\n  `run_precheck_before_submit` | Run precheck before submitting to app review\n  `precheck_default_rule_level` | The default rule level unless otherwise configured\n  `app_icon` | Metadata: The path to the app icon\n  `apple_watch_app_icon` | Metadata: The path to the Apple Watch app icon\n  `copyright` | Metadata: The copyright notice\n  `primary_category` | Metadata: The english name of the primary category (e.g. `Business`, `Books`)\n  `secondary_category` | Metadata: The english name of the secondary category (e.g. `Business`, `Books`)\n  `primary_first_sub_category` | Metadata: The english name of the primary first sub category (e.g. `Educational`, `Puzzle`)\n  `primary_second_sub_category` | Metadata: The english name of the primary second sub category (e.g. `Educational`, `Puzzle`)\n  `secondary_first_sub_category` | Metadata: The english name of the secondary first sub category (e.g. `Educational`, `Puzzle`)\n  `secondary_second_sub_category` | Metadata: The english name of the secondary second sub category (e.g. `Educational`, `Puzzle`)\n  `trade_representative_contact_information` | Metadata: A hash containing the trade representative contact information\n  `app_review_information` | Metadata: A hash containing the review information\n  `description` | Metadata: The localised app description\n  `name` | Metadata: The localised app name\n  `subtitle` | Metadata: The localised app subtitle\n  `keywords` | Metadata: An array of localised keywords\n  `promotional_text` | Metadata: An array of localised promotional texts\n  `release_notes` | Metadata: Localised release notes for this version\n  `privacy_url` | Metadata: Localised privacy url\n  `support_url` | Metadata: Localised support url\n  `marketing_url` | Metadata: Localised marketing url   \n\n### supply\n\nUpload metadata, screenshots and binaries to Google Play\n\n\n\n> More information: https://github.com/fastlane/fastlane/tree/master/supply\n\nsupply | \n-----|----\nSupported platforms | android\nAuthor | @KrauseFx  1 Example \n\n\n\u0002wzxhzdk:141\u0003   Parameters \n\nKey | Description\n----|------------\n  `package_name` | The package name of the application to use\n  `track` | The track of the application to use: production, beta, alpha, rollout\n  `rollout` | The percentage of the user fraction when uploading to the rollout track\n  `metadata_path` | Path to the directory containing the metadata files\n  `key` | [DEPRECATED!] Use --json_key instead - The p12 File used to authenticate with Google\n  `issuer` | [DEPRECATED!] Use --json_key instead - The issuer of the p12 file (email address of the service account)\n  `json_key` | The service account json file used to authenticate with Google\n  `json_key_data` | The service account json used to authenticate with Google\n  `apk` | Path to the APK file to upload\n  `apk_paths` | An array of paths to APK files to upload\n  `skip_upload_apk` | Whether to skip uploading APK\n  `skip_upload_metadata` | Whether to skip uploading metadata\n  `skip_upload_images` | Whether to skip uploading images, screenshots not included\n  `skip_upload_screenshots` | Whether to skip uploading SCREENSHOTS\n  `track_promote_to` | The track to promote to: production, beta, alpha, rollout\n  `validate_only` | Only validate changes with Google Play rather than actually publish\n  `mapping` | Path to the mapping file to upload\n  `mapping_paths` | An array of paths to mapping files to upload\n  `root_url` | Root URL for the Google Play API. The provided URL will be used for API calls in place of https://www.googleapis.com/\n  `check_superseded_tracks` | Check the other tracks for superseded versions and disable them   \n\n### appstore\n\nAlias for the deliver action\n\n\n\n\n\nappstore | \n-----|----\nSupported platforms | ios, mac\nAuthor | @KrauseFx  1 Example \n\n\n\u0002wzxhzdk:142\u0003   Parameters \n\nKey | Description\n----|------------\n  `username` | Your Apple ID Username\n  `app_identifier` | The bundle identifier of your app\n  `app` | The app ID of the app you want to use/modify\n  `edit_live` | Modify live metadata, this option disables ipa upload and screenshot upload\n  `ipa` | Path to your ipa file\n  `pkg` | Path to your pkg file\n  `platform` | The platform to use (optional)\n  `metadata_path` | Path to the folder containing the metadata files\n  `screenshots_path` | Path to the folder containing the screenshots\n  `skip_binary_upload` | Skip uploading an ipa or pkg to iTunes Connect\n  `skip_screenshots` | Don't upload the screenshots\n  `app_version` | The version that should be edited or created\n  `skip_metadata` | Don't upload the metadata (e.g. title, description). This will still upload screenshots\n  `skip_app_version_update` | Don't update app version for submission\n  `force` | Skip the HTML report file verification\n  `submit_for_review` | Submit the new version for Review after uploading everything\n  `automatic_release` | Should the app be automatically released once it's approved?\n  `phased_release` | Enable the phased release feature of iTC\n  `price_tier` | The price tier of this application\n  `build_number` | If set the given build number (already uploaded to iTC) will be used instead of the current built one\n  `app_rating_config_path` | Path to the app rating's config\n  `submission_information` | Extra information for the submission (e.g. third party content)\n  `team_id` | The ID of your iTunes Connect team if you're in multiple teams\n  `team_name` | The name of your iTunes Connect team if you're in multiple teams\n  `dev_portal_team_id` | The short ID of your Developer Portal team, if you're in multiple teams. Different from your iTC team ID!\n  `dev_portal_team_name` | The name of your Developer Portal team if you're in multiple teams\n  `itc_provider` | The provider short name to be used with the iTMSTransporter to identify your team\n  `overwrite_screenshots` | Clear all previously uploaded screenshots before uploading the new ones\n  `run_precheck_before_submit` | Run precheck before submitting to app review\n  `precheck_default_rule_level` | The default rule level unless otherwise configured\n  `app_icon` | Metadata: The path to the app icon\n  `apple_watch_app_icon` | Metadata: The path to the Apple Watch app icon\n  `copyright` | Metadata: The copyright notice\n  `primary_category` | Metadata: The english name of the primary category (e.g. `Business`, `Books`)\n  `secondary_category` | Metadata: The english name of the secondary category (e.g. `Business`, `Books`)\n  `primary_first_sub_category` | Metadata: The english name of the primary first sub category (e.g. `Educational`, `Puzzle`)\n  `primary_second_sub_category` | Metadata: The english name of the primary second sub category (e.g. `Educational`, `Puzzle`)\n  `secondary_first_sub_category` | Metadata: The english name of the secondary first sub category (e.g. `Educational`, `Puzzle`)\n  `secondary_second_sub_category` | Metadata: The english name of the secondary second sub category (e.g. `Educational`, `Puzzle`)\n  `trade_representative_contact_information` | Metadata: A hash containing the trade representative contact information\n  `app_review_information` | Metadata: A hash containing the review information\n  `description` | Metadata: The localised app description\n  `name` | Metadata: The localised app name\n  `subtitle` | Metadata: The localised app subtitle\n  `keywords` | Metadata: An array of localised keywords\n  `promotional_text` | Metadata: An array of localised promotional texts\n  `release_notes` | Metadata: Localised release notes for this version\n  `privacy_url` | Metadata: Localised privacy url\n  `support_url` | Metadata: Localised support url\n  `marketing_url` | Metadata: Localised marketing url", 
            "title": "Releasing your app"
        }, 
        {
            "location": "/actions/#source-control", 
            "text": "### ensure_git_status_clean\n\nRaises an exception if there are uncommitted git changes\n\n\n\n> A sanity check to make sure you are working in a repo that is clean. Especially\nuseful to put at the beginning of your Fastfile in the `before_all` block, if\nsome of your other actions will touch your filesystem, do things to your git repo,\nor just as a general reminder to save your work. Also needed as a prerequisite for\nsome other actions like `reset_git_repo`.\n\nensure_git_status_clean | \n-----|----\nSupported platforms | ios, android, mac\nAuthor | @lmirosevic, @antondomashnev  1 Example \n\n\n\u0002wzxhzdk:143\u0003   Parameters \n\nKey | Description\n----|------------\n  `show_uncommitted_changes` | The flag whether to show uncommitted changes if the repo is dirty   \n\n### git_branch\n\nReturns the name of the current git branch, possibly as managed by CI ENV vars\n\n\n\n> If no branch could be found, this action will return an empty string\n\ngit_branch | \n-----|----\nSupported platforms | ios, android, mac\nAuthor | @KrauseFx  1 Example \n\n\n\u0002wzxhzdk:144\u0003  \n\n### last_git_commit\n\nReturn last git commit hash, abbreviated commit hash, commit message and author\n\n\n\n\n\nlast_git_commit | \n-----|----\nSupported platforms | ios, android, mac\nAuthor | @ngutman\nReturns | Returns the following dict: {commit_hash: \"commit hash\", abbreviated_commit_hash: \"abbreviated commit hash\" author: \"Author\", message: \"commit message\"}  1 Example \n\n\n\u0002wzxhzdk:145\u0003  \n\n### reset_git_repo\n\nResets git repo to a clean state by discarding uncommitted changes\n\n\n\n> This action will reset your git repo to a clean state, discarding any uncommitted and untracked changes. Useful in case you need to revert the repo back to a clean state, e.g. after the fastlane run. Untracked files like `.env` will also be deleted, unless `:skip_clean` is true. It's a pretty drastic action so it comes with a sort of safety latch. It will only proceed with the reset if either of these conditions are met: You have called the ensure_git_status_clean action prior to calling this action. This ensures that your repo started off in a clean state, so the only things that will get destroyed by this action are files that are created as a byproduct of the fastlane run.\n\nreset_git_repo | \n-----|----\nSupported platforms | ios, android, mac\nAuthor | @lmirosevic  4 Examples \n\n\n\u0002wzxhzdk:146\u0003\n\n\n\n\u0002wzxhzdk:147\u0003\n\n\n\n\u0002wzxhzdk:148\u0003\n\n\n\n\u0002wzxhzdk:149\u0003   Parameters \n\nKey | Description\n----|------------\n  `files` | Array of files the changes should be discarded. If not given, all files will be discarded\n  `force` | Skip verifying of previously clean state of repo. Only recommended in combination with `files` option\n  `skip_clean` | Skip 'git clean' to avoid removing untracked files like `.env`. Defaults to false\n  `disregard_gitignore` | Setting this to true will clean the whole repository, ignoring anything in your local .gitignore. Set this to true if you want the equivalent of a fresh clone, and for all untracked and ignore files to also be removed\n  `exclude` | You can pass a string, or array of, file pattern(s) here which you want to have survive the cleaning process, and remain on disk, e.g. to leave the `artifacts` directory you would specify `exclude: 'artifacts'`. Make sure this pattern is also in your gitignore! See the gitignore documentation for info on patterns   \n\n### changelog_from_git_commits\n\nCollect git commit messages into a changelog\n\n\n\n> By default, messages will be collected back to the last tag, but the range can be controlled\n\nchangelog_from_git_commits | \n-----|----\nSupported platforms | ios, android, mac\nAuthor | @mfurtak, @asfalcone, @SiarheiFedartsou, @allewun\nReturns | Returns a String containing your formatted git commits  2 Examples \n\n\n\u0002wzxhzdk:150\u0003\n\n\n\n\u0002wzxhzdk:151\u0003   Parameters \n\nKey | Description\n----|------------\n  `between` | Array containing two Git revision values between which to collect messages, you mustn't use it with :commits_count key at the same time\n  `commits_count` | Number of commits to include in changelog, you mustn't use it with :between key at the same time\n  `pretty` | The format applied to each commit while generating the collected value\n  `date_format` | The date format applied to each commit while generating the collected value\n  `ancestry_path` | Whether or not to use ancestry-path param\n  `tag_match_pattern` | A glob(7) pattern to match against when finding the last git tag\n  `match_lightweight_tag` | Whether or not to match a lightweight tag when searching for the last one\n  `include_merges` | Whether or not to include any commits that are merges\n\u001b[31m(DEPRECATED - use :merge_commit_filtering)\u001b[0m\n  `merge_commit_filtering` | Controls inclusion of merge commits when collecting the changelog.\nValid values: 'include_merges', 'exclude_merges', 'only_include_merges'   \n\n### number_of_commits\n\nReturn the number of commits in current git branch\n\n\n\n> You can use this action to get the number of commits of this branch. This is useful if you want to set the build number to the number of commits. See `fastlane actions number_of_commits` for more details\n\nnumber_of_commits | \n-----|----\nSupported platforms | ios, android, mac\nAuthor | @onevcat, @samuelbeek\nReturns | The total number of all commits in current git branch  2 Examples \n\n\n\u0002wzxhzdk:152\u0003\n\n\n\n\u0002wzxhzdk:153\u0003   Parameters \n\nKey | Description\n----|------------\n  `all` | Returns number of all commits instead of current branch   \n\n### git_pull\n\nExecutes a simple git pull command\n\n\n\n\n\ngit_pull | \n-----|----\nSupported platforms | ios, android, mac\nAuthor | @KrauseFx, @JaviSoto  2 Examples \n\n\n\u0002wzxhzdk:154\u0003\n\n\n\n\u0002wzxhzdk:155\u0003   Parameters \n\nKey | Description\n----|------------\n  `only_tags` | Simply pull the tags, and not bring new commits to the current branch from the remote   \n\n### last_git_tag\n\nGet the most recent git tag\n\n\n\n> If you are using this action on a **shallow clone**, *the default with some CI systems like Bamboo*, you need to ensure that you have also have pulled all the git tags appropriately. Assuming your git repo has the correct remote set you can issue `sh('git fetch --tags')`\n\nlast_git_tag | \n-----|----\nSupported platforms | ios, android, mac\nAuthor | @KrauseFx  1 Example \n\n\n\u0002wzxhzdk:156\u0003  \n\n### push_to_git_remote\n\nPush local changes to the remote branch\n\n\n\n> Lets you push your local commits to a remote git repo. Useful if you make local changes such as adding a version bump commit (using `commit_version_bump`) or a git tag (using 'add_git_tag') on a CI server, and you want to push those changes back to your canonical/main repo.\n\npush_to_git_remote | \n-----|----\nSupported platforms | ios, android, mac\nAuthor | @lmirosevic  2 Examples \n\n\n\u0002wzxhzdk:157\u0003\n\n\n\n\u0002wzxhzdk:158\u0003   Parameters \n\nKey | Description\n----|------------\n  `local_branch` | The local branch to push from. Defaults to the current branch\n  `remote_branch` | The remote branch to push to. Defaults to the local branch\n  `force` | Force push to remote. Defaults to false\n  `tags` | Whether tags are pushed to remote. Defaults to true\n  `remote` | The remote to push to. Defaults to `origin`   \n\n### add_git_tag\n\nThis will add an annotated git tag to the current branch\n\n\n\n> This will automatically tag your build with the following format: ` / / `, where:\n- `grouping` is just to keep your tags organised under one 'folder', defaults to 'builds'\n- `lane` is the name of the current fastlane lane\n- `prefix` is anything you want to stick in front of the version number, e.g. 'v'\n- `build_number` is the build number, which defaults to the value emitted by the `increment_build_number` action\nFor example for build 1234 in the 'appstore' lane it will tag the commit with `builds/appstore/1234`\n\nadd_git_tag | \n-----|----\nSupported platforms | ios, android, mac\nAuthor | @lmirosevic, @maschall  3 Examples \n\n\n\u0002wzxhzdk:159\u0003\n\n\n\n\u0002wzxhzdk:160\u0003\n\n\n\n\u0002wzxhzdk:161\u0003   Parameters \n\nKey | Description\n----|------------\n  `tag` | Define your own tag text. This will replace all other parameters\n  `grouping` | Is used to keep your tags organised under one 'folder'. Defaults to 'builds'\n  `prefix` | Anything you want to put in front of the version number (e.g. 'v')\n  `build_number` | The build number. Defaults to the result of increment_build_number if you're using it\n  `message` | The tag message. Defaults to the tag's name\n  `commit` | The commit or object where the tag will be set. Defaults to the current HEAD\n  `force` | Force adding the tag\n  `sign` | Make a GPG-signed tag, using the default e-mail address's key   \n\n### commit_version_bump\n\nCreates a 'Version Bump' commit. Run after `increment_build_number`\n\n\n\n> This action will create a 'Version Bump' commit in your repo. Useful in conjunction with `increment_build_number`.\nIt checks the repo to make sure that only the relevant files have changed, these are the files that `increment_build_number` (`agvtool`) touches:\n- All .plist files\n- The `.xcodeproj/project.pbxproj` file\nThen commits those files to the repo.\nCustomise the message with the `:message` option, defaults to 'Version Bump'\nIf you have other uncommitted changes in your repo, this action will fail. If you started off in a clean repo, and used the _ipa_ and or _sigh_ actions, then you can use the `clean_build_artifacts` action to clean those temporary files up before running this action.\n\ncommit_version_bump | \n-----|----\nSupported platforms | ios, mac\nAuthor | @lmirosevic  5 Examples \n\n\n\u0002wzxhzdk:162\u0003\n\n\n\n\u0002wzxhzdk:163\u0003\n\n\n\n\u0002wzxhzdk:164\u0003\n\n\n\n\u0002wzxhzdk:165\u0003\n\n\n\n\u0002wzxhzdk:166\u0003   Parameters \n\nKey | Description\n----|------------\n  `message` | The commit message when committing the version bump\n  `xcodeproj` | The path to your project file (Not the workspace). If you have only one, this is optional\n  `force` | Forces the commit, even if other files than the ones containing the version number have been modified\n  `settings` | Include Settings.bundle/Root.plist with version bump\n  `ignore` | A regular expression used to filter matched plist files to be modified   \n\n### git_tag_exists\n\nChecks if the git tag with the given name exists in the current repo\n\n\n\n\n\ngit_tag_exists | \n-----|----\nSupported platforms | ios, android, mac\nAuthor | @antondomashnev\nReturns | Boolean value whether the tag exists or not  1 Example \n\n\n\u0002wzxhzdk:167\u0003   Parameters \n\nKey | Description\n----|------------\n  `tag` | The tag name that should be checked   \n\n### ensure_git_branch\n\nRaises an exception if not on a specific git branch\n\n\n\n> This action will check if your git repo is checked out to a specific branch.\nYou may only want to make releases from a specific branch, so `ensure_git_branch`\nwill stop a lane if it was accidentally executed on an incorrect branch.\n\nensure_git_branch | \n-----|----\nSupported platforms | ios, android, mac\nAuthor | @dbachrach, @Liquidsoul  2 Examples \n\n\n\u0002wzxhzdk:168\u0003\n\n\n\n\u0002wzxhzdk:169\u0003   Parameters \n\nKey | Description\n----|------------\n  `branch` | The branch that should be checked for. String that can be either the full name of the branch or a regex to match   \n\n### git_commit\n\nDirectly commit the given file with the given message\n\n\n\n\n\ngit_commit | \n-----|----\nSupported platforms | ios, android, mac\nAuthor | @KrauseFx  3 Examples \n\n\n\u0002wzxhzdk:170\u0003\n\n\n\n\u0002wzxhzdk:171\u0003\n\n\n\n\u0002wzxhzdk:172\u0003   Parameters \n\nKey | Description\n----|------------\n  `path` | The file you want to commit\n  `message` | The commit message that should be used   \n\n### push_git_tags\n\nPush local tags to the remote - this will only push tags\n\n\n\n> If you only want to push the tags and nothing else, you can use the `push_git_tags` action\n\npush_git_tags | \n-----|----\nSupported platforms | ios, android, mac\nAuthor | @vittoriom  1 Example \n\n\n\u0002wzxhzdk:173\u0003   Parameters \n\nKey | Description\n----|------------\n  `force` | Force push to remote. Defaults to false\n  `remote` | The remote to push tags to   \n\n### git_add\n\nDirectly add the given file or all files\n\n\n\n\n\ngit_add | \n-----|----\nSupported platforms | ios, android, mac\nAuthor | @4brunu, @antondomashnev  5 Examples \n\n\n\u0002wzxhzdk:174\u0003\n\n\n\n\u0002wzxhzdk:175\u0003\n\n\n\n\u0002wzxhzdk:176\u0003\n\n\n\n\u0002wzxhzdk:177\u0003\n\n\n\n\u0002wzxhzdk:178\u0003   Parameters \n\nKey | Description\n----|------------\n  `path` | The file you want to add\n  `pathspec` | The pathspec you want to add files from   \n\n### get_build_number_repository\n\nGet the build number from the current repository\n\n\n\n> This action will get the **build number** according to what the SCM HEAD reports.\nCurrently supported SCMs are svn (uses root revision), git-svn (uses svn revision) and git (uses short hash) and mercurial (uses short hash or revision number).\nThere is an option, `:use_hg_revision_number`, which allows to use mercurial revision number instead of hash.\n\nget_build_number_repository | \n-----|----\nSupported platforms | ios, mac\nAuthor | @bartoszj, @pbrooks, @armadsen\nReturns | The build number from the current repository  1 Example \n\n\n\u0002wzxhzdk:179\u0003   Parameters \n\nKey | Description\n----|------------\n  `use_hg_revision_number` | Use hg revision number instead of hash (ignored for non-hg repos)   \n\n### set_github_release\n\nThis will create a new release on GitHub and upload assets for it\n\n\n\n> Creates a new release on GitHub. You must provide your GitHub Personal token\n        (get one from https://github.com/settings/tokens/new), the repository name\n        and tag name. By default that's 'master'. If the tag doesn't exist, one will be created on the commit or branch passed-in as\n        commitish. Out parameters provide the release's id, which can be used for later editing and the\n        release html link to GitHub. You can also specify a list of assets to be uploaded to the release with the upload_assets parameter.\n\nset_github_release | \n-----|----\nSupported platforms | ios, android, mac\nAuthor | @czechboy0, @tommeier\nReturns | A hash containing all relevant information of this release\nAccess things like 'html_url', 'tag_name', 'name', 'body'  1 Example \n\n\n\u0002wzxhzdk:180\u0003   Parameters \n\nKey | Description\n----|------------\n  `repository_name` | The path to your repo, e.g. 'fastlane/fastlane'\n  `server_url` | The server url. e.g. 'https://your.internal.github.host/api/v3' (Default: 'https://api.github.com')\n  `api_token` | Personal API Token for GitHub - generate one at https://github.com/settings/tokens\n  `tag_name` | Pass in the tag name\n  `name` | Name of this release\n  `commitish` | Specifies the commitish value that determines where the Git tag is created from. Can be any branch or commit SHA. Unused if the Git tag already exists. Default: the repository's default branch (usually master)\n  `description` | Description of this release\n  `is_draft` | Whether the release should be marked as draft\n  `is_prerelease` | Whether the release should be marked as prerelease\n  `upload_assets` | Path to assets to be uploaded with the release   \n\n### create_pull_request\n\nThis will create a new pull request on GitHub\n\n\n\n\n\ncreate_pull_request | \n-----|----\nSupported platforms | ios, android, mac\nAuthor | @seei, @tommeier\nReturns | The parsed JSON when successful  1 Example \n\n\n\u0002wzxhzdk:181\u0003   Parameters \n\nKey | Description\n----|------------\n  `api_token` | Personal API Token for GitHub - generate one at https://github.com/settings/tokens\n  `repo` | The name of the repository you want to submit the pull request to\n  `title` | The title of the pull request\n  `body` | The contents of the pull request\n  `head` | The name of the branch where your changes are implemented (defaults to the current branch name)\n  `base` | The name of the branch you want your changes pulled into (defaults to `master`)\n  `api_url` | The URL of Github API - used when the Enterprise (default to `https://api.github.com`)   \n\n### get_github_release\n\nThis will verify if a given release version is available on GitHub\n\n\n\n> This will return all information about a release. For example:\n              {\"url\"=>\"https://api.github.com/repos/KrauseFx/fastlane/releases/1537713\",\n                 \"assets_url\"=>\"https://api.github.com/repos/KrauseFx/fastlane/releases/1537713/assets\",\n                 \"upload_url\"=>\"https://uploads.github.com/repos/KrauseFx/fastlane/releases/1537713/assets{?name}\",\n                 \"html_url\"=>\"https://github.com/fastlane/fastlane/releases/tag/1.8.0\",\n                 \"id\"=>1537713,\n                 \"tag_name\"=>\"1.8.0\",\n                 \"target_commitish\"=>\"master\",\n                 \"name\"=>\"1.8.0 Switch Lanes  &  Pass Parameters\",\n                 \"draft\"=>false,\n                 \"author\"=>\n                  {\"login\"=>\"KrauseFx\",\n                   \"id\"=>869950,\n                   \"avatar_url\"=>\"https://avatars.githubusercontent.com/u/869950?v=3\",\n                   \"gravatar_id\"=>\"\",\n                   \"url\"=>\"https://api.github.com/users/KrauseFx\",\n                   \"html_url\"=>\"https://github.com/fastlane\",\n                   \"followers_url\"=>\"https://api.github.com/users/KrauseFx/followers\",\n                   \"following_url\"=>\"https://api.github.com/users/KrauseFx/following{/other_user}\",\n                   \"gists_url\"=>\"https://api.github.com/users/KrauseFx/gists{/gist_id}\",\n                   \"starred_url\"=>\"https://api.github.com/users/KrauseFx/starred{/owner}{/repo}\",\n                   \"subscriptions_url\"=>\"https://api.github.com/users/KrauseFx/subscriptions\",\n                   \"organizations_url\"=>\"https://api.github.com/users/KrauseFx/orgs\",\n                   \"repos_url\"=>\"https://api.github.com/users/KrauseFx/repos\",\n                   \"events_url\"=>\"https://api.github.com/users/KrauseFx/events{/privacy}\",\n                   \"received_events_url\"=>\"https://api.github.com/users/KrauseFx/received_events\",\n                   \"type\"=>\"User\",\n                   \"site_admin\"=>false},\n                 \"prerelease\"=>false,\n                 \"created_at\"=>\"2015-07-14T23:33:01Z\",\n                 \"published_at\"=>\"2015-07-14T23:44:10Z\",\n                 \"assets\"=>[],\n                 \"tarball_url\"=>\"https://api.github.com/repos/KrauseFx/fastlane/tarball/1.8.0\",\n                 \"zipball_url\"=>\"https://api.github.com/repos/KrauseFx/fastlane/zipball/1.8.0\",\n                 \"body\"=> ...Markdown...\n                \"This is one of the biggest updates of _fastlane_ yet\"\n              }\n\nget_github_release | \n-----|----\nSupported platforms | ios, android, mac\nAuthor | @KrauseFx, @czechboy0, @jaleksynas, @tommeier  1 Example \n\n\n\u0002wzxhzdk:182\u0003   Parameters \n\nKey | Description\n----|------------\n  `url` | The path to your repo, e.g. 'KrauseFx/fastlane'\n  `server_url` | The server url. e.g. 'https://your.github.server/api/v3' (Default: 'https://api.github.com')\n  `version` | The version tag of the release to check\n  `api_token` | GitHub Personal Token (required for private repositories)   \n\n### hg_ensure_clean_status\n\nRaises an exception if there are uncommitted hg changes\n\n\n\n> Along the same lines as the [`ensure_git_status_clean`](#ensure_git_status_clean) action, this is a sanity check to ensure the working mercurial repo is clean. Especially useful to put at the beginning of your Fastfile in the `before_all` block.\n\nhg_ensure_clean_status | \n-----|----\nSupported platforms | ios, android, mac\nAuthor | @sjrmanning  1 Example \n\n\n\u0002wzxhzdk:183\u0003  \n\n### hg_commit_version_bump\n\nThis will commit a version bump to the hg repo\n\n\n\n> The mercurial equivalent of the [`commit_version_bump`](#commit_version_bump) git action. Like the git version, it is useful in conjunction with [`increment_build_number`](#increment_build_number).\nIt checks the repo to make sure that only the relevant files have changed, these are the files that `increment_build_number` (`agvtool`) touches:\n- All .plist files\n- The `.xcodeproj/project.pbxproj` file\nThen commits those files to the repo.\nCustomise the message with the `:message` option, defaults to 'Version Bump'\nIf you have other uncommitted changes in your repo, this action will fail. If you started off in a clean repo, and used the _ipa_ and or _sigh_ actions, then you can use the [`clean_build_artifacts`](#clean_build_artifacts) action to clean those temporary files up before running this action.\n\nhg_commit_version_bump | \n-----|----\nSupported platforms | ios, android, mac\nAuthor | @sjrmanning  2 Examples \n\n\n\u0002wzxhzdk:184\u0003\n\n\n\n\u0002wzxhzdk:185\u0003   Parameters \n\nKey | Description\n----|------------\n  `message` | The commit message when committing the version bump\n  `xcodeproj` | The path to your project file (Not the workspace). If you have only one, this is optional\n  `force` | Forces the commit, even if other files than the ones containing the version number have been modified\n  `test_dirty_files` | A list of dirty files passed in for testing\n  `test_expected_files` | A list of expected changed files passed in for testing   \n\n### hg_push\n\nThis will push changes to the remote hg repository\n\n\n\n> The mercurial equivalent of [`push_to_git_remote`](#push_to_git_remote) \u2014 pushes your local commits to a remote mercurial repo. Useful when local changes such as adding a version bump commit or adding a tag are part of your lane\u2019s actions.\n\nhg_push | \n-----|----\nSupported platforms | ios, android, mac\nAuthor | @sjrmanning  2 Examples \n\n\n\u0002wzxhzdk:186\u0003\n\n\n\n\u0002wzxhzdk:187\u0003   Parameters \n\nKey | Description\n----|------------\n  `force` | Force push to remote. Defaults to false\n  `destination` | The destination to push to   \n\n### hg_add_tag\n\nThis will add a hg tag to the current branch\n\n\n\n\n\nhg_add_tag | \n-----|----\nSupported platforms | ios, android, mac\nAuthor | @sjrmanning  1 Example \n\n\n\u0002wzxhzdk:188\u0003   Parameters \n\nKey | Description\n----|------------\n  `tag` | Tag to create   \n\n### github_api\n\nCall a GitHub API endpoint and get the resulting JSON response\n\n\n\n> Calls any GitHub API endpoint. You must provide your GitHub Personal token (get one from https://github.com/settings/tokens/new).\n          Out parameters provide the status code and the full response JSON if valid, otherwise the raw response body.\n          Documentation: https://developer.github.com/v3\n\ngithub_api | \n-----|----\nSupported platforms | ios, android, mac\nAuthor | @tommeier\nReturns | A hash including the HTTP status code (:status), the response body (:body), and if valid JSON has been returned the parsed JSON (:json).  2 Examples \n\n\n\u0002wzxhzdk:189\u0003\n\n\n\n\u0002wzxhzdk:190\u0003   Parameters \n\nKey | Description\n----|------------\n  `server_url` | The server url. e.g. 'https://your.internal.github.host/api/v3' (Default: 'https://api.github.com')\n  `api_token` | Personal API Token for GitHub - generate one at https://github.com/settings/tokens\n  `http_method` | The HTTP method. e.g. GET / POST\n  `body` | The request body in JSON or hash format\n  `raw_body` | The request body taken vertabim instead of as JSON, useful for file uploads\n  `path` | The endpoint path. e.g. '/repos/:owner/:repo/readme'\n  `url` | The complete full url - used instead of path. e.g. 'https://uploads.github.com/repos/fastlane...'\n  `error_handlers` | Optional error handling hash based on status code, or pass '*' to handle all errors\n  `headers` | Optional headers to apply\n  `secure` | Optionally disable secure requests (ssl_verify_peer)   \n\n### commit_github_file\n\nThis will commit a file directly on GitHub via the API\n\n\n\n> Commits a file directly to GitHub. You must provide your GitHub Personal token\n        (get one from https://github.com/settings/tokens/new), the repository name and the relative file path from the root git project.\n        Out parameters provide the commit sha created, which can be used for later usage for examples such as releases, the direct download link and the full response JSON.\n        Documentation: https://developer.github.com/v3/repos/contents/#create-a-file\n\ncommit_github_file | \n-----|----\nSupported platforms | ios, android, mac\nAuthor | @tommeier\nReturns | A hash containing all relevant information for this commit\nAccess things like 'html_url', 'sha', 'message'  1 Example \n\n\n\u0002wzxhzdk:191\u0003   Parameters \n\nKey | Description\n----|------------\n  `repository_name` | The path to your repo, e.g. 'fastlane/fastlane'\n  `server_url` | The server url. e.g. 'https://your.internal.github.host/api/v3' (Default: 'https://api.github.com')\n  `api_token` | Personal API Token for GitHub - generate one at https://github.com/settings/tokens\n  `branch` | The branch that the file should be committed on (default: master)\n  `path` | The relative path to your file from project root e.g. assets/my_app.xcarchive\n  `message` | The commit message. Defaults to the file name\n  `secure` | Optionally disable secure requests (ssl_verify_peer)", 
            "title": "Source Control"
        }, 
        {
            "location": "/actions/#notifications", 
            "text": "### slack\n\nSend a success/error message to your Slack group\n\n\n\n> Create an Incoming WebHook and export this as `SLACK_URL`. Can send a message to **#channel** (by default), a direct message to **@username** or a message to a private group **group** with success (green) or failure (red) status.\n\nslack | \n-----|----\nSupported platforms | ios, android, mac\nAuthor | @KrauseFx  2 Examples \n\n\n\u0002wzxhzdk:192\u0003\n\n\n\n\u0002wzxhzdk:193\u0003   Parameters \n\nKey | Description\n----|------------\n  `message` | The message that should be displayed on Slack. This supports the standard Slack markup language\n  `channel` | #channel or @username\n  `use_webhook_configured_username_and_icon` | Use webhook's default username and icon settings? (true/false)\n  `slack_url` | Create an Incoming WebHook for your Slack group\n  `username` | Overrides the webhook's username property if use_webhook_configured_username_and_icon is false\n  `icon_url` | Overrides the webhook's image property if use_webhook_configured_username_and_icon is false\n  `payload` | Add additional information to this post. payload must be a hash containing any key with any value\n  `default_payloads` | Remove some of the default payloads. More information about the available payloads on GitHub\n  `attachment_properties` | Merge additional properties in the slack attachment, see https://api.slack.com/docs/attachments\n  `success` | Was this build successful? (true/false)   \n\n### notification\n\nDisplay a macOS notification with custom message and title\n\n\n\n\n\nnotification | \n-----|----\nSupported platforms | ios, android, mac\nAuthor | @champo, @cbowns, @KrauseFx, @amarcadet, @dusek  1 Example \n\n\n\u0002wzxhzdk:194\u0003   Parameters \n\nKey | Description\n----|------------\n  `title` | The title to display in the notification\n  `subtitle` | A subtitle to display in the notification\n  `message` | The message to display in the notification\n  `sound` | The name of a sound to play when the notification appears (names are listed in Sound Preferences)\n  `activate` | Bundle identifier of application to be opened when the notification is clicked\n  `app_icon` | The URL of an image to display instead of the application icon (Mavericks+ only)\n  `content_image` | The URL of an image to display attached to the notification (Mavericks+ only)\n  `open` | URL of the resource to be opened when the notification is clicked\n  `execute` | Shell command to run when the notification is clicked   \n\n### hipchat\n\nSend a error/success message to HipChat\n\n\n\n> Send a message to **room** (by default) or a direct message to **@username** with success (green) or failure (red) status.\n\nhipchat | \n-----|----\nSupported platforms | ios, android, mac\nAuthor | @jingx23  1 Example \n\n\n\u0002wzxhzdk:195\u0003   Parameters \n\nKey | Description\n----|------------\n  `message` | The message to post on HipChat\n  `channel` | The room or @username\n  `api_token` | Hipchat API Token\n  `custom_color` | Specify a custom color, this overrides the success boolean. Can be one of 'yellow', 'red', 'green', 'purple', 'gray', or 'random'\n  `success` | Was this build successful? (true/false)\n  `version` | Version of the Hipchat API. Must be 1 or 2\n  `notify_room` | Should the people in the room be notified? (true/false)\n  `api_host` | The host of the HipChat-Server API\n  `message_format` | Format of the message to post. Must be either 'html' or 'text'\n  `include_html_header` | Should html formatted messages include a preformatted header? (true/false)\n  `from` | Name the message will appear to be sent from   \n\n### mailgun\n\nSend a success/error message to an email group\n\n\n\n\n\nmailgun | \n-----|----\nSupported platforms | ios, android, mac\nAuthor | @thiagolioy  2 Examples \n\n\n\u0002wzxhzdk:196\u0003\n\n\n\n\u0002wzxhzdk:197\u0003   Parameters \n\nKey | Description\n----|------------\n  `mailgun_sandbox_domain` | Mailgun sandbox domain postmaster for your mail. Please use postmaster instead\n  `mailgun_sandbox_postmaster` | Mailgun sandbox domain postmaster for your mail. Please use postmaster instead\n  `mailgun_apikey` | Mailgun apikey for your mail. Please use postmaster instead\n  `postmaster` | Mailgun sandbox domain postmaster for your mail\n  `apikey` | Mailgun apikey for your mail\n  `to` | Destination of your mail\n  `from` | Mailgun sender name\n  `message` | Message of your mail\n  `subject` | Subject of your mail\n  `success` | Was this build successful? (true/false)\n  `app_link` | App Release link\n  `ci_build_link` | CI Build Link\n  `template_path` | Mail HTML template\n  `reply_to` | Mail Reply to\n  `attachment` | Mail Attachment filenames, either an array or just one string   \n\n### chatwork\n\nSend a success/error message to ChatWork\n\n\n\n> Information on how to obtain an API token: http://developer.chatwork.com/ja/authenticate.html\n\nchatwork | \n-----|----\nSupported platforms | ios, android, mac\nAuthor | @astronaughts  1 Example \n\n\n\u0002wzxhzdk:198\u0003   Parameters \n\nKey | Description\n----|------------\n  `api_token` | ChatWork API Token\n  `message` | The message to post on ChatWork\n  `roomid` | The room ID\n  `success` | Was this build successful? (true/false)   \n\n### ifttt\n\nConnect to the IFTTT Maker Channel. https://ifttt.com/maker\n\n\n\n> Connect to the IFTTT [Maker Channel](https://ifttt.com/maker). An IFTTT Recipe has two components: a Trigger and an Action. In this case, the Trigger will fire every time the Maker Channel receives a web request (made by this _fastlane_ action) to notify it of an event. The Action can be anything that IFTTT supports: email, SMS, etc.\n\nifttt | \n-----|----\nSupported platforms | ios, android, mac\nAuthor | @vpolouchkine  1 Example \n\n\n\u0002wzxhzdk:199\u0003   Parameters \n\nKey | Description\n----|------------\n  `api_key` | API key\n  `event_name` | The name of the event that will be triggered\n  `value1` | Extra data sent with the event\n  `value2` | Extra data sent with the event\n  `value3` | Extra data sent with the event   \n\n### flock\n\nSend a message to a Flock group\n\n\n\n> To obtain the token, create a new [incoming message webhook](https://dev.flock.co/wiki/display/FlockAPI/Incoming+Webhooks)\nin your Flock admin panel.\n\nflock | \n-----|----\nSupported platforms | ios, android, mac\nAuthor | @Manav  1 Example \n\n\n\u0002wzxhzdk:200\u0003   Parameters \n\nKey | Description\n----|------------\n  `message` | Message text\n  `token` | Token for the Flock incoming webhook\n  `base_url` | Base URL of the Flock incoming message webhook   \n\n### twitter\n\nPost a tweet on Twitter.com\n\n\n\n> Post a tweet on twitter. Requires you to setup an app on twitter.com and obtain consumer and access_token.\n\ntwitter | \n-----|----\nSupported platforms | ios, android, mac\nAuthor | @hjanuschka  1 Example \n\n\n\u0002wzxhzdk:201\u0003   Parameters \n\nKey | Description\n----|------------\n  `consumer_key` | Consumer Key\n  `consumer_secret` | Consumer Secret\n  `access_token` | Access Token\n  `access_token_secret` | Access Token Secret\n  `message` | The tweet   \n\n### typetalk\n\nPost a message to Typetalk\n\n\n\n\n\ntypetalk | \n-----|----\nSupported platforms | ios, android, mac\nAuthor | @Nulab Inc.  1 Example \n\n\n\u0002wzxhzdk:202\u0003", 
            "title": "Notifications"
        }, 
        {
            "location": "/actions/#deprecated", 
            "text": "### s3\n\nGenerates a plist file and uploads all to AWS S3\n\n> Please use the `aws_s3` plugin instead.\nInstall using `fastlane add_plugin aws_s3`.\n\n> Upload a new build to Amazon S3 to distribute the build to beta testers.  Works for both Ad Hoc and Enterprise signed applications. This step will generate the necessary HTML, plist, and version files for you. It is recommended to **not** store the AWS access keys in the `Fastfile`. The uploaded `version.json` file provides an easy way for apps to poll if a new update is available.\n\ns3 | \n-----|----\nSupported platforms | ios\nAuthor | @joshdholtz  2 Examples \n\n\n\u0002wzxhzdk:203\u0003\n\n\n\n\u0002wzxhzdk:204\u0003   Parameters \n\nKey | Description\n----|------------\n  `ipa` | .ipa file for the build \n  `dsym` | zipped .dsym package for the build \n  `upload_metadata` | Upload relevant metadata for this build\n  `plist_template_path` | plist template path\n  `plist_file_name` | uploaded plist filename\n  `html_template_path` | html erb template path\n  `html_file_name` | uploaded html filename\n  `version_template_path` | version erb template path\n  `version_file_name` | uploaded version filename\n  `access_key` | AWS Access Key ID \n  `secret_access_key` | AWS Secret Access Key \n  `bucket` | AWS bucket name\n  `region` | AWS region (for bucket creation) \n  `path` | S3 'path'. Values from Info.plist will be substituted for keys wrapped in {}  \n  `source` | Optional source directory e.g. ./build \n  `acl` | Uploaded object permissions e.g public_read (default), private, public_read_write, authenticated_read    \n\n### notify\n\nShows a macOS notification - use `notification` instead\n\n> It's recommended to use the new 'notification' method instead of 'notify'\n\n\n\nnotify | \n-----|----\nSupported platforms | ios, android, mac\nAuthor | @champo, @KrauseFx  \n\n### update_project_code_signing\n\nUpdated code signing settings from 'Automatic' to a specific profile\n\n> You shouldn't use update_project_code_signing.\nHave you considered using the recommended way to do code signing?\nhttps://docs.fastlane.tools/codesigning/getting-started/\n\n\n\nupdate_project_code_signing | \n-----|----\nSupported platforms | ios\nAuthor | @KrauseFx   Parameters \n\nKey | Description\n----|------------\n  `path` | Path to your Xcode project\n  `udid` | DEPRECATED: see :uuid\n  `uuid` | The UUID of the provisioning profile you want to use   \n\n### ipa\n\nEasily build and sign your app using shenzhen\n\n> You are using legacy `shenzhen` to build your app, which will be removed soon!\nIt is recommended to upgrade to _gym_\nTo do so, just replace `ipa(...)` with `gym(...)` in your Fastfile\nTo make code signing work, follow https://docs.fastlane.tools/codesigning/xcode-project/#\n\n\n\nipa | \n-----|----\nSupported platforms | ios\nAuthor | @joshdholtz  1 Example \n\n\n\u0002wzxhzdk:205\u0003   Parameters \n\nKey | Description\n----|------------\n  `workspace` | WORKSPACE Workspace (.xcworkspace) file to use to build app (automatically detected in current directory)\n  `project` | Project (.xcodeproj) file to use to build app (automatically detected in current directory, overridden by --workspace option, if passed)\n  `configuration` | Configuration used to build\n  `scheme` | Scheme used to build app\n  `clean` | Clean project before building\n  `archive` | Archive project after building\n  `destination` | Build destination. Defaults to current directory\n  `embed` | Sign .ipa file with .mobileprovision\n  `identity` | Identity to be used along with --embed\n  `sdk` | Use SDK as the name or path of the base SDK when building the project\n  `ipa` | Specify the name of the .ipa file to generate (including file extension)\n  `xcconfig` | Use an extra XCCONFIG file to build the app\n  `xcargs` | Pass additional arguments to xcodebuild when building the app. Be sure to quote multiple args   \n\n### upload_symbols_to_sentry\n\nUpload dSYM symbolication files to Sentry\n\n> Please use the `sentry` plugin instead.\nInstall using `fastlane add_plugin sentry`.\nReplace `upload_symbols_to_sentry` with `sentry_upload_dsym`\n\n> This action allows you to upload symbolication files to Sentry. It's extra useful if you use it to download the latest dSYM files from Apple when you use Bitcode\n\nupload_symbols_to_sentry | \n-----|----\nSupported platforms | ios\nAuthor | @joshdholtz\nReturns | The uploaded dSYM path(s)  1 Example \n\n\n\u0002wzxhzdk:206\u0003   Parameters \n\nKey | Description\n----|------------\n  `api_host` | API host url for Sentry\n  `api_key` | API key for Sentry\n  `auth_token` | Authentication token for Sentry\n  `org_slug` | Organization slug for Sentry project\n  `project_slug` | Project slug for Sentry\n  `dsym_path` | Path to your symbols file. For iOS and Mac provide path to app.dSYM.zip\n  `dsym_paths` | Path to an array of your symbols file. For iOS and Mac provide path to app.dSYM.zip", 
            "title": "Deprecated"
        }, 
        {
            "location": "/actions/#misc", 
            "text": "### puts\n\nPrints out the given text\n\n\n\n\n\nputs | \n-----|----\nSupported platforms | ios, android, mac\nAuthor | @KrauseFx  1 Example \n\n\n\u0002wzxhzdk:207\u0003  \n\n### default_platform\n\nDefines a default platform to not have to specify the platform\n\n\n\n\n\ndefault_platform | \n-----|----\nSupported platforms | ios, android, mac\nAuthor | @KrauseFx  1 Example \n\n\n\u0002wzxhzdk:208\u0003  \n\n### fastlane_version\n\nVerifies the minimum fastlane version required\n\n\n\n> Add this to your `Fastfile` to require a certain version of _fastlane_.\nUse it if you use an action that just recently came out and you need it\n\nfastlane_version | \n-----|----\nSupported platforms | ios, android, mac\nAuthor | @KrauseFx  1 Example \n\n\n\u0002wzxhzdk:209\u0003  \n\n### lane_context\n\nAn alias to `Actions.lane_context`\n\n\n\n\n\nlane_context | \n-----|----\nSupported platforms | ios, android, mac\nAuthor | @KrauseFx  \n\n### import\n\nImport another Fastfile to use its lanes\n\n\n\n> This is useful if you have shared lanes across multiple apps and you want to store a Fastfile\nin a separate folder. The path must be relative to the Fastfile this is called from.\n\nimport | \n-----|----\nSupported platforms | ios, android, mac\nAuthor | @KrauseFx  1 Example \n\n\n\u0002wzxhzdk:210\u0003  \n\n### import_from_git\n\nImport another Fastfile from a remote git repository to use its lanes\n\n\n\n> This is useful if you have shared lanes across multiple apps and you want to store the Fastfile\nin a remote git repository.\n\nimport_from_git | \n-----|----\nSupported platforms | ios, android, mac\nAuthor | @fabiomassimo, @KrauseFx, @Liquidsoul  1 Example \n\n\n\u0002wzxhzdk:211\u0003   Parameters \n\nKey | Description\n----|------------\n  `url` | The URL of the repository to import the Fastfile from\n  `branch` | The branch or tag to check-out on the repository\n  `path` | The path of the Fastfile in the repository   \n\n### clean_build_artifacts\n\nDeletes files created as result of running gym, cert, sigh or download_dsyms\n\n\n\n> This action deletes the files that get created in your repo as a result of running the _gym_ and _sigh_ commands. It doesn't delete the `fastlane/report.xml` though, this is probably more suited for the .gitignore.\nUseful if you quickly want to send out a test build by dropping down to the command line and typing something like `fastlane beta`, without leaving your repo in a messy state afterwards.\n\nclean_build_artifacts | \n-----|----\nSupported platforms | ios, mac\nAuthor | @lmirosevic  1 Example \n\n\n\u0002wzxhzdk:212\u0003   Parameters \n\nKey | Description\n----|------------\n  `exclude_pattern` | Exclude all files from clearing that match the given Regex pattern: e.g. '.*.mobileprovision'   \n\n### skip_docs\n\nSkip the creation of the fastlane/README.md file when running fastlane\n\n\n\n> Tell _fastlane_ to not automatically create a `fastlane/README.md` when running _fastlane_. You can always trigger the creation of this file manually by running `fastlane docs`\n\nskip_docs | \n-----|----\nSupported platforms | ios, android, mac\nAuthor | @KrauseFx  1 Example \n\n\n\u0002wzxhzdk:213\u0003  \n\n### produce\n\nCreates the given application on iTC and the Dev Portal if necessary\n\n\n\n\n\nproduce | \n-----|----\nSupported platforms | ios\nAuthor | @KrauseFx  1 Example \n\n\n\u0002wzxhzdk:214\u0003   Parameters \n\nKey | Description\n----|------------\n  `username` | Your Apple ID Username\n  `app_identifier` | App Identifier (Bundle ID, e.g. com.krausefx.app)\n  `bundle_identifier_suffix` | App Identifier Suffix (Ignored if App Identifier does not end with .*)\n  `app_name` | App Name\n  `app_version` | Initial version number (e.g. '1.0')\n  `sku` | SKU Number (e.g. '1234')\n  `platform` | The platform to use (optional)\n  `language` | Primary Language (e.g. 'English', 'German')\n  `company_name` | The name of your company. Only required if it's the first app you create\n  `skip_itc` | Skip the creation of the app on iTunes Connect\n  `enabled_features` | [DEPRECATED!] Please use `enable_services` instead - Array with Spaceship App Services\n  `enable_services` | Array with Spaceship App Services (e.g. app_group: (on|off), apple_pay: (on|off), associated_domains: (on|off), data_protection: (complete|unlessopen|untilfirstauth), game_center: (on|off), health_kit: (on|off), home_kit: (on|off), wireless_accessory: (on|off), icloud: (legacy|cloudkit), in_app_purchase: (on|off), inter_app_audio: (on|off), passbook: (on|off), push_notification: (on|off), siri_kit: (on|off), vpn_configuration: (on|off))\n  `skip_devcenter` | Skip the creation of the app on the Apple Developer Portal\n  `team_id` | The ID of your Developer Portal team if you're in multiple teams\n  `team_name` | The name of your Developer Portal team if you're in multiple teams\n  `itc_team_id` | The ID of your iTunes Connect team if you're in multiple teams\n  `itc_team_name` | The name of your iTunes Connect team if you're in multiple teams   \n\n### is_ci\n\nIs the current run being executed on a CI system, like Jenkins or Travis\n\n\n\n> The return value of this method is true if fastlane is currently executed on\nTravis, Jenkins, Circle or a similar CI service\n\nis_ci | \n-----|----\nSupported platforms | ios, android, mac\nAuthor | @KrauseFx  1 Example \n\n\n\u0002wzxhzdk:215\u0003  \n\n### setup_jenkins\n\nSetup xcodebuild, gym and scan for easier Jenkins integration\n\n\n\n> - Adds and unlocks keychains from Jenkins 'Keychains and Provisioning Profiles Plugin'\n- Sets code signing identity from Jenkins 'Keychains and Provisioning Profiles Plugin'\n- Sets output directory to './output' (gym, scan and backup_xcarchive).\n- Sets derived data path to './derivedData' (xcodebuild, gym, scan and clear_derived_data, carthage).\n- Produce result bundle (gym and scan).\nThis action helps with Jenkins integration. Creates own derived data for each job. All build results like IPA files and archives will be stored in the `./output` directory.\nThe action also works with [Keychains and Provisioning Profiles Plugin](https://wiki.jenkins-ci.org/display/JENKINS/Keychains+and+Provisioning+Profiles+Plugin), selected keychain\nwill be automatically unlocked and the selected code signing identity will be used. By default this action will only work when fastlane is executed on a CI system.\n\nsetup_jenkins | \n-----|----\nSupported platforms | ios, mac\nAuthor | @bartoszj  1 Example \n\n\n\u0002wzxhzdk:216\u0003   Parameters \n\nKey | Description\n----|------------\n  `force` | Force setup, even if not executed by Jenkins\n  `unlock_keychain` | Unlocks keychain\n  `add_keychain_to_search_list` | Add to keychain search list\n  `set_default_keychain` | Set keychain as default\n  `keychain_path` | Path to keychain\n  `keychain_password` | Keychain password\n  `set_code_signing_identity` | Set code signing identity from CODE_SIGNING_IDENTITY environment\n  `code_signing_identity` | Code signing identity\n  `output_directory` | The directory in which the ipa file should be stored in\n  `derived_data_path` | The directory where built products and other derived data will go\n  `result_bundle` | Produce the result bundle describing what occurred will be placed   \n\n### unlock_keychain\n\nUnlock a keychain\n\n\n\n> Unlocks the given keychain file and adds it to the keychain search list\nKeychains can be replaced with `add_to_search_list: :replace`\n\nunlock_keychain | \n-----|----\nSupported platforms | ios, android, mac\nAuthor | @xfreebird  4 Examples \n\n\n\u0002wzxhzdk:217\u0003\n\n\n\n\u0002wzxhzdk:218\u0003\n\n\n\n\u0002wzxhzdk:219\u0003\n\n\n\n\u0002wzxhzdk:220\u0003   Parameters \n\nKey | Description\n----|------------\n  `path` | Path to the keychain file\n  `password` | Keychain password\n  `add_to_search_list` | Add to keychain search list\n  `set_default` | Set as default keychain   \n\n### badge\n\nAutomatically add a badge to your app icon\n\n\n\n> This action will add a light/dark badge onto your app icon.\nYou can also provide your custom badge/overlay or add an shield for more customization more info:\nhttps://github.com/HazAT/badge\n**Note** If you want to reset the badge back to default you can use `sh 'git checkout --  /Assets.xcassets/'`\n\nbadge | \n-----|----\nSupported platforms | ios, android, mac\nAuthor | @DanielGri  4 Examples \n\n\n\u0002wzxhzdk:221\u0003\n\n\n\n\u0002wzxhzdk:222\u0003\n\n\n\n\u0002wzxhzdk:223\u0003\n\n\n\n\u0002wzxhzdk:224\u0003   Parameters \n\nKey | Description\n----|------------\n  `dark` | Adds a dark flavored badge ontop of your icon\n  `custom` | Add your custom overlay/badge image\n  `no_badge` | Hides the beta badge\n  `shield` | Add a shield to your app icon from shields.io\n  `alpha` | Adds and alpha badge instead of the default beta one\n  `path` | Sets the root path to look for AppIcons\n  `shield_io_timeout` | Set custom duration for the timeout of the shields.io request in seconds\n  `glob` | Glob pattern for finding image files\n  `alpha_channel` | Keeps/adds an alpha channel to the icon (useful for android icons)\n  `shield_gravity` | Position of shield on icon. Default: North - Choices include: NorthWest, North, NorthEast, West, Center, East, SouthWest, South, SouthEast\n  `shield_no_resize` | Shield image will no longer be resized to aspect fill the full icon. Instead it will only be shrunk to not exceed the icon graphic   \n\n### update_fastlane\n\nMakes sure fastlane-tools are up-to-date when running fastlane\n\n\n\n> This action will update fastlane to the most recent version - major version updates will not be performed automatically, as they might include breaking changes. If an update was performed, fastlane will be restarted before the run continues.\nIf you are using rbenv or rvm, everything should be good to go. However, if you are using the system's default ruby, some additional setup is needed for this action to work correctly. In short, fastlane needs to be able to access your gem library without running in `sudo` mode.\nThe simplest possible fix for this is putting the following lines into your `~/.bashrc` or `~/.zshrc` file:\n\n\u0002wzxhzdk:225\u0003\n\nAfter the above changes, restart your terminal, then run `mkdir $GEM_HOME` to create the new gem directory. After this, you're good to go!\nRecommended usage of the `update_fastlane` action is at the top inside of the `before_all` block, before running any other action\n\nupdate_fastlane | \n-----|----\nSupported platforms | ios, android, mac\nAuthor | @milch, @KrauseFx  1 Example \n\n\n\u0002wzxhzdk:226\u0003   Parameters \n\nKey | Description\n----|------------\n  `nightly` | Opt-in to install and use nightly fastlane builds\n  `no_update` | Don't update during this run. Defaults to false. This is used internally\n  `tools` | [DEPRECATED!] true - Comma separated list of fastlane tools to update (e.g. fastlane,deliver,sigh)   \n\n### precheck\n\nCheck your app's metadata before you submit your app to review using _precheck_\n\n\n\n> More information: https://fastlane.tools/precheck\n\nprecheck | \n-----|----\nSupported platforms | ios\nAuthor | @taquitos\nReturns | true if precheck passes, else, false  1 Example \n\n\n\u0002wzxhzdk:227\u0003   Parameters \n\nKey | Description\n----|------------\n  `app_identifier` | The bundle identifier of your app\n  `username` | Your Apple ID Username\n  `team_id` | The ID of your iTunes Connect team if you're in multiple teams\n  `team_name` | The name of your iTunes Connect team if you're in multiple teams\n  `default_rule_level` | The default rule level unless otherwise configured\n  `negative_apple_sentiment` | mentioning \uf8ff in a way that could be considered negative\n  `placeholder_text` | using placeholder text (e.g.:\"lorem ipsum\", \"text here\", etc...)\n  `other_platforms` | mentioning other platforms, like Android or Blackberry\n  `future_functionality` | mentioning features or content that is not currently available in your app\n  `test_words` | using text indicating this release is a test\n  `curse_words` | including words that might be considered objectionable\n  `custom_text` | mentioning any of the user-specified words passed to custom_text(data: [words])\n  `copyright_date` | using a copyright date that is any different from this current year, or missing a date\n  `unreachable_urls` | unreachable URLs in app metadata   \n\n### bundle_install\n\nThis action runs `bundle install` (if available)\n\n\n\n\n\nbundle_install | \n-----|----\nSupported platforms | ios, android, mac\nAuthor | @birmacher, @koglinjg   Parameters \n\nKey | Description\n----|------------\n  `binstubs` | Generate bin stubs for bundled gems to ./bin\n  `clean` | Run bundle clean automatically after install\n  `full_index` | Use the rubygems modern index instead of the API endpoint\n  `gemfile` | Use the specified gemfile instead of Gemfile\n  `jobs` | Install gems using parallel workers\n  `local` | Do not attempt to fetch gems remotely and use the gem cache instead\n  `deployment` | Install using defaults tuned for deployment and CI environments\n  `no_cache` | Don't update the existing gem cache\n  `no_prune` | Don't remove stale gems from the cache\n  `path` | Specify a different path than the system default ($BUNDLE_PATH or $GEM_HOME). Bundler will remember this value for future installs on this machine\n  `system` | Install to the system location ($BUNDLE_PATH or $GEM_HOME) even if the bundle was previously installed somewhere else for this application\n  `quiet` | Only output warnings and errors\n  `retry` | Retry network and git requests that have failed\n  `shebang` | Specify a different shebang executable name than the default (usually 'ruby')\n  `standalone` | Make a bundle that can work without the Bundler runtime\n  `trust_policy` | Sets level of security when dealing with signed gems. Accepts `LowSecurity`, `MediumSecurity` and `HighSecurity` as values\n  `without` | Exclude gems that are part of the specified named group\n  `with` | Include gems that are part of the specified named group   \n\n### upload_symbols_to_crashlytics\n\nUpload dSYM symbolication files to Crashlytics\n\n\n\n> This action allows you to upload symbolication files to Crashlytics. It's extra useful if you use it to download the latest dSYM files from Apple when you use Bitcode. This action will not fail the build if one of the uploads failed. The reason for that is that sometimes some of dSYM files are invalid, and we don't want them to fail the complete build.\n\nupload_symbols_to_crashlytics | \n-----|----\nSupported platforms | ios\nAuthor | @KrauseFx  1 Example \n\n\n\u0002wzxhzdk:228\u0003   Parameters \n\nKey | Description\n----|------------\n  `dsym_path` | Path to the DSYM file or zip to upload\n  `api_token` | Crashlytics API Key\n  `binary_path` | The path to the upload-symbols file of the Fabric app\n  `platform` | The platform of the app (ios, appletvos, mac)   \n\n### create_keychain\n\nCreate a new Keychain\n\n\n\n\n\ncreate_keychain | \n-----|----\nSupported platforms | ios, android, mac\nAuthor | @gin0606  1 Example \n\n\n\u0002wzxhzdk:229\u0003   Parameters \n\nKey | Description\n----|------------\n  `name` | Keychain name\n  `path` | Path to keychain\n  `password` | Password for the keychain\n  `default_keychain` | Should the newly created Keychain be the new system default keychain\n  `unlock` | Unlock keychain after create\n  `timeout` | timeout interval in seconds. Set `false` if you want to specify \"no time-out\"\n  `lock_when_sleeps` | Lock keychain when the system sleeps\n  `lock_after_timeout` | Lock keychain after timeout interval\n  `add_to_search_list` | Add keychain to search list   \n\n### delete_keychain\n\nDelete keychains and remove them from the search list\n\n\n\n> Keychains can be deleted after being creating with `create_keychain`\n\ndelete_keychain | \n-----|----\nSupported platforms | ios, android, mac\nAuthor | @gin0606, @koenpunt  2 Examples \n\n\n\u0002wzxhzdk:230\u0003\n\n\n\n\u0002wzxhzdk:231\u0003   Parameters \n\nKey | Description\n----|------------\n  `name` | Keychain name\n  `keychain_path` | Keychain path   \n\n### latest_testflight_build_number\n\nFetches most recent build number from TestFlight\n\n\n\n> Provides a way to have increment_build_number be based on the latest build you uploaded to iTC.\nFetches most recent build number from TestFlight based on the version number. Provides a way to have `increment_build_number` be based on the latest build you uploaded to iTC.\n\nlatest_testflight_build_number | \n-----|----\nSupported platforms | ios\nAuthor | @daveanderson\nReturns | Integer representation of the latest build number uploaded to TestFlight  2 Examples \n\n\n\u0002wzxhzdk:232\u0003\n\n\n\n\u0002wzxhzdk:233\u0003   Parameters \n\nKey | Description\n----|------------\n  `live` | Query the live version (ready-for-sale)\n  `app_identifier` | The bundle identifier of your app\n  `username` | Your Apple ID Username\n  `version` | The version number whose latest build number we want\n  `initial_build_number` | sets the build number to given value if no build is in current train\n  `team_id` | The ID of your iTunes Connect team if you're in multiple teams\n  `team_name` | The name of your iTunes Connect team if you're in multiple teams   \n\n### backup_file\n\nThis action backs up your file to \"[path].back\"\n\n\n\n\n\nbackup_file | \n-----|----\nSupported platforms | ios, android, mac\nAuthor | @gin0606  1 Example \n\n\n\u0002wzxhzdk:234\u0003   Parameters \n\nKey | Description\n----|------------\n  `path` | Path to the file you want to backup   \n\n### copy_artifacts\n\nSmall action to save your build artifacts. Useful when you use reset_git_repo\n\n\n\n> This action copies artifacts to a target directory. It's useful if you have a CI that will pick up these artifacts and attach them to the build. Useful e.g. for storing your `.ipa`s, `.dSYM.zip`s, `.mobileprovision`s, `.cert`s\nMake sure your target_path is gitignored, and if you use `reset_git_repo`, make sure the artifacts are added to the exclude list\n\ncopy_artifacts | \n-----|----\nSupported platforms | ios, android, mac\nAuthor | @lmirosevic  1 Example \n\n\n\u0002wzxhzdk:235\u0003   Parameters \n\nKey | Description\n----|------------\n  `keep_original` | Set this to true if you want copy, rather than move, semantics\n  `target_path` | The directory in which you want your artifacts placed\n  `artifacts` | An array of file patterns of the files/folders you want to preserve\n  `fail_on_missing` | Fail when a source file isn't found   \n\n### prompt\n\nAsk the user for a value or for confirmation\n\n\n\n> You can use `prompt` to ask the user for a value or to just let the user confirm the next step\nWhen this is executed on a CI service, the passed `ci_input` value will be returned\nThis action also supports multi-line inputs using the `multi_line_end_keyword` option.\n\nprompt | \n-----|----\nSupported platforms | ios, android, mac\nAuthor | @KrauseFx  2 Examples \n\n\n\u0002wzxhzdk:236\u0003\n\n\n\n\u0002wzxhzdk:237\u0003   Parameters \n\nKey | Description\n----|------------\n  `text` | The text that will be displayed to the user\n  `ci_input` | The default text that will be used when being executed on a CI service\n  `boolean` | Is that a boolean question (yes/no)? This will add (y/n) at the end\n  `multi_line_end_keyword` | Enable multi-line inputs by providing an end text (e.g. 'END') which will stop the user input   \n\n### reset_simulator_contents\n\nShutdown and reset running simulators\n\n\n\n\n\nreset_simulator_contents | \n-----|----\nSupported platforms | ios\nAuthor | @danramteke  1 Example \n\n\n\u0002wzxhzdk:238\u0003   Parameters \n\nKey | Description\n----|------------\n  `ios` | Which versions of Simulators you want to reset content and settings, this does not remove/recreate the simulators   \n\n### restore_file\n\nThis action restore your file that was backuped with the `backup_file` action\n\n\n\n\n\nrestore_file | \n-----|----\nSupported platforms | ios, android, mac\nAuthor | @gin0606  1 Example \n\n\n\u0002wzxhzdk:239\u0003   Parameters \n\nKey | Description\n----|------------\n  `path` | Original file name you want to restore   \n\n### say\n\nThis action speaks out loud the given text\n\n\n\n\n\nsay | \n-----|----\nSupported platforms | ios, android, mac\nAuthor | @KrauseFx  1 Example \n\n\n\u0002wzxhzdk:240\u0003  \n\n### zip\n\nCompress a file or folder to a zip\n\n\n\n\n\nzip | \n-----|----\nSupported platforms | ios, android, mac\nAuthor | @KrauseFx\nReturns | The path to the output zip file  3 Examples \n\n\n\u0002wzxhzdk:241\u0003\n\n\n\n\u0002wzxhzdk:242\u0003\n\n\n\n\u0002wzxhzdk:243\u0003   Parameters \n\nKey | Description\n----|------------\n  `path` | Path to the directory or file to be zipped\n  `output_path` | The name of the resulting zip file\n  `verbose` | Enable verbose output of zipped file   \n\n### danger\n\nRuns `danger` for the project\n\n\n\n> Formalize your Pull Request etiquette.\nMore information: https://github.com/danger/danger\n\ndanger | \n-----|----\nSupported platforms | ios, android, mac\nAuthor | @KrauseFx  2 Examples \n\n\n\u0002wzxhzdk:244\u0003\n\n\n\n\u0002wzxhzdk:245\u0003   Parameters \n\nKey | Description\n----|------------\n  `use_bundle_exec` | Use bundle exec when there is a Gemfile presented\n  `verbose` | Show more debugging information\n  `danger_id` | The identifier of this Danger instance\n  `dangerfile` | The location of your Dangerfile\n  `github_api_token` | GitHub API token for danger\n  `fail_on_errors` | Should always fail the build process, defaults to false\n  `new_comment` | Makes Danger post a new comment instead of editing its previous one\n  `base` | A branch/tag/commit to use as the base of the diff. [master|dev|stable]\n  `head` | A branch/tag/commit to use as the head. [master|dev|stable]   \n\n### artifactory\n\nThis action uploads an artifact to artifactory\n\n\n\n\n\nartifactory | \n-----|----\nSupported platforms | ios, android, mac\nAuthor | @koglinjg, @tommeier  1 Example \n\n\n\u0002wzxhzdk:246\u0003   Parameters \n\nKey | Description\n----|------------\n  `file` | File to be uploaded to artifactory\n  `repo` | Artifactory repo to put the file in\n  `repo_path` | Path to deploy within the repo, including filename\n  `endpoint` | Artifactory endpoint\n  `username` | Artifactory username\n  `password` | Artifactory password\n  `properties` | Artifact properties hash\n  `ssl_pem_file` | Location of pem file to use for ssl verification\n  `ssl_verify` | Verify SSL\n  `proxy_username` | Proxy username\n  `proxy_password` | Proxy password\n  `proxy_address` | Proxy address\n  `proxy_port` | Proxy port   \n\n### download_dsyms\n\nDownload dSYM files from Apple iTunes Connect for Bitcode apps\n\n\n\n> This action downloads dSYM files from Apple iTunes Connect after\nthe ipa got re-compiled by Apple. Useful if you have Bitcode enabled\n\n\u0002wzxhzdk:247\u0003\n\n\ndownload_dsyms | \n-----|----\nSupported platforms | ios\nAuthor | @KrauseFx  2 Examples \n\n\n\u0002wzxhzdk:248\u0003\n\n\n\n\u0002wzxhzdk:249\u0003   Parameters \n\nKey | Description\n----|------------\n  `username` | Your Apple ID Username for iTunes Connect\n  `app_identifier` | The bundle identifier of your app\n  `team_id` | The ID of your iTunes Connect team if you're in multiple teams\n  `team_name` | The name of your iTunes Connect team if you're in multiple teams\n  `platform` | The app platform for dSYMs you wish to download\n  `version` | The app version for dSYMs you wish to download\n  `build_number` | The app build_number for dSYMs you wish to download   \n\n### version_bump_podspec\n\nIncrement or set the version in a podspec file\n\n\n\n> You can use this action to manipulate any 'version' variable contained in a ruby file.\nFor example, you can use it to bump the version of a cocoapods' podspec file.\nIt also supports versions that are not semantic: 1.4.14.4.1\nFor such versions there is an option to change appendix (4.1)\n\nversion_bump_podspec | \n-----|----\nSupported platforms | ios, mac\nAuthor | @Liquidsoul, @KrauseFx  2 Examples \n\n\n\u0002wzxhzdk:250\u0003\n\n\n\n\u0002wzxhzdk:251\u0003   Parameters \n\nKey | Description\n----|------------\n  `path` | You must specify the path to the podspec file to update\n  `bump_type` | The type of this version bump. Available: patch, minor, major\n  `version_number` | Change to a specific version. This will replace the bump type value\n  `version_appendix` | Change version appendix to a specific value. For example 1.4.14.4.1 -> 1.4.14.5   \n\n### team_id\n\nSpecify the Team ID you want to use for the Apple Developer Portal\n\n\n\n\n\nteam_id | \n-----|----\nSupported platforms | ios\nAuthor | @KrauseFx  1 Example \n\n\n\u0002wzxhzdk:252\u0003  \n\n### backup_xcarchive\n\nSave your [zipped] xcarchive elsewhere from default path\n\n\n\n\n\nbackup_xcarchive | \n-----|----\nSupported platforms | ios, mac\nAuthor | @dral3x  1 Example \n\n\n\u0002wzxhzdk:253\u0003   Parameters \n\nKey | Description\n----|------------\n  `xcarchive` | Path to your xcarchive file. Optional if you use the `xcodebuild` action\n  `destination` | Where your archive will be placed\n  `zip` | Enable compression of the archive. Default value `true`\n  `versioned` | Create a versioned (date and app version) subfolder where to put the archive. Default value `true`   \n\n### pod_lib_lint\n\nPod lib lint\n\n\n\n> Test the syntax of your Podfile by linting the pod against the files of its directory\n\npod_lib_lint | \n-----|----\nSupported platforms | ios, mac\nAuthor | @thierryxing  4 Examples \n\n\n\u0002wzxhzdk:254\u0003\n\n\n\n\u0002wzxhzdk:255\u0003\n\n\n\n\u0002wzxhzdk:256\u0003\n\n\n\n\u0002wzxhzdk:257\u0003   Parameters \n\nKey | Description\n----|------------\n  `use_bundle_exec` | Use bundle exec when there is a Gemfile presented\n  `verbose` | Allow output detail in console\n  `allow_warnings` | Allow warnings during pod lint\n  `sources` | The sources of repos you want the pod spec to lint with, separated by commas\n  `use_libraries` | Lint uses static libraries to install the spec\n  `fail_fast` | Lint stops on the first failing platform or subspec\n  `private` | Lint skips checks that apply only to public specs\n  `quick` | Lint skips checks that would require to download and build the spec   \n\n### erb\n\nAllows to Generate output files based on ERB templates\n\n\n\n> Renders an ERB template with `placeholders` given as a hash via parameter,\nif no :destination is set, returns rendered template as string\n\nerb | \n-----|----\nSupported platforms | ios, android, mac\nAuthor | @hjanuschka  1 Example \n\n\n\u0002wzxhzdk:258\u0003   Parameters \n\nKey | Description\n----|------------\n  `template` | ERB Template File\n  `destination` | Destination file\n  `placeholders` | Placeholders given as a hash   \n\n### download\n\nDownload a file from a remote server (e.g. JSON file)\n\n\n\n> Specify the URL to download and get the content as a return value\nFor more advanced networking code, use the Ruby functions instead:\nhttp://docs.ruby-lang.org/en/2.0.0/Net/HTTP.html\n\ndownload | \n-----|----\nSupported platforms | ios, android, mac\nAuthor | @KrauseFx  1 Example \n\n\n\u0002wzxhzdk:259\u0003   Parameters \n\nKey | Description\n----|------------\n  `url` | The URL that should be downloaded   \n\n### rocket\n\nOutputs ascii-art for a rocket \ud83d\ude80\n\n\n\n> Print an ascii Rocket :rocket:. Useful after using _crashlytics_ or _pilot_ to indicate that your new build has been shipped to outer-space.\n\nrocket | \n-----|----\nSupported platforms | ios, android, mac\nAuthor | @JaviSoto, @radex  1 Example \n\n\n\u0002wzxhzdk:260\u0003  \n\n### debug\n\nPrint out an overview of the lane context values\n\n\n\n\n\ndebug | \n-----|----\nSupported platforms | ios, android, mac\nAuthor | @KrauseFx  1 Example \n\n\n\u0002wzxhzdk:261\u0003  \n\n### make_changelog_from_jenkins\n\nGenerate a changelog using the Changes section from the current Jenkins build\n\n\n\n> This is useful when deploying automated builds. The changelog from Jenkins lists all the commit messages since the last build.\n\nmake_changelog_from_jenkins | \n-----|----\nSupported platforms | ios, android, mac\nAuthor | @mandrizzle  1 Example \n\n\n\u0002wzxhzdk:262\u0003   Parameters \n\nKey | Description\n----|------------\n  `fallback_changelog` | Fallback changelog if there is not one on Jenkins, or it couldn't be read\n  `include_commit_body` | Include the commit body along with the summary   \n\n### pod_push\n\nPush a Podspec to Trunk or a private repository\n\n\n\n\n\npod_push | \n-----|----\nSupported platforms | ios, mac\nAuthor | @squarefrog  4 Examples \n\n\n\u0002wzxhzdk:263\u0003\n\n\n\n\u0002wzxhzdk:264\u0003\n\n\n\n\u0002wzxhzdk:265\u0003\n\n\n\n\u0002wzxhzdk:266\u0003   Parameters \n\nKey | Description\n----|------------\n  `path` | The Podspec you want to push\n  `repo` | The repo you want to push. Pushes to Trunk by default\n  `allow_warnings` | Allow warnings during pod push\n  `use_libraries` | Allow lint to use static libraries to install the spec\n  `sources` | The sources of repos you want the pod spec to lint with, separated by commas\n  `verbose` | Show more debugging information   \n\n### dsym_zip\n\nCreates a zipped dSYM in the project root from the .xcarchive\n\n\n\n> You can manually specify the path to the xcarchive (not needed if you use `xcodebuild`/`xcarchive` to build your archive)\n\ndsym_zip | \n-----|----\nSupported platforms | ios, mac\nAuthor | @lmirosevic  2 Examples \n\n\n\u0002wzxhzdk:267\u0003\n\n\n\n\u0002wzxhzdk:268\u0003   Parameters \n\nKey | Description\n----|------------\n  `archive_path` | Path to your xcarchive file. Optional if you use the `xcodebuild` action\n  `dsym_path` | Path for generated dsym. Optional, default is your apps root directory\n  `all` | Whether or not all dSYM files are to be included. Optional, default is false in which only your app dSYM is included   \n\n### ensure_no_debug_code\n\nEnsures the given text is nowhere in the code base\n\n\n\n> You don't want any debug code to slip into production. This can be used\nto check if there is any debug code still in your code base or if you have\nthings like // TO DO or similar\n\nensure_no_debug_code | \n-----|----\nSupported platforms | ios, android, mac\nAuthor | @KrauseFx  5 Examples \n\n\n\u0002wzxhzdk:269\u0003\n\n\n\n\u0002wzxhzdk:270\u0003\n\n\n\n\u0002wzxhzdk:271\u0003\n\n\n\n\u0002wzxhzdk:272\u0003\n\n\n\n\u0002wzxhzdk:273\u0003   Parameters \n\nKey | Description\n----|------------\n  `text` | The text that must not be in the code base\n  `path` | The directory containing all the source files\n  `extension` | The extension that should be searched for\n  `extensions` | An array of file extensions that should be searched for\n  `exclude` | Exclude a certain pattern from the search\n  `exclude_dirs` | An array of dirs that should not be included in the search   \n\n### cloc\n\nGenerates a Code Count that can be read by Jenkins (xml format)\n\n\n\n> This action will run cloc to generate a SLOC report that the Jenkins SLOCCount plugin can read.\nSee https://wiki.jenkins-ci.org/display/JENKINS/SLOCCount+Plugin and https://github.com/AlDanial/cloc for more information.\n\ncloc | \n-----|----\nSupported platforms | ios, mac\nAuthor | @intere  1 Example \n\n\n\u0002wzxhzdk:274\u0003   Parameters \n\nKey | Description\n----|------------\n  `binary_path` | Where the cloc binary lives on your system (full path including 'cloc')\n  `exclude_dir` | Comma separated list of directories to exclude\n  `output_directory` | Where to put the generated report file\n  `source_directory` | Where to look for the source code (relative to the project root folder)\n  `xml` | Should we generate an XML File (if false, it will generate a plain text file)?   \n\n### team_name\n\nSet a team to use by its name\n\n\n\n\n\nteam_name | \n-----|----\nSupported platforms | ios\nAuthor | @KrauseFx  1 Example \n\n\n\u0002wzxhzdk:275\u0003  \n\n### scp\n\nTransfer files via SCP\n\n\n\n\n\nscp | \n-----|----\nSupported platforms | ios, android, mac\nAuthor | @hjanuschka  2 Examples \n\n\n\u0002wzxhzdk:276\u0003\n\n\n\n\u0002wzxhzdk:277\u0003   Parameters \n\nKey | Description\n----|------------\n  `username` | Username\n  `password` | Password\n  `host` | Hostname\n  `port` | Port\n  `upload` | Upload\n  `download` | Download   \n\n### verify_build\n\nAble to verify various settings in ipa file\n\n\n\n> Verifies that the built app was built using the expected build resources. This is relevant for people who build on machines that are used to build apps with different profiles, certificates and/or bundle identifiers to guard against configuration mistakes.\n\nverify_build | \n-----|----\nSupported platforms | ios\nAuthor | @CodeReaper  1 Example \n\n\n\u0002wzxhzdk:278\u0003   Parameters \n\nKey | Description\n----|------------\n  `provisioning_type` | Required type of provisioning\n  `provisioning_uuid` | Required UUID of provisioning profile\n  `team_identifier` | Required team identifier\n  `team_name` | Required team name\n  `app_name` | Required app name\n  `bundle_identifier` | Required bundle identifier\n  `ipa_path` | Explicitly set the ipa path   \n\n### install_on_device\n\nInstalls an .ipa file on a connected iOS-device via usb or wifi\n\n\n\n> Installs the ipa on the device, if no id is given, the first found iOS device will be used, works via USB or Wi-Fi. This requires `ios-deploy` to be installed please have a look at [ios-deploy](https://github.com/phonegap/ios-deploy). to quickly install it, use `npm -g i ios-deploy`\n\ninstall_on_device | \n-----|----\nSupported platforms | ios\nAuthor | @hjanuschka  1 Example \n\n\n\u0002wzxhzdk:279\u0003   Parameters \n\nKey | Description\n----|------------\n  `extra` | Extra Commandline arguments passed to ios-deploy\n  `device_id` | id of the device / if not set defaults to first found device\n  `skip_wifi` | Do not search for devices via WiFi\n  `ipa` | The IPA file to put on the device   \n\n### version_get_podspec\n\nReceive the version number from a podspec file\n\n\n\n\n\nversion_get_podspec | \n-----|----\nSupported platforms | ios, mac\nAuthor | @Liquidsoul, @KrauseFx  1 Example \n\n\n\u0002wzxhzdk:280\u0003   Parameters \n\nKey | Description\n----|------------\n  `path` | You must specify the path to the podspec file   \n\n### rsync\n\nRsync files from :source to :destination\n\n\n\n> A wrapper around rsync, rsync is a tool that lets you synchronize files, including permissions and so on for a more detailed information about rsync please see rsync(1) manpage.\n\nrsync | \n-----|----\nSupported platforms | ios, android, mac\nAuthor | @hjanuschka  1 Example \n\n\n\u0002wzxhzdk:281\u0003   Parameters \n\nKey | Description\n----|------------\n  `extra` | Port\n  `source` | source file/folder\n  `destination` | destination file/folder   \n\n### adb_devices\n\nGet an array of Connected android device serials\n\n\n\n> Fetches device list via adb, e.g. run an adb command on all connected devices.\n\nadb_devices | \n-----|----\nSupported platforms | android\nAuthor | @hjanuschka\nReturns | Returns an array of all currently connected android devices  1 Example \n\n\n\u0002wzxhzdk:282\u0003   Parameters \n\nKey | Description\n----|------------\n  `adb_path` | The path to your `adb` binary   \n\n### dotgpg_environment\n\nReads in production secrets set in a dotgpg file and puts them in ENV\n\n\n\n> More information about dotgpg can be found at https://github.com/ConradIrwin/dotgpg\n\ndotgpg_environment | \n-----|----\nSupported platforms | ios, android, mac\nAuthor | @simonlevy5  1 Example \n\n\n\u0002wzxhzdk:283\u0003   Parameters \n\nKey | Description\n----|------------\n  `dotgpg_file` | Path to your gpg file   \n\n### jira\n\nLeave a comment on JIRA tickets\n\n\n\n\n\njira | \n-----|----\nSupported platforms | ios, android, mac\nAuthor | @iAmChrisTruman  1 Example \n\n\n\u0002wzxhzdk:284\u0003   Parameters \n\nKey | Description\n----|------------\n  `url` | URL for Jira instance\n  `username` | Username for JIRA instance\n  `password` | Password for Jira\n  `ticket_id` | Ticket ID for Jira, i.e. IOS-123\n  `comment_text` | Text to add to the ticket as a comment   \n\n### read_podspec\n\nLoads a CocoaPods spec as JSON\n\n\n\n> This can be used for only specifying a version string in your podspec\n- and during your release process you'd read it from the podspec by running\n`version = read_podspec['version']` at the beginning of your lane\nLoads the specified (or the first found) podspec in the folder as JSON, so that you can inspect its `version`, `files` etc. \nThis can be useful when basing your release process on the version string only stored in one place - in the podspec. As one of \nthe first steps you'd read the podspec and its version and the rest of the workflow can use that version string (when e.g. creating a new git tag or a GitHub Release).\n\nread_podspec | \n-----|----\nSupported platforms | ios, mac\nAuthor | @czechboy0  2 Examples \n\n\n\u0002wzxhzdk:285\u0003\n\n\n\n\u0002wzxhzdk:286\u0003   Parameters \n\nKey | Description\n----|------------\n  `path` | Path to the podspec to be read   \n\n### ssh\n\nAllows remote command execution using ssh\n\n\n\n> Lets you execute remote commands via ssh using username/password or ssh-agent. If one of the commands in command-array returns non 0 - it fails.\n\nssh | \n-----|----\nSupported platforms | ios, android, mac\nAuthor | @hjanuschka  1 Example \n\n\n\u0002wzxhzdk:287\u0003   Parameters \n\nKey | Description\n----|------------\n  `username` | Username\n  `password` | Password\n  `host` | Hostname\n  `port` | Port\n  `commands` | Commands\n  `log` | Log commands and output   \n\n### app_store_build_number\n\nReturns the current build_number of either live or edit version\n\n\n\n> Returns the current build number of either the live or testflight version - it is useful for getting the build_number of the current or ready-for-sale app version, and it also works on non-live testflight version. If you need to handle more build-trains please see `latest_testflight_build_number`\n\napp_store_build_number | \n-----|----\nSupported platforms | ios, mac\nAuthor | @hjanuschka  3 Examples \n\n\n\u0002wzxhzdk:288\u0003\n\n\n\n\u0002wzxhzdk:289\u0003\n\n\n\n\u0002wzxhzdk:290\u0003   Parameters \n\nKey | Description\n----|------------\n  `initial_build_number` | sets the build number to given value if no build is in current train\n  `app_identifier` | The bundle identifier of your app\n  `username` | Your Apple ID Username\n  `team_id` | The ID of your iTunes Connect team if you're in multiple teams\n  `live` | Query the live version (ready-for-sale)\n  `version` | The version number whose latest build number we want\n  `team_name` | The name of your iTunes Connect team if you're in multiple teams   \n\n### appetize_viewing_url_generator\n\nGenerate an URL for appetize simulator\n\n\n\n> Check out the [device_grid guide](https://github.com/fastlane/fastlane/blob/master/fastlane/lib/fastlane/actions/device_grid/README.md) for more information\n\nappetize_viewing_url_generator | \n-----|----\nSupported platforms | ios\nAuthor | @KrauseFx\nReturns | The URL to preview the iPhone app   Parameters \n\nKey | Description\n----|------------\n  `public_key` | Public key of the app you wish to update\n  `device` | Device type: iphone4s, iphone5s, iphone6, iphone6plus, ipadair, iphone6s, iphone6splus, ipadair2, nexus5, nexus7 or nexus9\n  `scale` | Scale of the simulator\n  `orientation` | Device orientation\n  `language` | Device language in ISO 639-1 language code, e.g. 'de'\n  `color` | Color of the device\n  `launch_url` | Specify a deep link to open when your app is launched\n  `os_version` | The operating system version on which to run your app, e.g. 10.3, 8.0   \n\n### install_xcode_plugin\n\nInstall an Xcode plugin for the current user\n\n\n\n\n\ninstall_xcode_plugin | \n-----|----\nSupported platforms | ios, mac\nAuthor | @NeoNachoSoto, @tommeier  2 Examples \n\n\n\u0002wzxhzdk:291\u0003\n\n\n\n\u0002wzxhzdk:292\u0003   Parameters \n\nKey | Description\n----|------------\n  `url` | URL for Xcode plugin ZIP file\n  `github` | GitHub repository URL for Xcode plugin   \n\n### add_extra_platforms\n\nModify the default list of supported platforms\n\n\n\n\n\nadd_extra_platforms | \n-----|----\nSupported platforms | ios, android, mac\nAuthor | @lacostej  1 Example \n\n\n\u0002wzxhzdk:293\u0003   Parameters \n\nKey | Description\n----|------------\n  `platforms` | The optional extra platforms to support   \n\n### clipboard\n\nCopies a given string into the clipboard. Works only on macOS\n\n\n\n\n\nclipboard | \n-----|----\nSupported platforms | ios, android, mac\nAuthor | @KrauseFx  2 Examples \n\n\n\u0002wzxhzdk:294\u0003\n\n\n\n\u0002wzxhzdk:295\u0003   Parameters \n\nKey | Description\n----|------------\n  `value` | The string that should be copied into the clipboard   \n\n### build_and_upload_to_appetize\n\nGenerate and upload an ipa file to appetize.io\n\n\n\n> This should be called from danger\nMore information in the [device_grid guide](https://github.com/fastlane/fastlane/blob/master/fastlane/lib/fastlane/actions/device_grid/README.md)\n\nbuild_and_upload_to_appetize | \n-----|----\nSupported platforms | ios\nAuthor | @KrauseFx   Parameters \n\nKey | Description\n----|------------\n  `xcodebuild` | Parameters that are passed to the xcodebuild action\n  `scheme` | The scheme to build. Can also be passed using the `xcodebuild` parameter\n  `api_token` | Appetize.io API Token   \n\n### update_icloud_container_identifiers\n\nThis action changes the iCloud container identifiers in the entitlements file\n\n\n\n> Updates the iCloud Container Identifiers in the given Entitlements file, so you can use different iCloud containers for different builds like Adhoc, App Store, etc.\n\nupdate_icloud_container_identifiers | \n-----|----\nSupported platforms | ios\nAuthor | @JamesKuang  1 Example \n\n\n\u0002wzxhzdk:296\u0003   Parameters \n\nKey | Description\n----|------------\n  `entitlements_file` | The path to the entitlement file which contains the iCloud container identifiers\n  `icloud_container_identifiers` | An Array of unique identifiers for the iCloud containers. Eg. ['iCloud.com.test.testapp']   \n\n### sh\n\nRuns a shell command\n\n\n\n> Allows running an arbitrary shell command.\nBe aware of a specific behavior of 'sh' action with regard to the working directory. For details refer to Advanced.md\n\nsh | \n-----|----\nSupported platforms | ios, android, mac\nAuthor | @KrauseFx\nReturns | Outputs the string and executes it. When running in tests, it returns the actual command instead of executing it  2 Examples \n\n\n\u0002wzxhzdk:297\u0003\n\n\n\n\u0002wzxhzdk:298\u0003   Parameters \n\nKey | Description\n----|------------\n  `command` | Shell command to be executed\n  `log` | Determines whether fastlane should print out the executed command itself and output of the executed command. If command line option --troubleshoot is used, then it overrides this option to true\n  `error_callback` | A callback invoked with the command output if there is a non-zero exit status   \n\n### tryouts\n\nUpload a new build to Tryouts\n\n\n\n> More information http://tryouts.readthedocs.org/en/latest/releases.html#create-release\n\ntryouts | \n-----|----\nSupported platforms | ios, android\nAuthor | @alicertel  1 Example \n\n\n\u0002wzxhzdk:299\u0003   Parameters \n\nKey | Description\n----|------------\n  `app_id` | Tryouts application hash\n  `api_token` | API Token for Tryouts Access\n  `build_file` | Path to your IPA or APK file. Optional if you use the _gym_ or _xcodebuild_ action\n  `notes` | Release notes\n  `notes_path` | Release notes text file path. Overrides the :notes parameter\n  `notify` | Notify testers? 0 for no\n  `status` | 2 to make your release public. Release will be distributed to available testers. 1 to make your release private. Release won't be distributed to testers. This also prevents release from showing up for SDK update   \n\n### ruby_version\n\nVerifies the minimum ruby version required\n\n\n\n> Add this to your `Fastfile` to require a certain version of _ruby_.\nPut it at the top of your `Fastfile to ensure that _fastlane_ is executed appropriately.\n\nruby_version | \n-----|----\nSupported platforms | ios, android, mac\nAuthor | @sebastianvarela  1 Example \n\n\n\u0002wzxhzdk:300\u0003  \n\n### setup_travis\n\nSetup the keychain and match to work with Travis CI\n\n\n\n> - Creates a new temporary keychain for use with match\n- Switches match to `readonly` mode to not create new profiles/cert on CI\nThis action helps with Travis integration, add this to the top of your Fastfile if you use Travis\n\nsetup_travis | \n-----|----\nSupported platforms | ios, mac\nAuthor | @KrauseFx  1 Example \n\n\n\u0002wzxhzdk:301\u0003   Parameters \n\nKey | Description\n----|------------\n  `force` | Force setup, even if not executed by travis   \n\n### plugin_scores\n\n\u001b[31mNo description provided\u001b[0m\n\n\n\n\n\nplugin_scores | \n-----|----\nSupported platforms | ios, android, mac\nAuthor | @KrauseFx   Parameters \n\nKey | Description\n----|------------   \n\n### google_play_track_version_codes\n\nRetrieves version codes for a Google Play track\n\n\n\n> More information: https://github.com/fastlane/fastlane/tree/master/supply\n\ngoogle_play_track_version_codes | \n-----|----\nSupported platforms | android\nAuthor | @panthomakos\nReturns | Array of integers representing the version codes for the given Google Play track  1 Example \n\n\n\u0002wzxhzdk:302\u0003   Parameters \n\nKey | Description\n----|------------\n  `package_name` | The package name of the application to use\n  `track` | The track of the application to use: production, beta, alpha, rollout\n  `key` | [DEPRECATED!] Use --json_key instead - The p12 File used to authenticate with Google\n  `issuer` | [DEPRECATED!] Use --json_key instead - The issuer of the p12 file (email address of the service account)\n  `json_key` | The service account json file used to authenticate with Google\n  `json_key_data` | The service account json used to authenticate with Google\n  `root_url` | Root URL for the Google Play API. The provided URL will be used for API calls in place of https://www.googleapis.com/   \n\n### opt_out_usage\n\nThis will stop uploading the information which actions were run\n\n\n\n> By default, fastlane will track what actions are being used No personal/sensitive information is recorded. Learn more at https://github.com/fastlane/fastlane#metrics Add `opt_out_usage` at the top of your Fastfile to disable metrics collection\n\nopt_out_usage | \n-----|----\nSupported platforms | ios, android, mac\nAuthor | @KrauseFx  1 Example \n\n\n\u0002wzxhzdk:303\u0003  \n\n### opt_out_crash_reporting\n\nThis will prevent reports from being uploaded when _fastlane_ crashes\n\n\n\n> By default, fastlane will send a report when it crashes The stacktrace is sanitized so no personal information is sent. Learn more at https://github.com/fastlane/fastlane#crash-reporting Add `opt_out_crash_reporting` at the top of your Fastfile to disable crash reporting\n\nopt_out_crash_reporting | \n-----|----\nSupported platforms | ios, android, mac\nAuthor | @mpirri, @ohayon  1 Example \n\n\n\u0002wzxhzdk:304\u0003", 
            "title": "Misc"
        }, 
        {
            "location": "/faqs/", 
            "text": "FAQs\n\n\nI'm getting an SSL error\n\n\nIf your output contains something like\n\n\nSSL_connect returned=1 errno=0 state=SSLv3 read server certificate B: certificate verify failed\n\n\n\n\nthat usually means you are using an outdated version of OpenSSL. Make sure to install the latest one using \nhomebrew\n.\n\n\nbrew update \n brew upgrade openssl\n\n\n\n\nIf you use \nrvm\n, try the following\n\n\nrvm osx-ssl-certs update all\n\n\n\n\nfastlane is slow (to start)\n\n\nIf you experience slow launch times of \nfastlane\n, there are 2 solutions to solve this problem:\n\n\nUninstall unused gems\n\n\n[sudo] gem cleanup\n\n\n\n\nError when running \nfastlane\n with Jenkins\n\n\nThis is usually caused when running Jenkins as its own user. While this is possible, you'll have to take care of creating a temporary Keychain, filling it and then using it when building your application. \n\n\nFor more information about the recommended setup with Jenkins open the \nJenkins Guide\n.\n\n\nCode signing issues\n\n\nCheck out the \ncodesigning.guide\n website for more information on how to properly setup code-signing in your team using \nmatch\n.\n\n\nWhen should I use \ncert\n, \nsigh\n and \nmatch\n?\n\n\n\n\ncert\n allows you to create a new code signing certificate + private key (note that the private key is only stored on your machine and won't be synced to any other mac)\n\n\nsigh\n allows you to create and download a provisioning profile (those are synced via the \uf8ff developer portal)\n\n\nmatch\n uses those 2 tools in combination with a git repo you provide, to sync all private key, certificates and provisioning profiles across all your team's Macs and CI servers\n\n\n\n\nWe recommend using \nmatch\n as it removes the complexity out of code signing, while still being in full control. This way you can sync all the signing identities across your team and your CI server. For more information check out \ncodesigning.guide\n.\n\n\nMultiple targets of the same underlying app\n\n\nIf you have one code base, but multiple branded applications\n\n\nCreate different \n.env\n files for each environment and reference those environment variables in the \nDeliverfile\n, \nFastfile\n, etc. \n\n\nExample: Create a \n.env.app1\n, \n.env.app2\n, and \n.env.app3\n. Define each of these like the following...\n\n\nDLV_FIRST_NAME=Josh\nDLV_LAST_NAME=Holtz\nDLV_PRIM_CATG=Business\nDLV_SCND_CATG=Games\n\n\n\n\nNow your Deliver file should look something like this:\n\n\napp_review_information(\n  first_name: ENV['DLV_FIRST_NAME'],\n  last_name: ENV['DLV_LAST_NAME']\n)\n\nprimary_category ENV['DLV_PRIM_CATG']\nsecondary_category ENV['DLV_SCND_CATG']\n\n\n\n\nNow to run this, all you need to do is specify the environment argument when running \nfastlane\n and it will pull from the \n.env\n file that matches the same name...\nEx: \nfastlane build --env app1\n will use \n.env.app1\n\nEx: \nfastlane build --env app2\n will use \n.env.app2\n\n\nYou can also references these environment variables almost anywhere in \nfastlane\n. \n\n\nYou can even define a lane to perform actions on multiple targets:\n\n\ndesc \nDeploy both versions\n\nlane :deploy_all do\n    sh \nfastlane deploy --env paid\n\n    sh \nfastlane deploy --env free\n\nend\n\n\n\n\nAnd you can combine multiple envs in one go\nEx: \nfastlane build --env app1,env1,env2\n will use \n.env.app1\n \n.env.env1\n and \n.env.env2\n\n\nMore on the \n.env\n file can be found \nhere\n.\n\n\nDisable colored output\n\n\nSet the \nFASTLANE_DISABLE_COLORS\n environment variable to disable ANSI colors (e.g. for CI machines)\n\n\nexport FASTLANE_DISABLE_COLORS=1\n\n\n\n\nEnable \nbash\n/\nzsh\n tab completion for fastlane lane names\n\n\nfastlane enable_auto_complete\n\n\n\n\nFollow the on screen prompt to add a line to your \nbash\n/\nzsh\n profile.\n\n\n\"User interaction is not allowed\" when using \nfastlane\n via SSH\n\n\nThis error can occur when you run \nfastlane\n via SSH. To fix it check out \nthis reply on StackOverflow\n.", 
            "title": "FAQs"
        }, 
        {
            "location": "/faqs/#faqs", 
            "text": "", 
            "title": "FAQs"
        }, 
        {
            "location": "/faqs/#im-getting-an-ssl-error", 
            "text": "If your output contains something like  SSL_connect returned=1 errno=0 state=SSLv3 read server certificate B: certificate verify failed  that usually means you are using an outdated version of OpenSSL. Make sure to install the latest one using  homebrew .  brew update   brew upgrade openssl  If you use  rvm , try the following  rvm osx-ssl-certs update all", 
            "title": "I'm getting an SSL error"
        }, 
        {
            "location": "/faqs/#fastlane-is-slow-to-start", 
            "text": "If you experience slow launch times of  fastlane , there are 2 solutions to solve this problem:", 
            "title": "fastlane is slow (to start)"
        }, 
        {
            "location": "/faqs/#uninstall-unused-gems", 
            "text": "[sudo] gem cleanup", 
            "title": "Uninstall unused gems"
        }, 
        {
            "location": "/faqs/#error-when-running-fastlane-with-jenkins", 
            "text": "This is usually caused when running Jenkins as its own user. While this is possible, you'll have to take care of creating a temporary Keychain, filling it and then using it when building your application.   For more information about the recommended setup with Jenkins open the  Jenkins Guide .", 
            "title": "Error when running fastlane with Jenkins"
        }, 
        {
            "location": "/faqs/#code-signing-issues", 
            "text": "Check out the  codesigning.guide  website for more information on how to properly setup code-signing in your team using  match .", 
            "title": "Code signing issues"
        }, 
        {
            "location": "/faqs/#when-should-i-use-cert-sigh-and-match", 
            "text": "cert  allows you to create a new code signing certificate + private key (note that the private key is only stored on your machine and won't be synced to any other mac)  sigh  allows you to create and download a provisioning profile (those are synced via the \uf8ff developer portal)  match  uses those 2 tools in combination with a git repo you provide, to sync all private key, certificates and provisioning profiles across all your team's Macs and CI servers   We recommend using  match  as it removes the complexity out of code signing, while still being in full control. This way you can sync all the signing identities across your team and your CI server. For more information check out  codesigning.guide .", 
            "title": "When should I use cert, sigh and match?"
        }, 
        {
            "location": "/faqs/#multiple-targets-of-the-same-underlying-app", 
            "text": "If you have one code base, but multiple branded applications  Create different  .env  files for each environment and reference those environment variables in the  Deliverfile ,  Fastfile , etc.   Example: Create a  .env.app1 ,  .env.app2 , and  .env.app3 . Define each of these like the following...  DLV_FIRST_NAME=Josh\nDLV_LAST_NAME=Holtz\nDLV_PRIM_CATG=Business\nDLV_SCND_CATG=Games  Now your Deliver file should look something like this:  app_review_information(\n  first_name: ENV['DLV_FIRST_NAME'],\n  last_name: ENV['DLV_LAST_NAME']\n)\n\nprimary_category ENV['DLV_PRIM_CATG']\nsecondary_category ENV['DLV_SCND_CATG']  Now to run this, all you need to do is specify the environment argument when running  fastlane  and it will pull from the  .env  file that matches the same name...\nEx:  fastlane build --env app1  will use  .env.app1 \nEx:  fastlane build --env app2  will use  .env.app2  You can also references these environment variables almost anywhere in  fastlane .   You can even define a lane to perform actions on multiple targets:  desc  Deploy both versions \nlane :deploy_all do\n    sh  fastlane deploy --env paid \n    sh  fastlane deploy --env free \nend  And you can combine multiple envs in one go\nEx:  fastlane build --env app1,env1,env2  will use  .env.app1   .env.env1  and  .env.env2  More on the  .env  file can be found  here .", 
            "title": "Multiple targets of the same underlying app"
        }, 
        {
            "location": "/faqs/#disable-colored-output", 
            "text": "Set the  FASTLANE_DISABLE_COLORS  environment variable to disable ANSI colors (e.g. for CI machines)  export FASTLANE_DISABLE_COLORS=1", 
            "title": "Disable colored output"
        }, 
        {
            "location": "/faqs/#enable-bashzsh-tab-completion-for-fastlane-lane-names", 
            "text": "fastlane enable_auto_complete  Follow the on screen prompt to add a line to your  bash / zsh  profile.", 
            "title": "Enable bash/zsh tab completion for fastlane lane names"
        }, 
        {
            "location": "/faqs/#user-interaction-is-not-allowed-when-using-fastlane-via-ssh", 
            "text": "This error can occur when you run  fastlane  via SSH. To fix it check out  this reply on StackOverflow .", 
            "title": "\"User interaction is not allowed\" when using fastlane via SSH"
        }, 
        {
            "location": "/codesigning/getting-started/", 
            "text": "Codesigning concepts\n\n\nIf you are just starting a new project, it's important to think about how you want to handle code signing. This guide will help you choose the best approach for you.\n\n\nFor existing projects it might make sense to switch from a manual process to the \nmatch approach\n to make it easier for new team-members to onboard.\n\n\nIf you are new to code signing, check out the \nWWDC session\n that describes the fundamentals of code signing in Xcode.\n\n\n\n\nUsing match\n\n\nUsing cert and sigh\n\n\nUsing Xcode's code signing feature\n\n\nManually\n\n\n\n\nUsing \nmatch\n\n\nThe concept of \nmatch\n is described in the \ncodesigning guide\n. \n\n\nWith \nmatch\n you store your private keys and certificates in a git repo to sync them across machines. This makes it easy to onboard new team-members and set up new Mac machines. This approach \nis secure\n and uses technology you already use.\n\n\nGetting started with \nmatch\n requires you to revoke your existing certificates.\n\n\nMake sure to follow \nSetting up your Xcode Project\n to set up your project properly.\n\n\nUsing \ncert\n and \nsigh\n\n\nIf you don't want to revoke your existing certificates, but still want an automated setup, \ncert\n and \nsigh\n are for you. \n\n\n\n\ncert\n will make sure you have a valid certificate and its private key installed on the local machine\n\n\nsigh\n will make sure you have a valid provisioning profile installed locally, that matches the installed certificate\n\n\n\n\nAdd the following lines to your \nFastfile\n\n\nlane :beta do\n  cert\n  sigh\n  gym\nend\n\n\n\n\nMake sure to follow \nSetting up your Xcode Project\n to set up your project properly.\n\n\nUsing Xcode's code signing feature\n\n\nOccasionally the \nAutomatic\n setting as the provisioning profile doesn't work reliably as it will just select the most recently updated provisioning profile, no matter if the certificate is installed. \n\n\nThat's why it is recommended to specify a specific provisioning profile somehow:\n\n\nXcode 8 and Xcode 9\n\n\nThe instructions below are more advanced, and take more time to setup than other approaches.\n\n\nAutomatic \n Manual Signing\n\n\nTo simplify development workflow you could use \nAutomatic\n code signing for development, and \nManual\n for release builds.\nYou have to configure your Xcode project to use automatic code signing, and on the release configuration specify the \n$()\n match env variable.\n\n\ne.g: \n\n\n\nin your Fastfile you then use a lane like this:\n\n\nlane :release do\n  match\n  disable_automatic_code_signing(path: \nmy_project.xcodeproj\n)\n  gym\n  enable_automatic_code_signing(path: \nmy_project.xcodeproj\n)\n  pilot\nend\n\n\n\n\nthis way you can profit of the automatic code signing on development machines. and also stay in control on release builds to be sure the right cert/provisioning profiles are used.\n\n\nXcode 7 and lower\n\n\nYou should avoid clicking the \nFix Issue\n button (There is an \nXcode plugin\n that disables the button), as it sometimes revokes existing certificates, and with it the provisioning profiles.\n\n\nUnfortunately you can't specify the name of the provisioning profile in Xcode 7. Instead you can specify the UUID of the profile, which changes every time the profile gets re-generated (e.g. when you add a new device).\n\n\nTo work around this issue, check out \nSetting up your Xcode Project\n on how to pass a provisioning profile to Xcode when building your app.\n\n\nManually\n\n\nYou can always manually create and manage your certificates and provisioning profiles using the Apple Developer Portal. Make sure to store the private key (\n.p12\n) of your certificates in a safe place, as they can't be restored if you lose them. \n\n\nYou can always download the certificate (\n.cer\n) and provisioning profile (\n.mobileprovision\n) from the Apple Developer Portal.\n\n\nWhere to go from here\n\n\n\n\nSetting up your Xcode Project\n\n\nDebugging codesigning issues\n\n\nCommon code signing issues\n\n\nUpgrading to Xcode 9", 
            "title": "Getting Started"
        }, 
        {
            "location": "/codesigning/getting-started/#codesigning-concepts", 
            "text": "If you are just starting a new project, it's important to think about how you want to handle code signing. This guide will help you choose the best approach for you.  For existing projects it might make sense to switch from a manual process to the  match approach  to make it easier for new team-members to onboard.  If you are new to code signing, check out the  WWDC session  that describes the fundamentals of code signing in Xcode.   Using match  Using cert and sigh  Using Xcode's code signing feature  Manually", 
            "title": "Codesigning concepts"
        }, 
        {
            "location": "/codesigning/getting-started/#using-match", 
            "text": "The concept of  match  is described in the  codesigning guide .   With  match  you store your private keys and certificates in a git repo to sync them across machines. This makes it easy to onboard new team-members and set up new Mac machines. This approach  is secure  and uses technology you already use.  Getting started with  match  requires you to revoke your existing certificates.  Make sure to follow  Setting up your Xcode Project  to set up your project properly.", 
            "title": "Using match"
        }, 
        {
            "location": "/codesigning/getting-started/#using-cert-and-sigh", 
            "text": "If you don't want to revoke your existing certificates, but still want an automated setup,  cert  and  sigh  are for you.    cert  will make sure you have a valid certificate and its private key installed on the local machine  sigh  will make sure you have a valid provisioning profile installed locally, that matches the installed certificate   Add the following lines to your  Fastfile  lane :beta do\n  cert\n  sigh\n  gym\nend  Make sure to follow  Setting up your Xcode Project  to set up your project properly.", 
            "title": "Using cert and sigh"
        }, 
        {
            "location": "/codesigning/getting-started/#using-xcodes-code-signing-feature", 
            "text": "Occasionally the  Automatic  setting as the provisioning profile doesn't work reliably as it will just select the most recently updated provisioning profile, no matter if the certificate is installed.   That's why it is recommended to specify a specific provisioning profile somehow:", 
            "title": "Using Xcode's code signing feature"
        }, 
        {
            "location": "/codesigning/getting-started/#xcode-8-and-xcode-9", 
            "text": "The instructions below are more advanced, and take more time to setup than other approaches.", 
            "title": "Xcode 8 and Xcode 9"
        }, 
        {
            "location": "/codesigning/getting-started/#automatic-manual-signing", 
            "text": "To simplify development workflow you could use  Automatic  code signing for development, and  Manual  for release builds.\nYou have to configure your Xcode project to use automatic code signing, and on the release configuration specify the  $()  match env variable.  e.g:   in your Fastfile you then use a lane like this:  lane :release do\n  match\n  disable_automatic_code_signing(path:  my_project.xcodeproj )\n  gym\n  enable_automatic_code_signing(path:  my_project.xcodeproj )\n  pilot\nend  this way you can profit of the automatic code signing on development machines. and also stay in control on release builds to be sure the right cert/provisioning profiles are used.", 
            "title": "Automatic &amp; Manual Signing"
        }, 
        {
            "location": "/codesigning/getting-started/#xcode-7-and-lower", 
            "text": "You should avoid clicking the  Fix Issue  button (There is an  Xcode plugin  that disables the button), as it sometimes revokes existing certificates, and with it the provisioning profiles.  Unfortunately you can't specify the name of the provisioning profile in Xcode 7. Instead you can specify the UUID of the profile, which changes every time the profile gets re-generated (e.g. when you add a new device).  To work around this issue, check out  Setting up your Xcode Project  on how to pass a provisioning profile to Xcode when building your app.", 
            "title": "Xcode 7 and lower"
        }, 
        {
            "location": "/codesigning/getting-started/#manually", 
            "text": "You can always manually create and manage your certificates and provisioning profiles using the Apple Developer Portal. Make sure to store the private key ( .p12 ) of your certificates in a safe place, as they can't be restored if you lose them.   You can always download the certificate ( .cer ) and provisioning profile ( .mobileprovision ) from the Apple Developer Portal.", 
            "title": "Manually"
        }, 
        {
            "location": "/codesigning/getting-started/#where-to-go-from-here", 
            "text": "Setting up your Xcode Project  Debugging codesigning issues  Common code signing issues  Upgrading to Xcode 9", 
            "title": "Where to go from here"
        }, 
        {
            "location": "/codesigning/xcode-project/", 
            "text": "Setting up your Xcode Project\n\n\nXcode 9 and up\n\n\nIn most cases, \nfastlane\n will work out of the box with Xcode 9 if you selected manual code signing, and chose a provisioning profile name for each of your targets (\nsee Xcode 8 section\n).\n\n\nIf you don't use \nmatch\n, we recommend defining a mapping of app target to provisioning profile in your \nFastfile\n. By defining those profiles, you can guarantee reproducible builds every time you run it.\n\n\nlane :beta do\n  gym(\n    export_method: \napp-store\n,\n    export_options: {\n      provisioningProfiles: { \n        \ncom.example.bundleid\n: \nProvisioning Profile Name\n,\n        \ncom.example.bundleid2\n: \nProvisioning Profile Name 2\n\n      }\n    }\n  )\nend\n\n\n\n\nXcode 8\n\n\nWith Xcode 8 you can set a provisioning profile name for each of your targets instead of a provisioning profile UUID. By doing so, Xcode automatically selects the latest provisioning profile matching its name. This way you don't have to update your Xcode project, every time you re-generate your provisioning profile (e.g. when adding a new device)\n\n\nYou can now specify which provisioning profile to use in the \nGeneral\n tab after disabling \nAutomatically manage signing\n.\n\n\n\n\nAlternatively you can also specify the provisioning profile in the \nBuild Settings\n tab.\n\n\n\n\nIf your provisioning profile is not listed in the drop down, there might be a few reasons:\n\n\n\n\nIt doesn't match the bundle identifier of the target\n\n\nThe associated certificate or its private key is not installed on the local machine\n\n\nThe provisioning profile is not installed on the local machine\n\n\n\n\nCheck out \nDebugging codesigning issues\n for more information on how to debug signing issues.\n\n\nBuild settings\n\n\nPreviously you could specify the UUID of the provisioning profile using the \nPROVISIONING_PROFILE\n Xcode settings property, with Xcode 8 you specify it using the \nPROVISIONING_PROFILE_SPECIFIER\n instead:\n\n\nDEVELOPMENT_TEAM = N8XAAASEU2;\nPROVISIONING_PROFILE_SPECIFIER = \nmatch AppStore me.themoji.app.release\n;\n\n\n\n\nIt is recommended to select the provisioning profile in the \nGeneral\n tab in your Xcode project, so Xcode will automatically set the values mentioned above for you.\n\n\nSet using environment variable\n\n\nYou could pass the profile specifier via environment variables too (See Xcode 7 approach below), however in most cases it's enough to define it statically in your project, per target, since usually neither your Team ID, nor the provisioning profile change.\n\n\nIf you're using \nmatch\n the following environment variables are being set for you:\n\n\n+---------------------+------------------------------------------------+--------------------------------------+\n|                                       Installed Provisioning Profile                                        |\n+---------------------+------------------------------------------------+--------------------------------------+\n| Parameter           | Environment Variable                           | Value                                |\n+---------------------+------------------------------------------------+--------------------------------------+\n| App Identifier      |                                                | me.themoji.release                   |\n| Type                |                                                | appstore                             |\n| Profile UUID        | sigh_me.themoji.beta_appstore                  | 22a19b3a-7cf6-4997-95f2-9cbb4d33fe7e |\n| Profile Name        | sigh_me.themoji.beta_appstore_profile-name     | match AppStore me.themoji.release    |\n| Development Team ID | sigh_me.themoji.beta_appstore_team-id          | N8XAAASEU2                           |\n+---------------------+------------------------------------------------+--------------------------------------+\n\n\n\n\nCheck out the Xcode 7 section on how to update build settings using environment variables.\n\n\nUsing \nmatch development\n or Xcode Automatic Provisioning\n\n\n\n\nApple's Automatic Provisioning in Xcode 8 will automatically generate a private key, development certificate, and managed development provisioning profile for each computer used to build a project. Since Xcode can auto-generate these for you, there is no need to share them between teammates' computers. As such, when using Xcode Automatic Provisioning, there is no need to use \nmatch development\n to keep development keys, certificates, and provisioning profiles in sync.\n\n\nIf you are already using \nmatch\n to manage development code signing, Automatic Provisioning will use the \nmatch\n-generated key and certificate. However, Xcode will create and manage its own provisioning profile and will not use the \nmatch\n-generated profile.\n\n\nmatch appstore\n and Xcode Automatic Provisioning\n\n\nXcode Automatic Provisioning doesn't sync your private keys across machines (if you have multiple computers or share them between teammates). To securely store your private key and have access to it from all your devices, use \nmatch appstore\n or \nmatch adhoc\n. This will sync your keys, certificates and provisioning profiles via git, encrypted using OpenSSL.\n\n\nXcode 7 and lower\n\n\nNote\n: This approach is deprecated with Xcode 8\n\n\nIf you use \nAutomatic\n value for your provisioning profile, Xcode sometimes selects the wrong profile, resulting in code signing errors at a later point.\n\n\nInstead it is recommended to specify a specific provisioning profile, which can only be done using the UUID (in Xcode 7).\n\n\nSince it is not recommended to update the project file, every time you update your provisioning profile, you can pass the UUID via environment variables.\n\n\nTo do so, open your target settings, open the dropdown for \nProvisioning Profile\n and select \nOther\n:\n\n\n\n\nUsing the \n$(...)\n notation, Xcode will use the provisioning profile matching the UUID, and fallback to \nAutomatic\n if it's not provided.\n\n\nIf you use \nfastlane\n you don't have to do any extra work, since the environment variable for the latest profile are automatically set by \nmatch\n\n\nlane :beta do\n  match(type: \nadhoc\n)\n  gym\nend\n\n\n\n\nYou can also manually set the environment variable using\n\n\nlane :beta do\n  ENV[\nPROVISIONING_PROFILE_TARGET1\n] = \nb01c39c9-1b4a-412e-9ae2-3087ee9ea9d3\n\n  gym\nend", 
            "title": "Xcode Project"
        }, 
        {
            "location": "/codesigning/xcode-project/#setting-up-your-xcode-project", 
            "text": "", 
            "title": "Setting up your Xcode Project"
        }, 
        {
            "location": "/codesigning/xcode-project/#xcode-9-and-up", 
            "text": "In most cases,  fastlane  will work out of the box with Xcode 9 if you selected manual code signing, and chose a provisioning profile name for each of your targets ( see Xcode 8 section ).  If you don't use  match , we recommend defining a mapping of app target to provisioning profile in your  Fastfile . By defining those profiles, you can guarantee reproducible builds every time you run it.  lane :beta do\n  gym(\n    export_method:  app-store ,\n    export_options: {\n      provisioningProfiles: { \n         com.example.bundleid :  Provisioning Profile Name ,\n         com.example.bundleid2 :  Provisioning Profile Name 2 \n      }\n    }\n  )\nend", 
            "title": "Xcode 9 and up"
        }, 
        {
            "location": "/codesigning/xcode-project/#xcode-8", 
            "text": "With Xcode 8 you can set a provisioning profile name for each of your targets instead of a provisioning profile UUID. By doing so, Xcode automatically selects the latest provisioning profile matching its name. This way you don't have to update your Xcode project, every time you re-generate your provisioning profile (e.g. when adding a new device)  You can now specify which provisioning profile to use in the  General  tab after disabling  Automatically manage signing .   Alternatively you can also specify the provisioning profile in the  Build Settings  tab.   If your provisioning profile is not listed in the drop down, there might be a few reasons:   It doesn't match the bundle identifier of the target  The associated certificate or its private key is not installed on the local machine  The provisioning profile is not installed on the local machine   Check out  Debugging codesigning issues  for more information on how to debug signing issues.", 
            "title": "Xcode 8"
        }, 
        {
            "location": "/codesigning/xcode-project/#build-settings", 
            "text": "Previously you could specify the UUID of the provisioning profile using the  PROVISIONING_PROFILE  Xcode settings property, with Xcode 8 you specify it using the  PROVISIONING_PROFILE_SPECIFIER  instead:  DEVELOPMENT_TEAM = N8XAAASEU2;\nPROVISIONING_PROFILE_SPECIFIER =  match AppStore me.themoji.app.release ;  It is recommended to select the provisioning profile in the  General  tab in your Xcode project, so Xcode will automatically set the values mentioned above for you.", 
            "title": "Build settings"
        }, 
        {
            "location": "/codesigning/xcode-project/#set-using-environment-variable", 
            "text": "You could pass the profile specifier via environment variables too (See Xcode 7 approach below), however in most cases it's enough to define it statically in your project, per target, since usually neither your Team ID, nor the provisioning profile change.  If you're using  match  the following environment variables are being set for you:  +---------------------+------------------------------------------------+--------------------------------------+\n|                                       Installed Provisioning Profile                                        |\n+---------------------+------------------------------------------------+--------------------------------------+\n| Parameter           | Environment Variable                           | Value                                |\n+---------------------+------------------------------------------------+--------------------------------------+\n| App Identifier      |                                                | me.themoji.release                   |\n| Type                |                                                | appstore                             |\n| Profile UUID        | sigh_me.themoji.beta_appstore                  | 22a19b3a-7cf6-4997-95f2-9cbb4d33fe7e |\n| Profile Name        | sigh_me.themoji.beta_appstore_profile-name     | match AppStore me.themoji.release    |\n| Development Team ID | sigh_me.themoji.beta_appstore_team-id          | N8XAAASEU2                           |\n+---------------------+------------------------------------------------+--------------------------------------+  Check out the Xcode 7 section on how to update build settings using environment variables.", 
            "title": "Set using environment variable"
        }, 
        {
            "location": "/codesigning/xcode-project/#using-match-development-or-xcode-automatic-provisioning", 
            "text": "Apple's Automatic Provisioning in Xcode 8 will automatically generate a private key, development certificate, and managed development provisioning profile for each computer used to build a project. Since Xcode can auto-generate these for you, there is no need to share them between teammates' computers. As such, when using Xcode Automatic Provisioning, there is no need to use  match development  to keep development keys, certificates, and provisioning profiles in sync.  If you are already using  match  to manage development code signing, Automatic Provisioning will use the  match -generated key and certificate. However, Xcode will create and manage its own provisioning profile and will not use the  match -generated profile.", 
            "title": "Using match development or Xcode Automatic Provisioning"
        }, 
        {
            "location": "/codesigning/xcode-project/#match-appstore-and-xcode-automatic-provisioning", 
            "text": "Xcode Automatic Provisioning doesn't sync your private keys across machines (if you have multiple computers or share them between teammates). To securely store your private key and have access to it from all your devices, use  match appstore  or  match adhoc . This will sync your keys, certificates and provisioning profiles via git, encrypted using OpenSSL.", 
            "title": "match appstore and Xcode Automatic Provisioning"
        }, 
        {
            "location": "/codesigning/xcode-project/#xcode-7-and-lower", 
            "text": "Note : This approach is deprecated with Xcode 8  If you use  Automatic  value for your provisioning profile, Xcode sometimes selects the wrong profile, resulting in code signing errors at a later point.  Instead it is recommended to specify a specific provisioning profile, which can only be done using the UUID (in Xcode 7).  Since it is not recommended to update the project file, every time you update your provisioning profile, you can pass the UUID via environment variables.  To do so, open your target settings, open the dropdown for  Provisioning Profile  and select  Other :   Using the  $(...)  notation, Xcode will use the provisioning profile matching the UUID, and fallback to  Automatic  if it's not provided.  If you use  fastlane  you don't have to do any extra work, since the environment variable for the latest profile are automatically set by  match  lane :beta do\n  match(type:  adhoc )\n  gym\nend  You can also manually set the environment variable using  lane :beta do\n  ENV[ PROVISIONING_PROFILE_TARGET1 ] =  b01c39c9-1b4a-412e-9ae2-3087ee9ea9d3 \n  gym\nend", 
            "title": "Xcode 7 and lower"
        }, 
        {
            "location": "/codesigning/troubleshooting/", 
            "text": "Debugging codesigning issues\n\n\nThis guide will help you resolve the most common code signing errors. In general, make sure to read the \ncomplete\n output when something goes wrong, in particular the very top and the very bottom of the build output. You'll always get access to the raw \nxcodebuild\n output, make sure to analyze it, as \nfastlane\n can only assist with helping you resolve problems.\n\n\nError message\n\n\nMake sure to find the exact error message in your build output. Many times the error message actually tells you how to resolve the issue. \n\n\nTo get even more details, try archiving using Xcode 8. \n\n\nDifferent machine\n\n\nDoes code signing work on a different Mac, but not on yours? If so, chances are high you don't have the latest private key, the certificate or the provisioning profile. Also follow the \nKeychain\n part of this document to make sure you don't have any expired certificates installed.\n\n\nXcode project\n\n\nMake sure to follow \nSetting up your Xcode Project\n to properly set up your project.\n\n\nA check list on what you should verify on your Xcode project\n\n\n\n\nMake sure to have consistent code signing settings across your targets\n\n\nDon't set any code signing settings on your project level, just on the target level\n\n\nMake sure the bundle identifier matches the one of your provisioning profile\n\n\nMake sure the code signing identity is set to \niOS Distribution\n for \nRelease\n builds\n\n\nMake sure to set a provisioning profile for all your targets, e.g. Watch, Today widget, ...\n\n\nCheck your working copy in git - did you make any changes by mistake?\n\n\n\n\nDeveloper Portal\n\n\nIf a certificate gets revoked, all connected provisioning profiles get invalidated. This however might not immediately show up in your local keychain.\n\n\n\n\nOpen the \nDeveloper Portal\n\n\nVerify your certificates are valid, and didn't expire or get revoked\n\n\nSwitch to the Provisioning Profiles and make sure the profiles you want to use are all still valid\n\n\nIf your profile is invalid or expired, you can easily fix it:\n\n\nIf you're using \nmatch\n, run \nmatch\n with \nforce\n enabled\n\n\nIf you're using \nsigh\n, run \nsigh\n with \nforce\n enabled\n\n\nIf you're doing manual code signing, edit the provisioning profile, and click on \nGenerate\n on the bottom of the screen. Make sure to select the correct certificate, then download and open the new provisioning profile\n\n\n\n\n\n\nIf your profile is valid, but you still have issues make sure\n\n\nthat the certificate matches the certificate you have installed locally. You can view the used certificate by editing the profile (Don't click \nGenerate\n, unless you want to re-generate the provisioning profile)\n\n\nthat all devices you need are included (Development and Ad-Hoc only)\n\n\nthat you are actually looking at the correct provisioning profile, that matches the bundle identifier of your app. You might have multiple provisioning profiles for the same app / certificate combination. By default Xcode will use the last modified one.\n\n\n\n\n\n\n\n\nKeychain\n\n\n\n\nRun \nsecurity find-identity -v -p codesigning\n to get a list of locally installed code signing identities. Does yours show up?\n\n\nOpen the \nKeychain Access\n app, switch to \nCertificates\n and find your \niOS Developer\n or \niOS Distribution\n entry and unfold the entry to verify the private key is locally installed: \n\n\n  \n\n\n\n\nMake sure to have deleted all expired WWDR certificates, more information \nhere\n. There might be 2 expired WWDR certificates, one in the \nlogin\n, and one in the \nsystem\n keychain\n\n\n\n\nHave you tried turning it off and on again?\n\n\nAs funny as it sounds, sometimes restarting your Mac helps.\n\n\nfastlane\n\n\nRun \nfastlane\n in verbose mode to get even more debug information:\n\n\nfastlane [lane] --verbose\n\n\n\n\nCommon Issues\n\n\nCheck out \nCommon code signing issues\n for the most common code signing issues and how you can solve them.", 
            "title": "Troubleshooting"
        }, 
        {
            "location": "/codesigning/troubleshooting/#debugging-codesigning-issues", 
            "text": "This guide will help you resolve the most common code signing errors. In general, make sure to read the  complete  output when something goes wrong, in particular the very top and the very bottom of the build output. You'll always get access to the raw  xcodebuild  output, make sure to analyze it, as  fastlane  can only assist with helping you resolve problems.", 
            "title": "Debugging codesigning issues"
        }, 
        {
            "location": "/codesigning/troubleshooting/#error-message", 
            "text": "Make sure to find the exact error message in your build output. Many times the error message actually tells you how to resolve the issue.   To get even more details, try archiving using Xcode 8.", 
            "title": "Error message"
        }, 
        {
            "location": "/codesigning/troubleshooting/#different-machine", 
            "text": "Does code signing work on a different Mac, but not on yours? If so, chances are high you don't have the latest private key, the certificate or the provisioning profile. Also follow the  Keychain  part of this document to make sure you don't have any expired certificates installed.", 
            "title": "Different machine"
        }, 
        {
            "location": "/codesigning/troubleshooting/#xcode-project", 
            "text": "Make sure to follow  Setting up your Xcode Project  to properly set up your project.  A check list on what you should verify on your Xcode project   Make sure to have consistent code signing settings across your targets  Don't set any code signing settings on your project level, just on the target level  Make sure the bundle identifier matches the one of your provisioning profile  Make sure the code signing identity is set to  iOS Distribution  for  Release  builds  Make sure to set a provisioning profile for all your targets, e.g. Watch, Today widget, ...  Check your working copy in git - did you make any changes by mistake?", 
            "title": "Xcode project"
        }, 
        {
            "location": "/codesigning/troubleshooting/#developer-portal", 
            "text": "If a certificate gets revoked, all connected provisioning profiles get invalidated. This however might not immediately show up in your local keychain.   Open the  Developer Portal  Verify your certificates are valid, and didn't expire or get revoked  Switch to the Provisioning Profiles and make sure the profiles you want to use are all still valid  If your profile is invalid or expired, you can easily fix it:  If you're using  match , run  match  with  force  enabled  If you're using  sigh , run  sigh  with  force  enabled  If you're doing manual code signing, edit the provisioning profile, and click on  Generate  on the bottom of the screen. Make sure to select the correct certificate, then download and open the new provisioning profile    If your profile is valid, but you still have issues make sure  that the certificate matches the certificate you have installed locally. You can view the used certificate by editing the profile (Don't click  Generate , unless you want to re-generate the provisioning profile)  that all devices you need are included (Development and Ad-Hoc only)  that you are actually looking at the correct provisioning profile, that matches the bundle identifier of your app. You might have multiple provisioning profiles for the same app / certificate combination. By default Xcode will use the last modified one.", 
            "title": "Developer Portal"
        }, 
        {
            "location": "/codesigning/troubleshooting/#keychain", 
            "text": "Run  security find-identity -v -p codesigning  to get a list of locally installed code signing identities. Does yours show up?  Open the  Keychain Access  app, switch to  Certificates  and find your  iOS Developer  or  iOS Distribution  entry and unfold the entry to verify the private key is locally installed:  \n     Make sure to have deleted all expired WWDR certificates, more information  here . There might be 2 expired WWDR certificates, one in the  login , and one in the  system  keychain", 
            "title": "Keychain"
        }, 
        {
            "location": "/codesigning/troubleshooting/#have-you-tried-turning-it-off-and-on-again", 
            "text": "As funny as it sounds, sometimes restarting your Mac helps.", 
            "title": "Have you tried turning it off and on again?"
        }, 
        {
            "location": "/codesigning/troubleshooting/#fastlane", 
            "text": "Run  fastlane  in verbose mode to get even more debug information:  fastlane [lane] --verbose", 
            "title": "fastlane"
        }, 
        {
            "location": "/codesigning/troubleshooting/#common-issues", 
            "text": "Check out  Common code signing issues  for the most common code signing issues and how you can solve them.", 
            "title": "Common Issues"
        }, 
        {
            "location": "/codesigning/common-issues/", 
            "text": "Common code signing issues\n\n\nXcode errors\n\n\n\n\nCode Sign error: No matching provisioning profiles found: No provisioning profiles with a valid signing identity (i.e. certificate and private key pair) matching the bundle identifier \"X\" were found.\n\n\n\n\nThe provisioning profile for the given app identifier \"X\" is not available on the local machine. Make sure you have a valid provisioning profile for the correct distribution type (App Store, Development or Ad Hoc) on the Apple Developer Portal, download and install it, and select the profile in the Xcode settings (See \nSetting up your Xcode Project\n).\n\n\nYou might have the provisioning profile installed locally, but miss the private key or certificate for it. \n\n\n\n\nNo matching codesigning identity found: No codesigning identities (i.e. certificate and private key pairs) matching \"iPhone Distribution: X\" were found\n\n\n\n\nThe code signing identity you specified in the Xcode project can't be found in your local keychain. Make sure to transfer the certificate and private key from another Mac (or wherever you store the private key), or to update the project file to use the correct code signing identity.\n\n\n\n\nError Domain=IDEDistributionErrorDomain Code=1 \"The operation couldn\u2019t be completed. (IDEDistributionErrorDomain error 1.)\"\n\n\n\n\nThis error can have a lot of reasons, some things you should try:\n\n\n\n\nVerify your Keychain is valid and you don't have an expired WWDR certificate using \nthis guide\n\n\nVerify both your certificate and provisioning profile are valid in both your Keychain and on the Apple Developer Portal (Check out \nDebugging codesigning issues\n for more information)\n\n\nFollow the other steps of \nDebugging codesigning issues\n\n\n\n\n\n\nProvisioning profile does not match bundle identifier: The provisioning profile specified in your build settings (\"X\") has an AppID of \"Y\" which does not match your bundle identifier \"Z\"\n\n\n\n\nYour project defines a provisioning profile that doesn't match the bundle identifier of your app. There is mismatch between the bundle identifiers, this might happen if you specify the wrong provisioning profile in your target.\n\n\n\n\nYour build settings specify a provisioning profile with the UUID \"X\", however, no such provisioning profile was found.\n\n\n\n\nYour project defines a provisioning profile which doesn't exist on your local machine. Check out \nSetting up your Xcode Project\n for more information how to properly specify a provisioning profile to avoid hard coded UUIDs in your project.\n\n\n\n\nCodeSign Error: code signing is required for product type 'Application'...\n\n\n\n\nMake sure to have a valid code signing identity defined in your project targets. This might happen when you select \nDon't Code Sign\n as Code Signing Identity.\n\n\nfastlane\n errors\n\n\n\n\nUser interaction is not allowed. Command /usr/bin/codesign failed with exit code 1\n\n\n\n\nMake sure that codesign can access your signing private key. Open Keychain Access. Select your signing private key, right-click, choose Get Info, change to the Access Control tab and select the \"Allow all applications to access this item\".\n\n\n\n\nCould not find a matching code signing identity for type 'X'\n\n\n\n\nThere are no certificates available on the Apple Developer Portal. This could either mean someone revoked a certificate, or you don't have access to it. \n\n\nDebugging steps for \"No applicable devices found.\" error\n\n\nIt's not immediately obvious what this error is or what it's caused by, so hopefully these simple steps will help you find the root cause faster.\n\n\nNot just \nfastlane\n\n\nThis error happens to all projects built with \nxcodebuild\n / \nxcrun\n, so it's likely not caused by \nfastlane\n. \nfastlane\n might help alleviate it with some env var unsetting / setting or other tricks, but this is an error from the new export APIs that Xcode uses.\n\n\nLegacy export API\n\n\nAs of Xcode 8.3, the deprecated / legacy export api (e.g. \nuse_legacy_build_api\n) is removed, so you have to use the latest Xcode export API, which unfortunately still has some issues.\n\n\nMisleading errors\n\n\nThe error message, \n\"No applicable devices found.\"\n, is actually misleading: it's not the real error. Something else is erroring out at a lower level so you'll need to dig in to find out what.\n\n\nThe archive built successfully, but the export step failed\n\n\nTypically, your archive will build nicely, and with the correct provisioning profile; you can inspect the \n.xcarchive\n package to verify the \nembedded.mobileprovision\n file matches.\n\n\nWhat happens is the export step will possibly sign it with a different profile depending on which \nexport_method\n you're choosing (with \ndevelopment\n being the default) and it is during this step that the process will fail.\n\n\nThis allows you to isolate the error to the export step, under most circumstances.\n\n\nDependency on other gems\n\n\nThe export step sometimes fails due to not having these Ruby gems installed and caused many of the old instances of this problem.\n\n\n\n\nCFPropertyList\n\n\nsqlite3\n\n\ndigest\n\n\n\n\nYou can use \n$ gem list\n to show which gems are installed\n\n\nRuby version\n\n\nMany of the old instances of this problem were caused by not using \nsystem\n Ruby, but this likely won't impact many in the future since \nfastlane\n helps ensure your environment is set up properly now.\n\n\nUsing \nRVM\n or newer versions of Ruby should work fine. If you have RVM installed and want to try reverting back to \nsystem\n Ruby just in case, you can set and check this using:\n\n\n$ rvm use system\n$ ruby -v\nruby 2.0.0p648 (2015-12-16 revision 53162) [universal.x86_64-darwin16]\n$ which ruby\n/usr/bin/ruby\n\n\n\n\nCheck the Logs\n\n\nIn many issues that were seen on the \nfastlane\n repo and across the web, this error was given during the bundling process. Luckily, that bundler creates a log file that you can access to see what error \nactually\n happened:\n\n\n2017-03-30 21:47:09.855 xcodebuild[78957:9114437] [MT] IDEDistribution: -[IDEDistributionLogging _createLoggingBundleAtPath:]: Created bundle at path '/var/folders/s1/0h7d0scx6xqdthft328yfk0m0000gn/T/MyApp-Internal_2017-03-30_21-47-09.854.xcdistributionlogs'.\n1.2.840.113635.100.1.61\n1.2.840.113635.100.1.61\n2017-03-30 21:47:14.702 xcodebuild[78957:9114437] [MT] IDEDistribution: Step failed: \nIDEDistributionThinningStep: 0x7fc3218d0b60\n: Error Domain=IDEDistributionErrorDomain Code=14 \nNo applicable devices found.\n UserInfo={NSLocalizedDescription=No applicable devices found.}\nerror: exportArchive: No applicable devices found.\n\n\n\n\nIf you look closely, you'll see the misleading error message and then just above it, there's a path to a log file (\n*.xcdistributionlogs\n). Opening that up, you'll see more detail. (Side note: you can also search for all logs via \n$ sudo find /private/var -name \"*.xcdistributionlogs\"\n)\n\n\nIn this case, it was because the export was built \nwithout\n bitcode, but there were static lib frameworks that were built \nwith\n bitcode:\n\n\n# inside IDEDistribution.standard.log within the .xcdistributionlogs file\n2017-03-31 16:49:06 +0000  Validating IPA structure...\n2017-03-31 16:49:06 +0000  error: Failed to verify bitcode in opus.framework/opus:\nerror: Bundle only contains bitcode-marker /var/folders/s1/0h7d0scx6xqdthft328yfk0m0000gn/T/IDEDistributionThinningStep.KRt/Payload/Viv.app/Frameworks/opus.framework/opus (armv7)\n\n\n\n\nWhen that framework was rebuilt without bitcode, it worked like a charm! \ud83d\ude05 \n\n\nRun commands yourself\n\n\ngym\n does a great job of showing which commands it's going to run. Inspect the files it generates and run these commands yourself, as many times as you need to, in order to isolate the problems.\n\n\nFor example, here's the export command that \ngym\n shows:\n\n\n/usr/bin/xcrun /Users/rob/.fastlane/bin/bundle/lib/ruby/gems/2.2.0/gems/fastlane-2.24.0/gym/lib/assets/wrap_xcodebuild/xcbuild-safe.sh -exportArchive -exportOptionsPlist '/var/folders/s1/0h7d0scx6xqdthft328yfk0m0000gn/T/gym_config20170330-65021-1xbw0ov.plist' -archivePath /Users/rob/Library/Developer/Xcode/Archives/2017-03-30/MyApp\\ 2017-03-30\\ 21.12.02.xcarchive -exportPath '/var/folders/s1/0h7d0scx6xqdthft328yfk0m0000gn/T/gym_output20170330-65021-u80ojn'\n\n\n\n\nFrom that, you can see which \nexportOptionsPlist\n it's using, which had this in it:\n\n\n?xml version=\n1.0\n encoding=\nUTF-8\n?\n\n\n!DOCTYPE plist PUBLIC \n-//Apple//DTD PLIST 1.0//EN\n \nhttp://www.apple.com/DTDs/PropertyList-1.0.dtd\n\n\nplist version=\n1.0\n\n\ndict\n\n    \nkey\nmethod\n/key\n\n    \nstring\ndevelopment\n/string\n\n\n/dict\n\n\n/plist\n\n\n\n\n\nAnd you can see which \n.xcarchive\n it's using to check if it built that with the correct provisioning profile.\n\n\nMost importantly, you can keep running that entire command until you figure out why it's breaking (e.g. try installing these gems, try using system Ruby).\n\n\nOther Causes\n\n\nKeep in mind, this list could be infinite since this \nNo applicable devices found\n error just manifests itself from underlying errors. Your best bet is to dig into the logs and see which error is actually being thrown.\n\n\n\n\nUsing the wrong \nexport_method\n or some other error in the generated \nexportPlist\n (e.g. using \nenterprise\n method when you're actually building for the \napp store\n and don't have the proper certificates)\n\n\nRoot Apple WWDR certificate had expired; check the Keychain for expired certificates\n\n\nEnv vars not being unset, \nrelevant PR\n\n\nIncluding bitcode sometimes caused it (can use \ninclude_bitcode: false\n) in your \ngym\n command and check if all frameworks match your bitcode requirements\n\n\nProvisioning profiles not matching capabilities and beta-reports-active flag on .entitlements file.\n\n\nNot having the gems (\nCFPropertyList\n etc) we discussed earlier installed \n\n\n\n\nApple Tech Notes\n\n\nIf all else fails, use these tech notes to troubleshoot app thinning and bitcode: \n\n\n\n\nhttps://developer.apple.com/library/content/technotes/tn2432/_index.html\n\n\nhttps://stackoverflow.com/questions/34959767/whats-the-difference-between-fembed-bitcode-and-bitcode-generation-mode\n\n\nhttps://forums.developer.apple.com/thread/70583\n\n\n\n\nRadar\n\n\nFeel free to duplicate the radar \nhttps://openradar.appspot.com/31389725\n so the export APIs will return an accurate error message", 
            "title": "Common Issues"
        }, 
        {
            "location": "/codesigning/common-issues/#common-code-signing-issues", 
            "text": "", 
            "title": "Common code signing issues"
        }, 
        {
            "location": "/codesigning/common-issues/#xcode-errors", 
            "text": "Code Sign error: No matching provisioning profiles found: No provisioning profiles with a valid signing identity (i.e. certificate and private key pair) matching the bundle identifier \"X\" were found.   The provisioning profile for the given app identifier \"X\" is not available on the local machine. Make sure you have a valid provisioning profile for the correct distribution type (App Store, Development or Ad Hoc) on the Apple Developer Portal, download and install it, and select the profile in the Xcode settings (See  Setting up your Xcode Project ).  You might have the provisioning profile installed locally, but miss the private key or certificate for it.    No matching codesigning identity found: No codesigning identities (i.e. certificate and private key pairs) matching \"iPhone Distribution: X\" were found   The code signing identity you specified in the Xcode project can't be found in your local keychain. Make sure to transfer the certificate and private key from another Mac (or wherever you store the private key), or to update the project file to use the correct code signing identity.   Error Domain=IDEDistributionErrorDomain Code=1 \"The operation couldn\u2019t be completed. (IDEDistributionErrorDomain error 1.)\"   This error can have a lot of reasons, some things you should try:   Verify your Keychain is valid and you don't have an expired WWDR certificate using  this guide  Verify both your certificate and provisioning profile are valid in both your Keychain and on the Apple Developer Portal (Check out  Debugging codesigning issues  for more information)  Follow the other steps of  Debugging codesigning issues    Provisioning profile does not match bundle identifier: The provisioning profile specified in your build settings (\"X\") has an AppID of \"Y\" which does not match your bundle identifier \"Z\"   Your project defines a provisioning profile that doesn't match the bundle identifier of your app. There is mismatch between the bundle identifiers, this might happen if you specify the wrong provisioning profile in your target.   Your build settings specify a provisioning profile with the UUID \"X\", however, no such provisioning profile was found.   Your project defines a provisioning profile which doesn't exist on your local machine. Check out  Setting up your Xcode Project  for more information how to properly specify a provisioning profile to avoid hard coded UUIDs in your project.   CodeSign Error: code signing is required for product type 'Application'...   Make sure to have a valid code signing identity defined in your project targets. This might happen when you select  Don't Code Sign  as Code Signing Identity.", 
            "title": "Xcode errors"
        }, 
        {
            "location": "/codesigning/common-issues/#fastlane-errors", 
            "text": "User interaction is not allowed. Command /usr/bin/codesign failed with exit code 1   Make sure that codesign can access your signing private key. Open Keychain Access. Select your signing private key, right-click, choose Get Info, change to the Access Control tab and select the \"Allow all applications to access this item\".   Could not find a matching code signing identity for type 'X'   There are no certificates available on the Apple Developer Portal. This could either mean someone revoked a certificate, or you don't have access to it.", 
            "title": "fastlane errors"
        }, 
        {
            "location": "/codesigning/common-issues/#debugging-steps-for-no-applicable-devices-found-error", 
            "text": "It's not immediately obvious what this error is or what it's caused by, so hopefully these simple steps will help you find the root cause faster.", 
            "title": "Debugging steps for \"No applicable devices found.\" error"
        }, 
        {
            "location": "/codesigning/common-issues/#not-just-fastlane", 
            "text": "This error happens to all projects built with  xcodebuild  /  xcrun , so it's likely not caused by  fastlane .  fastlane  might help alleviate it with some env var unsetting / setting or other tricks, but this is an error from the new export APIs that Xcode uses.", 
            "title": "Not just fastlane"
        }, 
        {
            "location": "/codesigning/common-issues/#legacy-export-api", 
            "text": "As of Xcode 8.3, the deprecated / legacy export api (e.g.  use_legacy_build_api ) is removed, so you have to use the latest Xcode export API, which unfortunately still has some issues.", 
            "title": "Legacy export API"
        }, 
        {
            "location": "/codesigning/common-issues/#misleading-errors", 
            "text": "The error message,  \"No applicable devices found.\" , is actually misleading: it's not the real error. Something else is erroring out at a lower level so you'll need to dig in to find out what.", 
            "title": "Misleading errors"
        }, 
        {
            "location": "/codesigning/common-issues/#the-archive-built-successfully-but-the-export-step-failed", 
            "text": "Typically, your archive will build nicely, and with the correct provisioning profile; you can inspect the  .xcarchive  package to verify the  embedded.mobileprovision  file matches.  What happens is the export step will possibly sign it with a different profile depending on which  export_method  you're choosing (with  development  being the default) and it is during this step that the process will fail.  This allows you to isolate the error to the export step, under most circumstances.", 
            "title": "The archive built successfully, but the export step failed"
        }, 
        {
            "location": "/codesigning/common-issues/#dependency-on-other-gems", 
            "text": "The export step sometimes fails due to not having these Ruby gems installed and caused many of the old instances of this problem.   CFPropertyList  sqlite3  digest   You can use  $ gem list  to show which gems are installed", 
            "title": "Dependency on other gems"
        }, 
        {
            "location": "/codesigning/common-issues/#ruby-version", 
            "text": "Many of the old instances of this problem were caused by not using  system  Ruby, but this likely won't impact many in the future since  fastlane  helps ensure your environment is set up properly now.  Using  RVM  or newer versions of Ruby should work fine. If you have RVM installed and want to try reverting back to  system  Ruby just in case, you can set and check this using:  $ rvm use system\n$ ruby -v\nruby 2.0.0p648 (2015-12-16 revision 53162) [universal.x86_64-darwin16]\n$ which ruby\n/usr/bin/ruby", 
            "title": "Ruby version"
        }, 
        {
            "location": "/codesigning/common-issues/#check-the-logs", 
            "text": "In many issues that were seen on the  fastlane  repo and across the web, this error was given during the bundling process. Luckily, that bundler creates a log file that you can access to see what error  actually  happened:  2017-03-30 21:47:09.855 xcodebuild[78957:9114437] [MT] IDEDistribution: -[IDEDistributionLogging _createLoggingBundleAtPath:]: Created bundle at path '/var/folders/s1/0h7d0scx6xqdthft328yfk0m0000gn/T/MyApp-Internal_2017-03-30_21-47-09.854.xcdistributionlogs'.\n1.2.840.113635.100.1.61\n1.2.840.113635.100.1.61\n2017-03-30 21:47:14.702 xcodebuild[78957:9114437] [MT] IDEDistribution: Step failed:  IDEDistributionThinningStep: 0x7fc3218d0b60 : Error Domain=IDEDistributionErrorDomain Code=14  No applicable devices found.  UserInfo={NSLocalizedDescription=No applicable devices found.}\nerror: exportArchive: No applicable devices found.  If you look closely, you'll see the misleading error message and then just above it, there's a path to a log file ( *.xcdistributionlogs ). Opening that up, you'll see more detail. (Side note: you can also search for all logs via  $ sudo find /private/var -name \"*.xcdistributionlogs\" )  In this case, it was because the export was built  without  bitcode, but there were static lib frameworks that were built  with  bitcode:  # inside IDEDistribution.standard.log within the .xcdistributionlogs file\n2017-03-31 16:49:06 +0000  Validating IPA structure...\n2017-03-31 16:49:06 +0000  error: Failed to verify bitcode in opus.framework/opus:\nerror: Bundle only contains bitcode-marker /var/folders/s1/0h7d0scx6xqdthft328yfk0m0000gn/T/IDEDistributionThinningStep.KRt/Payload/Viv.app/Frameworks/opus.framework/opus (armv7)  When that framework was rebuilt without bitcode, it worked like a charm! \ud83d\ude05", 
            "title": "Check the Logs"
        }, 
        {
            "location": "/codesigning/common-issues/#run-commands-yourself", 
            "text": "gym  does a great job of showing which commands it's going to run. Inspect the files it generates and run these commands yourself, as many times as you need to, in order to isolate the problems.  For example, here's the export command that  gym  shows:  /usr/bin/xcrun /Users/rob/.fastlane/bin/bundle/lib/ruby/gems/2.2.0/gems/fastlane-2.24.0/gym/lib/assets/wrap_xcodebuild/xcbuild-safe.sh -exportArchive -exportOptionsPlist '/var/folders/s1/0h7d0scx6xqdthft328yfk0m0000gn/T/gym_config20170330-65021-1xbw0ov.plist' -archivePath /Users/rob/Library/Developer/Xcode/Archives/2017-03-30/MyApp\\ 2017-03-30\\ 21.12.02.xcarchive -exportPath '/var/folders/s1/0h7d0scx6xqdthft328yfk0m0000gn/T/gym_output20170330-65021-u80ojn'  From that, you can see which  exportOptionsPlist  it's using, which had this in it:  ?xml version= 1.0  encoding= UTF-8 ?  !DOCTYPE plist PUBLIC  -//Apple//DTD PLIST 1.0//EN   http://www.apple.com/DTDs/PropertyList-1.0.dtd  plist version= 1.0  dict \n     key method /key \n     string development /string  /dict  /plist   And you can see which  .xcarchive  it's using to check if it built that with the correct provisioning profile.  Most importantly, you can keep running that entire command until you figure out why it's breaking (e.g. try installing these gems, try using system Ruby).", 
            "title": "Run commands yourself"
        }, 
        {
            "location": "/codesigning/common-issues/#other-causes", 
            "text": "Keep in mind, this list could be infinite since this  No applicable devices found  error just manifests itself from underlying errors. Your best bet is to dig into the logs and see which error is actually being thrown.   Using the wrong  export_method  or some other error in the generated  exportPlist  (e.g. using  enterprise  method when you're actually building for the  app store  and don't have the proper certificates)  Root Apple WWDR certificate had expired; check the Keychain for expired certificates  Env vars not being unset,  relevant PR  Including bitcode sometimes caused it (can use  include_bitcode: false ) in your  gym  command and check if all frameworks match your bitcode requirements  Provisioning profiles not matching capabilities and beta-reports-active flag on .entitlements file.  Not having the gems ( CFPropertyList  etc) we discussed earlier installed", 
            "title": "Other Causes"
        }, 
        {
            "location": "/codesigning/common-issues/#apple-tech-notes", 
            "text": "If all else fails, use these tech notes to troubleshoot app thinning and bitcode:    https://developer.apple.com/library/content/technotes/tn2432/_index.html  https://stackoverflow.com/questions/34959767/whats-the-difference-between-fembed-bitcode-and-bitcode-generation-mode  https://forums.developer.apple.com/thread/70583", 
            "title": "Apple Tech Notes"
        }, 
        {
            "location": "/codesigning/common-issues/#radar", 
            "text": "Feel free to duplicate the radar  https://openradar.appspot.com/31389725  so the export APIs will return an accurate error message", 
            "title": "Radar"
        }, 
        {
            "location": "/plugins/available-plugins/", 
            "text": "Available Plugins\n\n\n\n\n875\n\n\n\nxcake\n\n\n\nvia James Campbell\n\n\n\n\n\nCreate your Xcode projects automatically using a stupid simple DSL.\n\n\n\n\n\n\nScore details\n\n\n\n\n\n\n\n\nMetric\n\n\nPoints\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\ncontributors\n\n\n84\n\n\nThe more contributors a project has, the more likely it is it stays alive\n\n\n\n\n\n\nsubscribers\n\n\n42\n\n\nMore subscribers = more popular project\n\n\n\n\n\n\nstars\n\n\n409\n\n\nMore stars = more popular project\n\n\n\n\n\n\nforks\n\n\n155\n\n\nMore forks = more people seem to use/modify this project\n\n\n\n\n\n\nhas_mit_license\n\n\n20\n\n\nfastlane is MIT licensed, it's good to have plugins use MIT too\n\n\n\n\n\n\nreadme_score\n\n\n50\n\n\nHow well is the README of the document written\n\n\n\n\n\n\nage\n\n\n11\n\n\nProject that have been around for longer tend to be more stable\n\n\n\n\n\n\nmajor_release\n\n\n0\n\n\nPost 1.0 releases are great\n\n\n\n\n\n\ngithub_issues\n\n\n-7\n\n\nLots of open issues are not a good sign usually, unless the project is really popular\n\n\n\n\n\n\ndownloads\n\n\n31\n\n\nMore downloads = more users have been using the plugin for a while\n\n\n\n\n\n\ntests\n\n\n80\n\n\nThe more tests a plugin has, the better\n\n\n\n\n\n\n\n\n\n\n\n\n  \nOpen on GitHub\n\n\n\n\n\n\n\n\n744\n\n\n\nversioning\n\n\n\nvia Siarhei Fiedartsou\n\n\n\n\n\nAllows to set/get app version and build number directly to/from Info.plist\n\n\n\n\n\n\nScore details\n\n\n\n\n\n\n\n\nMetric\n\n\nPoints\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\ncontributors\n\n\n24\n\n\nThe more contributors a project has, the more likely it is it stays alive\n\n\n\n\n\n\nsubscribers\n\n\n3\n\n\nMore subscribers = more popular project\n\n\n\n\n\n\nstars\n\n\n66\n\n\nMore stars = more popular project\n\n\n\n\n\n\nforks\n\n\n30\n\n\nMore forks = more people seem to use/modify this project\n\n\n\n\n\n\nhas_mit_license\n\n\n20\n\n\nfastlane is MIT licensed, it's good to have plugins use MIT too\n\n\n\n\n\n\nreadme_score\n\n\n50\n\n\nHow well is the README of the document written\n\n\n\n\n\n\nage\n\n\n7\n\n\nProject that have been around for longer tend to be more stable\n\n\n\n\n\n\nmajor_release\n\n\n0\n\n\nPost 1.0 releases are great\n\n\n\n\n\n\ngithub_issues\n\n\n0\n\n\nLots of open issues are not a good sign usually, unless the project is really popular\n\n\n\n\n\n\ndownloads\n\n\n464\n\n\nMore downloads = more users have been using the plugin for a while\n\n\n\n\n\n\ntests\n\n\n80\n\n\nThe more tests a plugin has, the better\n\n\n\n\n\n\n\n\n\n\n\n\n  \nOpen on GitHub\n\n\n\n\n\n\n\n\n401\n\n\n\nupdate_project_codesigning\n\n\n\nvia Helmut Januschka\n\n\n\n\n\nUpdates the Xcode 8 Automatic Codesigning Flag\n\n\n\n\n\n\nScore details\n\n\n\n\n\n\n\n\nMetric\n\n\nPoints\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\ncontributors\n\n\n12\n\n\nThe more contributors a project has, the more likely it is it stays alive\n\n\n\n\n\n\nsubscribers\n\n\n12\n\n\nMore subscribers = more popular project\n\n\n\n\n\n\nstars\n\n\n47\n\n\nMore stars = more popular project\n\n\n\n\n\n\nforks\n\n\n50\n\n\nMore forks = more people seem to use/modify this project\n\n\n\n\n\n\nhas_mit_license\n\n\n20\n\n\nfastlane is MIT licensed, it's good to have plugins use MIT too\n\n\n\n\n\n\nreadme_score\n\n\n50\n\n\nHow well is the README of the document written\n\n\n\n\n\n\nage\n\n\n5\n\n\nProject that have been around for longer tend to be more stable\n\n\n\n\n\n\nmajor_release\n\n\n0\n\n\nPost 1.0 releases are great\n\n\n\n\n\n\ngithub_issues\n\n\n-1\n\n\nLots of open issues are not a good sign usually, unless the project is really popular\n\n\n\n\n\n\ndownloads\n\n\n203\n\n\nMore downloads = more users have been using the plugin for a while\n\n\n\n\n\n\ntests\n\n\n3\n\n\nThe more tests a plugin has, the better\n\n\n\n\n\n\n\n\n\n\n\n\n  \nOpen on GitHub\n\n\n\n\n\n\n\n\n382\n\n\n\ntrainer\n\n\n\nvia KrauseFx\n\n\n\n\n\nConvert xcodebuild plist files to JUnit reports\n\n\n\n\n\n\nScore details\n\n\n\n\n\n\n\n\nMetric\n\n\nPoints\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\ncontributors\n\n\n24\n\n\nThe more contributors a project has, the more likely it is it stays alive\n\n\n\n\n\n\nsubscribers\n\n\n9\n\n\nMore subscribers = more popular project\n\n\n\n\n\n\nstars\n\n\n87\n\n\nMore stars = more popular project\n\n\n\n\n\n\nforks\n\n\n55\n\n\nMore forks = more people seem to use/modify this project\n\n\n\n\n\n\nhas_mit_license\n\n\n20\n\n\nfastlane is MIT licensed, it's good to have plugins use MIT too\n\n\n\n\n\n\nreadme_score\n\n\n50\n\n\nHow well is the README of the document written\n\n\n\n\n\n\nage\n\n\n6\n\n\nProject that have been around for longer tend to be more stable\n\n\n\n\n\n\nmajor_release\n\n\n0\n\n\nPost 1.0 releases are great\n\n\n\n\n\n\ngithub_issues\n\n\n-4\n\n\nLots of open issues are not a good sign usually, unless the project is really popular\n\n\n\n\n\n\ndownloads\n\n\n111\n\n\nMore downloads = more users have been using the plugin for a while\n\n\n\n\n\n\ntests\n\n\n24\n\n\nThe more tests a plugin has, the better\n\n\n\n\n\n\n\n\n\n\n\n\n  \nOpen on GitHub\n\n\n\n\n\n\n\n\n351\n\n\n\nappicon\n\n\n\nvia Boris Bu\u0308gling\n\n\n\n\n\nGenerate required icon sizes and iconset from a master application icon.\n\n\n\n\n\n\nScore details\n\n\n\n\n\n\n\n\nMetric\n\n\nPoints\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\ncontributors\n\n\n42\n\n\nThe more contributors a project has, the more likely it is it stays alive\n\n\n\n\n\n\nsubscribers\n\n\n15\n\n\nMore subscribers = more popular project\n\n\n\n\n\n\nstars\n\n\n132\n\n\nMore stars = more popular project\n\n\n\n\n\n\nforks\n\n\n35\n\n\nMore forks = more people seem to use/modify this project\n\n\n\n\n\n\nhas_mit_license\n\n\n20\n\n\nfastlane is MIT licensed, it's good to have plugins use MIT too\n\n\n\n\n\n\nreadme_score\n\n\n50\n\n\nHow well is the README of the document written\n\n\n\n\n\n\nage\n\n\n6\n\n\nProject that have been around for longer tend to be more stable\n\n\n\n\n\n\nmajor_release\n\n\n0\n\n\nPost 1.0 releases are great\n\n\n\n\n\n\ngithub_issues\n\n\n-5\n\n\nLots of open issues are not a good sign usually, unless the project is really popular\n\n\n\n\n\n\ndownloads\n\n\n56\n\n\nMore downloads = more users have been using the plugin for a while\n\n\n\n\n\n\ntests\n\n\n0\n\n\nThe more tests a plugin has, the better\n\n\n\n\n\n\n\n\n\n\n\n\n  \nOpen on GitHub\n\n\n\n\n\n\n\n\n335\n\n\n\naws_s3\n\n\n\nvia Josh Holtz\n\n\n\n\n\nUpload IPA and APK to S3\n\n\n\n\n\n\nScore details\n\n\n\n\n\n\n\n\nMetric\n\n\nPoints\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\ncontributors\n\n\n54\n\n\nThe more contributors a project has, the more likely it is it stays alive\n\n\n\n\n\n\nsubscribers\n\n\n12\n\n\nMore subscribers = more popular project\n\n\n\n\n\n\nstars\n\n\n19\n\n\nMore stars = more popular project\n\n\n\n\n\n\nforks\n\n\n60\n\n\nMore forks = more people seem to use/modify this project\n\n\n\n\n\n\nhas_mit_license\n\n\n20\n\n\nfastlane is MIT licensed, it's good to have plugins use MIT too\n\n\n\n\n\n\nreadme_score\n\n\n50\n\n\nHow well is the README of the document written\n\n\n\n\n\n\nage\n\n\n7\n\n\nProject that have been around for longer tend to be more stable\n\n\n\n\n\n\nmajor_release\n\n\n30\n\n\nPost 1.0 releases are great\n\n\n\n\n\n\ngithub_issues\n\n\n-3\n\n\nLots of open issues are not a good sign usually, unless the project is really popular\n\n\n\n\n\n\ndownloads\n\n\n71\n\n\nMore downloads = more users have been using the plugin for a while\n\n\n\n\n\n\ntests\n\n\n15\n\n\nThe more tests a plugin has, the better\n\n\n\n\n\n\n\n\n\n\n\n\n  \nOpen on GitHub\n\n\n\n\n\n\n\n\n299\n\n\n\nautomated_test_emulator_run\n\n\n\nvia Kamil Krzyk\n\n\n\n\n\nStarts n AVDs based on JSON file config. AVDs are created and configured according to user liking before instrumentation test process (started either via shell command or gradle) and killed/deleted after test process finishes.\n\n\n\n\n\n\nScore details\n\n\n\n\n\n\n\n\nMetric\n\n\nPoints\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\ncontributors\n\n\n18\n\n\nThe more contributors a project has, the more likely it is it stays alive\n\n\n\n\n\n\nsubscribers\n\n\n12\n\n\nMore subscribers = more popular project\n\n\n\n\n\n\nstars\n\n\n56\n\n\nMore stars = more popular project\n\n\n\n\n\n\nforks\n\n\n40\n\n\nMore forks = more people seem to use/modify this project\n\n\n\n\n\n\nhas_mit_license\n\n\n20\n\n\nfastlane is MIT licensed, it's good to have plugins use MIT too\n\n\n\n\n\n\nreadme_score\n\n\n50\n\n\nHow well is the README of the document written\n\n\n\n\n\n\nage\n\n\n6\n\n\nProject that have been around for longer tend to be more stable\n\n\n\n\n\n\nmajor_release\n\n\n30\n\n\nPost 1.0 releases are great\n\n\n\n\n\n\ngithub_issues\n\n\n-3\n\n\nLots of open issues are not a good sign usually, unless the project is really popular\n\n\n\n\n\n\ndownloads\n\n\n67\n\n\nMore downloads = more users have been using the plugin for a while\n\n\n\n\n\n\ntests\n\n\n3\n\n\nThe more tests a plugin has, the better\n\n\n\n\n\n\n\n\n\n\n\n\n  \nOpen on GitHub\n\n\n\n\n\n\n\n\n292\n\n\n\nsentry\n\n\n\nvia Sentry\n\n\n\n\n\nUpload symbols to Sentry\n\n\n\n\n\n\nScore details\n\n\n\n\n\n\n\n\nMetric\n\n\nPoints\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\ncontributors\n\n\n42\n\n\nThe more contributors a project has, the more likely it is it stays alive\n\n\n\n\n\n\nsubscribers\n\n\n6\n\n\nMore subscribers = more popular project\n\n\n\n\n\n\nstars\n\n\n12\n\n\nMore stars = more popular project\n\n\n\n\n\n\nforks\n\n\n35\n\n\nMore forks = more people seem to use/modify this project\n\n\n\n\n\n\nhas_mit_license\n\n\n20\n\n\nfastlane is MIT licensed, it's good to have plugins use MIT too\n\n\n\n\n\n\nreadme_score\n\n\n50\n\n\nHow well is the README of the document written\n\n\n\n\n\n\nage\n\n\n7\n\n\nProject that have been around for longer tend to be more stable\n\n\n\n\n\n\nmajor_release\n\n\n30\n\n\nPost 1.0 releases are great\n\n\n\n\n\n\ngithub_issues\n\n\n-1\n\n\nLots of open issues are not a good sign usually, unless the project is really popular\n\n\n\n\n\n\ndownloads\n\n\n43\n\n\nMore downloads = more users have been using the plugin for a while\n\n\n\n\n\n\ntests\n\n\n48\n\n\nThe more tests a plugin has, the better\n\n\n\n\n\n\n\n\n\n\n\n\n  \nOpen on GitHub\n\n\n\n\n\n\n\n\n285\n\n\n\nchangelog\n\n\n\nvia Pavel Prochazka\n\n\n\n\n\nAutomate changes to your project CHANGELOG.md\n\n\n\n\n\n\nScore details\n\n\n\n\n\n\n\n\nMetric\n\n\nPoints\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\ncontributors\n\n\n24\n\n\nThe more contributors a project has, the more likely it is it stays alive\n\n\n\n\n\n\nsubscribers\n\n\n6\n\n\nMore subscribers = more popular project\n\n\n\n\n\n\nstars\n\n\n33\n\n\nMore stars = more popular project\n\n\n\n\n\n\nforks\n\n\n35\n\n\nMore forks = more people seem to use/modify this project\n\n\n\n\n\n\nhas_mit_license\n\n\n20\n\n\nfastlane is MIT licensed, it's good to have plugins use MIT too\n\n\n\n\n\n\nreadme_score\n\n\n50\n\n\nHow well is the README of the document written\n\n\n\n\n\n\nage\n\n\n6\n\n\nProject that have been around for longer tend to be more stable\n\n\n\n\n\n\nmajor_release\n\n\n0\n\n\nPost 1.0 releases are great\n\n\n\n\n\n\ngithub_issues\n\n\n-1\n\n\nLots of open issues are not a good sign usually, unless the project is really popular\n\n\n\n\n\n\ndownloads\n\n\n70\n\n\nMore downloads = more users have been using the plugin for a while\n\n\n\n\n\n\ntests\n\n\n42\n\n\nThe more tests a plugin has, the better\n\n\n\n\n\n\n\n\n\n\n\n\n  \nOpen on GitHub\n\n\n\n\n\n\n\n\n272\n\n\n\nxcode_log_parser\n\n\n\nvia KrauseFx\n\n\n\n\n\nConvert the Xcode plist log to a JUnit report\n\n\n\n\n\n\nScore details\n\n\n\n\n\n\n\n\nMetric\n\n\nPoints\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\ncontributors\n\n\n24\n\n\nThe more contributors a project has, the more likely it is it stays alive\n\n\n\n\n\n\nsubscribers\n\n\n9\n\n\nMore subscribers = more popular project\n\n\n\n\n\n\nstars\n\n\n87\n\n\nMore stars = more popular project\n\n\n\n\n\n\nforks\n\n\n55\n\n\nMore forks = more people seem to use/modify this project\n\n\n\n\n\n\nhas_mit_license\n\n\n20\n\n\nfastlane is MIT licensed, it's good to have plugins use MIT too\n\n\n\n\n\n\nreadme_score\n\n\n50\n\n\nHow well is the README of the document written\n\n\n\n\n\n\nage\n\n\n6\n\n\nProject that have been around for longer tend to be more stable\n\n\n\n\n\n\nmajor_release\n\n\n0\n\n\nPost 1.0 releases are great\n\n\n\n\n\n\ngithub_issues\n\n\n-4\n\n\nLots of open issues are not a good sign usually, unless the project is really popular\n\n\n\n\n\n\ndownloads\n\n\n1\n\n\nMore downloads = more users have been using the plugin for a while\n\n\n\n\n\n\ntests\n\n\n24\n\n\nThe more tests a plugin has, the better\n\n\n\n\n\n\n\n\n\n\n\n\n  \nOpen on GitHub\n\n\n\n\n\n\n\n\n230\n\n\n\naws_device_farm\n\n\n\nvia Helmut Januschka\n\n\n\n\n\nRun UI Tests on AWS Devicefarm\n\n\n\n\n\n\nScore details\n\n\n\n\n\n\n\n\nMetric\n\n\nPoints\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\ncontributors\n\n\n36\n\n\nThe more contributors a project has, the more likely it is it stays alive\n\n\n\n\n\n\nsubscribers\n\n\n12\n\n\nMore subscribers = more popular project\n\n\n\n\n\n\nstars\n\n\n31\n\n\nMore stars = more popular project\n\n\n\n\n\n\nforks\n\n\n35\n\n\nMore forks = more people seem to use/modify this project\n\n\n\n\n\n\nhas_mit_license\n\n\n20\n\n\nfastlane is MIT licensed, it's good to have plugins use MIT too\n\n\n\n\n\n\nreadme_score\n\n\n50\n\n\nHow well is the README of the document written\n\n\n\n\n\n\nage\n\n\n4\n\n\nProject that have been around for longer tend to be more stable\n\n\n\n\n\n\nmajor_release\n\n\n0\n\n\nPost 1.0 releases are great\n\n\n\n\n\n\ngithub_issues\n\n\n0\n\n\nLots of open issues are not a good sign usually, unless the project is really popular\n\n\n\n\n\n\ndownloads\n\n\n39\n\n\nMore downloads = more users have been using the plugin for a while\n\n\n\n\n\n\ntests\n\n\n3\n\n\nThe more tests a plugin has, the better\n\n\n\n\n\n\n\n\n\n\n\n\n  \nOpen on GitHub\n\n\n\n\n\n\n\n\n225\n\n\n\nmobile_center\n\n\n\nvia Microsoft Corporation\n\n\n\n\n\nFastlane plugin for Mobile Center\n\n\n\n\n\n\nScore details\n\n\n\n\n\n\n\n\nMetric\n\n\nPoints\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\ncontributors\n\n\n24\n\n\nThe more contributors a project has, the more likely it is it stays alive\n\n\n\n\n\n\nsubscribers\n\n\n12\n\n\nMore subscribers = more popular project\n\n\n\n\n\n\nstars\n\n\n14\n\n\nMore stars = more popular project\n\n\n\n\n\n\nforks\n\n\n20\n\n\nMore forks = more people seem to use/modify this project\n\n\n\n\n\n\nhas_mit_license\n\n\n20\n\n\nfastlane is MIT licensed, it's good to have plugins use MIT too\n\n\n\n\n\n\nreadme_score\n\n\n50\n\n\nHow well is the README of the document written\n\n\n\n\n\n\nage\n\n\n1\n\n\nProject that have been around for longer tend to be more stable\n\n\n\n\n\n\nmajor_release\n\n\n0\n\n\nPost 1.0 releases are great\n\n\n\n\n\n\ngithub_issues\n\n\n0\n\n\nLots of open issues are not a good sign usually, unless the project is really popular\n\n\n\n\n\n\ndownloads\n\n\n6\n\n\nMore downloads = more users have been using the plugin for a while\n\n\n\n\n\n\ntests\n\n\n78\n\n\nThe more tests a plugin has, the better\n\n\n\n\n\n\n\n\n\n\n\n\n  \nOpen on GitHub\n\n\n\n\n\n\n\n\n217\n\n\n\ntpa\n\n\n\nvia Morten B\u00f8gh\n\n\n\n\n\nTPA gives you advanced user behaviour analytics, app distribution, crash analytics and more\n\n\n\n\n\n\nScore details\n\n\n\n\n\n\n\n\nMetric\n\n\nPoints\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\ncontributors\n\n\n24\n\n\nThe more contributors a project has, the more likely it is it stays alive\n\n\n\n\n\n\nsubscribers\n\n\n3\n\n\nMore subscribers = more popular project\n\n\n\n\n\n\nstars\n\n\n0\n\n\nMore stars = more popular project\n\n\n\n\n\n\nforks\n\n\n0\n\n\nMore forks = more people seem to use/modify this project\n\n\n\n\n\n\nhas_mit_license\n\n\n20\n\n\nfastlane is MIT licensed, it's good to have plugins use MIT too\n\n\n\n\n\n\nreadme_score\n\n\n25\n\n\nHow well is the README of the document written\n\n\n\n\n\n\nage\n\n\n6\n\n\nProject that have been around for longer tend to be more stable\n\n\n\n\n\n\nmajor_release\n\n\n30\n\n\nPost 1.0 releases are great\n\n\n\n\n\n\ngithub_issues\n\n\n0\n\n\nLots of open issues are not a good sign usually, unless the project is really popular\n\n\n\n\n\n\ndownloads\n\n\n70\n\n\nMore downloads = more users have been using the plugin for a while\n\n\n\n\n\n\ntests\n\n\n39\n\n\nThe more tests a plugin has, the better\n\n\n\n\n\n\n\n\n\n\n\n\n  \nOpen on GitHub\n\n\n\n\n\n\n\n\n212\n\n\n\nsettings_bundle\n\n\n\nvia Jimmy Dee\n\n\n\n\n\nFastlane plugin to update static settings in an iOS settings bundle\n\n\n\n\n\n\nScore details\n\n\n\n\n\n\n\n\nMetric\n\n\nPoints\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\ncontributors\n\n\n12\n\n\nThe more contributors a project has, the more likely it is it stays alive\n\n\n\n\n\n\nsubscribers\n\n\n3\n\n\nMore subscribers = more popular project\n\n\n\n\n\n\nstars\n\n\n6\n\n\nMore stars = more popular project\n\n\n\n\n\n\nforks\n\n\n5\n\n\nMore forks = more people seem to use/modify this project\n\n\n\n\n\n\nhas_mit_license\n\n\n20\n\n\nfastlane is MIT licensed, it's good to have plugins use MIT too\n\n\n\n\n\n\nreadme_score\n\n\n50\n\n\nHow well is the README of the document written\n\n\n\n\n\n\nage\n\n\n4\n\n\nProject that have been around for longer tend to be more stable\n\n\n\n\n\n\nmajor_release\n\n\n30\n\n\nPost 1.0 releases are great\n\n\n\n\n\n\ngithub_issues\n\n\n-3\n\n\nLots of open issues are not a good sign usually, unless the project is really popular\n\n\n\n\n\n\ndownloads\n\n\n5\n\n\nMore downloads = more users have been using the plugin for a while\n\n\n\n\n\n\ntests\n\n\n80\n\n\nThe more tests a plugin has, the better\n\n\n\n\n\n\n\n\n\n\n\n\n  \nOpen on GitHub\n\n\n\n\n\n\n\n\n204\n\n\n\nremove_provisioning_profile\n\n\n\nvia Anton Domashnev\n\n\n\n\n\nRemove provision profile from your local machine\n\n\n\n\n\n\nScore details\n\n\n\n\n\n\n\n\nMetric\n\n\nPoints\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\ncontributors\n\n\n12\n\n\nThe more contributors a project has, the more likely it is it stays alive\n\n\n\n\n\n\nsubscribers\n\n\n6\n\n\nMore subscribers = more popular project\n\n\n\n\n\n\nstars\n\n\n5\n\n\nMore stars = more popular project\n\n\n\n\n\n\nforks\n\n\n10\n\n\nMore forks = more people seem to use/modify this project\n\n\n\n\n\n\nhas_mit_license\n\n\n20\n\n\nfastlane is MIT licensed, it's good to have plugins use MIT too\n\n\n\n\n\n\nreadme_score\n\n\n50\n\n\nHow well is the README of the document written\n\n\n\n\n\n\nage\n\n\n5\n\n\nProject that have been around for longer tend to be more stable\n\n\n\n\n\n\nmajor_release\n\n\n30\n\n\nPost 1.0 releases are great\n\n\n\n\n\n\ngithub_issues\n\n\n0\n\n\nLots of open issues are not a good sign usually, unless the project is really popular\n\n\n\n\n\n\ndownloads\n\n\n6\n\n\nMore downloads = more users have been using the plugin for a while\n\n\n\n\n\n\ntests\n\n\n60\n\n\nThe more tests a plugin has, the better\n\n\n\n\n\n\n\n\n\n\n\n\n  \nOpen on GitHub\n\n\n\n\n\n\n\n\n198\n\n\n\nbugsnag\n\n\n\nvia Delisa Mason\n\n\n\n\n\nUploads dSYM files to Bugsnag\n\n\n\n\n\n\nScore details\n\n\n\n\n\n\n\n\nMetric\n\n\nPoints\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\ncontributors\n\n\n18\n\n\nThe more contributors a project has, the more likely it is it stays alive\n\n\n\n\n\n\nsubscribers\n\n\n54\n\n\nMore subscribers = more popular project\n\n\n\n\n\n\nstars\n\n\n5\n\n\nMore stars = more popular project\n\n\n\n\n\n\nforks\n\n\n5\n\n\nMore forks = more people seem to use/modify this project\n\n\n\n\n\n\nhas_mit_license\n\n\n20\n\n\nfastlane is MIT licensed, it's good to have plugins use MIT too\n\n\n\n\n\n\nreadme_score\n\n\n50\n\n\nHow well is the README of the document written\n\n\n\n\n\n\nage\n\n\n5\n\n\nProject that have been around for longer tend to be more stable\n\n\n\n\n\n\nmajor_release\n\n\n30\n\n\nPost 1.0 releases are great\n\n\n\n\n\n\ngithub_issues\n\n\n0\n\n\nLots of open issues are not a good sign usually, unless the project is really popular\n\n\n\n\n\n\ndownloads\n\n\n11\n\n\nMore downloads = more users have been using the plugin for a while\n\n\n\n\n\n\ntests\n\n\n0\n\n\nThe more tests a plugin has, the better\n\n\n\n\n\n\n\n\n\n\n\n\n  \nOpen on GitHub\n\n\n\n\n\n\n\n\n191\n\n\n\nact\n\n\n\nvia Richard Szalay\n\n\n\n\n\nApplies changes to plists and app icons inside a compiled IPA\n\n\n\n\n\n\nScore details\n\n\n\n\n\n\n\n\nMetric\n\n\nPoints\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\ncontributors\n\n\n0\n\n\nThe more contributors a project has, the more likely it is it stays alive\n\n\n\n\n\n\nsubscribers\n\n\n3\n\n\nMore subscribers = more popular project\n\n\n\n\n\n\nstars\n\n\n8\n\n\nMore stars = more popular project\n\n\n\n\n\n\nforks\n\n\n0\n\n\nMore forks = more people seem to use/modify this project\n\n\n\n\n\n\nhas_mit_license\n\n\n20\n\n\nfastlane is MIT licensed, it's good to have plugins use MIT too\n\n\n\n\n\n\nreadme_score\n\n\n50\n\n\nHow well is the README of the document written\n\n\n\n\n\n\nage\n\n\n5\n\n\nProject that have been around for longer tend to be more stable\n\n\n\n\n\n\nmajor_release\n\n\n30\n\n\nPost 1.0 releases are great\n\n\n\n\n\n\ngithub_issues\n\n\n-4\n\n\nLots of open issues are not a good sign usually, unless the project is really popular\n\n\n\n\n\n\ndownloads\n\n\n7\n\n\nMore downloads = more users have been using the plugin for a while\n\n\n\n\n\n\ntests\n\n\n72\n\n\nThe more tests a plugin has, the better\n\n\n\n\n\n\n\n\n\n\n\n\n  \nOpen on GitHub\n\n\n\n\n\n\n\n\n182\n\n\n\nupdate_provisioning_profile_specifier\n\n\n\nvia Jordan Bondo\n\n\n\n\n\nUpdate the provisioning profile in the Xcode Project file for a specified target\n\n\n\n\n\n\nScore details\n\n\n\n\n\n\n\n\nMetric\n\n\nPoints\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\ncontributors\n\n\n12\n\n\nThe more contributors a project has, the more likely it is it stays alive\n\n\n\n\n\n\nsubscribers\n\n\n3\n\n\nMore subscribers = more popular project\n\n\n\n\n\n\nstars\n\n\n12\n\n\nMore stars = more popular project\n\n\n\n\n\n\nforks\n\n\n30\n\n\nMore forks = more people seem to use/modify this project\n\n\n\n\n\n\nhas_mit_license\n\n\n20\n\n\nfastlane is MIT licensed, it's good to have plugins use MIT too\n\n\n\n\n\n\nreadme_score\n\n\n25\n\n\nHow well is the README of the document written\n\n\n\n\n\n\nage\n\n\n5\n\n\nProject that have been around for longer tend to be more stable\n\n\n\n\n\n\nmajor_release\n\n\n30\n\n\nPost 1.0 releases are great\n\n\n\n\n\n\ngithub_issues\n\n\n0\n\n\nLots of open issues are not a good sign usually, unless the project is really popular\n\n\n\n\n\n\ndownloads\n\n\n42\n\n\nMore downloads = more users have been using the plugin for a while\n\n\n\n\n\n\ntests\n\n\n3\n\n\nThe more tests a plugin has, the better\n\n\n\n\n\n\n\n\n\n\n\n\n  \nOpen on GitHub\n\n\n\n\n\n\n\n\n178\n\n\n\ncordova\n\n\n\nvia Almouro\n\n\n\n\n\nBuild your Cordova app\n\n\n\n\n\n\nScore details\n\n\n\n\n\n\n\n\nMetric\n\n\nPoints\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\ncontributors\n\n\n18\n\n\nThe more contributors a project has, the more likely it is it stays alive\n\n\n\n\n\n\nsubscribers\n\n\n12\n\n\nMore subscribers = more popular project\n\n\n\n\n\n\nstars\n\n\n33\n\n\nMore stars = more popular project\n\n\n\n\n\n\nforks\n\n\n30\n\n\nMore forks = more people seem to use/modify this project\n\n\n\n\n\n\nhas_mit_license\n\n\n20\n\n\nfastlane is MIT licensed, it's good to have plugins use MIT too\n\n\n\n\n\n\nreadme_score\n\n\n50\n\n\nHow well is the README of the document written\n\n\n\n\n\n\nage\n\n\n3\n\n\nProject that have been around for longer tend to be more stable\n\n\n\n\n\n\nmajor_release\n\n\n0\n\n\nPost 1.0 releases are great\n\n\n\n\n\n\ngithub_issues\n\n\n-2\n\n\nLots of open issues are not a good sign usually, unless the project is really popular\n\n\n\n\n\n\ndownloads\n\n\n14\n\n\nMore downloads = more users have been using the plugin for a while\n\n\n\n\n\n\ntests\n\n\n0\n\n\nThe more tests a plugin has, the better\n\n\n\n\n\n\n\n\n\n\n\n\n  \nOpen on GitHub\n\n\n\n\n\n\n\n\n172\n\n\n\nci_changelog\n\n\n\nvia icyleaf\n\n\n\n\n\nAutomate generate changelog between previous build failed and the latest commit of scm in CI\n\n\n\n\n\n\nScore details\n\n\n\n\n\n\n\n\nMetric\n\n\nPoints\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\ncontributors\n\n\n6\n\n\nThe more contributors a project has, the more likely it is it stays alive\n\n\n\n\n\n\nsubscribers\n\n\n3\n\n\nMore subscribers = more popular project\n\n\n\n\n\n\nstars\n\n\n2\n\n\nMore stars = more popular project\n\n\n\n\n\n\nforks\n\n\n0\n\n\nMore forks = more people seem to use/modify this project\n\n\n\n\n\n\nhas_mit_license\n\n\n20\n\n\nfastlane is MIT licensed, it's good to have plugins use MIT too\n\n\n\n\n\n\nreadme_score\n\n\n50\n\n\nHow well is the README of the document written\n\n\n\n\n\n\nage\n\n\n5\n\n\nProject that have been around for longer tend to be more stable\n\n\n\n\n\n\nmajor_release\n\n\n0\n\n\nPost 1.0 releases are great\n\n\n\n\n\n\ngithub_issues\n\n\n0\n\n\nLots of open issues are not a good sign usually, unless the project is really popular\n\n\n\n\n\n\ndownloads\n\n\n6\n\n\nMore downloads = more users have been using the plugin for a while\n\n\n\n\n\n\ntests\n\n\n80\n\n\nThe more tests a plugin has, the better\n\n\n\n\n\n\n\n\n\n\n\n\n  \nOpen on GitHub\n\n\n\n\n\n\n\n\n171\n\n\n\napplivery\n\n\n\nvia Alejandro Jimenez\n\n\n\n\n\nUpload new build to Applivery\n\n\n\n\n\n\nScore details\n\n\n\n\n\n\n\n\nMetric\n\n\nPoints\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\ncontributors\n\n\n18\n\n\nThe more contributors a project has, the more likely it is it stays alive\n\n\n\n\n\n\nsubscribers\n\n\n6\n\n\nMore subscribers = more popular project\n\n\n\n\n\n\nstars\n\n\n6\n\n\nMore stars = more popular project\n\n\n\n\n\n\nforks\n\n\n5\n\n\nMore forks = more people seem to use/modify this project\n\n\n\n\n\n\nhas_mit_license\n\n\n20\n\n\nfastlane is MIT licensed, it's good to have plugins use MIT too\n\n\n\n\n\n\nreadme_score\n\n\n50\n\n\nHow well is the README of the document written\n\n\n\n\n\n\nage\n\n\n6\n\n\nProject that have been around for longer tend to be more stable\n\n\n\n\n\n\nmajor_release\n\n\n30\n\n\nPost 1.0 releases are great\n\n\n\n\n\n\ngithub_issues\n\n\n-1\n\n\nLots of open issues are not a good sign usually, unless the project is really popular\n\n\n\n\n\n\ndownloads\n\n\n28\n\n\nMore downloads = more users have been using the plugin for a while\n\n\n\n\n\n\ntests\n\n\n3\n\n\nThe more tests a plugin has, the better\n\n\n\n\n\n\n\n\n\n\n\n\n  \nOpen on GitHub\n\n\n\n\n\n\n\n\n166\n\n\n\nincrement_version_code\n\n\n\nvia Jems\n\n\n\n\n\nIncrement the version code of your android project.\n\n\n\n\n\n\nScore details\n\n\n\n\n\n\n\n\nMetric\n\n\nPoints\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\ncontributors\n\n\n12\n\n\nThe more contributors a project has, the more likely it is it stays alive\n\n\n\n\n\n\nsubscribers\n\n\n6\n\n\nMore subscribers = more popular project\n\n\n\n\n\n\nstars\n\n\n12\n\n\nMore stars = more popular project\n\n\n\n\n\n\nforks\n\n\n25\n\n\nMore forks = more people seem to use/modify this project\n\n\n\n\n\n\nhas_mit_license\n\n\n20\n\n\nfastlane is MIT licensed, it's good to have plugins use MIT too\n\n\n\n\n\n\nreadme_score\n\n\n25\n\n\nHow well is the README of the document written\n\n\n\n\n\n\nage\n\n\n6\n\n\nProject that have been around for longer tend to be more stable\n\n\n\n\n\n\nmajor_release\n\n\n0\n\n\nPost 1.0 releases are great\n\n\n\n\n\n\ngithub_issues\n\n\n-2\n\n\nLots of open issues are not a good sign usually, unless the project is really popular\n\n\n\n\n\n\ndownloads\n\n\n59\n\n\nMore downloads = more users have been using the plugin for a while\n\n\n\n\n\n\ntests\n\n\n3\n\n\nThe more tests a plugin has, the better\n\n\n\n\n\n\n\n\n\n\n\n\n  \nOpen on GitHub\n\n\n\n\n\n\n\n\n163\n\n\n\nsetup_fragile_tests_for_rescan\n\n\n\nvia Lyndsey Ferguson\n\n\n\n\n\nSuppress stabile tests so that 'scan' can run the fragile tests again\n\n\n\n\n\n\nScore details\n\n\n\n\n\n\n\n\nMetric\n\n\nPoints\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\ncontributors\n\n\n6\n\n\nThe more contributors a project has, the more likely it is it stays alive\n\n\n\n\n\n\nsubscribers\n\n\n0\n\n\nMore subscribers = more popular project\n\n\n\n\n\n\nstars\n\n\n3\n\n\nMore stars = more popular project\n\n\n\n\n\n\nforks\n\n\n5\n\n\nMore forks = more people seem to use/modify this project\n\n\n\n\n\n\nhas_mit_license\n\n\n20\n\n\nfastlane is MIT licensed, it's good to have plugins use MIT too\n\n\n\n\n\n\nreadme_score\n\n\n50\n\n\nHow well is the README of the document written\n\n\n\n\n\n\nage\n\n\n1\n\n\nProject that have been around for longer tend to be more stable\n\n\n\n\n\n\nmajor_release\n\n\n30\n\n\nPost 1.0 releases are great\n\n\n\n\n\n\ngithub_issues\n\n\n-3\n\n\nLots of open issues are not a good sign usually, unless the project is really popular\n\n\n\n\n\n\ndownloads\n\n\n15\n\n\nMore downloads = more users have been using the plugin for a while\n\n\n\n\n\n\ntests\n\n\n36\n\n\nThe more tests a plugin has, the better\n\n\n\n\n\n\n\n\n\n\n\n\n  \nOpen on GitHub\n\n\n\n\n\n\n\n\n163\n\n\n\nblackberry_mam\n\n\n\nvia Lyndsey Ferguson\n\n\n\n\n\nA fastlane plugin that works with Blackberry Dynamics (formerly Good Dynamics) provides Mobile Application Management\n\n\n\n\n\n\nScore details\n\n\n\n\n\n\n\n\nMetric\n\n\nPoints\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\ncontributors\n\n\n6\n\n\nThe more contributors a project has, the more likely it is it stays alive\n\n\n\n\n\n\nsubscribers\n\n\n0\n\n\nMore subscribers = more popular project\n\n\n\n\n\n\nstars\n\n\n0\n\n\nMore stars = more popular project\n\n\n\n\n\n\nforks\n\n\n0\n\n\nMore forks = more people seem to use/modify this project\n\n\n\n\n\n\nhas_mit_license\n\n\n20\n\n\nfastlane is MIT licensed, it's good to have plugins use MIT too\n\n\n\n\n\n\nreadme_score\n\n\n25\n\n\nHow well is the README of the document written\n\n\n\n\n\n\nage\n\n\n1\n\n\nProject that have been around for longer tend to be more stable\n\n\n\n\n\n\nmajor_release\n\n\n30\n\n\nPost 1.0 releases are great\n\n\n\n\n\n\ngithub_issues\n\n\n0\n\n\nLots of open issues are not a good sign usually, unless the project is really popular\n\n\n\n\n\n\ndownloads\n\n\n1\n\n\nMore downloads = more users have been using the plugin for a while\n\n\n\n\n\n\ntests\n\n\n80\n\n\nThe more tests a plugin has, the better\n\n\n\n\n\n\n\n\n\n\n\n\n  \nOpen on GitHub\n\n\n\n\n\n\n\n\n162\n\n\n\ncosigner\n\n\n\nvia Andr\u00e9 Pacheco Neves, Lu\u00eds Portela Afonso\n\n\n\n\n\nA fastlane plugin to help you sign your iOS builds\n\n\n\n\n\n\nScore details\n\n\n\n\n\n\n\n\nMetric\n\n\nPoints\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\ncontributors\n\n\n12\n\n\nThe more contributors a project has, the more likely it is it stays alive\n\n\n\n\n\n\nsubscribers\n\n\n36\n\n\nMore subscribers = more popular project\n\n\n\n\n\n\nstars\n\n\n8\n\n\nMore stars = more popular project\n\n\n\n\n\n\nforks\n\n\n0\n\n\nMore forks = more people seem to use/modify this project\n\n\n\n\n\n\nhas_mit_license\n\n\n20\n\n\nfastlane is MIT licensed, it's good to have plugins use MIT too\n\n\n\n\n\n\nreadme_score\n\n\n50\n\n\nHow well is the README of the document written\n\n\n\n\n\n\nage\n\n\n2\n\n\nProject that have been around for longer tend to be more stable\n\n\n\n\n\n\nmajor_release\n\n\n30\n\n\nPost 1.0 releases are great\n\n\n\n\n\n\ngithub_issues\n\n\n-1\n\n\nLots of open issues are not a good sign usually, unless the project is really popular\n\n\n\n\n\n\ndownloads\n\n\n5\n\n\nMore downloads = more users have been using the plugin for a while\n\n\n\n\n\n\ntests\n\n\n0\n\n\nThe more tests a plugin has, the better\n\n\n\n\n\n\n\n\n\n\n\n\n  \nOpen on GitHub\n\n\n\n\n\n\n\n\n161\n\n\n\nsharethemeal\n\n\n\nvia Helmut Januschka\n\n\n\n\n\nShareTheMeal\n\n\n\n\n\n\nScore details\n\n\n\n\n\n\n\n\nMetric\n\n\nPoints\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\ncontributors\n\n\n18\n\n\nThe more contributors a project has, the more likely it is it stays alive\n\n\n\n\n\n\nsubscribers\n\n\n3\n\n\nMore subscribers = more popular project\n\n\n\n\n\n\nstars\n\n\n6\n\n\nMore stars = more popular project\n\n\n\n\n\n\nforks\n\n\n10\n\n\nMore forks = more people seem to use/modify this project\n\n\n\n\n\n\nhas_mit_license\n\n\n20\n\n\nfastlane is MIT licensed, it's good to have plugins use MIT too\n\n\n\n\n\n\nreadme_score\n\n\n50\n\n\nHow well is the README of the document written\n\n\n\n\n\n\nage\n\n\n5\n\n\nProject that have been around for longer tend to be more stable\n\n\n\n\n\n\nmajor_release\n\n\n0\n\n\nPost 1.0 releases are great\n\n\n\n\n\n\ngithub_issues\n\n\n0\n\n\nLots of open issues are not a good sign usually, unless the project is really popular\n\n\n\n\n\n\ndownloads\n\n\n46\n\n\nMore downloads = more users have been using the plugin for a while\n\n\n\n\n\n\ntests\n\n\n3\n\n\nThe more tests a plugin has, the better\n\n\n\n\n\n\n\n\n\n\n\n\n  \nOpen on GitHub\n\n\n\n\n\n\n\n\n160\n\n\n\ncarthage_cache\n\n\n\nvia Thi Doan\n\n\n\n\n\nA Fastlane plugin that allows to cache Carthage/Build folder in Amazon S3.\n\n\n\n\n\n\nScore details\n\n\n\n\n\n\n\n\nMetric\n\n\nPoints\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\ncontributors\n\n\n12\n\n\nThe more contributors a project has, the more likely it is it stays alive\n\n\n\n\n\n\nsubscribers\n\n\n6\n\n\nMore subscribers = more popular project\n\n\n\n\n\n\nstars\n\n\n8\n\n\nMore stars = more popular project\n\n\n\n\n\n\nforks\n\n\n0\n\n\nMore forks = more people seem to use/modify this project\n\n\n\n\n\n\nhas_mit_license\n\n\n20\n\n\nfastlane is MIT licensed, it's good to have plugins use MIT too\n\n\n\n\n\n\nreadme_score\n\n\n50\n\n\nHow well is the README of the document written\n\n\n\n\n\n\nage\n\n\n7\n\n\nProject that have been around for longer tend to be more stable\n\n\n\n\n\n\nmajor_release\n\n\n0\n\n\nPost 1.0 releases are great\n\n\n\n\n\n\ngithub_issues\n\n\n0\n\n\nLots of open issues are not a good sign usually, unless the project is really popular\n\n\n\n\n\n\ndownloads\n\n\n54\n\n\nMore downloads = more users have been using the plugin for a while\n\n\n\n\n\n\ntests\n\n\n3\n\n\nThe more tests a plugin has, the better\n\n\n\n\n\n\n\n\n\n\n\n\n  \nOpen on GitHub\n\n\n\n\n\n\n\n\n158\n\n\n\nfacelift\n\n\n\nvia Richard Szalay\n\n\n\n\n\nDeprecated in favor of 'fastlane-plugin-act'\n\n\n\n\n\n\nScore details\n\n\n\n\n\n\n\n\nMetric\n\n\nPoints\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\ncontributors\n\n\n0\n\n\nThe more contributors a project has, the more likely it is it stays alive\n\n\n\n\n\n\nsubscribers\n\n\n3\n\n\nMore subscribers = more popular project\n\n\n\n\n\n\nstars\n\n\n8\n\n\nMore stars = more popular project\n\n\n\n\n\n\nforks\n\n\n0\n\n\nMore forks = more people seem to use/modify this project\n\n\n\n\n\n\nhas_mit_license\n\n\n20\n\n\nfastlane is MIT licensed, it's good to have plugins use MIT too\n\n\n\n\n\n\nreadme_score\n\n\n50\n\n\nHow well is the README of the document written\n\n\n\n\n\n\nage\n\n\n5\n\n\nProject that have been around for longer tend to be more stable\n\n\n\n\n\n\nmajor_release\n\n\n0\n\n\nPost 1.0 releases are great\n\n\n\n\n\n\ngithub_issues\n\n\n-4\n\n\nLots of open issues are not a good sign usually, unless the project is really popular\n\n\n\n\n\n\ndownloads\n\n\n4\n\n\nMore downloads = more users have been using the plugin for a while\n\n\n\n\n\n\ntests\n\n\n72\n\n\nThe more tests a plugin has, the better\n\n\n\n\n\n\n\n\n\n\n\n\n  \nOpen on GitHub\n\n\n\n\n\n\n\n\n158\n\n\n\nyarn\n\n\n\nvia Josh Lesch\n\n\n\n\n\nExecute Yarn commands from your Fastfile\n\n\n\n\n\n\nScore details\n\n\n\n\n\n\n\n\nMetric\n\n\nPoints\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\ncontributors\n\n\n18\n\n\nThe more contributors a project has, the more likely it is it stays alive\n\n\n\n\n\n\nsubscribers\n\n\n3\n\n\nMore subscribers = more popular project\n\n\n\n\n\n\nstars\n\n\n4\n\n\nMore stars = more popular project\n\n\n\n\n\n\nforks\n\n\n10\n\n\nMore forks = more people seem to use/modify this project\n\n\n\n\n\n\nhas_mit_license\n\n\n20\n\n\nfastlane is MIT licensed, it's good to have plugins use MIT too\n\n\n\n\n\n\nreadme_score\n\n\n50\n\n\nHow well is the README of the document written\n\n\n\n\n\n\nage\n\n\n3\n\n\nProject that have been around for longer tend to be more stable\n\n\n\n\n\n\nmajor_release\n\n\n30\n\n\nPost 1.0 releases are great\n\n\n\n\n\n\ngithub_issues\n\n\n0\n\n\nLots of open issues are not a good sign usually, unless the project is really popular\n\n\n\n\n\n\ndownloads\n\n\n17\n\n\nMore downloads = more users have been using the plugin for a while\n\n\n\n\n\n\ntests\n\n\n3\n\n\nThe more tests a plugin has, the better\n\n\n\n\n\n\n\n\n\n\n\n\n  \nOpen on GitHub\n\n\n\n\n\n\n\n\n154\n\n\n\nupload_folder_to_s3\n\n\n\nvia teriiehina\n\n\n\n\n\nUpload a folder to S3\n\n\n\n\n\n\nScore details\n\n\n\n\n\n\n\n\nMetric\n\n\nPoints\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\ncontributors\n\n\n24\n\n\nThe more contributors a project has, the more likely it is it stays alive\n\n\n\n\n\n\nsubscribers\n\n\n3\n\n\nMore subscribers = more popular project\n\n\n\n\n\n\nstars\n\n\n7\n\n\nMore stars = more popular project\n\n\n\n\n\n\nforks\n\n\n5\n\n\nMore forks = more people seem to use/modify this project\n\n\n\n\n\n\nhas_mit_license\n\n\n20\n\n\nfastlane is MIT licensed, it's good to have plugins use MIT too\n\n\n\n\n\n\nreadme_score\n\n\n50\n\n\nHow well is the README of the document written\n\n\n\n\n\n\nage\n\n\n7\n\n\nProject that have been around for longer tend to be more stable\n\n\n\n\n\n\nmajor_release\n\n\n0\n\n\nPost 1.0 releases are great\n\n\n\n\n\n\ngithub_issues\n\n\n0\n\n\nLots of open issues are not a good sign usually, unless the project is really popular\n\n\n\n\n\n\ndownloads\n\n\n20\n\n\nMore downloads = more users have been using the plugin for a while\n\n\n\n\n\n\ntests\n\n\n18\n\n\nThe more tests a plugin has, the better\n\n\n\n\n\n\n\n\n\n\n\n\n  \nOpen on GitHub\n\n\n\n\n\n\n\n\n148\n\n\n\nframer\n\n\n\nvia DrAL3X\n\n\n\n\n\nCreate images combining app screenshots with templates to make nice pictures for the App Store\n\n\n\n\n\n\nScore details\n\n\n\n\n\n\n\n\nMetric\n\n\nPoints\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\ncontributors\n\n\n6\n\n\nThe more contributors a project has, the more likely it is it stays alive\n\n\n\n\n\n\nsubscribers\n\n\n12\n\n\nMore subscribers = more popular project\n\n\n\n\n\n\nstars\n\n\n11\n\n\nMore stars = more popular project\n\n\n\n\n\n\nforks\n\n\n5\n\n\nMore forks = more people seem to use/modify this project\n\n\n\n\n\n\nhas_mit_license\n\n\n20\n\n\nfastlane is MIT licensed, it's good to have plugins use MIT too\n\n\n\n\n\n\nreadme_score\n\n\n50\n\n\nHow well is the README of the document written\n\n\n\n\n\n\nage\n\n\n5\n\n\nProject that have been around for longer tend to be more stable\n\n\n\n\n\n\nmajor_release\n\n\n0\n\n\nPost 1.0 releases are great\n\n\n\n\n\n\ngithub_issues\n\n\n0\n\n\nLots of open issues are not a good sign usually, unless the project is really popular\n\n\n\n\n\n\ndownloads\n\n\n3\n\n\nMore downloads = more users have been using the plugin for a while\n\n\n\n\n\n\ntests\n\n\n36\n\n\nThe more tests a plugin has, the better\n\n\n\n\n\n\n\n\n\n\n\n\n  \nOpen on GitHub\n\n\n\n\n\n\n\n\n146\n\n\n\nxamarin_build\n\n\n\nvia punksta\n\n\n\n\n\nBuild xamarin android\\ios projects\n\n\n\n\n\n\nScore details\n\n\n\n\n\n\n\n\nMetric\n\n\nPoints\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\ncontributors\n\n\n12\n\n\nThe more contributors a project has, the more likely it is it stays alive\n\n\n\n\n\n\nsubscribers\n\n\n9\n\n\nMore subscribers = more popular project\n\n\n\n\n\n\nstars\n\n\n7\n\n\nMore stars = more popular project\n\n\n\n\n\n\nforks\n\n\n30\n\n\nMore forks = more people seem to use/modify this project\n\n\n\n\n\n\nhas_mit_license\n\n\n20\n\n\nfastlane is MIT licensed, it's good to have plugins use MIT too\n\n\n\n\n\n\nreadme_score\n\n\n50\n\n\nHow well is the README of the document written\n\n\n\n\n\n\nage\n\n\n6\n\n\nProject that have been around for longer tend to be more stable\n\n\n\n\n\n\nmajor_release\n\n\n0\n\n\nPost 1.0 releases are great\n\n\n\n\n\n\ngithub_issues\n\n\n-2\n\n\nLots of open issues are not a good sign usually, unless the project is really popular\n\n\n\n\n\n\ndownloads\n\n\n11\n\n\nMore downloads = more users have been using the plugin for a while\n\n\n\n\n\n\ntests\n\n\n3\n\n\nThe more tests a plugin has, the better\n\n\n\n\n\n\n\n\n\n\n\n\n  \nOpen on GitHub\n\n\n\n\n\n\n\n\n146\n\n\n\ngithub_status\n\n\n\nvia Michael Furtak\n\n\n\n\n\nProvides the ability to display and act upon GitHub server status as part of your build\n\n\n\n\n\n\nScore details\n\n\n\n\n\n\n\n\nMetric\n\n\nPoints\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\ncontributors\n\n\n6\n\n\nThe more contributors a project has, the more likely it is it stays alive\n\n\n\n\n\n\nsubscribers\n\n\n3\n\n\nMore subscribers = more popular project\n\n\n\n\n\n\nstars\n\n\n7\n\n\nMore stars = more popular project\n\n\n\n\n\n\nforks\n\n\n0\n\n\nMore forks = more people seem to use/modify this project\n\n\n\n\n\n\nhas_mit_license\n\n\n20\n\n\nfastlane is MIT licensed, it's good to have plugins use MIT too\n\n\n\n\n\n\nreadme_score\n\n\n50\n\n\nHow well is the README of the document written\n\n\n\n\n\n\nage\n\n\n7\n\n\nProject that have been around for longer tend to be more stable\n\n\n\n\n\n\nmajor_release\n\n\n0\n\n\nPost 1.0 releases are great\n\n\n\n\n\n\ngithub_issues\n\n\n0\n\n\nLots of open issues are not a good sign usually, unless the project is really popular\n\n\n\n\n\n\ndownloads\n\n\n5\n\n\nMore downloads = more users have been using the plugin for a while\n\n\n\n\n\n\ntests\n\n\n48\n\n\nThe more tests a plugin has, the better\n\n\n\n\n\n\n\n\n\n\n\n\n  \nOpen on GitHub\n\n\n\n\n\n\n\n\n139\n\n\n\nget_unprovisioned_devices_from_hockey\n\n\n\nvia GaryJohnson\n\n\n\n\n\nRetrieves a list of unprovisioned devices from Hockey which can be passed directly into register_devices.\n\n\n\n\n\n\nScore details\n\n\n\n\n\n\n\n\nMetric\n\n\nPoints\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\ncontributors\n\n\n12\n\n\nThe more contributors a project has, the more likely it is it stays alive\n\n\n\n\n\n\nsubscribers\n\n\n24\n\n\nMore subscribers = more popular project\n\n\n\n\n\n\nstars\n\n\n6\n\n\nMore stars = more popular project\n\n\n\n\n\n\nforks\n\n\n5\n\n\nMore forks = more people seem to use/modify this project\n\n\n\n\n\n\nhas_mit_license\n\n\n20\n\n\nfastlane is MIT licensed, it's good to have plugins use MIT too\n\n\n\n\n\n\nreadme_score\n\n\n50\n\n\nHow well is the README of the document written\n\n\n\n\n\n\nage\n\n\n5\n\n\nProject that have been around for longer tend to be more stable\n\n\n\n\n\n\nmajor_release\n\n\n0\n\n\nPost 1.0 releases are great\n\n\n\n\n\n\ngithub_issues\n\n\n0\n\n\nLots of open issues are not a good sign usually, unless the project is really popular\n\n\n\n\n\n\ndownloads\n\n\n14\n\n\nMore downloads = more users have been using the plugin for a while\n\n\n\n\n\n\ntests\n\n\n3\n\n\nThe more tests a plugin has, the better\n\n\n\n\n\n\n\n\n\n\n\n\n  \nOpen on GitHub\n\n\n\n\n\n\n\n\n139\n\n\n\nensure_xcode_build_version\n\n\n\nvia Fumiya Nakamura\n\n\n\n\n\nEnsure Xcode Build Version for working with Beta, GM and Release\n\n\n\n\n\n\nScore details\n\n\n\n\n\n\n\n\nMetric\n\n\nPoints\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\ncontributors\n\n\n6\n\n\nThe more contributors a project has, the more likely it is it stays alive\n\n\n\n\n\n\nsubscribers\n\n\n3\n\n\nMore subscribers = more popular project\n\n\n\n\n\n\nstars\n\n\n1\n\n\nMore stars = more popular project\n\n\n\n\n\n\nforks\n\n\n0\n\n\nMore forks = more people seem to use/modify this project\n\n\n\n\n\n\nhas_mit_license\n\n\n20\n\n\nfastlane is MIT licensed, it's good to have plugins use MIT too\n\n\n\n\n\n\nreadme_score\n\n\n50\n\n\nHow well is the README of the document written\n\n\n\n\n\n\nage\n\n\n5\n\n\nProject that have been around for longer tend to be more stable\n\n\n\n\n\n\nmajor_release\n\n\n30\n\n\nPost 1.0 releases are great\n\n\n\n\n\n\ngithub_issues\n\n\n0\n\n\nLots of open issues are not a good sign usually, unless the project is really popular\n\n\n\n\n\n\ndownloads\n\n\n9\n\n\nMore downloads = more users have been using the plugin for a while\n\n\n\n\n\n\ntests\n\n\n15\n\n\nThe more tests a plugin has, the better\n\n\n\n\n\n\n\n\n\n\n\n\n  \nOpen on GitHub\n\n\n\n\n\n\n\n\n138\n\n\n\nclubmate\n\n\n\nvia KrauseFx\n\n\n\n\n\nPrint the Club Mate logo in your build output\n\n\n\n\n\n\nScore details\n\n\n\n\n\n\n\n\nMetric\n\n\nPoints\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\ncontributors\n\n\n18\n\n\nThe more contributors a project has, the more likely it is it stays alive\n\n\n\n\n\n\nsubscribers\n\n\n6\n\n\nMore subscribers = more popular project\n\n\n\n\n\n\nstars\n\n\n8\n\n\nMore stars = more popular project\n\n\n\n\n\n\nforks\n\n\n0\n\n\nMore forks = more people seem to use/modify this project\n\n\n\n\n\n\nhas_mit_license\n\n\n20\n\n\nfastlane is MIT licensed, it's good to have plugins use MIT too\n\n\n\n\n\n\nreadme_score\n\n\n50\n\n\nHow well is the README of the document written\n\n\n\n\n\n\nage\n\n\n7\n\n\nProject that have been around for longer tend to be more stable\n\n\n\n\n\n\nmajor_release\n\n\n0\n\n\nPost 1.0 releases are great\n\n\n\n\n\n\ngithub_issues\n\n\n0\n\n\nLots of open issues are not a good sign usually, unless the project is really popular\n\n\n\n\n\n\ndownloads\n\n\n26\n\n\nMore downloads = more users have been using the plugin for a while\n\n\n\n\n\n\ntests\n\n\n3\n\n\nThe more tests a plugin has, the better\n\n\n\n\n\n\n\n\n\n\n\n\n  \nOpen on GitHub\n\n\n\n\n\n\n\n\n138\n\n\n\nupdate_xcodeproj\n\n\n\nvia Fumiya Nakamura\n\n\n\n\n\nUpdate Xcode projects\n\n\n\n\n\n\nScore details\n\n\n\n\n\n\n\n\nMetric\n\n\nPoints\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\ncontributors\n\n\n6\n\n\nThe more contributors a project has, the more likely it is it stays alive\n\n\n\n\n\n\nsubscribers\n\n\n3\n\n\nMore subscribers = more popular project\n\n\n\n\n\n\nstars\n\n\n2\n\n\nMore stars = more popular project\n\n\n\n\n\n\nforks\n\n\n0\n\n\nMore forks = more people seem to use/modify this project\n\n\n\n\n\n\nhas_mit_license\n\n\n20\n\n\nfastlane is MIT licensed, it's good to have plugins use MIT too\n\n\n\n\n\n\nreadme_score\n\n\n50\n\n\nHow well is the README of the document written\n\n\n\n\n\n\nage\n\n\n5\n\n\nProject that have been around for longer tend to be more stable\n\n\n\n\n\n\nmajor_release\n\n\n30\n\n\nPost 1.0 releases are great\n\n\n\n\n\n\ngithub_issues\n\n\n0\n\n\nLots of open issues are not a good sign usually, unless the project is really popular\n\n\n\n\n\n\ndownloads\n\n\n10\n\n\nMore downloads = more users have been using the plugin for a while\n\n\n\n\n\n\ntests\n\n\n12\n\n\nThe more tests a plugin has, the better\n\n\n\n\n\n\n\n\n\n\n\n\n  \nOpen on GitHub\n\n\n\n\n\n\n\n\n134\n\n\n\nverify_ipa\n\n\n\nvia Derek Yang\n\n\n\n\n\nVerify various aspects of iOS ipa file\n\n\n\n\n\n\nScore details\n\n\n\n\n\n\n\n\nMetric\n\n\nPoints\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\ncontributors\n\n\n6\n\n\nThe more contributors a project has, the more likely it is it stays alive\n\n\n\n\n\n\nsubscribers\n\n\n3\n\n\nMore subscribers = more popular project\n\n\n\n\n\n\nstars\n\n\n0\n\n\nMore stars = more popular project\n\n\n\n\n\n\nforks\n\n\n0\n\n\nMore forks = more people seem to use/modify this project\n\n\n\n\n\n\nhas_mit_license\n\n\n20\n\n\nfastlane is MIT licensed, it's good to have plugins use MIT too\n\n\n\n\n\n\nreadme_score\n\n\n50\n\n\nHow well is the README of the document written\n\n\n\n\n\n\nage\n\n\n2\n\n\nProject that have been around for longer tend to be more stable\n\n\n\n\n\n\nmajor_release\n\n\n0\n\n\nPost 1.0 releases are great\n\n\n\n\n\n\ngithub_issues\n\n\n0\n\n\nLots of open issues are not a good sign usually, unless the project is really popular\n\n\n\n\n\n\ndownloads\n\n\n2\n\n\nMore downloads = more users have been using the plugin for a while\n\n\n\n\n\n\ntests\n\n\n51\n\n\nThe more tests a plugin has, the better\n\n\n\n\n\n\n\n\n\n\n\n\n  \nOpen on GitHub\n\n\n\n\n\n\n\n\n132\n\n\n\ninstrumented_tests\n\n\n\nvia Silviu Paragina\n\n\n\n\n\nNew action to run instrumented tests for android. This plugin creates and boots an emulator before running a gradle command so that you can run instrumented tests against that emulator. After the gradle command is executed, the avd gets shut down and deleted. This is really helpful on CI services, keeping them clean and always having a fresh avd for testing.\n\n\n\n\n\n\nScore details\n\n\n\n\n\n\n\n\nMetric\n\n\nPoints\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\ncontributors\n\n\n12\n\n\nThe more contributors a project has, the more likely it is it stays alive\n\n\n\n\n\n\nsubscribers\n\n\n9\n\n\nMore subscribers = more popular project\n\n\n\n\n\n\nstars\n\n\n12\n\n\nMore stars = more popular project\n\n\n\n\n\n\nforks\n\n\n5\n\n\nMore forks = more people seem to use/modify this project\n\n\n\n\n\n\nhas_mit_license\n\n\n20\n\n\nfastlane is MIT licensed, it's good to have plugins use MIT too\n\n\n\n\n\n\nreadme_score\n\n\n50\n\n\nHow well is the README of the document written\n\n\n\n\n\n\nage\n\n\n6\n\n\nProject that have been around for longer tend to be more stable\n\n\n\n\n\n\nmajor_release\n\n\n0\n\n\nPost 1.0 releases are great\n\n\n\n\n\n\ngithub_issues\n\n\n-4\n\n\nLots of open issues are not a good sign usually, unless the project is really popular\n\n\n\n\n\n\ndownloads\n\n\n19\n\n\nMore downloads = more users have been using the plugin for a while\n\n\n\n\n\n\ntests\n\n\n3\n\n\nThe more tests a plugin has, the better\n\n\n\n\n\n\n\n\n\n\n\n\n  \nOpen on GitHub\n\n\n\n\n\n\n\n\n130\n\n\n\nsouyuz\n\n\n\nvia Felix Rudat\n\n\n\n\n\nA fastlane component to make Xamarin builds a breeze\n\n\n\n\n\n\nScore details\n\n\n\n\n\n\n\n\nMetric\n\n\nPoints\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\ncontributors\n\n\n18\n\n\nThe more contributors a project has, the more likely it is it stays alive\n\n\n\n\n\n\nsubscribers\n\n\n9\n\n\nMore subscribers = more popular project\n\n\n\n\n\n\nstars\n\n\n26\n\n\nMore stars = more popular project\n\n\n\n\n\n\nforks\n\n\n20\n\n\nMore forks = more people seem to use/modify this project\n\n\n\n\n\n\nhas_mit_license\n\n\n20\n\n\nfastlane is MIT licensed, it's good to have plugins use MIT too\n\n\n\n\n\n\nreadme_score\n\n\n25\n\n\nHow well is the README of the document written\n\n\n\n\n\n\nage\n\n\n7\n\n\nProject that have been around for longer tend to be more stable\n\n\n\n\n\n\nmajor_release\n\n\n0\n\n\nPost 1.0 releases are great\n\n\n\n\n\n\ngithub_issues\n\n\n-2\n\n\nLots of open issues are not a good sign usually, unless the project is really popular\n\n\n\n\n\n\ndownloads\n\n\n7\n\n\nMore downloads = more users have been using the plugin for a while\n\n\n\n\n\n\ntests\n\n\n0\n\n\nThe more tests a plugin has, the better\n\n\n\n\n\n\n\n\n\n\n\n\n  \nOpen on GitHub\n\n\n\n\n\n\n\n\n129\n\n\n\nflurry\n\n\n\nvia Akash Duseja\n\n\n\n\n\nUpload dSYM symbolication files to Flurry\n\n\n\n\n\n\nScore details\n\n\n\n\n\n\n\n\nMetric\n\n\nPoints\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\ncontributors\n\n\n6\n\n\nThe more contributors a project has, the more likely it is it stays alive\n\n\n\n\n\n\nsubscribers\n\n\n33\n\n\nMore subscribers = more popular project\n\n\n\n\n\n\nstars\n\n\n1\n\n\nMore stars = more popular project\n\n\n\n\n\n\nforks\n\n\n0\n\n\nMore forks = more people seem to use/modify this project\n\n\n\n\n\n\nhas_mit_license\n\n\n20\n\n\nfastlane is MIT licensed, it's good to have plugins use MIT too\n\n\n\n\n\n\nreadme_score\n\n\n50\n\n\nHow well is the README of the document written\n\n\n\n\n\n\nage\n\n\n4\n\n\nProject that have been around for longer tend to be more stable\n\n\n\n\n\n\nmajor_release\n\n\n0\n\n\nPost 1.0 releases are great\n\n\n\n\n\n\ngithub_issues\n\n\n0\n\n\nLots of open issues are not a good sign usually, unless the project is really popular\n\n\n\n\n\n\ndownloads\n\n\n3\n\n\nMore downloads = more users have been using the plugin for a while\n\n\n\n\n\n\ntests\n\n\n12\n\n\nThe more tests a plugin has, the better\n\n\n\n\n\n\n\n\n\n\n\n\n  \nOpen on GitHub\n\n\n\n\n\n\n\n\n129\n\n\n\nunzip\n\n\n\nvia Massimo Oliviero\n\n\n\n\n\nExtract compressed files in a ZIP\n\n\n\n\n\n\nScore details\n\n\n\n\n\n\n\n\nMetric\n\n\nPoints\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\ncontributors\n\n\n6\n\n\nThe more contributors a project has, the more likely it is it stays alive\n\n\n\n\n\n\nsubscribers\n\n\n3\n\n\nMore subscribers = more popular project\n\n\n\n\n\n\nstars\n\n\n1\n\n\nMore stars = more popular project\n\n\n\n\n\n\nforks\n\n\n0\n\n\nMore forks = more people seem to use/modify this project\n\n\n\n\n\n\nhas_mit_license\n\n\n20\n\n\nfastlane is MIT licensed, it's good to have plugins use MIT too\n\n\n\n\n\n\nreadme_score\n\n\n50\n\n\nHow well is the README of the document written\n\n\n\n\n\n\nage\n\n\n6\n\n\nProject that have been around for longer tend to be more stable\n\n\n\n\n\n\nmajor_release\n\n\n30\n\n\nPost 1.0 releases are great\n\n\n\n\n\n\ngithub_issues\n\n\n0\n\n\nLots of open issues are not a good sign usually, unless the project is really popular\n\n\n\n\n\n\ndownloads\n\n\n10\n\n\nMore downloads = more users have been using the plugin for a while\n\n\n\n\n\n\ntests\n\n\n3\n\n\nThe more tests a plugin has, the better\n\n\n\n\n\n\n\n\n\n\n\n\n  \nOpen on GitHub\n\n\n\n\n\n\n\n\n128\n\n\n\nsynx\n\n\n\nvia Afonso Gra\u00e7a\n\n\n\n\n\nOrganise your Xcode project folder to match your Xcode groups.\n\n\n\n\n\n\nScore details\n\n\n\n\n\n\n\n\nMetric\n\n\nPoints\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\ncontributors\n\n\n12\n\n\nThe more contributors a project has, the more likely it is it stays alive\n\n\n\n\n\n\nsubscribers\n\n\n3\n\n\nMore subscribers = more popular project\n\n\n\n\n\n\nstars\n\n\n19\n\n\nMore stars = more popular project\n\n\n\n\n\n\nforks\n\n\n10\n\n\nMore forks = more people seem to use/modify this project\n\n\n\n\n\n\nhas_mit_license\n\n\n20\n\n\nfastlane is MIT licensed, it's good to have plugins use MIT too\n\n\n\n\n\n\nreadme_score\n\n\n25\n\n\nHow well is the README of the document written\n\n\n\n\n\n\nage\n\n\n6\n\n\nProject that have been around for longer tend to be more stable\n\n\n\n\n\n\nmajor_release\n\n\n0\n\n\nPost 1.0 releases are great\n\n\n\n\n\n\ngithub_issues\n\n\n0\n\n\nLots of open issues are not a good sign usually, unless the project is really popular\n\n\n\n\n\n\ndownloads\n\n\n30\n\n\nMore downloads = more users have been using the plugin for a while\n\n\n\n\n\n\ntests\n\n\n3\n\n\nThe more tests a plugin has, the better\n\n\n\n\n\n\n\n\n\n\n\n\n  \nOpen on GitHub\n\n\n\n\n\n\n\n\n127\n\n\n\ndownload_file\n\n\n\nvia Massimo Oliviero\n\n\n\n\n\nThis action downloads a file from an HTTP/HTTPS url (e.g. ZIP file) and puts it in a destination path\n\n\n\n\n\n\nScore details\n\n\n\n\n\n\n\n\nMetric\n\n\nPoints\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\ncontributors\n\n\n6\n\n\nThe more contributors a project has, the more likely it is it stays alive\n\n\n\n\n\n\nsubscribers\n\n\n3\n\n\nMore subscribers = more popular project\n\n\n\n\n\n\nstars\n\n\n0\n\n\nMore stars = more popular project\n\n\n\n\n\n\nforks\n\n\n5\n\n\nMore forks = more people seem to use/modify this project\n\n\n\n\n\n\nhas_mit_license\n\n\n20\n\n\nfastlane is MIT licensed, it's good to have plugins use MIT too\n\n\n\n\n\n\nreadme_score\n\n\n50\n\n\nHow well is the README of the document written\n\n\n\n\n\n\nage\n\n\n6\n\n\nProject that have been around for longer tend to be more stable\n\n\n\n\n\n\nmajor_release\n\n\n30\n\n\nPost 1.0 releases are great\n\n\n\n\n\n\ngithub_issues\n\n\n-1\n\n\nLots of open issues are not a good sign usually, unless the project is really popular\n\n\n\n\n\n\ndownloads\n\n\n2\n\n\nMore downloads = more users have been using the plugin for a while\n\n\n\n\n\n\ntests\n\n\n6\n\n\nThe more tests a plugin has, the better\n\n\n\n\n\n\n\n\n\n\n\n\n  \nOpen on GitHub\n\n\n\n\n\n\n\n\n127\n\n\n\ngs_deliver\n\n\n\nvia \u0421\u0435\u0440\u0433\u0435\u0438\u0306 \u0412\u0435\u0441\u0435\u043b\u043e\u0432\u0441\u043a\u0438\u0438\u0306\n\n\n\n\n\nGradoservice plugin to rule apps releases\n\n\n\n\n\n\nScore details\n\n\n\n\n\n\n\n\nMetric\n\n\nPoints\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\ncontributors\n\n\n6\n\n\nThe more contributors a project has, the more likely it is it stays alive\n\n\n\n\n\n\nsubscribers\n\n\n3\n\n\nMore subscribers = more popular project\n\n\n\n\n\n\nstars\n\n\n0\n\n\nMore stars = more popular project\n\n\n\n\n\n\nforks\n\n\n0\n\n\nMore forks = more people seem to use/modify this project\n\n\n\n\n\n\nhas_mit_license\n\n\n20\n\n\nfastlane is MIT licensed, it's good to have plugins use MIT too\n\n\n\n\n\n\nreadme_score\n\n\n25\n\n\nHow well is the README of the document written\n\n\n\n\n\n\nage\n\n\n3\n\n\nProject that have been around for longer tend to be more stable\n\n\n\n\n\n\nmajor_release\n\n\n0\n\n\nPost 1.0 releases are great\n\n\n\n\n\n\ngithub_issues\n\n\n0\n\n\nLots of open issues are not a good sign usually, unless the project is really popular\n\n\n\n\n\n\ndownloads\n\n\n67\n\n\nMore downloads = more users have been using the plugin for a while\n\n\n\n\n\n\ntests\n\n\n3\n\n\nThe more tests a plugin has, the better\n\n\n\n\n\n\n\n\n\n\n\n\n  \nOpen on GitHub\n\n\n\n\n\n\n\n\n126\n\n\n\nandroid_sdk_update\n\n\n\nvia Philipp Burgk, Michael Ruhl\n\n\n\n\n\nInstall required Android-SDK packages\n\n\n\n\n\n\nScore details\n\n\n\n\n\n\n\n\nMetric\n\n\nPoints\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\ncontributors\n\n\n12\n\n\nThe more contributors a project has, the more likely it is it stays alive\n\n\n\n\n\n\nsubscribers\n\n\n33\n\n\nMore subscribers = more popular project\n\n\n\n\n\n\nstars\n\n\n0\n\n\nMore stars = more popular project\n\n\n\n\n\n\nforks\n\n\n0\n\n\nMore forks = more people seem to use/modify this project\n\n\n\n\n\n\nhas_mit_license\n\n\n20\n\n\nfastlane is MIT licensed, it's good to have plugins use MIT too\n\n\n\n\n\n\nreadme_score\n\n\n50\n\n\nHow well is the README of the document written\n\n\n\n\n\n\nage\n\n\n1\n\n\nProject that have been around for longer tend to be more stable\n\n\n\n\n\n\nmajor_release\n\n\n0\n\n\nPost 1.0 releases are great\n\n\n\n\n\n\ngithub_issues\n\n\n0\n\n\nLots of open issues are not a good sign usually, unless the project is really popular\n\n\n\n\n\n\ndownloads\n\n\n1\n\n\nMore downloads = more users have been using the plugin for a while\n\n\n\n\n\n\ntests\n\n\n9\n\n\nThe more tests a plugin has, the better\n\n\n\n\n\n\n\n\n\n\n\n\n  \nOpen on GitHub\n\n\n\n\n\n\n\n\n125\n\n\n\nftp\n\n\n\nvia Allan Vialatte\n\n\n\n\n\nSimple ftp upload and download for Fastlane\n\n\n\n\n\n\nScore details\n\n\n\n\n\n\n\n\nMetric\n\n\nPoints\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\ncontributors\n\n\n12\n\n\nThe more contributors a project has, the more likely it is it stays alive\n\n\n\n\n\n\nsubscribers\n\n\n3\n\n\nMore subscribers = more popular project\n\n\n\n\n\n\nstars\n\n\n15\n\n\nMore stars = more popular project\n\n\n\n\n\n\nforks\n\n\n10\n\n\nMore forks = more people seem to use/modify this project\n\n\n\n\n\n\nhas_mit_license\n\n\n20\n\n\nfastlane is MIT licensed, it's good to have plugins use MIT too\n\n\n\n\n\n\nreadme_score\n\n\n50\n\n\nHow well is the README of the document written\n\n\n\n\n\n\nage\n\n\n6\n\n\nProject that have been around for longer tend to be more stable\n\n\n\n\n\n\nmajor_release\n\n\n0\n\n\nPost 1.0 releases are great\n\n\n\n\n\n\ngithub_issues\n\n\n-2\n\n\nLots of open issues are not a good sign usually, unless the project is really popular\n\n\n\n\n\n\ndownloads\n\n\n8\n\n\nMore downloads = more users have been using the plugin for a while\n\n\n\n\n\n\ntests\n\n\n3\n\n\nThe more tests a plugin has, the better\n\n\n\n\n\n\n\n\n\n\n\n\n  \nOpen on GitHub\n\n\n\n\n\n\n\n\n123\n\n\n\nonesky\n\n\n\nvia Daniel Kiedrowski\n\n\n\n\n\nHelps to update the translations of your app using the OneSky service.\n\n\n\n\n\n\nScore details\n\n\n\n\n\n\n\n\nMetric\n\n\nPoints\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\ncontributors\n\n\n6\n\n\nThe more contributors a project has, the more likely it is it stays alive\n\n\n\n\n\n\nsubscribers\n\n\n3\n\n\nMore subscribers = more popular project\n\n\n\n\n\n\nstars\n\n\n9\n\n\nMore stars = more popular project\n\n\n\n\n\n\nforks\n\n\n25\n\n\nMore forks = more people seem to use/modify this project\n\n\n\n\n\n\nhas_mit_license\n\n\n20\n\n\nfastlane is MIT licensed, it's good to have plugins use MIT too\n\n\n\n\n\n\nreadme_score\n\n\n50\n\n\nHow well is the README of the document written\n\n\n\n\n\n\nage\n\n\n4\n\n\nProject that have been around for longer tend to be more stable\n\n\n\n\n\n\nmajor_release\n\n\n0\n\n\nPost 1.0 releases are great\n\n\n\n\n\n\ngithub_issues\n\n\n-1\n\n\nLots of open issues are not a good sign usually, unless the project is really popular\n\n\n\n\n\n\ndownloads\n\n\n4\n\n\nMore downloads = more users have been using the plugin for a while\n\n\n\n\n\n\ntests\n\n\n3\n\n\nThe more tests a plugin has, the better\n\n\n\n\n\n\n\n\n\n\n\n\n  \nOpen on GitHub\n\n\n\n\n\n\n\n\n122\n\n\n\nruby\n\n\n\nvia Felix Krause\n\n\n\n\n\nUseful fastlane actions for Ruby projects\n\n\n\n\n\n\nScore details\n\n\n\n\n\n\n\n\nMetric\n\n\nPoints\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\ncontributors\n\n\n6\n\n\nThe more contributors a project has, the more likely it is it stays alive\n\n\n\n\n\n\nsubscribers\n\n\n3\n\n\nMore subscribers = more popular project\n\n\n\n\n\n\nstars\n\n\n3\n\n\nMore stars = more popular project\n\n\n\n\n\n\nforks\n\n\n5\n\n\nMore forks = more people seem to use/modify this project\n\n\n\n\n\n\nhas_mit_license\n\n\n20\n\n\nfastlane is MIT licensed, it's good to have plugins use MIT too\n\n\n\n\n\n\nreadme_score\n\n\n50\n\n\nHow well is the README of the document written\n\n\n\n\n\n\nage\n\n\n7\n\n\nProject that have been around for longer tend to be more stable\n\n\n\n\n\n\nmajor_release\n\n\n0\n\n\nPost 1.0 releases are great\n\n\n\n\n\n\ngithub_issues\n\n\n0\n\n\nLots of open issues are not a good sign usually, unless the project is really popular\n\n\n\n\n\n\ndownloads\n\n\n28\n\n\nMore downloads = more users have been using the plugin for a while\n\n\n\n\n\n\ntests\n\n\n0\n\n\nThe more tests a plugin has, the better\n\n\n\n\n\n\n\n\n\n\n\n\n  \nOpen on GitHub\n\n\n\n\n\n\n\n\n122\n\n\n\ngiffy\n\n\n\nvia SiarheiFiedartsou\n\n\n\n\n\nFastlane plugin for Giffy.com API\n\n\n\n\n\n\nScore details\n\n\n\n\n\n\n\n\nMetric\n\n\nPoints\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\ncontributors\n\n\n12\n\n\nThe more contributors a project has, the more likely it is it stays alive\n\n\n\n\n\n\nsubscribers\n\n\n3\n\n\nMore subscribers = more popular project\n\n\n\n\n\n\nstars\n\n\n6\n\n\nMore stars = more popular project\n\n\n\n\n\n\nforks\n\n\n5\n\n\nMore forks = more people seem to use/modify this project\n\n\n\n\n\n\nhas_mit_license\n\n\n20\n\n\nfastlane is MIT licensed, it's good to have plugins use MIT too\n\n\n\n\n\n\nreadme_score\n\n\n50\n\n\nHow well is the README of the document written\n\n\n\n\n\n\nage\n\n\n5\n\n\nProject that have been around for longer tend to be more stable\n\n\n\n\n\n\nmajor_release\n\n\n0\n\n\nPost 1.0 releases are great\n\n\n\n\n\n\ngithub_issues\n\n\n0\n\n\nLots of open issues are not a good sign usually, unless the project is really popular\n\n\n\n\n\n\ndownloads\n\n\n9\n\n\nMore downloads = more users have been using the plugin for a while\n\n\n\n\n\n\ntests\n\n\n12\n\n\nThe more tests a plugin has, the better\n\n\n\n\n\n\n\n\n\n\n\n\n  \nOpen on GitHub\n\n\n\n\n\n\n\n\n122\n\n\n\ndownload_github_release_asset\n\n\n\nvia Anton Domashnev\n\n\n\n\n\nThis action downloads a GitHub release's asset using the GitHub API and puts it in a destination path.\\nIf the file has been previously downloaded, it will be overrided.\n\n\n\n\n\n\nScore details\n\n\n\n\n\n\n\n\nMetric\n\n\nPoints\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\ncontributors\n\n\n6\n\n\nThe more contributors a project has, the more likely it is it stays alive\n\n\n\n\n\n\nsubscribers\n\n\n3\n\n\nMore subscribers = more popular project\n\n\n\n\n\n\nstars\n\n\n2\n\n\nMore stars = more popular project\n\n\n\n\n\n\nforks\n\n\n0\n\n\nMore forks = more people seem to use/modify this project\n\n\n\n\n\n\nhas_mit_license\n\n\n20\n\n\nfastlane is MIT licensed, it's good to have plugins use MIT too\n\n\n\n\n\n\nreadme_score\n\n\n50\n\n\nHow well is the README of the document written\n\n\n\n\n\n\nage\n\n\n4\n\n\nProject that have been around for longer tend to be more stable\n\n\n\n\n\n\nmajor_release\n\n\n30\n\n\nPost 1.0 releases are great\n\n\n\n\n\n\ngithub_issues\n\n\n0\n\n\nLots of open issues are not a good sign usually, unless the project is really popular\n\n\n\n\n\n\ndownloads\n\n\n1\n\n\nMore downloads = more users have been using the plugin for a while\n\n\n\n\n\n\ntests\n\n\n6\n\n\nThe more tests a plugin has, the better\n\n\n\n\n\n\n\n\n\n\n\n\n  \nOpen on GitHub\n\n\n\n\n\n\n\n\n121\n\n\n\nandroid_versioning\n\n\n\nvia Manabu OHTAKE\n\n\n\n\n\nAllows to set/get app version name and version code directly to/from build.gradle\n\n\n\n\n\n\nScore details\n\n\n\n\n\n\n\n\nMetric\n\n\nPoints\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\ncontributors\n\n\n12\n\n\nThe more contributors a project has, the more likely it is it stays alive\n\n\n\n\n\n\nsubscribers\n\n\n3\n\n\nMore subscribers = more popular project\n\n\n\n\n\n\nstars\n\n\n6\n\n\nMore stars = more popular project\n\n\n\n\n\n\nforks\n\n\n10\n\n\nMore forks = more people seem to use/modify this project\n\n\n\n\n\n\nhas_mit_license\n\n\n20\n\n\nfastlane is MIT licensed, it's good to have plugins use MIT too\n\n\n\n\n\n\nreadme_score\n\n\n25\n\n\nHow well is the README of the document written\n\n\n\n\n\n\nage\n\n\n2\n\n\nProject that have been around for longer tend to be more stable\n\n\n\n\n\n\nmajor_release\n\n\n0\n\n\nPost 1.0 releases are great\n\n\n\n\n\n\ngithub_issues\n\n\n0\n\n\nLots of open issues are not a good sign usually, unless the project is really popular\n\n\n\n\n\n\ndownloads\n\n\n10\n\n\nMore downloads = more users have been using the plugin for a while\n\n\n\n\n\n\ntests\n\n\n33\n\n\nThe more tests a plugin has, the better\n\n\n\n\n\n\n\n\n\n\n\n\n  \nOpen on GitHub\n\n\n\n\n\n\n\n\n120\n\n\n\nprepare_build_resources\n\n\n\nvia Jakob Jensen\n\n\n\n\n\nPrepares certificates and provisioning profiles for building and removes them afterwards.\n\n\n\n\n\n\nScore details\n\n\n\n\n\n\n\n\nMetric\n\n\nPoints\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\ncontributors\n\n\n18\n\n\nThe more contributors a project has, the more likely it is it stays alive\n\n\n\n\n\n\nsubscribers\n\n\n9\n\n\nMore subscribers = more popular project\n\n\n\n\n\n\nstars\n\n\n5\n\n\nMore stars = more popular project\n\n\n\n\n\n\nforks\n\n\n5\n\n\nMore forks = more people seem to use/modify this project\n\n\n\n\n\n\nhas_mit_license\n\n\n-50\n\n\nfastlane is MIT licensed, it's good to have plugins use MIT too\n\n\n\n\n\n\nreadme_score\n\n\n50\n\n\nHow well is the README of the document written\n\n\n\n\n\n\nage\n\n\n6\n\n\nProject that have been around for longer tend to be more stable\n\n\n\n\n\n\nmajor_release\n\n\n30\n\n\nPost 1.0 releases are great\n\n\n\n\n\n\ngithub_issues\n\n\n0\n\n\nLots of open issues are not a good sign usually, unless the project is really popular\n\n\n\n\n\n\ndownloads\n\n\n38\n\n\nMore downloads = more users have been using the plugin for a while\n\n\n\n\n\n\ntests\n\n\n9\n\n\nThe more tests a plugin has, the better\n\n\n\n\n\n\n\n\n\n\n\n\n  \nOpen on GitHub\n\n\n\n\n\n\n\n\n120\n\n\n\nstore_sizer\n\n\n\nvia Marcelo Oliveira\n\n\n\n\n\nEstimates download and install sizes for your app, also checks if sizes fit the requirements\n\n\n\n\n\n\nScore details\n\n\n\n\n\n\n\n\nMetric\n\n\nPoints\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\ncontributors\n\n\n6\n\n\nThe more contributors a project has, the more likely it is it stays alive\n\n\n\n\n\n\nsubscribers\n\n\n0\n\n\nMore subscribers = more popular project\n\n\n\n\n\n\nstars\n\n\n4\n\n\nMore stars = more popular project\n\n\n\n\n\n\nforks\n\n\n0\n\n\nMore forks = more people seem to use/modify this project\n\n\n\n\n\n\nhas_mit_license\n\n\n20\n\n\nfastlane is MIT licensed, it's good to have plugins use MIT too\n\n\n\n\n\n\nreadme_score\n\n\n50\n\n\nHow well is the README of the document written\n\n\n\n\n\n\nage\n\n\n0\n\n\nProject that have been around for longer tend to be more stable\n\n\n\n\n\n\nmajor_release\n\n\n0\n\n\nPost 1.0 releases are great\n\n\n\n\n\n\ngithub_issues\n\n\n0\n\n\nLots of open issues are not a good sign usually, unless the project is really popular\n\n\n\n\n\n\ndownloads\n\n\n1\n\n\nMore downloads = more users have been using the plugin for a while\n\n\n\n\n\n\ntests\n\n\n39\n\n\nThe more tests a plugin has, the better\n\n\n\n\n\n\n\n\n\n\n\n\n  \nOpen on GitHub\n\n\n\n\n\n\n\n\n119\n\n\n\ncryptex\n\n\n\nvia Helmut Januschka\n\n\n\n\n\nfastlane Crypt Store Git repo\n\n\n\n\n\n\nScore details\n\n\n\n\n\n\n\n\nMetric\n\n\nPoints\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\ncontributors\n\n\n12\n\n\nThe more contributors a project has, the more likely it is it stays alive\n\n\n\n\n\n\nsubscribers\n\n\n9\n\n\nMore subscribers = more popular project\n\n\n\n\n\n\nstars\n\n\n9\n\n\nMore stars = more popular project\n\n\n\n\n\n\nforks\n\n\n5\n\n\nMore forks = more people seem to use/modify this project\n\n\n\n\n\n\nhas_mit_license\n\n\n20\n\n\nfastlane is MIT licensed, it's good to have plugins use MIT too\n\n\n\n\n\n\nreadme_score\n\n\n50\n\n\nHow well is the README of the document written\n\n\n\n\n\n\nage\n\n\n4\n\n\nProject that have been around for longer tend to be more stable\n\n\n\n\n\n\nmajor_release\n\n\n0\n\n\nPost 1.0 releases are great\n\n\n\n\n\n\ngithub_issues\n\n\n0\n\n\nLots of open issues are not a good sign usually, unless the project is really popular\n\n\n\n\n\n\ndownloads\n\n\n7\n\n\nMore downloads = more users have been using the plugin for a while\n\n\n\n\n\n\ntests\n\n\n3\n\n\nThe more tests a plugin has, the better\n\n\n\n\n\n\n\n\n\n\n\n\n  \nOpen on GitHub\n\n\n\n\n\n\n\n\n119\n\n\n\nbugsee\n\n\n\nvia Dmitry Fink\n\n\n\n\n\nBugsee symbols uploader\n\n\n\n\n\n\nScore details\n\n\n\n\n\n\n\n\nMetric\n\n\nPoints\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\ncontributors\n\n\n6\n\n\nThe more contributors a project has, the more likely it is it stays alive\n\n\n\n\n\n\nsubscribers\n\n\n3\n\n\nMore subscribers = more popular project\n\n\n\n\n\n\nstars\n\n\n1\n\n\nMore stars = more popular project\n\n\n\n\n\n\nforks\n\n\n0\n\n\nMore forks = more people seem to use/modify this project\n\n\n\n\n\n\nhas_mit_license\n\n\n20\n\n\nfastlane is MIT licensed, it's good to have plugins use MIT too\n\n\n\n\n\n\nreadme_score\n\n\n50\n\n\nHow well is the README of the document written\n\n\n\n\n\n\nage\n\n\n3\n\n\nProject that have been around for longer tend to be more stable\n\n\n\n\n\n\nmajor_release\n\n\n30\n\n\nPost 1.0 releases are great\n\n\n\n\n\n\ngithub_issues\n\n\n0\n\n\nLots of open issues are not a good sign usually, unless the project is really popular\n\n\n\n\n\n\ndownloads\n\n\n3\n\n\nMore downloads = more users have been using the plugin for a while\n\n\n\n\n\n\ntests\n\n\n3\n\n\nThe more tests a plugin has, the better\n\n\n\n\n\n\n\n\n\n\n\n\n  \nOpen on GitHub\n\n\n\n\n\n\n\n\n117\n\n\n\nprovisioning\n\n\n\nvia Pawel Jankowski\n\n\n\n\n\nHelps provision your app in the CI environment\n\n\n\n\n\n\nScore details\n\n\n\n\n\n\n\n\nMetric\n\n\nPoints\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\ncontributors\n\n\n6\n\n\nThe more contributors a project has, the more likely it is it stays alive\n\n\n\n\n\n\nsubscribers\n\n\n3\n\n\nMore subscribers = more popular project\n\n\n\n\n\n\nstars\n\n\n0\n\n\nMore stars = more popular project\n\n\n\n\n\n\nforks\n\n\n0\n\n\nMore forks = more people seem to use/modify this project\n\n\n\n\n\n\nhas_mit_license\n\n\n20\n\n\nfastlane is MIT licensed, it's good to have plugins use MIT too\n\n\n\n\n\n\nreadme_score\n\n\n50\n\n\nHow well is the README of the document written\n\n\n\n\n\n\nage\n\n\n3\n\n\nProject that have been around for longer tend to be more stable\n\n\n\n\n\n\nmajor_release\n\n\n30\n\n\nPost 1.0 releases are great\n\n\n\n\n\n\ngithub_issues\n\n\n0\n\n\nLots of open issues are not a good sign usually, unless the project is really popular\n\n\n\n\n\n\ndownloads\n\n\n2\n\n\nMore downloads = more users have been using the plugin for a while\n\n\n\n\n\n\ntests\n\n\n3\n\n\nThe more tests a plugin has, the better\n\n\n\n\n\n\n\n\n\n\n\n\n  \nOpen on GitHub\n\n\n\n\n\n\n\n\n117\n\n\n\ncode_push\n\n\n\nvia Manuel Koch\n\n\n\n\n\nCodePush functionality for fastlane\n\n\n\n\n\n\nScore details\n\n\n\n\n\n\n\n\nMetric\n\n\nPoints\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\ncontributors\n\n\n12\n\n\nThe more contributors a project has, the more likely it is it stays alive\n\n\n\n\n\n\nsubscribers\n\n\n3\n\n\nMore subscribers = more popular project\n\n\n\n\n\n\nstars\n\n\n10\n\n\nMore stars = more popular project\n\n\n\n\n\n\nforks\n\n\n10\n\n\nMore forks = more people seem to use/modify this project\n\n\n\n\n\n\nhas_mit_license\n\n\n20\n\n\nfastlane is MIT licensed, it's good to have plugins use MIT too\n\n\n\n\n\n\nreadme_score\n\n\n50\n\n\nHow well is the README of the document written\n\n\n\n\n\n\nage\n\n\n2\n\n\nProject that have been around for longer tend to be more stable\n\n\n\n\n\n\nmajor_release\n\n\n0\n\n\nPost 1.0 releases are great\n\n\n\n\n\n\ngithub_issues\n\n\n0\n\n\nLots of open issues are not a good sign usually, unless the project is really popular\n\n\n\n\n\n\ndownloads\n\n\n4\n\n\nMore downloads = more users have been using the plugin for a while\n\n\n\n\n\n\ntests\n\n\n6\n\n\nThe more tests a plugin has, the better\n\n\n\n\n\n\n\n\n\n\n\n\n  \nOpen on GitHub\n\n\n\n\n\n\n\n\n117\n\n\n\nmerge_junit_report\n\n\n\nvia Derek Yang\n\n\n\n\n\nMerges multiple junit reports into one\n\n\n\n\n\n\nScore details\n\n\n\n\n\n\n\n\nMetric\n\n\nPoints\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\ncontributors\n\n\n6\n\n\nThe more contributors a project has, the more likely it is it stays alive\n\n\n\n\n\n\nsubscribers\n\n\n3\n\n\nMore subscribers = more popular project\n\n\n\n\n\n\nstars\n\n\n0\n\n\nMore stars = more popular project\n\n\n\n\n\n\nforks\n\n\n0\n\n\nMore forks = more people seem to use/modify this project\n\n\n\n\n\n\nhas_mit_license\n\n\n20\n\n\nfastlane is MIT licensed, it's good to have plugins use MIT too\n\n\n\n\n\n\nreadme_score\n\n\n50\n\n\nHow well is the README of the document written\n\n\n\n\n\n\nage\n\n\n2\n\n\nProject that have been around for longer tend to be more stable\n\n\n\n\n\n\nmajor_release\n\n\n0\n\n\nPost 1.0 releases are great\n\n\n\n\n\n\ngithub_issues\n\n\n0\n\n\nLots of open issues are not a good sign usually, unless the project is really popular\n\n\n\n\n\n\ndownloads\n\n\n6\n\n\nMore downloads = more users have been using the plugin for a while\n\n\n\n\n\n\ntests\n\n\n30\n\n\nThe more tests a plugin has, the better\n\n\n\n\n\n\n\n\n\n\n\n\n  \nOpen on GitHub\n\n\n\n\n\n\n\n\n115\n\n\n\ninstabug\n\n\n\nvia Siarhei Fiedartsou\n\n\n\n\n\nUploads dSYM to Instabug\n\n\n\n\n\n\nScore details\n\n\n\n\n\n\n\n\nMetric\n\n\nPoints\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\ncontributors\n\n\n6\n\n\nThe more contributors a project has, the more likely it is it stays alive\n\n\n\n\n\n\nsubscribers\n\n\n3\n\n\nMore subscribers = more popular project\n\n\n\n\n\n\nstars\n\n\n1\n\n\nMore stars = more popular project\n\n\n\n\n\n\nforks\n\n\n0\n\n\nMore forks = more people seem to use/modify this project\n\n\n\n\n\n\nhas_mit_license\n\n\n20\n\n\nfastlane is MIT licensed, it's good to have plugins use MIT too\n\n\n\n\n\n\nreadme_score\n\n\n50\n\n\nHow well is the README of the document written\n\n\n\n\n\n\nage\n\n\n7\n\n\nProject that have been around for longer tend to be more stable\n\n\n\n\n\n\nmajor_release\n\n\n0\n\n\nPost 1.0 releases are great\n\n\n\n\n\n\ngithub_issues\n\n\n0\n\n\nLots of open issues are not a good sign usually, unless the project is really popular\n\n\n\n\n\n\ndownloads\n\n\n7\n\n\nMore downloads = more users have been using the plugin for a while\n\n\n\n\n\n\ntests\n\n\n21\n\n\nThe more tests a plugin has, the better\n\n\n\n\n\n\n\n\n\n\n\n\n  \nOpen on GitHub\n\n\n\n\n\n\n\n\n115\n\n\n\nascii_art\n\n\n\nvia Boris Bu\u0308gling\n\n\n\n\n\nAdd some fun to your fastlane output.\n\n\n\n\n\n\nScore details\n\n\n\n\n\n\n\n\nMetric\n\n\nPoints\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\ncontributors\n\n\n6\n\n\nThe more contributors a project has, the more likely it is it stays alive\n\n\n\n\n\n\nsubscribers\n\n\n6\n\n\nMore subscribers = more popular project\n\n\n\n\n\n\nstars\n\n\n19\n\n\nMore stars = more popular project\n\n\n\n\n\n\nforks\n\n\n0\n\n\nMore forks = more people seem to use/modify this project\n\n\n\n\n\n\nhas_mit_license\n\n\n20\n\n\nfastlane is MIT licensed, it's good to have plugins use MIT too\n\n\n\n\n\n\nreadme_score\n\n\n50\n\n\nHow well is the README of the document written\n\n\n\n\n\n\nage\n\n\n7\n\n\nProject that have been around for longer tend to be more stable\n\n\n\n\n\n\nmajor_release\n\n\n0\n\n\nPost 1.0 releases are great\n\n\n\n\n\n\ngithub_issues\n\n\n0\n\n\nLots of open issues are not a good sign usually, unless the project is really popular\n\n\n\n\n\n\ndownloads\n\n\n4\n\n\nMore downloads = more users have been using the plugin for a while\n\n\n\n\n\n\ntests\n\n\n3\n\n\nThe more tests a plugin has, the better\n\n\n\n\n\n\n\n\n\n\n\n\n  \nOpen on GitHub\n\n\n\n\n\n\n\n\n115\n\n\n\nreview_time\n\n\n\nvia timwredwards\n\n\n\n\n\nFetches live iOS and macOS review times from appreviewtimes.com\n\n\n\n\n\n\nScore details\n\n\n\n\n\n\n\n\nMetric\n\n\nPoints\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\ncontributors\n\n\n12\n\n\nThe more contributors a project has, the more likely it is it stays alive\n\n\n\n\n\n\nsubscribers\n\n\n3\n\n\nMore subscribers = more popular project\n\n\n\n\n\n\nstars\n\n\n12\n\n\nMore stars = more popular project\n\n\n\n\n\n\nforks\n\n\n5\n\n\nMore forks = more people seem to use/modify this project\n\n\n\n\n\n\nhas_mit_license\n\n\n20\n\n\nfastlane is MIT licensed, it's good to have plugins use MIT too\n\n\n\n\n\n\nreadme_score\n\n\n50\n\n\nHow well is the README of the document written\n\n\n\n\n\n\nage\n\n\n1\n\n\nProject that have been around for longer tend to be more stable\n\n\n\n\n\n\nmajor_release\n\n\n0\n\n\nPost 1.0 releases are great\n\n\n\n\n\n\ngithub_issues\n\n\n0\n\n\nLots of open issues are not a good sign usually, unless the project is really popular\n\n\n\n\n\n\ndownloads\n\n\n9\n\n\nMore downloads = more users have been using the plugin for a while\n\n\n\n\n\n\ntests\n\n\n3\n\n\nThe more tests a plugin has, the better\n\n\n\n\n\n\n\n\n\n\n\n\n  \nOpen on GitHub\n\n\n\n\n\n\n\n\n114\n\n\n\nbranding\n\n\n\nvia Stefan Natchev\n\n\n\n\n\nAdd some branding to your fastlane output\n\n\n\n\n\n\nScore details\n\n\n\n\n\n\n\n\nMetric\n\n\nPoints\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\ncontributors\n\n\n12\n\n\nThe more contributors a project has, the more likely it is it stays alive\n\n\n\n\n\n\nsubscribers\n\n\n3\n\n\nMore subscribers = more popular project\n\n\n\n\n\n\nstars\n\n\n10\n\n\nMore stars = more popular project\n\n\n\n\n\n\nforks\n\n\n0\n\n\nMore forks = more people seem to use/modify this project\n\n\n\n\n\n\nhas_mit_license\n\n\n20\n\n\nfastlane is MIT licensed, it's good to have plugins use MIT too\n\n\n\n\n\n\nreadme_score\n\n\n50\n\n\nHow well is the README of the document written\n\n\n\n\n\n\nage\n\n\n6\n\n\nProject that have been around for longer tend to be more stable\n\n\n\n\n\n\nmajor_release\n\n\n0\n\n\nPost 1.0 releases are great\n\n\n\n\n\n\ngithub_issues\n\n\n0\n\n\nLots of open issues are not a good sign usually, unless the project is really popular\n\n\n\n\n\n\ndownloads\n\n\n10\n\n\nMore downloads = more users have been using the plugin for a while\n\n\n\n\n\n\ntests\n\n\n3\n\n\nThe more tests a plugin has, the better\n\n\n\n\n\n\n\n\n\n\n\n\n  \nOpen on GitHub\n\n\n\n\n\n\n\n\n114\n\n\n\ndemo_mode\n\n\n\nvia Florian Rauscha\n\n\n\n\n\nSets your connected android devices to demo mode\n\n\n\n\n\n\nScore details\n\n\n\n\n\n\n\n\nMetric\n\n\nPoints\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\ncontributors\n\n\n6\n\n\nThe more contributors a project has, the more likely it is it stays alive\n\n\n\n\n\n\nsubscribers\n\n\n3\n\n\nMore subscribers = more popular project\n\n\n\n\n\n\nstars\n\n\n0\n\n\nMore stars = more popular project\n\n\n\n\n\n\nforks\n\n\n0\n\n\nMore forks = more people seem to use/modify this project\n\n\n\n\n\n\nhas_mit_license\n\n\n20\n\n\nfastlane is MIT licensed, it's good to have plugins use MIT too\n\n\n\n\n\n\nreadme_score\n\n\n50\n\n\nHow well is the README of the document written\n\n\n\n\n\n\nage\n\n\n1\n\n\nProject that have been around for longer tend to be more stable\n\n\n\n\n\n\nmajor_release\n\n\n30\n\n\nPost 1.0 releases are great\n\n\n\n\n\n\ngithub_issues\n\n\n0\n\n\nLots of open issues are not a good sign usually, unless the project is really popular\n\n\n\n\n\n\ndownloads\n\n\n1\n\n\nMore downloads = more users have been using the plugin for a while\n\n\n\n\n\n\ntests\n\n\n3\n\n\nThe more tests a plugin has, the better\n\n\n\n\n\n\n\n\n\n\n\n\n  \nOpen on GitHub\n\n\n\n\n\n\n\n\n114\n\n\n\nbrew\n\n\n\nvia Michael Ruhl\n\n\n\n\n\nRun Homebrew/Linuxbrew command\n\n\n\n\n\n\nScore details\n\n\n\n\n\n\n\n\nMetric\n\n\nPoints\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\ncontributors\n\n\n6\n\n\nThe more contributors a project has, the more likely it is it stays alive\n\n\n\n\n\n\nsubscribers\n\n\n33\n\n\nMore subscribers = more popular project\n\n\n\n\n\n\nstars\n\n\n0\n\n\nMore stars = more popular project\n\n\n\n\n\n\nforks\n\n\n0\n\n\nMore forks = more people seem to use/modify this project\n\n\n\n\n\n\nhas_mit_license\n\n\n20\n\n\nfastlane is MIT licensed, it's good to have plugins use MIT too\n\n\n\n\n\n\nreadme_score\n\n\n50\n\n\nHow well is the README of the document written\n\n\n\n\n\n\nage\n\n\n1\n\n\nProject that have been around for longer tend to be more stable\n\n\n\n\n\n\nmajor_release\n\n\n0\n\n\nPost 1.0 releases are great\n\n\n\n\n\n\ngithub_issues\n\n\n0\n\n\nLots of open issues are not a good sign usually, unless the project is really popular\n\n\n\n\n\n\ndownloads\n\n\n1\n\n\nMore downloads = more users have been using the plugin for a while\n\n\n\n\n\n\ntests\n\n\n3\n\n\nThe more tests a plugin has, the better\n\n\n\n\n\n\n\n\n\n\n\n\n  \nOpen on GitHub\n\n\n\n\n\n\n\n\n114\n\n\n\ntranslation\n\n\n\nvia Jakob Jensen\n\n\n\n\n\nHandling translations from Google sheet.\n\n\n\n\n\n\nScore details\n\n\n\n\n\n\n\n\nMetric\n\n\nPoints\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\ncontributors\n\n\n18\n\n\nThe more contributors a project has, the more likely it is it stays alive\n\n\n\n\n\n\nsubscribers\n\n\n6\n\n\nMore subscribers = more popular project\n\n\n\n\n\n\nstars\n\n\n0\n\n\nMore stars = more popular project\n\n\n\n\n\n\nforks\n\n\n5\n\n\nMore forks = more people seem to use/modify this project\n\n\n\n\n\n\nhas_mit_license\n\n\n20\n\n\nfastlane is MIT licensed, it's good to have plugins use MIT too\n\n\n\n\n\n\nreadme_score\n\n\n25\n\n\nHow well is the README of the document written\n\n\n\n\n\n\nage\n\n\n3\n\n\nProject that have been around for longer tend to be more stable\n\n\n\n\n\n\nmajor_release\n\n\n30\n\n\nPost 1.0 releases are great\n\n\n\n\n\n\ngithub_issues\n\n\n0\n\n\nLots of open issues are not a good sign usually, unless the project is really popular\n\n\n\n\n\n\ndownloads\n\n\n4\n\n\nMore downloads = more users have been using the plugin for a while\n\n\n\n\n\n\ntests\n\n\n3\n\n\nThe more tests a plugin has, the better\n\n\n\n\n\n\n\n\n\n\n\n\n  \nOpen on GitHub\n\n\n\n\n\n\n\n\n113\n\n\n\nlatest_hockeyapp_version_number\n\n\n\nvia Travis Palmer\n\n\n\n\n\nEasily fetch the most recent HockeyApp version number for your app\n\n\n\n\n\n\nScore details\n\n\n\n\n\n\n\n\nMetric\n\n\nPoints\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\ncontributors\n\n\n6\n\n\nThe more contributors a project has, the more likely it is it stays alive\n\n\n\n\n\n\nsubscribers\n\n\n3\n\n\nMore subscribers = more popular project\n\n\n\n\n\n\nstars\n\n\n6\n\n\nMore stars = more popular project\n\n\n\n\n\n\nforks\n\n\n5\n\n\nMore forks = more people seem to use/modify this project\n\n\n\n\n\n\nhas_mit_license\n\n\n20\n\n\nfastlane is MIT licensed, it's good to have plugins use MIT too\n\n\n\n\n\n\nreadme_score\n\n\n25\n\n\nHow well is the README of the document written\n\n\n\n\n\n\nage\n\n\n6\n\n\nProject that have been around for longer tend to be more stable\n\n\n\n\n\n\nmajor_release\n\n\n30\n\n\nPost 1.0 releases are great\n\n\n\n\n\n\ngithub_issues\n\n\n-4\n\n\nLots of open issues are not a good sign usually, unless the project is really popular\n\n\n\n\n\n\ndownloads\n\n\n10\n\n\nMore downloads = more users have been using the plugin for a while\n\n\n\n\n\n\ntests\n\n\n6\n\n\nThe more tests a plugin has, the better\n\n\n\n\n\n\n\n\n\n\n\n\n  \nOpen on GitHub\n\n\n\n\n\n\n\n\n113\n\n\n\ncommit_android_version_bump\n\n\n\nvia jems\n\n\n\n\n\nThis Android plugins allow you to commit every modification done in your build.gradle file during the execution of a lane. In fast, it do the same as the commit_version_bump action, but for Android\n\n\n\n\n\n\nScore details\n\n\n\n\n\n\n\n\nMetric\n\n\nPoints\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\ncontributors\n\n\n12\n\n\nThe more contributors a project has, the more likely it is it stays alive\n\n\n\n\n\n\nsubscribers\n\n\n3\n\n\nMore subscribers = more popular project\n\n\n\n\n\n\nstars\n\n\n2\n\n\nMore stars = more popular project\n\n\n\n\n\n\nforks\n\n\n10\n\n\nMore forks = more people seem to use/modify this project\n\n\n\n\n\n\nhas_mit_license\n\n\n20\n\n\nfastlane is MIT licensed, it's good to have plugins use MIT too\n\n\n\n\n\n\nreadme_score\n\n\n25\n\n\nHow well is the README of the document written\n\n\n\n\n\n\nage\n\n\n6\n\n\nProject that have been around for longer tend to be more stable\n\n\n\n\n\n\nmajor_release\n\n\n0\n\n\nPost 1.0 releases are great\n\n\n\n\n\n\ngithub_issues\n\n\n0\n\n\nLots of open issues are not a good sign usually, unless the project is really popular\n\n\n\n\n\n\ndownloads\n\n\n32\n\n\nMore downloads = more users have been using the plugin for a while\n\n\n\n\n\n\ntests\n\n\n3\n\n\nThe more tests a plugin has, the better\n\n\n\n\n\n\n\n\n\n\n\n\n  \nOpen on GitHub\n\n\n\n\n\n\n\n\n113\n\n\n\ndocker\n\n\n\nvia Manu Wallner\n\n\n\n\n\nfastlane Actions to support building images, logging into Docker Hub, and pushing those images to the Hub\n\n\n\n\n\n\nScore details\n\n\n\n\n\n\n\n\nMetric\n\n\nPoints\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\ncontributors\n\n\n12\n\n\nThe more contributors a project has, the more likely it is it stays alive\n\n\n\n\n\n\nsubscribers\n\n\n3\n\n\nMore subscribers = more popular project\n\n\n\n\n\n\nstars\n\n\n6\n\n\nMore stars = more popular project\n\n\n\n\n\n\nforks\n\n\n10\n\n\nMore forks = more people seem to use/modify this project\n\n\n\n\n\n\nhas_mit_license\n\n\n20\n\n\nfastlane is MIT licensed, it's good to have plugins use MIT too\n\n\n\n\n\n\nreadme_score\n\n\n50\n\n\nHow well is the README of the document written\n\n\n\n\n\n\nage\n\n\n4\n\n\nProject that have been around for longer tend to be more stable\n\n\n\n\n\n\nmajor_release\n\n\n0\n\n\nPost 1.0 releases are great\n\n\n\n\n\n\ngithub_issues\n\n\n0\n\n\nLots of open issues are not a good sign usually, unless the project is really popular\n\n\n\n\n\n\ndownloads\n\n\n5\n\n\nMore downloads = more users have been using the plugin for a while\n\n\n\n\n\n\ntests\n\n\n3\n\n\nThe more tests a plugin has, the better\n\n\n\n\n\n\n\n\n\n\n\n\n  \nOpen on GitHub\n\n\n\n\n\n\n\n\n112\n\n\n\nfirebase\n\n\n\nvia Tomas Kohout\n\n\n\n\n\nUnofficial tool to access Firebase project settings\n\n\n\n\n\n\nScore details\n\n\n\n\n\n\n\n\nMetric\n\n\nPoints\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\ncontributors\n\n\n6\n\n\nThe more contributors a project has, the more likely it is it stays alive\n\n\n\n\n\n\nsubscribers\n\n\n6\n\n\nMore subscribers = more popular project\n\n\n\n\n\n\nstars\n\n\n15\n\n\nMore stars = more popular project\n\n\n\n\n\n\nforks\n\n\n10\n\n\nMore forks = more people seem to use/modify this project\n\n\n\n\n\n\nhas_mit_license\n\n\n20\n\n\nfastlane is MIT licensed, it's good to have plugins use MIT too\n\n\n\n\n\n\nreadme_score\n\n\n50\n\n\nHow well is the README of the document written\n\n\n\n\n\n\nage\n\n\n1\n\n\nProject that have been around for longer tend to be more stable\n\n\n\n\n\n\nmajor_release\n\n\n0\n\n\nPost 1.0 releases are great\n\n\n\n\n\n\ngithub_issues\n\n\n-1\n\n\nLots of open issues are not a good sign usually, unless the project is really popular\n\n\n\n\n\n\ndownloads\n\n\n2\n\n\nMore downloads = more users have been using the plugin for a while\n\n\n\n\n\n\ntests\n\n\n3\n\n\nThe more tests a plugin has, the better\n\n\n\n\n\n\n\n\n\n\n\n\n  \nOpen on GitHub\n\n\n\n\n\n\n\n\n112\n\n\n\nnapp_distribution\n\n\n\nvia Mads M\u00f8ller\n\n\n\n\n\nUpload IPA AND APK builds to Napp Distribution\n\n\n\n\n\n\nScore details\n\n\n\n\n\n\n\n\nMetric\n\n\nPoints\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\ncontributors\n\n\n6\n\n\nThe more contributors a project has, the more likely it is it stays alive\n\n\n\n\n\n\nsubscribers\n\n\n0\n\n\nMore subscribers = more popular project\n\n\n\n\n\n\nstars\n\n\n0\n\n\nMore stars = more popular project\n\n\n\n\n\n\nforks\n\n\n0\n\n\nMore forks = more people seem to use/modify this project\n\n\n\n\n\n\nhas_mit_license\n\n\n20\n\n\nfastlane is MIT licensed, it's good to have plugins use MIT too\n\n\n\n\n\n\nreadme_score\n\n\n50\n\n\nHow well is the README of the document written\n\n\n\n\n\n\nage\n\n\n1\n\n\nProject that have been around for longer tend to be more stable\n\n\n\n\n\n\nmajor_release\n\n\n30\n\n\nPost 1.0 releases are great\n\n\n\n\n\n\ngithub_issues\n\n\n0\n\n\nLots of open issues are not a good sign usually, unless the project is really popular\n\n\n\n\n\n\ndownloads\n\n\n2\n\n\nMore downloads = more users have been using the plugin for a while\n\n\n\n\n\n\ntests\n\n\n3\n\n\nThe more tests a plugin has, the better\n\n\n\n\n\n\n\n\n\n\n\n\n  \nOpen on GitHub\n\n\n\n\n\n\n\n\n112\n\n\n\nionic_integration\n\n\n\nvia Adrian Regan\n\n\n\n\n\nIntegrating Fastlane with Ionic Generated Projects\n\n\n\n\n\n\nScore details\n\n\n\n\n\n\n\n\nMetric\n\n\nPoints\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\ncontributors\n\n\n6\n\n\nThe more contributors a project has, the more likely it is it stays alive\n\n\n\n\n\n\nsubscribers\n\n\n6\n\n\nMore subscribers = more popular project\n\n\n\n\n\n\nstars\n\n\n11\n\n\nMore stars = more popular project\n\n\n\n\n\n\nforks\n\n\n0\n\n\nMore forks = more people seem to use/modify this project\n\n\n\n\n\n\nhas_mit_license\n\n\n20\n\n\nfastlane is MIT licensed, it's good to have plugins use MIT too\n\n\n\n\n\n\nreadme_score\n\n\n50\n\n\nHow well is the README of the document written\n\n\n\n\n\n\nage\n\n\n1\n\n\nProject that have been around for longer tend to be more stable\n\n\n\n\n\n\nmajor_release\n\n\n0\n\n\nPost 1.0 releases are great\n\n\n\n\n\n\ngithub_issues\n\n\n0\n\n\nLots of open issues are not a good sign usually, unless the project is really popular\n\n\n\n\n\n\ndownloads\n\n\n3\n\n\nMore downloads = more users have been using the plugin for a while\n\n\n\n\n\n\ntests\n\n\n15\n\n\nThe more tests a plugin has, the better\n\n\n\n\n\n\n\n\n\n\n\n\n  \nOpen on GitHub\n\n\n\n\n\n\n\n\n110\n\n\n\nraven\n\n\n\nvia Marten Klitzke\n\n\n\n\n\nPlugin to manage Releases and upload JS Sourcemaps\n\n\n\n\n\n\nScore details\n\n\n\n\n\n\n\n\nMetric\n\n\nPoints\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\ncontributors\n\n\n18\n\n\nThe more contributors a project has, the more likely it is it stays alive\n\n\n\n\n\n\nsubscribers\n\n\n24\n\n\nMore subscribers = more popular project\n\n\n\n\n\n\nstars\n\n\n2\n\n\nMore stars = more popular project\n\n\n\n\n\n\nforks\n\n\n5\n\n\nMore forks = more people seem to use/modify this project\n\n\n\n\n\n\nhas_mit_license\n\n\n20\n\n\nfastlane is MIT licensed, it's good to have plugins use MIT too\n\n\n\n\n\n\nreadme_score\n\n\n25\n\n\nHow well is the README of the document written\n\n\n\n\n\n\nage\n\n\n2\n\n\nProject that have been around for longer tend to be more stable\n\n\n\n\n\n\nmajor_release\n\n\n0\n\n\nPost 1.0 releases are great\n\n\n\n\n\n\ngithub_issues\n\n\n-1\n\n\nLots of open issues are not a good sign usually, unless the project is really popular\n\n\n\n\n\n\ndownloads\n\n\n12\n\n\nMore downloads = more users have been using the plugin for a while\n\n\n\n\n\n\ntests\n\n\n3\n\n\nThe more tests a plugin has, the better\n\n\n\n\n\n\n\n\n\n\n\n\n  \nOpen on GitHub\n\n\n\n\n\n\n\n\n110\n\n\n\nlocalization\n\n\n\nvia Viktor Malyi\n\n\n\n\n\nExport/import app localizations with help of xcodebuild -exportLocalizations/-importLocalizations tool\n\n\n\n\n\n\nScore details\n\n\n\n\n\n\n\n\nMetric\n\n\nPoints\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\ncontributors\n\n\n6\n\n\nThe more contributors a project has, the more likely it is it stays alive\n\n\n\n\n\n\nsubscribers\n\n\n0\n\n\nMore subscribers = more popular project\n\n\n\n\n\n\nstars\n\n\n7\n\n\nMore stars = more popular project\n\n\n\n\n\n\nforks\n\n\n10\n\n\nMore forks = more people seem to use/modify this project\n\n\n\n\n\n\nhas_mit_license\n\n\n20\n\n\nfastlane is MIT licensed, it's good to have plugins use MIT too\n\n\n\n\n\n\nreadme_score\n\n\n50\n\n\nHow well is the README of the document written\n\n\n\n\n\n\nage\n\n\n6\n\n\nProject that have been around for longer tend to be more stable\n\n\n\n\n\n\nmajor_release\n\n\n0\n\n\nPost 1.0 releases are great\n\n\n\n\n\n\ngithub_issues\n\n\n-1\n\n\nLots of open issues are not a good sign usually, unless the project is really popular\n\n\n\n\n\n\ndownloads\n\n\n9\n\n\nMore downloads = more users have been using the plugin for a while\n\n\n\n\n\n\ntests\n\n\n3\n\n\nThe more tests a plugin has, the better\n\n\n\n\n\n\n\n\n\n\n\n\n  \nOpen on GitHub\n\n\n\n\n\n\n\n\n106\n\n\n\nya_tu_sabes\n\n\n\nvia Boris Bu\u0308gling\n\n\n\n\n\nYa tu sabes.\n\n\n\n\n\n\nScore details\n\n\n\n\n\n\n\n\nMetric\n\n\nPoints\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\ncontributors\n\n\n12\n\n\nThe more contributors a project has, the more likely it is it stays alive\n\n\n\n\n\n\nsubscribers\n\n\n3\n\n\nMore subscribers = more popular project\n\n\n\n\n\n\nstars\n\n\n7\n\n\nMore stars = more popular project\n\n\n\n\n\n\nforks\n\n\n5\n\n\nMore forks = more people seem to use/modify this project\n\n\n\n\n\n\nhas_mit_license\n\n\n20\n\n\nfastlane is MIT licensed, it's good to have plugins use MIT too\n\n\n\n\n\n\nreadme_score\n\n\n50\n\n\nHow well is the README of the document written\n\n\n\n\n\n\nage\n\n\n7\n\n\nProject that have been around for longer tend to be more stable\n\n\n\n\n\n\nmajor_release\n\n\n0\n\n\nPost 1.0 releases are great\n\n\n\n\n\n\ngithub_issues\n\n\n0\n\n\nLots of open issues are not a good sign usually, unless the project is really popular\n\n\n\n\n\n\ndownloads\n\n\n2\n\n\nMore downloads = more users have been using the plugin for a while\n\n\n\n\n\n\ntests\n\n\n0\n\n\nThe more tests a plugin has, the better\n\n\n\n\n\n\n\n\n\n\n\n\n  \nOpen on GitHub\n\n\n\n\n\n\n\n\n106\n\n\n\npgyer\n\n\n\nvia rexshi\n\n\n\n\n\ndistribute app to pgyer beta testing service\n\n\n\n\n\n\nScore details\n\n\n\n\n\n\n\n\nMetric\n\n\nPoints\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\ncontributors\n\n\n6\n\n\nThe more contributors a project has, the more likely it is it stays alive\n\n\n\n\n\n\nsubscribers\n\n\n3\n\n\nMore subscribers = more popular project\n\n\n\n\n\n\nstars\n\n\n6\n\n\nMore stars = more popular project\n\n\n\n\n\n\nforks\n\n\n10\n\n\nMore forks = more people seem to use/modify this project\n\n\n\n\n\n\nhas_mit_license\n\n\n20\n\n\nfastlane is MIT licensed, it's good to have plugins use MIT too\n\n\n\n\n\n\nreadme_score\n\n\n50\n\n\nHow well is the README of the document written\n\n\n\n\n\n\nage\n\n\n3\n\n\nProject that have been around for longer tend to be more stable\n\n\n\n\n\n\nmajor_release\n\n\n0\n\n\nPost 1.0 releases are great\n\n\n\n\n\n\ngithub_issues\n\n\n-1\n\n\nLots of open issues are not a good sign usually, unless the project is really popular\n\n\n\n\n\n\ndownloads\n\n\n6\n\n\nMore downloads = more users have been using the plugin for a while\n\n\n\n\n\n\ntests\n\n\n3\n\n\nThe more tests a plugin has, the better\n\n\n\n\n\n\n\n\n\n\n\n\n  \nOpen on GitHub\n\n\n\n\n\n\n\n\n106\n\n\n\njira_versions\n\n\n\nvia Sandy Chapman\n\n\n\n\n\nManage your JIRA project's releases/versions with this plugin.\n\n\n\n\n\n\nScore details\n\n\n\n\n\n\n\n\nMetric\n\n\nPoints\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\ncontributors\n\n\n6\n\n\nThe more contributors a project has, the more likely it is it stays alive\n\n\n\n\n\n\nsubscribers\n\n\n3\n\n\nMore subscribers = more popular project\n\n\n\n\n\n\nstars\n\n\n3\n\n\nMore stars = more popular project\n\n\n\n\n\n\nforks\n\n\n5\n\n\nMore forks = more people seem to use/modify this project\n\n\n\n\n\n\nhas_mit_license\n\n\n20\n\n\nfastlane is MIT licensed, it's good to have plugins use MIT too\n\n\n\n\n\n\nreadme_score\n\n\n50\n\n\nHow well is the README of the document written\n\n\n\n\n\n\nage\n\n\n5\n\n\nProject that have been around for longer tend to be more stable\n\n\n\n\n\n\nmajor_release\n\n\n0\n\n\nPost 1.0 releases are great\n\n\n\n\n\n\ngithub_issues\n\n\n-1\n\n\nLots of open issues are not a good sign usually, unless the project is really popular\n\n\n\n\n\n\ndownloads\n\n\n12\n\n\nMore downloads = more users have been using the plugin for a while\n\n\n\n\n\n\ntests\n\n\n3\n\n\nThe more tests a plugin has, the better\n\n\n\n\n\n\n\n\n\n\n\n\n  \nOpen on GitHub\n\n\n\n\n\n\n\n\n106\n\n\n\npretty_junit\n\n\n\nvia GaryJohnson\n\n\n\n\n\nPretty JUnit test results for your Android projects.\n\n\n\n\n\n\nScore details\n\n\n\n\n\n\n\n\nMetric\n\n\nPoints\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\ncontributors\n\n\n6\n\n\nThe more contributors a project has, the more likely it is it stays alive\n\n\n\n\n\n\nsubscribers\n\n\n21\n\n\nMore subscribers = more popular project\n\n\n\n\n\n\nstars\n\n\n0\n\n\nMore stars = more popular project\n\n\n\n\n\n\nforks\n\n\n0\n\n\nMore forks = more people seem to use/modify this project\n\n\n\n\n\n\nhas_mit_license\n\n\n20\n\n\nfastlane is MIT licensed, it's good to have plugins use MIT too\n\n\n\n\n\n\nreadme_score\n\n\n25\n\n\nHow well is the README of the document written\n\n\n\n\n\n\nage\n\n\n5\n\n\nProject that have been around for longer tend to be more stable\n\n\n\n\n\n\nmajor_release\n\n\n0\n\n\nPost 1.0 releases are great\n\n\n\n\n\n\ngithub_issues\n\n\n0\n\n\nLots of open issues are not a good sign usually, unless the project is really popular\n\n\n\n\n\n\ndownloads\n\n\n26\n\n\nMore downloads = more users have been using the plugin for a while\n\n\n\n\n\n\ntests\n\n\n3\n\n\nThe more tests a plugin has, the better\n\n\n\n\n\n\n\n\n\n\n\n\n  \nOpen on GitHub\n\n\n\n\n\n\n\n\n106\n\n\n\npoeditor_export\n\n\n\nvia James Campbell\n\n\n\n\n\nExports translations from POEditor.com\n\n\n\n\n\n\nScore details\n\n\n\n\n\n\n\n\nMetric\n\n\nPoints\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\ncontributors\n\n\n6\n\n\nThe more contributors a project has, the more likely it is it stays alive\n\n\n\n\n\n\nsubscribers\n\n\n6\n\n\nMore subscribers = more popular project\n\n\n\n\n\n\nstars\n\n\n7\n\n\nMore stars = more popular project\n\n\n\n\n\n\nforks\n\n\n0\n\n\nMore forks = more people seem to use/modify this project\n\n\n\n\n\n\nhas_mit_license\n\n\n20\n\n\nfastlane is MIT licensed, it's good to have plugins use MIT too\n\n\n\n\n\n\nreadme_score\n\n\n50\n\n\nHow well is the README of the document written\n\n\n\n\n\n\nage\n\n\n6\n\n\nProject that have been around for longer tend to be more stable\n\n\n\n\n\n\nmajor_release\n\n\n0\n\n\nPost 1.0 releases are great\n\n\n\n\n\n\ngithub_issues\n\n\n0\n\n\nLots of open issues are not a good sign usually, unless the project is really popular\n\n\n\n\n\n\ndownloads\n\n\n8\n\n\nMore downloads = more users have been using the plugin for a while\n\n\n\n\n\n\ntests\n\n\n3\n\n\nThe more tests a plugin has, the better\n\n\n\n\n\n\n\n\n\n\n\n\n  \nOpen on GitHub\n\n\n\n\n\n\n\n\n104\n\n\n\nlatest_hockey_build_number\n\n\n\nvia Sergii Stotskyi, Kirill Pahnev\n\n\n\n\n\nGets latest version number of the app with the bundle id from HockeyApp\n\n\n\n\n\n\nScore details\n\n\n\n\n\n\n\n\nMetric\n\n\nPoints\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\ncontributors\n\n\n12\n\n\nThe more contributors a project has, the more likely it is it stays alive\n\n\n\n\n\n\nsubscribers\n\n\n3\n\n\nMore subscribers = more popular project\n\n\n\n\n\n\nstars\n\n\n1\n\n\nMore stars = more popular project\n\n\n\n\n\n\nforks\n\n\n0\n\n\nMore forks = more people seem to use/modify this project\n\n\n\n\n\n\nhas_mit_license\n\n\n20\n\n\nfastlane is MIT licensed, it's good to have plugins use MIT too\n\n\n\n\n\n\nreadme_score\n\n\n50\n\n\nHow well is the README of the document written\n\n\n\n\n\n\nage\n\n\n5\n\n\nProject that have been around for longer tend to be more stable\n\n\n\n\n\n\nmajor_release\n\n\n0\n\n\nPost 1.0 releases are great\n\n\n\n\n\n\ngithub_issues\n\n\n0\n\n\nLots of open issues are not a good sign usually, unless the project is really popular\n\n\n\n\n\n\ndownloads\n\n\n10\n\n\nMore downloads = more users have been using the plugin for a while\n\n\n\n\n\n\ntests\n\n\n3\n\n\nThe more tests a plugin has, the better\n\n\n\n\n\n\n\n\n\n\n\n\n  \nOpen on GitHub\n\n\n\n\n\n\n\n\n102\n\n\n\nget_version_code\n\n\n\nvia Jems\n\n\n\n\n\nGet the version code of anAndroid project. This action will return the version code of your project according to the one set in your build.gradle file\n\n\n\n\n\n\nScore details\n\n\n\n\n\n\n\n\nMetric\n\n\nPoints\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\ncontributors\n\n\n6\n\n\nThe more contributors a project has, the more likely it is it stays alive\n\n\n\n\n\n\nsubscribers\n\n\n3\n\n\nMore subscribers = more popular project\n\n\n\n\n\n\nstars\n\n\n2\n\n\nMore stars = more popular project\n\n\n\n\n\n\nforks\n\n\n15\n\n\nMore forks = more people seem to use/modify this project\n\n\n\n\n\n\nhas_mit_license\n\n\n20\n\n\nfastlane is MIT licensed, it's good to have plugins use MIT too\n\n\n\n\n\n\nreadme_score\n\n\n25\n\n\nHow well is the README of the document written\n\n\n\n\n\n\nage\n\n\n6\n\n\nProject that have been around for longer tend to be more stable\n\n\n\n\n\n\nmajor_release\n\n\n0\n\n\nPost 1.0 releases are great\n\n\n\n\n\n\ngithub_issues\n\n\n0\n\n\nLots of open issues are not a good sign usually, unless the project is really popular\n\n\n\n\n\n\ndownloads\n\n\n22\n\n\nMore downloads = more users have been using the plugin for a while\n\n\n\n\n\n\ntests\n\n\n3\n\n\nThe more tests a plugin has, the better\n\n\n\n\n\n\n\n\n\n\n\n\n  \nOpen on GitHub\n\n\n\n\n\n\n\n\n102\n\n\n\nclang_analyzer\n\n\n\nvia Siarhei Fiedartsou\n\n\n\n\n\nRuns Clang Static Analyzer(http://clang-analyzer.llvm.org/) and generates report\n\n\n\n\n\n\nScore details\n\n\n\n\n\n\n\n\nMetric\n\n\nPoints\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\ncontributors\n\n\n6\n\n\nThe more contributors a project has, the more likely it is it stays alive\n\n\n\n\n\n\nsubscribers\n\n\n3\n\n\nMore subscribers = more popular project\n\n\n\n\n\n\nstars\n\n\n3\n\n\nMore stars = more popular project\n\n\n\n\n\n\nforks\n\n\n5\n\n\nMore forks = more people seem to use/modify this project\n\n\n\n\n\n\nhas_mit_license\n\n\n20\n\n\nfastlane is MIT licensed, it's good to have plugins use MIT too\n\n\n\n\n\n\nreadme_score\n\n\n50\n\n\nHow well is the README of the document written\n\n\n\n\n\n\nage\n\n\n5\n\n\nProject that have been around for longer tend to be more stable\n\n\n\n\n\n\nmajor_release\n\n\n0\n\n\nPost 1.0 releases are great\n\n\n\n\n\n\ngithub_issues\n\n\n0\n\n\nLots of open issues are not a good sign usually, unless the project is really popular\n\n\n\n\n\n\ndownloads\n\n\n4\n\n\nMore downloads = more users have been using the plugin for a while\n\n\n\n\n\n\ntests\n\n\n6\n\n\nThe more tests a plugin has, the better\n\n\n\n\n\n\n\n\n\n\n\n\n  \nOpen on GitHub\n\n\n\n\n\n\n\n\n102\n\n\n\ntunes\n\n\n\nvia Boris Bu\u0308gling\n\n\n\n\n\nPlay music using fastlane, because you can.\n\n\n\n\n\n\nScore details\n\n\n\n\n\n\n\n\nMetric\n\n\nPoints\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\ncontributors\n\n\n6\n\n\nThe more contributors a project has, the more likely it is it stays alive\n\n\n\n\n\n\nsubscribers\n\n\n6\n\n\nMore subscribers = more popular project\n\n\n\n\n\n\nstars\n\n\n6\n\n\nMore stars = more popular project\n\n\n\n\n\n\nforks\n\n\n5\n\n\nMore forks = more people seem to use/modify this project\n\n\n\n\n\n\nhas_mit_license\n\n\n20\n\n\nfastlane is MIT licensed, it's good to have plugins use MIT too\n\n\n\n\n\n\nreadme_score\n\n\n50\n\n\nHow well is the README of the document written\n\n\n\n\n\n\nage\n\n\n7\n\n\nProject that have been around for longer tend to be more stable\n\n\n\n\n\n\nmajor_release\n\n\n0\n\n\nPost 1.0 releases are great\n\n\n\n\n\n\ngithub_issues\n\n\n0\n\n\nLots of open issues are not a good sign usually, unless the project is really popular\n\n\n\n\n\n\ndownloads\n\n\n2\n\n\nMore downloads = more users have been using the plugin for a while\n\n\n\n\n\n\ntests\n\n\n0\n\n\nThe more tests a plugin has, the better\n\n\n\n\n\n\n\n\n\n\n\n\n  \nOpen on GitHub\n\n\n\n\n\n\n\n\n100\n\n\n\nchangelog_generator\n\n\n\nvia Fernando Saragoca\n\n\n\n\n\nChangelog generation based on merged pull requests \n tags\n\n\n\n\n\n\nScore details\n\n\n\n\n\n\n\n\nMetric\n\n\nPoints\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\ncontributors\n\n\n12\n\n\nThe more contributors a project has, the more likely it is it stays alive\n\n\n\n\n\n\nsubscribers\n\n\n0\n\n\nMore subscribers = more popular project\n\n\n\n\n\n\nstars\n\n\n6\n\n\nMore stars = more popular project\n\n\n\n\n\n\nforks\n\n\n5\n\n\nMore forks = more people seem to use/modify this project\n\n\n\n\n\n\nhas_mit_license\n\n\n20\n\n\nfastlane is MIT licensed, it's good to have plugins use MIT too\n\n\n\n\n\n\nreadme_score\n\n\n50\n\n\nHow well is the README of the document written\n\n\n\n\n\n\nage\n\n\n3\n\n\nProject that have been around for longer tend to be more stable\n\n\n\n\n\n\nmajor_release\n\n\n0\n\n\nPost 1.0 releases are great\n\n\n\n\n\n\ngithub_issues\n\n\n-2\n\n\nLots of open issues are not a good sign usually, unless the project is really popular\n\n\n\n\n\n\ndownloads\n\n\n6\n\n\nMore downloads = more users have been using the plugin for a while\n\n\n\n\n\n\ntests\n\n\n0\n\n\nThe more tests a plugin has, the better\n\n\n\n\n\n\n\n\n\n\n\n\n  \nOpen on GitHub\n\n\n\n\n\n\n\n\n99\n\n\n\nno_u\n\n\n\nvia Boris Bu\u0308gling\n\n\n\n\n\nno u\n\n\n\n\n\n\nScore details\n\n\n\n\n\n\n\n\nMetric\n\n\nPoints\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\ncontributors\n\n\n6\n\n\nThe more contributors a project has, the more likely it is it stays alive\n\n\n\n\n\n\nsubscribers\n\n\n3\n\n\nMore subscribers = more popular project\n\n\n\n\n\n\nstars\n\n\n3\n\n\nMore stars = more popular project\n\n\n\n\n\n\nforks\n\n\n0\n\n\nMore forks = more people seem to use/modify this project\n\n\n\n\n\n\nhas_mit_license\n\n\n20\n\n\nfastlane is MIT licensed, it's good to have plugins use MIT too\n\n\n\n\n\n\nreadme_score\n\n\n50\n\n\nHow well is the README of the document written\n\n\n\n\n\n\nage\n\n\n7\n\n\nProject that have been around for longer tend to be more stable\n\n\n\n\n\n\nmajor_release\n\n\n0\n\n\nPost 1.0 releases are great\n\n\n\n\n\n\ngithub_issues\n\n\n0\n\n\nLots of open issues are not a good sign usually, unless the project is really popular\n\n\n\n\n\n\ndownloads\n\n\n7\n\n\nMore downloads = more users have been using the plugin for a while\n\n\n\n\n\n\ntests\n\n\n3\n\n\nThe more tests a plugin has, the better\n\n\n\n\n\n\n\n\n\n\n\n\n  \nOpen on GitHub\n\n\n\n\n\n\n\n\n99\n\n\n\ninfluxdb\n\n\n\nvia giginet\n\n\n\n\n\nPost values to IndluxDB\n\n\n\n\n\n\nScore details\n\n\n\n\n\n\n\n\nMetric\n\n\nPoints\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\ncontributors\n\n\n12\n\n\nThe more contributors a project has, the more likely it is it stays alive\n\n\n\n\n\n\nsubscribers\n\n\n3\n\n\nMore subscribers = more popular project\n\n\n\n\n\n\nstars\n\n\n0\n\n\nMore stars = more popular project\n\n\n\n\n\n\nforks\n\n\n5\n\n\nMore forks = more people seem to use/modify this project\n\n\n\n\n\n\nhas_mit_license\n\n\n20\n\n\nfastlane is MIT licensed, it's good to have plugins use MIT too\n\n\n\n\n\n\nreadme_score\n\n\n50\n\n\nHow well is the README of the document written\n\n\n\n\n\n\nage\n\n\n2\n\n\nProject that have been around for longer tend to be more stable\n\n\n\n\n\n\nmajor_release\n\n\n0\n\n\nPost 1.0 releases are great\n\n\n\n\n\n\ngithub_issues\n\n\n0\n\n\nLots of open issues are not a good sign usually, unless the project is really popular\n\n\n\n\n\n\ndownloads\n\n\n1\n\n\nMore downloads = more users have been using the plugin for a while\n\n\n\n\n\n\ntests\n\n\n6\n\n\nThe more tests a plugin has, the better\n\n\n\n\n\n\n\n\n\n\n\n\n  \nOpen on GitHub\n\n\n\n\n\n\n\n\n96\n\n\n\nupload_symbols_to_hockey\n\n\n\nvia Justin Williams\n\n\n\n\n\nUpload dSYM symbolication files to Hockey\n\n\n\n\n\n\nScore details\n\n\n\n\n\n\n\n\nMetric\n\n\nPoints\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\ncontributors\n\n\n6\n\n\nThe more contributors a project has, the more likely it is it stays alive\n\n\n\n\n\n\nsubscribers\n\n\n3\n\n\nMore subscribers = more popular project\n\n\n\n\n\n\nstars\n\n\n1\n\n\nMore stars = more popular project\n\n\n\n\n\n\nforks\n\n\n0\n\n\nMore forks = more people seem to use/modify this project\n\n\n\n\n\n\nhas_mit_license\n\n\n20\n\n\nfastlane is MIT licensed, it's good to have plugins use MIT too\n\n\n\n\n\n\nreadme_score\n\n\n50\n\n\nHow well is the README of the document written\n\n\n\n\n\n\nage\n\n\n6\n\n\nProject that have been around for longer tend to be more stable\n\n\n\n\n\n\nmajor_release\n\n\n0\n\n\nPost 1.0 releases are great\n\n\n\n\n\n\ngithub_issues\n\n\n0\n\n\nLots of open issues are not a good sign usually, unless the project is really popular\n\n\n\n\n\n\ndownloads\n\n\n7\n\n\nMore downloads = more users have been using the plugin for a while\n\n\n\n\n\n\ntests\n\n\n3\n\n\nThe more tests a plugin has, the better\n\n\n\n\n\n\n\n\n\n\n\n\n  \nOpen on GitHub\n\n\n\n\n\n\n\n\n96\n\n\n\ngit_status\n\n\n\nvia Bruno Coelho\n\n\n\n\n\nShow the status of one or multiple files/directories\n\n\n\n\n\n\nScore details\n\n\n\n\n\n\n\n\nMetric\n\n\nPoints\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\ncontributors\n\n\n6\n\n\nThe more contributors a project has, the more likely it is it stays alive\n\n\n\n\n\n\nsubscribers\n\n\n3\n\n\nMore subscribers = more popular project\n\n\n\n\n\n\nstars\n\n\n0\n\n\nMore stars = more popular project\n\n\n\n\n\n\nforks\n\n\n0\n\n\nMore forks = more people seem to use/modify this project\n\n\n\n\n\n\nhas_mit_license\n\n\n20\n\n\nfastlane is MIT licensed, it's good to have plugins use MIT too\n\n\n\n\n\n\nreadme_score\n\n\n50\n\n\nHow well is the README of the document written\n\n\n\n\n\n\nage\n\n\n3\n\n\nProject that have been around for longer tend to be more stable\n\n\n\n\n\n\nmajor_release\n\n\n0\n\n\nPost 1.0 releases are great\n\n\n\n\n\n\ngithub_issues\n\n\n0\n\n\nLots of open issues are not a good sign usually, unless the project is really popular\n\n\n\n\n\n\ndownloads\n\n\n5\n\n\nMore downloads = more users have been using the plugin for a while\n\n\n\n\n\n\ntests\n\n\n9\n\n\nThe more tests a plugin has, the better\n\n\n\n\n\n\n\n\n\n\n\n\n  \nOpen on GitHub\n\n\n\n\n\n\n\n\n95\n\n\n\nreport\n\n\n\nvia Bruno Migue\u0302ns\n\n\n\n\n\nAfter an action, like scan for instance, you're able to generate a report file. This fastlane plugin gives you a way to upload and share your report using Slack.\n\n\n\n\n\n\nScore details\n\n\n\n\n\n\n\n\nMetric\n\n\nPoints\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\ncontributors\n\n\n6\n\n\nThe more contributors a project has, the more likely it is it stays alive\n\n\n\n\n\n\nsubscribers\n\n\n3\n\n\nMore subscribers = more popular project\n\n\n\n\n\n\nstars\n\n\n2\n\n\nMore stars = more popular project\n\n\n\n\n\n\nforks\n\n\n0\n\n\nMore forks = more people seem to use/modify this project\n\n\n\n\n\n\nhas_mit_license\n\n\n20\n\n\nfastlane is MIT licensed, it's good to have plugins use MIT too\n\n\n\n\n\n\nreadme_score\n\n\n50\n\n\nHow well is the README of the document written\n\n\n\n\n\n\nage\n\n\n2\n\n\nProject that have been around for longer tend to be more stable\n\n\n\n\n\n\nmajor_release\n\n\n0\n\n\nPost 1.0 releases are great\n\n\n\n\n\n\ngithub_issues\n\n\n0\n\n\nLots of open issues are not a good sign usually, unless the project is really popular\n\n\n\n\n\n\ndownloads\n\n\n9\n\n\nMore downloads = more users have been using the plugin for a while\n\n\n\n\n\n\ntests\n\n\n3\n\n\nThe more tests a plugin has, the better\n\n\n\n\n\n\n\n\n\n\n\n\n  \nOpen on GitHub\n\n\n\n\n\n\n\n\n95\n\n\n\nbadge\n\n\n\nvia Daniel Griesser\n\n\n\n\n\nAdd a badge overlay to your app icon\n\n\n\n\n\n\nScore details\n\n\n\n\n\n\n\n\nMetric\n\n\nPoints\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\ncontributors\n\n\n6\n\n\nThe more contributors a project has, the more likely it is it stays alive\n\n\n\n\n\n\nsubscribers\n\n\n0\n\n\nMore subscribers = more popular project\n\n\n\n\n\n\nstars\n\n\n2\n\n\nMore stars = more popular project\n\n\n\n\n\n\nforks\n\n\n0\n\n\nMore forks = more people seem to use/modify this project\n\n\n\n\n\n\nhas_mit_license\n\n\n20\n\n\nfastlane is MIT licensed, it's good to have plugins use MIT too\n\n\n\n\n\n\nreadme_score\n\n\n50\n\n\nHow well is the README of the document written\n\n\n\n\n\n\nage\n\n\n3\n\n\nProject that have been around for longer tend to be more stable\n\n\n\n\n\n\nmajor_release\n\n\n0\n\n\nPost 1.0 releases are great\n\n\n\n\n\n\ngithub_issues\n\n\n-1\n\n\nLots of open issues are not a good sign usually, unless the project is really popular\n\n\n\n\n\n\ndownloads\n\n\n12\n\n\nMore downloads = more users have been using the plugin for a while\n\n\n\n\n\n\ntests\n\n\n3\n\n\nThe more tests a plugin has, the better\n\n\n\n\n\n\n\n\n\n\n\n\n  \nOpen on GitHub\n\n\n\n\n\n\n\n\n95\n\n\n\nrocket_chat\n\n\n\nvia Thiago Felix\n\n\n\n\n\nSend message to Rocket.Chat right from fastlane\n\n\n\n\n\n\nScore details\n\n\n\n\n\n\n\n\nMetric\n\n\nPoints\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\ncontributors\n\n\n6\n\n\nThe more contributors a project has, the more likely it is it stays alive\n\n\n\n\n\n\nsubscribers\n\n\n0\n\n\nMore subscribers = more popular project\n\n\n\n\n\n\nstars\n\n\n4\n\n\nMore stars = more popular project\n\n\n\n\n\n\nforks\n\n\n0\n\n\nMore forks = more people seem to use/modify this project\n\n\n\n\n\n\nhas_mit_license\n\n\n20\n\n\nfastlane is MIT licensed, it's good to have plugins use MIT too\n\n\n\n\n\n\nreadme_score\n\n\n50\n\n\nHow well is the README of the document written\n\n\n\n\n\n\nage\n\n\n5\n\n\nProject that have been around for longer tend to be more stable\n\n\n\n\n\n\nmajor_release\n\n\n0\n\n\nPost 1.0 releases are great\n\n\n\n\n\n\ngithub_issues\n\n\n-1\n\n\nLots of open issues are not a good sign usually, unless the project is really popular\n\n\n\n\n\n\ndownloads\n\n\n2\n\n\nMore downloads = more users have been using the plugin for a while\n\n\n\n\n\n\ntests\n\n\n9\n\n\nThe more tests a plugin has, the better\n\n\n\n\n\n\n\n\n\n\n\n\n  \nOpen on GitHub\n\n\n\n\n\n\n\n\n94\n\n\n\nbluepill\n\n\n\nvia tbrand\n\n\n\n\n\nFastlane plugin to use bluepill in fastlane\n\n\n\n\n\n\nScore details\n\n\n\n\n\n\n\n\nMetric\n\n\nPoints\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\ncontributors\n\n\n0\n\n\nThe more contributors a project has, the more likely it is it stays alive\n\n\n\n\n\n\nsubscribers\n\n\n9\n\n\nMore subscribers = more popular project\n\n\n\n\n\n\nstars\n\n\n7\n\n\nMore stars = more popular project\n\n\n\n\n\n\nforks\n\n\n0\n\n\nMore forks = more people seem to use/modify this project\n\n\n\n\n\n\nhas_mit_license\n\n\n20\n\n\nfastlane is MIT licensed, it's good to have plugins use MIT too\n\n\n\n\n\n\nreadme_score\n\n\n50\n\n\nHow well is the README of the document written\n\n\n\n\n\n\nage\n\n\n2\n\n\nProject that have been around for longer tend to be more stable\n\n\n\n\n\n\nmajor_release\n\n\n0\n\n\nPost 1.0 releases are great\n\n\n\n\n\n\ngithub_issues\n\n\n0\n\n\nLots of open issues are not a good sign usually, unless the project is really popular\n\n\n\n\n\n\ndownloads\n\n\n3\n\n\nMore downloads = more users have been using the plugin for a while\n\n\n\n\n\n\ntests\n\n\n3\n\n\nThe more tests a plugin has, the better\n\n\n\n\n\n\n\n\n\n\n\n\n  \nOpen on GitHub\n\n\n\n\n\n\n\n\n94\n\n\n\ncertificate_expirydate\n\n\n\nvia Lyndsey Ferguson\n\n\n\n\n\nRetrieves the expiry date of the given p12 certificate file\n\n\n\n\n\n\nScore details\n\n\n\n\n\n\n\n\nMetric\n\n\nPoints\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\ncontributors\n\n\n6\n\n\nThe more contributors a project has, the more likely it is it stays alive\n\n\n\n\n\n\nsubscribers\n\n\n0\n\n\nMore subscribers = more popular project\n\n\n\n\n\n\nstars\n\n\n0\n\n\nMore stars = more popular project\n\n\n\n\n\n\nforks\n\n\n0\n\n\nMore forks = more people seem to use/modify this project\n\n\n\n\n\n\nhas_mit_license\n\n\n20\n\n\nfastlane is MIT licensed, it's good to have plugins use MIT too\n\n\n\n\n\n\nreadme_score\n\n\n50\n\n\nHow well is the README of the document written\n\n\n\n\n\n\nage\n\n\n1\n\n\nProject that have been around for longer tend to be more stable\n\n\n\n\n\n\nmajor_release\n\n\n0\n\n\nPost 1.0 releases are great\n\n\n\n\n\n\ngithub_issues\n\n\n0\n\n\nLots of open issues are not a good sign usually, unless the project is really popular\n\n\n\n\n\n\ndownloads\n\n\n5\n\n\nMore downloads = more users have been using the plugin for a while\n\n\n\n\n\n\ntests\n\n\n12\n\n\nThe more tests a plugin has, the better\n\n\n\n\n\n\n\n\n\n\n\n\n  \nOpen on GitHub\n\n\n\n\n\n\n\n\n93\n\n\n\ncode_static_analyzer\n\n\n\nvia Olga Kniazska\n\n\n\n\n\nRuns different Static Analyzers and generate report\n\n\n\n\n\n\nScore details\n\n\n\n\n\n\n\n\nMetric\n\n\nPoints\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\ncontributors\n\n\n6\n\n\nThe more contributors a project has, the more likely it is it stays alive\n\n\n\n\n\n\nsubscribers\n\n\n3\n\n\nMore subscribers = more popular project\n\n\n\n\n\n\nstars\n\n\n3\n\n\nMore stars = more popular project\n\n\n\n\n\n\nforks\n\n\n0\n\n\nMore forks = more people seem to use/modify this project\n\n\n\n\n\n\nhas_mit_license\n\n\n20\n\n\nfastlane is MIT licensed, it's good to have plugins use MIT too\n\n\n\n\n\n\nreadme_score\n\n\n50\n\n\nHow well is the README of the document written\n\n\n\n\n\n\nage\n\n\n3\n\n\nProject that have been around for longer tend to be more stable\n\n\n\n\n\n\nmajor_release\n\n\n0\n\n\nPost 1.0 releases are great\n\n\n\n\n\n\ngithub_issues\n\n\n0\n\n\nLots of open issues are not a good sign usually, unless the project is really popular\n\n\n\n\n\n\ndownloads\n\n\n5\n\n\nMore downloads = more users have been using the plugin for a while\n\n\n\n\n\n\ntests\n\n\n3\n\n\nThe more tests a plugin has, the better\n\n\n\n\n\n\n\n\n\n\n\n\n  \nOpen on GitHub\n\n\n\n\n\n\n\n\n93\n\n\n\ngit_tags\n\n\n\nvia Fernando Saragoca\n\n\n\n\n\nList git tags sorted by taggerdate\n\n\n\n\n\n\nScore details\n\n\n\n\n\n\n\n\nMetric\n\n\nPoints\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\ncontributors\n\n\n6\n\n\nThe more contributors a project has, the more likely it is it stays alive\n\n\n\n\n\n\nsubscribers\n\n\n0\n\n\nMore subscribers = more popular project\n\n\n\n\n\n\nstars\n\n\n0\n\n\nMore stars = more popular project\n\n\n\n\n\n\nforks\n\n\n0\n\n\nMore forks = more people seem to use/modify this project\n\n\n\n\n\n\nhas_mit_license\n\n\n20\n\n\nfastlane is MIT licensed, it's good to have plugins use MIT too\n\n\n\n\n\n\nreadme_score\n\n\n50\n\n\nHow well is the README of the document written\n\n\n\n\n\n\nage\n\n\n3\n\n\nProject that have been around for longer tend to be more stable\n\n\n\n\n\n\nmajor_release\n\n\n0\n\n\nPost 1.0 releases are great\n\n\n\n\n\n\ngithub_issues\n\n\n0\n\n\nLots of open issues are not a good sign usually, unless the project is really popular\n\n\n\n\n\n\ndownloads\n\n\n5\n\n\nMore downloads = more users have been using the plugin for a while\n\n\n\n\n\n\ntests\n\n\n9\n\n\nThe more tests a plugin has, the better\n\n\n\n\n\n\n\n\n\n\n\n\n  \nOpen on GitHub\n\n\n\n\n\n\n\n\n92\n\n\n\nset_jira_fix_version\n\n\n\nvia yuriy-tolstoguzov\n\n\n\n\n\nAdds fix version to specified JIRA issues. Creates version if needed\n\n\n\n\n\n\nScore details\n\n\n\n\n\n\n\n\nMetric\n\n\nPoints\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\ncontributors\n\n\n6\n\n\nThe more contributors a project has, the more likely it is it stays alive\n\n\n\n\n\n\nsubscribers\n\n\n3\n\n\nMore subscribers = more popular project\n\n\n\n\n\n\nstars\n\n\n2\n\n\nMore stars = more popular project\n\n\n\n\n\n\nforks\n\n\n0\n\n\nMore forks = more people seem to use/modify this project\n\n\n\n\n\n\nhas_mit_license\n\n\n20\n\n\nfastlane is MIT licensed, it's good to have plugins use MIT too\n\n\n\n\n\n\nreadme_score\n\n\n25\n\n\nHow well is the README of the document written\n\n\n\n\n\n\nage\n\n\n2\n\n\nProject that have been around for longer tend to be more stable\n\n\n\n\n\n\nmajor_release\n\n\n30\n\n\nPost 1.0 releases are great\n\n\n\n\n\n\ngithub_issues\n\n\n0\n\n\nLots of open issues are not a good sign usually, unless the project is really popular\n\n\n\n\n\n\ndownloads\n\n\n1\n\n\nMore downloads = more users have been using the plugin for a while\n\n\n\n\n\n\ntests\n\n\n3\n\n\nThe more tests a plugin has, the better\n\n\n\n\n\n\n\n\n\n\n\n\n  \nOpen on GitHub\n\n\n\n\n\n\n\n\n92\n\n\n\npgyer-password\n\n\n\nvia Kila2\n\n\n\n\n\ndistribute app to pgyer beta testing service\n\n\n\n\n\n\nScore details\n\n\n\n\n\n\n\n\nMetric\n\n\nPoints\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\ncontributors\n\n\n12\n\n\nThe more contributors a project has, the more likely it is it stays alive\n\n\n\n\n\n\nsubscribers\n\n\n3\n\n\nMore subscribers = more popular project\n\n\n\n\n\n\nstars\n\n\n0\n\n\nMore stars = more popular project\n\n\n\n\n\n\nforks\n\n\n0\n\n\nMore forks = more people seem to use/modify this project\n\n\n\n\n\n\nhas_mit_license\n\n\n20\n\n\nfastlane is MIT licensed, it's good to have plugins use MIT too\n\n\n\n\n\n\nreadme_score\n\n\n50\n\n\nHow well is the README of the document written\n\n\n\n\n\n\nage\n\n\n3\n\n\nProject that have been around for longer tend to be more stable\n\n\n\n\n\n\nmajor_release\n\n\n0\n\n\nPost 1.0 releases are great\n\n\n\n\n\n\ngithub_issues\n\n\n0\n\n\nLots of open issues are not a good sign usually, unless the project is really popular\n\n\n\n\n\n\ndownloads\n\n\n1\n\n\nMore downloads = more users have been using the plugin for a while\n\n\n\n\n\n\ntests\n\n\n3\n\n\nThe more tests a plugin has, the better\n\n\n\n\n\n\n\n\n\n\n\n\n  \nOpen on GitHub\n\n\n\n\n\n\n\n\n91\n\n\n\nstatic_assets\n\n\n\nvia Jakob Jensen\n\n\n\n\n\nGenerate code for buildtime-safe assignments of assets.\n\n\n\n\n\n\nScore details\n\n\n\n\n\n\n\n\nMetric\n\n\nPoints\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\ncontributors\n\n\n6\n\n\nThe more contributors a project has, the more likely it is it stays alive\n\n\n\n\n\n\nsubscribers\n\n\n3\n\n\nMore subscribers = more popular project\n\n\n\n\n\n\nstars\n\n\n0\n\n\nMore stars = more popular project\n\n\n\n\n\n\nforks\n\n\n0\n\n\nMore forks = more people seem to use/modify this project\n\n\n\n\n\n\nhas_mit_license\n\n\n20\n\n\nfastlane is MIT licensed, it's good to have plugins use MIT too\n\n\n\n\n\n\nreadme_score\n\n\n25\n\n\nHow well is the README of the document written\n\n\n\n\n\n\nage\n\n\n3\n\n\nProject that have been around for longer tend to be more stable\n\n\n\n\n\n\nmajor_release\n\n\n30\n\n\nPost 1.0 releases are great\n\n\n\n\n\n\ngithub_issues\n\n\n-1\n\n\nLots of open issues are not a good sign usually, unless the project is really popular\n\n\n\n\n\n\ndownloads\n\n\n2\n\n\nMore downloads = more users have been using the plugin for a while\n\n\n\n\n\n\ntests\n\n\n3\n\n\nThe more tests a plugin has, the better\n\n\n\n\n\n\n\n\n\n\n\n\n  \nOpen on GitHub\n\n\n\n\n\n\n\n\n91\n\n\n\nget_version_name\n\n\n\nvia Jems\n\n\n\n\n\nGet the version name of an Android project.\n\n\n\n\n\n\nScore details\n\n\n\n\n\n\n\n\nMetric\n\n\nPoints\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\ncontributors\n\n\n6\n\n\nThe more contributors a project has, the more likely it is it stays alive\n\n\n\n\n\n\nsubscribers\n\n\n3\n\n\nMore subscribers = more popular project\n\n\n\n\n\n\nstars\n\n\n2\n\n\nMore stars = more popular project\n\n\n\n\n\n\nforks\n\n\n5\n\n\nMore forks = more people seem to use/modify this project\n\n\n\n\n\n\nhas_mit_license\n\n\n20\n\n\nfastlane is MIT licensed, it's good to have plugins use MIT too\n\n\n\n\n\n\nreadme_score\n\n\n25\n\n\nHow well is the README of the document written\n\n\n\n\n\n\nage\n\n\n6\n\n\nProject that have been around for longer tend to be more stable\n\n\n\n\n\n\nmajor_release\n\n\n0\n\n\nPost 1.0 releases are great\n\n\n\n\n\n\ngithub_issues\n\n\n0\n\n\nLots of open issues are not a good sign usually, unless the project is really popular\n\n\n\n\n\n\ndownloads\n\n\n21\n\n\nMore downloads = more users have been using the plugin for a while\n\n\n\n\n\n\ntests\n\n\n3\n\n\nThe more tests a plugin has, the better\n\n\n\n\n\n\n\n\n\n\n\n\n  \nOpen on GitHub\n\n\n\n\n\n\n\n\n91\n\n\n\nsupply_aptoide\n\n\n\nvia wschurman\n\n\n\n\n\nUpload metadata, screenshots and binaries to Aptoide\n\n\n\n\n\n\nScore details\n\n\n\n\n\n\n\n\nMetric\n\n\nPoints\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\ncontributors\n\n\n6\n\n\nThe more contributors a project has, the more likely it is it stays alive\n\n\n\n\n\n\nsubscribers\n\n\n9\n\n\nMore subscribers = more popular project\n\n\n\n\n\n\nstars\n\n\n1\n\n\nMore stars = more popular project\n\n\n\n\n\n\nforks\n\n\n0\n\n\nMore forks = more people seem to use/modify this project\n\n\n\n\n\n\nhas_mit_license\n\n\n20\n\n\nfastlane is MIT licensed, it's good to have plugins use MIT too\n\n\n\n\n\n\nreadme_score\n\n\n50\n\n\nHow well is the README of the document written\n\n\n\n\n\n\nage\n\n\n1\n\n\nProject that have been around for longer tend to be more stable\n\n\n\n\n\n\nmajor_release\n\n\n0\n\n\nPost 1.0 releases are great\n\n\n\n\n\n\ngithub_issues\n\n\n0\n\n\nLots of open issues are not a good sign usually, unless the project is really popular\n\n\n\n\n\n\ndownloads\n\n\n1\n\n\nMore downloads = more users have been using the plugin for a while\n\n\n\n\n\n\ntests\n\n\n3\n\n\nThe more tests a plugin has, the better\n\n\n\n\n\n\n\n\n\n\n\n\n  \nOpen on GitHub\n\n\n\n\n\n\n\n\n89\n\n\n\nbuild_cache\n\n\n\nvia Fernando Saragoca\n\n\n\n\n\nHelper for caching builds when using 'build for testing' \n 'test without building'\n\n\n\n\n\n\nScore details\n\n\n\n\n\n\n\n\nMetric\n\n\nPoints\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\ncontributors\n\n\n6\n\n\nThe more contributors a project has, the more likely it is it stays alive\n\n\n\n\n\n\nsubscribers\n\n\n3\n\n\nMore subscribers = more popular project\n\n\n\n\n\n\nstars\n\n\n2\n\n\nMore stars = more popular project\n\n\n\n\n\n\nforks\n\n\n0\n\n\nMore forks = more people seem to use/modify this project\n\n\n\n\n\n\nhas_mit_license\n\n\n20\n\n\nfastlane is MIT licensed, it's good to have plugins use MIT too\n\n\n\n\n\n\nreadme_score\n\n\n50\n\n\nHow well is the README of the document written\n\n\n\n\n\n\nage\n\n\n3\n\n\nProject that have been around for longer tend to be more stable\n\n\n\n\n\n\nmajor_release\n\n\n0\n\n\nPost 1.0 releases are great\n\n\n\n\n\n\ngithub_issues\n\n\n-1\n\n\nLots of open issues are not a good sign usually, unless the project is really popular\n\n\n\n\n\n\ndownloads\n\n\n6\n\n\nMore downloads = more users have been using the plugin for a while\n\n\n\n\n\n\ntests\n\n\n0\n\n\nThe more tests a plugin has, the better\n\n\n\n\n\n\n\n\n\n\n\n\n  \nOpen on GitHub\n\n\n\n\n\n\n\n\n89\n\n\n\nxcpretty_report\n\n\n\nvia Fernando Saragoca\n\n\n\n\n\nGenerate xcodebuild reports using xcpretty\n\n\n\n\n\n\nScore details\n\n\n\n\n\n\n\n\nMetric\n\n\nPoints\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\ncontributors\n\n\n6\n\n\nThe more contributors a project has, the more likely it is it stays alive\n\n\n\n\n\n\nsubscribers\n\n\n0\n\n\nMore subscribers = more popular project\n\n\n\n\n\n\nstars\n\n\n0\n\n\nMore stars = more popular project\n\n\n\n\n\n\nforks\n\n\n5\n\n\nMore forks = more people seem to use/modify this project\n\n\n\n\n\n\nhas_mit_license\n\n\n20\n\n\nfastlane is MIT licensed, it's good to have plugins use MIT too\n\n\n\n\n\n\nreadme_score\n\n\n50\n\n\nHow well is the README of the document written\n\n\n\n\n\n\nage\n\n\n3\n\n\nProject that have been around for longer tend to be more stable\n\n\n\n\n\n\nmajor_release\n\n\n0\n\n\nPost 1.0 releases are great\n\n\n\n\n\n\ngithub_issues\n\n\n0\n\n\nLots of open issues are not a good sign usually, unless the project is really popular\n\n\n\n\n\n\ndownloads\n\n\n5\n\n\nMore downloads = more users have been using the plugin for a while\n\n\n\n\n\n\ntests\n\n\n0\n\n\nThe more tests a plugin has, the better\n\n\n\n\n\n\n\n\n\n\n\n\n  \nOpen on GitHub\n\n\n\n\n\n\n\n\n89\n\n\n\ns3_actions\n\n\n\nvia Fernando Saragoca\n\n\n\n\n\nDownload and upload files to AWS S3\n\n\n\n\n\n\nScore details\n\n\n\n\n\n\n\n\nMetric\n\n\nPoints\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\ncontributors\n\n\n6\n\n\nThe more contributors a project has, the more likely it is it stays alive\n\n\n\n\n\n\nsubscribers\n\n\n0\n\n\nMore subscribers = more popular project\n\n\n\n\n\n\nstars\n\n\n1\n\n\nMore stars = more popular project\n\n\n\n\n\n\nforks\n\n\n0\n\n\nMore forks = more people seem to use/modify this project\n\n\n\n\n\n\nhas_mit_license\n\n\n20\n\n\nfastlane is MIT licensed, it's good to have plugins use MIT too\n\n\n\n\n\n\nreadme_score\n\n\n50\n\n\nHow well is the README of the document written\n\n\n\n\n\n\nage\n\n\n3\n\n\nProject that have been around for longer tend to be more stable\n\n\n\n\n\n\nmajor_release\n\n\n0\n\n\nPost 1.0 releases are great\n\n\n\n\n\n\ngithub_issues\n\n\n0\n\n\nLots of open issues are not a good sign usually, unless the project is really popular\n\n\n\n\n\n\ndownloads\n\n\n9\n\n\nMore downloads = more users have been using the plugin for a while\n\n\n\n\n\n\ntests\n\n\n0\n\n\nThe more tests a plugin has, the better\n\n\n\n\n\n\n\n\n\n\n\n\n  \nOpen on GitHub\n\n\n\n\n\n\n\n\n89\n\n\n\nhumanable_build_number\n\n\n\nvia icyleaf\n\n\n\n\n\nAutomatic generate app build number unque and human readable friendly, like yymmHHMM. both support iOS and Android.\n\n\n\n\n\n\nScore details\n\n\n\n\n\n\n\n\nMetric\n\n\nPoints\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\ncontributors\n\n\n6\n\n\nThe more contributors a project has, the more likely it is it stays alive\n\n\n\n\n\n\nsubscribers\n\n\n3\n\n\nMore subscribers = more popular project\n\n\n\n\n\n\nstars\n\n\n1\n\n\nMore stars = more popular project\n\n\n\n\n\n\nforks\n\n\n0\n\n\nMore forks = more people seem to use/modify this project\n\n\n\n\n\n\nhas_mit_license\n\n\n20\n\n\nfastlane is MIT licensed, it's good to have plugins use MIT too\n\n\n\n\n\n\nreadme_score\n\n\n50\n\n\nHow well is the README of the document written\n\n\n\n\n\n\nage\n\n\n3\n\n\nProject that have been around for longer tend to be more stable\n\n\n\n\n\n\nmajor_release\n\n\n0\n\n\nPost 1.0 releases are great\n\n\n\n\n\n\ngithub_issues\n\n\n0\n\n\nLots of open issues are not a good sign usually, unless the project is really popular\n\n\n\n\n\n\ndownloads\n\n\n3\n\n\nMore downloads = more users have been using the plugin for a while\n\n\n\n\n\n\ntests\n\n\n3\n\n\nThe more tests a plugin has, the better\n\n\n\n\n\n\n\n\n\n\n\n\n  \nOpen on GitHub\n\n\n\n\n\n\n\n\n87\n\n\n\ndiawi\n\n\n\nvia pacification\n\n\n\n\n\nUpload .ipa or .apk file to diawi.com\n\n\n\n\n\n\nScore details\n\n\n\n\n\n\n\n\nMetric\n\n\nPoints\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\ncontributors\n\n\n6\n\n\nThe more contributors a project has, the more likely it is it stays alive\n\n\n\n\n\n\nsubscribers\n\n\n3\n\n\nMore subscribers = more popular project\n\n\n\n\n\n\nstars\n\n\n1\n\n\nMore stars = more popular project\n\n\n\n\n\n\nforks\n\n\n0\n\n\nMore forks = more people seem to use/modify this project\n\n\n\n\n\n\nhas_mit_license\n\n\n20\n\n\nfastlane is MIT licensed, it's good to have plugins use MIT too\n\n\n\n\n\n\nreadme_score\n\n\n50\n\n\nHow well is the README of the document written\n\n\n\n\n\n\nage\n\n\n1\n\n\nProject that have been around for longer tend to be more stable\n\n\n\n\n\n\nmajor_release\n\n\n0\n\n\nPost 1.0 releases are great\n\n\n\n\n\n\ngithub_issues\n\n\n-1\n\n\nLots of open issues are not a good sign usually, unless the project is really popular\n\n\n\n\n\n\ndownloads\n\n\n4\n\n\nMore downloads = more users have been using the plugin for a while\n\n\n\n\n\n\ntests\n\n\n3\n\n\nThe more tests a plugin has, the better\n\n\n\n\n\n\n\n\n\n\n\n\n  \nOpen on GitHub\n\n\n\n\n\n\n\n\n87\n\n\n\nios_readme_generate\n\n\n\nvia Erik Flores\n\n\n\n\n\nCreate readme for ios projects\n\n\n\n\n\n\nScore details\n\n\n\n\n\n\n\n\nMetric\n\n\nPoints\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\ncontributors\n\n\n6\n\n\nThe more contributors a project has, the more likely it is it stays alive\n\n\n\n\n\n\nsubscribers\n\n\n3\n\n\nMore subscribers = more popular project\n\n\n\n\n\n\nstars\n\n\n1\n\n\nMore stars = more popular project\n\n\n\n\n\n\nforks\n\n\n0\n\n\nMore forks = more people seem to use/modify this project\n\n\n\n\n\n\nhas_mit_license\n\n\n20\n\n\nfastlane is MIT licensed, it's good to have plugins use MIT too\n\n\n\n\n\n\nreadme_score\n\n\n50\n\n\nHow well is the README of the document written\n\n\n\n\n\n\nage\n\n\n1\n\n\nProject that have been around for longer tend to be more stable\n\n\n\n\n\n\nmajor_release\n\n\n0\n\n\nPost 1.0 releases are great\n\n\n\n\n\n\ngithub_issues\n\n\n0\n\n\nLots of open issues are not a good sign usually, unless the project is really popular\n\n\n\n\n\n\ndownloads\n\n\n3\n\n\nMore downloads = more users have been using the plugin for a while\n\n\n\n\n\n\ntests\n\n\n3\n\n\nThe more tests a plugin has, the better\n\n\n\n\n\n\n\n\n\n\n\n\n  \nOpen on GitHub\n\n\n\n\n\n\n\n\n86\n\n\n\nmsbuild\n\n\n\nvia Jeff Ward\n\n\n\n\n\nBuild a Xamarin.iOS or Xamarin.Android project using msbuild\n\n\n\n\n\n\nScore details\n\n\n\n\n\n\n\n\nMetric\n\n\nPoints\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\ncontributors\n\n\n6\n\n\nThe more contributors a project has, the more likely it is it stays alive\n\n\n\n\n\n\nsubscribers\n\n\n24\n\n\nMore subscribers = more popular project\n\n\n\n\n\n\nstars\n\n\n2\n\n\nMore stars = more popular project\n\n\n\n\n\n\nforks\n\n\n0\n\n\nMore forks = more people seem to use/modify this project\n\n\n\n\n\n\nhas_mit_license\n\n\n20\n\n\nfastlane is MIT licensed, it's good to have plugins use MIT too\n\n\n\n\n\n\nreadme_score\n\n\n25\n\n\nHow well is the README of the document written\n\n\n\n\n\n\nage\n\n\n2\n\n\nProject that have been around for longer tend to be more stable\n\n\n\n\n\n\nmajor_release\n\n\n0\n\n\nPost 1.0 releases are great\n\n\n\n\n\n\ngithub_issues\n\n\n0\n\n\nLots of open issues are not a good sign usually, unless the project is really popular\n\n\n\n\n\n\ndownloads\n\n\n7\n\n\nMore downloads = more users have been using the plugin for a while\n\n\n\n\n\n\ntests\n\n\n0\n\n\nThe more tests a plugin has, the better\n\n\n\n\n\n\n\n\n\n\n\n\n  \nOpen on GitHub\n\n\n\n\n\n\n\n\n85\n\n\n\nrome\n\n\n\nvia Fran\u00e7ois Benaiteau\n\n\n\n\n\nAn S3 cache tool for Carthage\n\n\n\n\n\n\nScore details\n\n\n\n\n\n\n\n\nMetric\n\n\nPoints\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\ncontributors\n\n\n0\n\n\nThe more contributors a project has, the more likely it is it stays alive\n\n\n\n\n\n\nsubscribers\n\n\n6\n\n\nMore subscribers = more popular project\n\n\n\n\n\n\nstars\n\n\n3\n\n\nMore stars = more popular project\n\n\n\n\n\n\nforks\n\n\n0\n\n\nMore forks = more people seem to use/modify this project\n\n\n\n\n\n\nhas_mit_license\n\n\n20\n\n\nfastlane is MIT licensed, it's good to have plugins use MIT too\n\n\n\n\n\n\nreadme_score\n\n\n50\n\n\nHow well is the README of the document written\n\n\n\n\n\n\nage\n\n\n2\n\n\nProject that have been around for longer tend to be more stable\n\n\n\n\n\n\nmajor_release\n\n\n0\n\n\nPost 1.0 releases are great\n\n\n\n\n\n\ngithub_issues\n\n\n0\n\n\nLots of open issues are not a good sign usually, unless the project is really popular\n\n\n\n\n\n\ndownloads\n\n\n1\n\n\nMore downloads = more users have been using the plugin for a while\n\n\n\n\n\n\ntests\n\n\n3\n\n\nThe more tests a plugin has, the better\n\n\n\n\n\n\n\n\n\n\n\n\n  \nOpen on GitHub\n\n\n\n\n\n\n\n\n85\n\n\n\nteams\n\n\n\nvia Morten B\u00f8gh\n\n\n\n\n\nSend a success/error message to your Microsoft Teams channel\n\n\n\n\n\n\nScore details\n\n\n\n\n\n\n\n\nMetric\n\n\nPoints\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\ncontributors\n\n\n6\n\n\nThe more contributors a project has, the more likely it is it stays alive\n\n\n\n\n\n\nsubscribers\n\n\n3\n\n\nMore subscribers = more popular project\n\n\n\n\n\n\nstars\n\n\n1\n\n\nMore stars = more popular project\n\n\n\n\n\n\nforks\n\n\n0\n\n\nMore forks = more people seem to use/modify this project\n\n\n\n\n\n\nhas_mit_license\n\n\n20\n\n\nfastlane is MIT licensed, it's good to have plugins use MIT too\n\n\n\n\n\n\nreadme_score\n\n\n50\n\n\nHow well is the README of the document written\n\n\n\n\n\n\nage\n\n\n1\n\n\nProject that have been around for longer tend to be more stable\n\n\n\n\n\n\nmajor_release\n\n\n0\n\n\nPost 1.0 releases are great\n\n\n\n\n\n\ngithub_issues\n\n\n0\n\n\nLots of open issues are not a good sign usually, unless the project is really popular\n\n\n\n\n\n\ndownloads\n\n\n1\n\n\nMore downloads = more users have been using the plugin for a while\n\n\n\n\n\n\ntests\n\n\n3\n\n\nThe more tests a plugin has, the better\n\n\n\n\n\n\n\n\n\n\n\n\n  \nOpen on GitHub\n\n\n\n\n\n\n\n\n84\n\n\n\nwait_xcrun\n\n\n\nvia Maksym Grebenets\n\n\n\n\n\nWait for Xcode toolchain to come back online after switching Xcode versions.\n\n\n\n\n\n\nScore details\n\n\n\n\n\n\n\n\nMetric\n\n\nPoints\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\ncontributors\n\n\n0\n\n\nThe more contributors a project has, the more likely it is it stays alive\n\n\n\n\n\n\nsubscribers\n\n\n3\n\n\nMore subscribers = more popular project\n\n\n\n\n\n\nstars\n\n\n0\n\n\nMore stars = more popular project\n\n\n\n\n\n\nforks\n\n\n0\n\n\nMore forks = more people seem to use/modify this project\n\n\n\n\n\n\nhas_mit_license\n\n\n20\n\n\nfastlane is MIT licensed, it's good to have plugins use MIT too\n\n\n\n\n\n\nreadme_score\n\n\n50\n\n\nHow well is the README of the document written\n\n\n\n\n\n\nage\n\n\n5\n\n\nProject that have been around for longer tend to be more stable\n\n\n\n\n\n\nmajor_release\n\n\n0\n\n\nPost 1.0 releases are great\n\n\n\n\n\n\ngithub_issues\n\n\n0\n\n\nLots of open issues are not a good sign usually, unless the project is really popular\n\n\n\n\n\n\ndownloads\n\n\n3\n\n\nMore downloads = more users have been using the plugin for a while\n\n\n\n\n\n\ntests\n\n\n3\n\n\nThe more tests a plugin has, the better\n\n\n\n\n\n\n\n\n\n\n\n\n  \nOpen on GitHub\n\n\n\n\n\n\n\n\n83\n\n\n\ntwitter\n\n\n\nvia rb_de0\n\n\n\n\n\nA simple twitter plugin\n\n\n\n\n\n\nScore details\n\n\n\n\n\n\n\n\nMetric\n\n\nPoints\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\ncontributors\n\n\n6\n\n\nThe more contributors a project has, the more likely it is it stays alive\n\n\n\n\n\n\nsubscribers\n\n\n3\n\n\nMore subscribers = more popular project\n\n\n\n\n\n\nstars\n\n\n0\n\n\nMore stars = more popular project\n\n\n\n\n\n\nforks\n\n\n0\n\n\nMore forks = more people seem to use/modify this project\n\n\n\n\n\n\nhas_mit_license\n\n\n20\n\n\nfastlane is MIT licensed, it's good to have plugins use MIT too\n\n\n\n\n\n\nreadme_score\n\n\n50\n\n\nHow well is the README of the document written\n\n\n\n\n\n\nage\n\n\n1\n\n\nProject that have been around for longer tend to be more stable\n\n\n\n\n\n\nmajor_release\n\n\n0\n\n\nPost 1.0 releases are great\n\n\n\n\n\n\ngithub_issues\n\n\n0\n\n\nLots of open issues are not a good sign usually, unless the project is really popular\n\n\n\n\n\n\ndownloads\n\n\n0\n\n\nMore downloads = more users have been using the plugin for a while\n\n\n\n\n\n\ntests\n\n\n3\n\n\nThe more tests a plugin has, the better\n\n\n\n\n\n\n\n\n\n\n\n\n  \nOpen on GitHub\n\n\n\n\n\n\n\n\n83\n\n\n\ndelete_files\n\n\n\nvia GaryJohnson\n\n\n\n\n\nDeletes a file, folder or multiple files using shell glob pattern.\n\n\n\n\n\n\nScore details\n\n\n\n\n\n\n\n\nMetric\n\n\nPoints\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\ncontributors\n\n\n6\n\n\nThe more contributors a project has, the more likely it is it stays alive\n\n\n\n\n\n\nsubscribers\n\n\n21\n\n\nMore subscribers = more popular project\n\n\n\n\n\n\nstars\n\n\n0\n\n\nMore stars = more popular project\n\n\n\n\n\n\nforks\n\n\n0\n\n\nMore forks = more people seem to use/modify this project\n\n\n\n\n\n\nhas_mit_license\n\n\n20\n\n\nfastlane is MIT licensed, it's good to have plugins use MIT too\n\n\n\n\n\n\nreadme_score\n\n\n25\n\n\nHow well is the README of the document written\n\n\n\n\n\n\nage\n\n\n5\n\n\nProject that have been around for longer tend to be more stable\n\n\n\n\n\n\nmajor_release\n\n\n0\n\n\nPost 1.0 releases are great\n\n\n\n\n\n\ngithub_issues\n\n\n0\n\n\nLots of open issues are not a good sign usually, unless the project is really popular\n\n\n\n\n\n\ndownloads\n\n\n3\n\n\nMore downloads = more users have been using the plugin for a while\n\n\n\n\n\n\ntests\n\n\n3\n\n\nThe more tests a plugin has, the better\n\n\n\n\n\n\n\n\n\n\n\n\n  \nOpen on GitHub\n\n\n\n\n\n\n\n\n82\n\n\n\njira_transition\n\n\n\nvia Valerio Mazzeo\n\n\n\n\n\nApply a JIRA transition to issues mentioned in the changelog\n\n\n\n\n\n\nScore details\n\n\n\n\n\n\n\n\nMetric\n\n\nPoints\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\ncontributors\n\n\n6\n\n\nThe more contributors a project has, the more likely it is it stays alive\n\n\n\n\n\n\nsubscribers\n\n\n6\n\n\nMore subscribers = more popular project\n\n\n\n\n\n\nstars\n\n\n10\n\n\nMore stars = more popular project\n\n\n\n\n\n\nforks\n\n\n0\n\n\nMore forks = more people seem to use/modify this project\n\n\n\n\n\n\nhas_mit_license\n\n\n20\n\n\nfastlane is MIT licensed, it's good to have plugins use MIT too\n\n\n\n\n\n\nreadme_score\n\n\n25\n\n\nHow well is the README of the document written\n\n\n\n\n\n\nage\n\n\n7\n\n\nProject that have been around for longer tend to be more stable\n\n\n\n\n\n\nmajor_release\n\n\n0\n\n\nPost 1.0 releases are great\n\n\n\n\n\n\ngithub_issues\n\n\n0\n\n\nLots of open issues are not a good sign usually, unless the project is really popular\n\n\n\n\n\n\ndownloads\n\n\n5\n\n\nMore downloads = more users have been using the plugin for a while\n\n\n\n\n\n\ntests\n\n\n3\n\n\nThe more tests a plugin has, the better\n\n\n\n\n\n\n\n\n\n\n\n\n  \nOpen on GitHub\n\n\n\n\n\n\n\n\n82\n\n\n\ntestfairy\n\n\n\nvia Josh Holtz\n\n\n\n\n\nUpload IPA to TestFairy\n\n\n\n\n\n\nScore details\n\n\n\n\n\n\n\n\nMetric\n\n\nPoints\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\ncontributors\n\n\n6\n\n\nThe more contributors a project has, the more likely it is it stays alive\n\n\n\n\n\n\nsubscribers\n\n\n3\n\n\nMore subscribers = more popular project\n\n\n\n\n\n\nstars\n\n\n0\n\n\nMore stars = more popular project\n\n\n\n\n\n\nforks\n\n\n0\n\n\nMore forks = more people seem to use/modify this project\n\n\n\n\n\n\nhas_mit_license\n\n\n20\n\n\nfastlane is MIT licensed, it's good to have plugins use MIT too\n\n\n\n\n\n\nreadme_score\n\n\n50\n\n\nHow well is the README of the document written\n\n\n\n\n\n\nage\n\n\n0\n\n\nProject that have been around for longer tend to be more stable\n\n\n\n\n\n\nmajor_release\n\n\n0\n\n\nPost 1.0 releases are great\n\n\n\n\n\n\ngithub_issues\n\n\n0\n\n\nLots of open issues are not a good sign usually, unless the project is really popular\n\n\n\n\n\n\ndownloads\n\n\n0\n\n\nMore downloads = more users have been using the plugin for a while\n\n\n\n\n\n\ntests\n\n\n3\n\n\nThe more tests a plugin has, the better\n\n\n\n\n\n\n\n\n\n\n\n\n  \nOpen on GitHub\n\n\n\n\n\n\n\n\n82\n\n\n\napprepo\n\n\n\nvia Matej Sychra\n\n\n\n\n\nexperimental fastlane plugin based on https://github.com/suculent/apprepo SFTP uploader\n\n\n\n\n\n\nScore details\n\n\n\n\n\n\n\n\nMetric\n\n\nPoints\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\ncontributors\n\n\n6\n\n\nThe more contributors a project has, the more likely it is it stays alive\n\n\n\n\n\n\nsubscribers\n\n\n3\n\n\nMore subscribers = more popular project\n\n\n\n\n\n\nstars\n\n\n3\n\n\nMore stars = more popular project\n\n\n\n\n\n\nforks\n\n\n0\n\n\nMore forks = more people seem to use/modify this project\n\n\n\n\n\n\nhas_mit_license\n\n\n20\n\n\nfastlane is MIT licensed, it's good to have plugins use MIT too\n\n\n\n\n\n\nreadme_score\n\n\n25\n\n\nHow well is the README of the document written\n\n\n\n\n\n\nage\n\n\n7\n\n\nProject that have been around for longer tend to be more stable\n\n\n\n\n\n\nmajor_release\n\n\n0\n\n\nPost 1.0 releases are great\n\n\n\n\n\n\ngithub_issues\n\n\n-1\n\n\nLots of open issues are not a good sign usually, unless the project is really popular\n\n\n\n\n\n\ndownloads\n\n\n13\n\n\nMore downloads = more users have been using the plugin for a while\n\n\n\n\n\n\ntests\n\n\n6\n\n\nThe more tests a plugin has, the better\n\n\n\n\n\n\n\n\n\n\n\n\n  \nOpen on GitHub\n\n\n\n\n\n\n\n\n81\n\n\n\ngoogle_cloud_storage\n\n\n\nvia Fernando Saragoca\n\n\n\n\n\nGoogle Cloud Storage\n\n\n\n\n\n\nScore details\n\n\n\n\n\n\n\n\nMetric\n\n\nPoints\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\ncontributors\n\n\n6\n\n\nThe more contributors a project has, the more likely it is it stays alive\n\n\n\n\n\n\nsubscribers\n\n\n0\n\n\nMore subscribers = more popular project\n\n\n\n\n\n\nstars\n\n\n0\n\n\nMore stars = more popular project\n\n\n\n\n\n\nforks\n\n\n0\n\n\nMore forks = more people seem to use/modify this project\n\n\n\n\n\n\nhas_mit_license\n\n\n20\n\n\nfastlane is MIT licensed, it's good to have plugins use MIT too\n\n\n\n\n\n\nreadme_score\n\n\n50\n\n\nHow well is the README of the document written\n\n\n\n\n\n\nage\n\n\n3\n\n\nProject that have been around for longer tend to be more stable\n\n\n\n\n\n\nmajor_release\n\n\n0\n\n\nPost 1.0 releases are great\n\n\n\n\n\n\ngithub_issues\n\n\n-2\n\n\nLots of open issues are not a good sign usually, unless the project is really popular\n\n\n\n\n\n\ndownloads\n\n\n4\n\n\nMore downloads = more users have been using the plugin for a while\n\n\n\n\n\n\ntests\n\n\n0\n\n\nThe more tests a plugin has, the better\n\n\n\n\n\n\n\n\n\n\n\n\n  \nOpen on GitHub\n\n\n\n\n\n\n\n\n79\n\n\n\ngoogle_analytics\n\n\n\nvia Helmut Januschka\n\n\n\n\n\nFire universal Analytics\n\n\n\n\n\n\nScore details\n\n\n\n\n\n\n\n\nMetric\n\n\nPoints\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\ncontributors\n\n\n0\n\n\nThe more contributors a project has, the more likely it is it stays alive\n\n\n\n\n\n\nsubscribers\n\n\n3\n\n\nMore subscribers = more popular project\n\n\n\n\n\n\nstars\n\n\n1\n\n\nMore stars = more popular project\n\n\n\n\n\n\nforks\n\n\n0\n\n\nMore forks = more people seem to use/modify this project\n\n\n\n\n\n\nhas_mit_license\n\n\n20\n\n\nfastlane is MIT licensed, it's good to have plugins use MIT too\n\n\n\n\n\n\nreadme_score\n\n\n50\n\n\nHow well is the README of the document written\n\n\n\n\n\n\nage\n\n\n2\n\n\nProject that have been around for longer tend to be more stable\n\n\n\n\n\n\nmajor_release\n\n\n0\n\n\nPost 1.0 releases are great\n\n\n\n\n\n\ngithub_issues\n\n\n0\n\n\nLots of open issues are not a good sign usually, unless the project is really popular\n\n\n\n\n\n\ndownloads\n\n\n3\n\n\nMore downloads = more users have been using the plugin for a while\n\n\n\n\n\n\ntests\n\n\n0\n\n\nThe more tests a plugin has, the better\n\n\n\n\n\n\n\n\n\n\n\n\n  \nOpen on GitHub\n\n\n\n\n\n\n\n\n74\n\n\n\npolidea\n\n\n\nvia Piotrek Dubiel\n\n\n\n\n\nPolidea's fastlane action\n\n\n\n\n\n\nScore details\n\n\n\n\n\n\n\n\nMetric\n\n\nPoints\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\ncontributors\n\n\n0\n\n\nThe more contributors a project has, the more likely it is it stays alive\n\n\n\n\n\n\nsubscribers\n\n\n0\n\n\nMore subscribers = more popular project\n\n\n\n\n\n\nstars\n\n\n0\n\n\nMore stars = more popular project\n\n\n\n\n\n\nforks\n\n\n0\n\n\nMore forks = more people seem to use/modify this project\n\n\n\n\n\n\nhas_mit_license\n\n\n20\n\n\nfastlane is MIT licensed, it's good to have plugins use MIT too\n\n\n\n\n\n\nreadme_score\n\n\n0\n\n\nHow well is the README of the document written\n\n\n\n\n\n\nage\n\n\n0\n\n\nProject that have been around for longer tend to be more stable\n\n\n\n\n\n\nmajor_release\n\n\n0\n\n\nPost 1.0 releases are great\n\n\n\n\n\n\ngithub_issues\n\n\n0\n\n\nLots of open issues are not a good sign usually, unless the project is really popular\n\n\n\n\n\n\ndownloads\n\n\n54\n\n\nMore downloads = more users have been using the plugin for a while\n\n\n\n\n\n\ntests\n\n\n0\n\n\nThe more tests a plugin has, the better\n\n\n\n\n\n\n\n\n\n\n\n\n  \nOpen website\n\n  \n(no GitHub link provided in gemspec)\n\n\n\n\n\n\n\n\n74\n\n\n\nget_product_bundle_id\n\n\n\nvia Lyndsey Ferguson\n\n\n\n\n\nGets PRODUCT_BUNDLE_IDENTIFIER from the first buildable target in a given scheme\n\n\n\n\n\n\nScore details\n\n\n\n\n\n\n\n\nMetric\n\n\nPoints\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\ncontributors\n\n\n6\n\n\nThe more contributors a project has, the more likely it is it stays alive\n\n\n\n\n\n\nsubscribers\n\n\n0\n\n\nMore subscribers = more popular project\n\n\n\n\n\n\nstars\n\n\n2\n\n\nMore stars = more popular project\n\n\n\n\n\n\nforks\n\n\n0\n\n\nMore forks = more people seem to use/modify this project\n\n\n\n\n\n\nhas_mit_license\n\n\n20\n\n\nfastlane is MIT licensed, it's good to have plugins use MIT too\n\n\n\n\n\n\nreadme_score\n\n\n25\n\n\nHow well is the README of the document written\n\n\n\n\n\n\nage\n\n\n1\n\n\nProject that have been around for longer tend to be more stable\n\n\n\n\n\n\nmajor_release\n\n\n0\n\n\nPost 1.0 releases are great\n\n\n\n\n\n\ngithub_issues\n\n\n0\n\n\nLots of open issues are not a good sign usually, unless the project is really popular\n\n\n\n\n\n\ndownloads\n\n\n2\n\n\nMore downloads = more users have been using the plugin for a while\n\n\n\n\n\n\ntests\n\n\n18\n\n\nThe more tests a plugin has, the better\n\n\n\n\n\n\n\n\n\n\n\n\n  \nOpen on GitHub\n\n\n\n\n\n\n\n\n73\n\n\n\nupload_to_onesky\n\n\n\nvia joshrlesch\n\n\n\n\n\nUpload a strings file to OneSky\n\n\n\n\n\n\nScore details\n\n\n\n\n\n\n\n\nMetric\n\n\nPoints\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\ncontributors\n\n\n6\n\n\nThe more contributors a project has, the more likely it is it stays alive\n\n\n\n\n\n\nsubscribers\n\n\n3\n\n\nMore subscribers = more popular project\n\n\n\n\n\n\nstars\n\n\n3\n\n\nMore stars = more popular project\n\n\n\n\n\n\nforks\n\n\n0\n\n\nMore forks = more people seem to use/modify this project\n\n\n\n\n\n\nhas_mit_license\n\n\n20\n\n\nfastlane is MIT licensed, it's good to have plugins use MIT too\n\n\n\n\n\n\nreadme_score\n\n\n25\n\n\nHow well is the README of the document written\n\n\n\n\n\n\nage\n\n\n6\n\n\nProject that have been around for longer tend to be more stable\n\n\n\n\n\n\nmajor_release\n\n\n0\n\n\nPost 1.0 releases are great\n\n\n\n\n\n\ngithub_issues\n\n\n0\n\n\nLots of open issues are not a good sign usually, unless the project is really popular\n\n\n\n\n\n\ndownloads\n\n\n7\n\n\nMore downloads = more users have been using the plugin for a while\n\n\n\n\n\n\ntests\n\n\n3\n\n\nThe more tests a plugin has, the better\n\n\n\n\n\n\n\n\n\n\n\n\n  \nOpen on GitHub\n\n\n\n\n\n\n\n\n73\n\n\n\nget_android_version\n\n\n\nvia MaximusMcCann\n\n\n\n\n\ngets the android versionName and versionCode from the \nAndroidManifest.xml\n file located in the provided apk\n\n\n\n\n\n\nScore details\n\n\n\n\n\n\n\n\nMetric\n\n\nPoints\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\ncontributors\n\n\n6\n\n\nThe more contributors a project has, the more likely it is it stays alive\n\n\n\n\n\n\nsubscribers\n\n\n3\n\n\nMore subscribers = more popular project\n\n\n\n\n\n\nstars\n\n\n0\n\n\nMore stars = more popular project\n\n\n\n\n\n\nforks\n\n\n0\n\n\nMore forks = more people seem to use/modify this project\n\n\n\n\n\n\nhas_mit_license\n\n\n20\n\n\nfastlane is MIT licensed, it's good to have plugins use MIT too\n\n\n\n\n\n\nreadme_score\n\n\n25\n\n\nHow well is the README of the document written\n\n\n\n\n\n\nage\n\n\n4\n\n\nProject that have been around for longer tend to be more stable\n\n\n\n\n\n\nmajor_release\n\n\n0\n\n\nPost 1.0 releases are great\n\n\n\n\n\n\ngithub_issues\n\n\n0\n\n\nLots of open issues are not a good sign usually, unless the project is really popular\n\n\n\n\n\n\ndownloads\n\n\n12\n\n\nMore downloads = more users have been using the plugin for a while\n\n\n\n\n\n\ntests\n\n\n3\n\n\nThe more tests a plugin has, the better\n\n\n\n\n\n\n\n\n\n\n\n\n  \nOpen on GitHub\n\n\n\n\n\n\n\n\n72\n\n\n\ngs_versioning\n\n\n\nvia SAVeselovskiy\n\n\n\n\n\nPlugin for GradoService versioning system\n\n\n\n\n\n\nScore details\n\n\n\n\n\n\n\n\nMetric\n\n\nPoints\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\ncontributors\n\n\n6\n\n\nThe more contributors a project has, the more likely it is it stays alive\n\n\n\n\n\n\nsubscribers\n\n\n3\n\n\nMore subscribers = more popular project\n\n\n\n\n\n\nstars\n\n\n0\n\n\nMore stars = more popular project\n\n\n\n\n\n\nforks\n\n\n0\n\n\nMore forks = more people seem to use/modify this project\n\n\n\n\n\n\nhas_mit_license\n\n\n20\n\n\nfastlane is MIT licensed, it's good to have plugins use MIT too\n\n\n\n\n\n\nreadme_score\n\n\n25\n\n\nHow well is the README of the document written\n\n\n\n\n\n\nage\n\n\n4\n\n\nProject that have been around for longer tend to be more stable\n\n\n\n\n\n\nmajor_release\n\n\n0\n\n\nPost 1.0 releases are great\n\n\n\n\n\n\ngithub_issues\n\n\n0\n\n\nLots of open issues are not a good sign usually, unless the project is really popular\n\n\n\n\n\n\ndownloads\n\n\n11\n\n\nMore downloads = more users have been using the plugin for a while\n\n\n\n\n\n\ntests\n\n\n3\n\n\nThe more tests a plugin has, the better\n\n\n\n\n\n\n\n\n\n\n\n\n  \nOpen on GitHub\n\n\n\n\n\n\n\n\n72\n\n\n\nanalyze_apk\n\n\n\nvia kochavi-daniel\n\n\n\n\n\nAnalyzes an apk to fetch: versionCode, versionName, apk size, etc.\n\n\n\n\n\n\nScore details\n\n\n\n\n\n\n\n\nMetric\n\n\nPoints\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\ncontributors\n\n\n0\n\n\nThe more contributors a project has, the more likely it is it stays alive\n\n\n\n\n\n\nsubscribers\n\n\n0\n\n\nMore subscribers = more popular project\n\n\n\n\n\n\nstars\n\n\n2\n\n\nMore stars = more popular project\n\n\n\n\n\n\nforks\n\n\n0\n\n\nMore forks = more people seem to use/modify this project\n\n\n\n\n\n\nhas_mit_license\n\n\n20\n\n\nfastlane is MIT licensed, it's good to have plugins use MIT too\n\n\n\n\n\n\nreadme_score\n\n\n50\n\n\nHow well is the README of the document written\n\n\n\n\n\n\nage\n\n\n0\n\n\nProject that have been around for longer tend to be more stable\n\n\n\n\n\n\nmajor_release\n\n\n0\n\n\nPost 1.0 releases are great\n\n\n\n\n\n\ngithub_issues\n\n\n0\n\n\nLots of open issues are not a good sign usually, unless the project is really popular\n\n\n\n\n\n\ndownloads\n\n\n0\n\n\nMore downloads = more users have been using the plugin for a while\n\n\n\n\n\n\ntests\n\n\n0\n\n\nThe more tests a plugin has, the better\n\n\n\n\n\n\n\n\n\n\n\n\n  \nOpen on GitHub\n\n\n\n\n\n\n\n\n68\n\n\n\njira_transitions\n\n\n\nvia Ostap Taran\n\n\n\n\n\nRuns transitions for specified JIRA tickets\n\n\n\n\n\n\nScore details\n\n\n\n\n\n\n\n\nMetric\n\n\nPoints\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\ncontributors\n\n\n6\n\n\nThe more contributors a project has, the more likely it is it stays alive\n\n\n\n\n\n\nsubscribers\n\n\n6\n\n\nMore subscribers = more popular project\n\n\n\n\n\n\nstars\n\n\n1\n\n\nMore stars = more popular project\n\n\n\n\n\n\nforks\n\n\n5\n\n\nMore forks = more people seem to use/modify this project\n\n\n\n\n\n\nhas_mit_license\n\n\n20\n\n\nfastlane is MIT licensed, it's good to have plugins use MIT too\n\n\n\n\n\n\nreadme_score\n\n\n25\n\n\nHow well is the README of the document written\n\n\n\n\n\n\nage\n\n\n1\n\n\nProject that have been around for longer tend to be more stable\n\n\n\n\n\n\nmajor_release\n\n\n0\n\n\nPost 1.0 releases are great\n\n\n\n\n\n\ngithub_issues\n\n\n0\n\n\nLots of open issues are not a good sign usually, unless the project is really popular\n\n\n\n\n\n\ndownloads\n\n\n1\n\n\nMore downloads = more users have been using the plugin for a while\n\n\n\n\n\n\ntests\n\n\n3\n\n\nThe more tests a plugin has, the better\n\n\n\n\n\n\n\n\n\n\n\n\n  \nOpen on GitHub\n\n\n\n\n\n\n\n\n68\n\n\n\naws_sns\n\n\n\nvia Josh Holtz\n\n\n\n\n\nCreates AWS SNS platform applications\n\n\n\n\n\n\nScore details\n\n\n\n\n\n\n\n\nMetric\n\n\nPoints\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\ncontributors\n\n\n6\n\n\nThe more contributors a project has, the more likely it is it stays alive\n\n\n\n\n\n\nsubscribers\n\n\n3\n\n\nMore subscribers = more popular project\n\n\n\n\n\n\nstars\n\n\n5\n\n\nMore stars = more popular project\n\n\n\n\n\n\nforks\n\n\n0\n\n\nMore forks = more people seem to use/modify this project\n\n\n\n\n\n\nhas_mit_license\n\n\n20\n\n\nfastlane is MIT licensed, it's good to have plugins use MIT too\n\n\n\n\n\n\nreadme_score\n\n\n25\n\n\nHow well is the README of the document written\n\n\n\n\n\n\nage\n\n\n4\n\n\nProject that have been around for longer tend to be more stable\n\n\n\n\n\n\nmajor_release\n\n\n0\n\n\nPost 1.0 releases are great\n\n\n\n\n\n\ngithub_issues\n\n\n0\n\n\nLots of open issues are not a good sign usually, unless the project is really popular\n\n\n\n\n\n\ndownloads\n\n\n2\n\n\nMore downloads = more users have been using the plugin for a while\n\n\n\n\n\n\ntests\n\n\n3\n\n\nThe more tests a plugin has, the better\n\n\n\n\n\n\n\n\n\n\n\n\n  \nOpen on GitHub\n\n\n\n\n\n\n\n\n67\n\n\n\nupload_to_qmobile\n\n\n\nvia icyleaf\n\n\n\n\n\nUpload a mobile app to qmobile\n\n\n\n\n\n\nScore details\n\n\n\n\n\n\n\n\nMetric\n\n\nPoints\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\ncontributors\n\n\n6\n\n\nThe more contributors a project has, the more likely it is it stays alive\n\n\n\n\n\n\nsubscribers\n\n\n3\n\n\nMore subscribers = more popular project\n\n\n\n\n\n\nstars\n\n\n0\n\n\nMore stars = more popular project\n\n\n\n\n\n\nforks\n\n\n0\n\n\nMore forks = more people seem to use/modify this project\n\n\n\n\n\n\nhas_mit_license\n\n\n20\n\n\nfastlane is MIT licensed, it's good to have plugins use MIT too\n\n\n\n\n\n\nreadme_score\n\n\n25\n\n\nHow well is the README of the document written\n\n\n\n\n\n\nage\n\n\n3\n\n\nProject that have been around for longer tend to be more stable\n\n\n\n\n\n\nmajor_release\n\n\n0\n\n\nPost 1.0 releases are great\n\n\n\n\n\n\ngithub_issues\n\n\n0\n\n\nLots of open issues are not a good sign usually, unless the project is really popular\n\n\n\n\n\n\ndownloads\n\n\n4\n\n\nMore downloads = more users have been using the plugin for a while\n\n\n\n\n\n\ntests\n\n\n6\n\n\nThe more tests a plugin has, the better\n\n\n\n\n\n\n\n\n\n\n\n\n  \nOpen on GitHub\n\n\n\n\n\n\n\n\n67\n\n\n\ncoreos\n\n\n\nvia Oliver Letterer\n\n\n\n\n\nDeploy docker services to CoreOS hosts\n\n\n\n\n\n\nScore details\n\n\n\n\n\n\n\n\nMetric\n\n\nPoints\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\ncontributors\n\n\n6\n\n\nThe more contributors a project has, the more likely it is it stays alive\n\n\n\n\n\n\nsubscribers\n\n\n3\n\n\nMore subscribers = more popular project\n\n\n\n\n\n\nstars\n\n\n0\n\n\nMore stars = more popular project\n\n\n\n\n\n\nforks\n\n\n0\n\n\nMore forks = more people seem to use/modify this project\n\n\n\n\n\n\nhas_mit_license\n\n\n20\n\n\nfastlane is MIT licensed, it's good to have plugins use MIT too\n\n\n\n\n\n\nreadme_score\n\n\n25\n\n\nHow well is the README of the document written\n\n\n\n\n\n\nage\n\n\n5\n\n\nProject that have been around for longer tend to be more stable\n\n\n\n\n\n\nmajor_release\n\n\n0\n\n\nPost 1.0 releases are great\n\n\n\n\n\n\ngithub_issues\n\n\n0\n\n\nLots of open issues are not a good sign usually, unless the project is really popular\n\n\n\n\n\n\ndownloads\n\n\n5\n\n\nMore downloads = more users have been using the plugin for a while\n\n\n\n\n\n\ntests\n\n\n3\n\n\nThe more tests a plugin has, the better\n\n\n\n\n\n\n\n\n\n\n\n\n  \nOpen on GitHub\n\n\n\n\n\n\n\n\n67\n\n\n\ndownload_circleci_artifacts\n\n\n\nvia Manabu OHTAKE\n\n\n\n\n\nDownloads a Circle CI artifact's\n\n\n\n\n\n\nScore details\n\n\n\n\n\n\n\n\nMetric\n\n\nPoints\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\ncontributors\n\n\n6\n\n\nThe more contributors a project has, the more likely it is it stays alive\n\n\n\n\n\n\nsubscribers\n\n\n3\n\n\nMore subscribers = more popular project\n\n\n\n\n\n\nstars\n\n\n0\n\n\nMore stars = more popular project\n\n\n\n\n\n\nforks\n\n\n0\n\n\nMore forks = more people seem to use/modify this project\n\n\n\n\n\n\nhas_mit_license\n\n\n20\n\n\nfastlane is MIT licensed, it's good to have plugins use MIT too\n\n\n\n\n\n\nreadme_score\n\n\n25\n\n\nHow well is the README of the document written\n\n\n\n\n\n\nage\n\n\n2\n\n\nProject that have been around for longer tend to be more stable\n\n\n\n\n\n\nmajor_release\n\n\n0\n\n\nPost 1.0 releases are great\n\n\n\n\n\n\ngithub_issues\n\n\n0\n\n\nLots of open issues are not a good sign usually, unless the project is really popular\n\n\n\n\n\n\ndownloads\n\n\n11\n\n\nMore downloads = more users have been using the plugin for a while\n\n\n\n\n\n\ntests\n\n\n0\n\n\nThe more tests a plugin has, the better\n\n\n\n\n\n\n\n\n\n\n\n\n  \nOpen on GitHub\n\n\n\n\n\n\n\n\n66\n\n\n\nfarol\n\n\n\nvia Felipe Plets\n\n\n\n\n\nEnable your app to use Farol Platform services\n\n\n\n\n\n\nScore details\n\n\n\n\n\n\n\n\nMetric\n\n\nPoints\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\ncontributors\n\n\n0\n\n\nThe more contributors a project has, the more likely it is it stays alive\n\n\n\n\n\n\nsubscribers\n\n\n12\n\n\nMore subscribers = more popular project\n\n\n\n\n\n\nstars\n\n\n0\n\n\nMore stars = more popular project\n\n\n\n\n\n\nforks\n\n\n0\n\n\nMore forks = more people seem to use/modify this project\n\n\n\n\n\n\nhas_mit_license\n\n\n20\n\n\nfastlane is MIT licensed, it's good to have plugins use MIT too\n\n\n\n\n\n\nreadme_score\n\n\n25\n\n\nHow well is the README of the document written\n\n\n\n\n\n\nage\n\n\n1\n\n\nProject that have been around for longer tend to be more stable\n\n\n\n\n\n\nmajor_release\n\n\n0\n\n\nPost 1.0 releases are great\n\n\n\n\n\n\ngithub_issues\n\n\n0\n\n\nLots of open issues are not a good sign usually, unless the project is really popular\n\n\n\n\n\n\ndownloads\n\n\n5\n\n\nMore downloads = more users have been using the plugin for a while\n\n\n\n\n\n\ntests\n\n\n3\n\n\nThe more tests a plugin has, the better\n\n\n\n\n\n\n\n\n\n\n\n\n  \nOpen on GitHub\n\n\n\n\n\n\n\n\n64\n\n\n\nandroid_change_string_app_name\n\n\n\nvia MaximusMcCann\n\n\n\n\n\nChange the app_name in the strings.xml file \n revert method\n\n\n\n\n\n\nScore details\n\n\n\n\n\n\n\n\nMetric\n\n\nPoints\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\ncontributors\n\n\n6\n\n\nThe more contributors a project has, the more likely it is it stays alive\n\n\n\n\n\n\nsubscribers\n\n\n3\n\n\nMore subscribers = more popular project\n\n\n\n\n\n\nstars\n\n\n0\n\n\nMore stars = more popular project\n\n\n\n\n\n\nforks\n\n\n0\n\n\nMore forks = more people seem to use/modify this project\n\n\n\n\n\n\nhas_mit_license\n\n\n20\n\n\nfastlane is MIT licensed, it's good to have plugins use MIT too\n\n\n\n\n\n\nreadme_score\n\n\n25\n\n\nHow well is the README of the document written\n\n\n\n\n\n\nage\n\n\n4\n\n\nProject that have been around for longer tend to be more stable\n\n\n\n\n\n\nmajor_release\n\n\n0\n\n\nPost 1.0 releases are great\n\n\n\n\n\n\ngithub_issues\n\n\n0\n\n\nLots of open issues are not a good sign usually, unless the project is really popular\n\n\n\n\n\n\ndownloads\n\n\n3\n\n\nMore downloads = more users have been using the plugin for a while\n\n\n\n\n\n\ntests\n\n\n3\n\n\nThe more tests a plugin has, the better\n\n\n\n\n\n\n\n\n\n\n\n\n  \nOpen on GitHub\n\n\n\n\n\n\n\n\n64\n\n\n\nelux_actions\n\n\n\nvia Dennis Granath\n\n\n\n\n\nPlugin including actions for releasing the android SDK\n\n\n\n\n\n\nScore details\n\n\n\n\n\n\n\n\nMetric\n\n\nPoints\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\ncontributors\n\n\n0\n\n\nThe more contributors a project has, the more likely it is it stays alive\n\n\n\n\n\n\nsubscribers\n\n\n0\n\n\nMore subscribers = more popular project\n\n\n\n\n\n\nstars\n\n\n0\n\n\nMore stars = more popular project\n\n\n\n\n\n\nforks\n\n\n0\n\n\nMore forks = more people seem to use/modify this project\n\n\n\n\n\n\nhas_mit_license\n\n\n20\n\n\nfastlane is MIT licensed, it's good to have plugins use MIT too\n\n\n\n\n\n\nreadme_score\n\n\n0\n\n\nHow well is the README of the document written\n\n\n\n\n\n\nage\n\n\n0\n\n\nProject that have been around for longer tend to be more stable\n\n\n\n\n\n\nmajor_release\n\n\n30\n\n\nPost 1.0 releases are great\n\n\n\n\n\n\ngithub_issues\n\n\n0\n\n\nLots of open issues are not a good sign usually, unless the project is really popular\n\n\n\n\n\n\ndownloads\n\n\n14\n\n\nMore downloads = more users have been using the plugin for a while\n\n\n\n\n\n\ntests\n\n\n0\n\n\nThe more tests a plugin has, the better\n\n\n\n\n\n\n\n\n\n\n\n\n  \nOpen website\n\n  \n(no GitHub link provided in gemspec)\n\n\n\n\n\n\n\n\n63\n\n\n\ndroidicon\n\n\n\nvia @chrhsmt\n\n\n\n\n\nGenerate required icon sizes and iconset from a master application icon\n\n\n\n\n\n\nScore details\n\n\n\n\n\n\n\n\nMetric\n\n\nPoints\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\ncontributors\n\n\n6\n\n\nThe more contributors a project has, the more likely it is it stays alive\n\n\n\n\n\n\nsubscribers\n\n\n3\n\n\nMore subscribers = more popular project\n\n\n\n\n\n\nstars\n\n\n0\n\n\nMore stars = more popular project\n\n\n\n\n\n\nforks\n\n\n0\n\n\nMore forks = more people seem to use/modify this project\n\n\n\n\n\n\nhas_mit_license\n\n\n20\n\n\nfastlane is MIT licensed, it's good to have plugins use MIT too\n\n\n\n\n\n\nreadme_score\n\n\n25\n\n\nHow well is the README of the document written\n\n\n\n\n\n\nage\n\n\n5\n\n\nProject that have been around for longer tend to be more stable\n\n\n\n\n\n\nmajor_release\n\n\n0\n\n\nPost 1.0 releases are great\n\n\n\n\n\n\ngithub_issues\n\n\n0\n\n\nLots of open issues are not a good sign usually, unless the project is really popular\n\n\n\n\n\n\ndownloads\n\n\n4\n\n\nMore downloads = more users have been using the plugin for a while\n\n\n\n\n\n\ntests\n\n\n0\n\n\nThe more tests a plugin has, the better\n\n\n\n\n\n\n\n\n\n\n\n\n  \nOpen on GitHub\n\n\n\n\n\n\n\n\n62\n\n\n\napperian\n\n\n\nvia Tomi Blank\n\n\n\n\n\nAllows to upload your IPA file to Apperian\n\n\n\n\n\n\nScore details\n\n\n\n\n\n\n\n\nMetric\n\n\nPoints\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\ncontributors\n\n\n6\n\n\nThe more contributors a project has, the more likely it is it stays alive\n\n\n\n\n\n\nsubscribers\n\n\n3\n\n\nMore subscribers = more popular project\n\n\n\n\n\n\nstars\n\n\n0\n\n\nMore stars = more popular project\n\n\n\n\n\n\nforks\n\n\n0\n\n\nMore forks = more people seem to use/modify this project\n\n\n\n\n\n\nhas_mit_license\n\n\n20\n\n\nfastlane is MIT licensed, it's good to have plugins use MIT too\n\n\n\n\n\n\nreadme_score\n\n\n25\n\n\nHow well is the README of the document written\n\n\n\n\n\n\nage\n\n\n4\n\n\nProject that have been around for longer tend to be more stable\n\n\n\n\n\n\nmajor_release\n\n\n0\n\n\nPost 1.0 releases are great\n\n\n\n\n\n\ngithub_issues\n\n\n0\n\n\nLots of open issues are not a good sign usually, unless the project is really popular\n\n\n\n\n\n\ndownloads\n\n\n1\n\n\nMore downloads = more users have been using the plugin for a while\n\n\n\n\n\n\ntests\n\n\n3\n\n\nThe more tests a plugin has, the better\n\n\n\n\n\n\n\n\n\n\n\n\n  \nOpen on GitHub\n\n\n\n\n\n\n\n\n62\n\n\n\nxml_editor\n\n\n\nvia Jonathan Ritchie\n\n\n\n\n\nGeneric xml editor for iOS and Android projects.\n\n\n\n\n\n\nScore details\n\n\n\n\n\n\n\n\nMetric\n\n\nPoints\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\ncontributors\n\n\n6\n\n\nThe more contributors a project has, the more likely it is it stays alive\n\n\n\n\n\n\nsubscribers\n\n\n0\n\n\nMore subscribers = more popular project\n\n\n\n\n\n\nstars\n\n\n0\n\n\nMore stars = more popular project\n\n\n\n\n\n\nforks\n\n\n5\n\n\nMore forks = more people seem to use/modify this project\n\n\n\n\n\n\nhas_mit_license\n\n\n20\n\n\nfastlane is MIT licensed, it's good to have plugins use MIT too\n\n\n\n\n\n\nreadme_score\n\n\n25\n\n\nHow well is the README of the document written\n\n\n\n\n\n\nage\n\n\n2\n\n\nProject that have been around for longer tend to be more stable\n\n\n\n\n\n\nmajor_release\n\n\n0\n\n\nPost 1.0 releases are great\n\n\n\n\n\n\ngithub_issues\n\n\n-1\n\n\nLots of open issues are not a good sign usually, unless the project is really popular\n\n\n\n\n\n\ndownloads\n\n\n2\n\n\nMore downloads = more users have been using the plugin for a while\n\n\n\n\n\n\ntests\n\n\n3\n\n\nThe more tests a plugin has, the better\n\n\n\n\n\n\n\n\n\n\n\n\n  \nOpen on GitHub\n\n\n\n\n\n\n\n\n62\n\n\n\nrun_lane\n\n\n\nvia Jonathan Ritchie\n\n\n\n\n\nRun a specified fastlane lane in your project.\n\n\n\n\n\n\nScore details\n\n\n\n\n\n\n\n\nMetric\n\n\nPoints\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\ncontributors\n\n\n6\n\n\nThe more contributors a project has, the more likely it is it stays alive\n\n\n\n\n\n\nsubscribers\n\n\n0\n\n\nMore subscribers = more popular project\n\n\n\n\n\n\nstars\n\n\n0\n\n\nMore stars = more popular project\n\n\n\n\n\n\nforks\n\n\n0\n\n\nMore forks = more people seem to use/modify this project\n\n\n\n\n\n\nhas_mit_license\n\n\n20\n\n\nfastlane is MIT licensed, it's good to have plugins use MIT too\n\n\n\n\n\n\nreadme_score\n\n\n25\n\n\nHow well is the README of the document written\n\n\n\n\n\n\nage\n\n\n2\n\n\nProject that have been around for longer tend to be more stable\n\n\n\n\n\n\nmajor_release\n\n\n0\n\n\nPost 1.0 releases are great\n\n\n\n\n\n\ngithub_issues\n\n\n0\n\n\nLots of open issues are not a good sign usually, unless the project is really popular\n\n\n\n\n\n\ndownloads\n\n\n6\n\n\nMore downloads = more users have been using the plugin for a while\n\n\n\n\n\n\ntests\n\n\n3\n\n\nThe more tests a plugin has, the better\n\n\n\n\n\n\n\n\n\n\n\n\n  \nOpen on GitHub\n\n\n\n\n\n\n\n\n61\n\n\n\nupdate_build_settings_key\n\n\n\nvia ungacy\n\n\n\n\n\nUpdated code signing settings from 'Automatic' to a specific profile\n\n\n\n\n\n\nScore details\n\n\n\n\n\n\n\n\nMetric\n\n\nPoints\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\ncontributors\n\n\n0\n\n\nThe more contributors a project has, the more likely it is it stays alive\n\n\n\n\n\n\nsubscribers\n\n\n3\n\n\nMore subscribers = more popular project\n\n\n\n\n\n\nstars\n\n\n3\n\n\nMore stars = more popular project\n\n\n\n\n\n\nforks\n\n\n0\n\n\nMore forks = more people seem to use/modify this project\n\n\n\n\n\n\nhas_mit_license\n\n\n20\n\n\nfastlane is MIT licensed, it's good to have plugins use MIT too\n\n\n\n\n\n\nreadme_score\n\n\n25\n\n\nHow well is the README of the document written\n\n\n\n\n\n\nage\n\n\n3\n\n\nProject that have been around for longer tend to be more stable\n\n\n\n\n\n\nmajor_release\n\n\n0\n\n\nPost 1.0 releases are great\n\n\n\n\n\n\ngithub_issues\n\n\n0\n\n\nLots of open issues are not a good sign usually, unless the project is really popular\n\n\n\n\n\n\ndownloads\n\n\n4\n\n\nMore downloads = more users have been using the plugin for a while\n\n\n\n\n\n\ntests\n\n\n3\n\n\nThe more tests a plugin has, the better\n\n\n\n\n\n\n\n\n\n\n\n\n  \nOpen on GitHub\n\n\n\n\n\n\n\n\n60\n\n\n\ntransifex\n\n\n\nvia junjie\n\n\n\n\n\nbasic transifex wrapper\n\n\n\n\n\n\nScore details\n\n\n\n\n\n\n\n\nMetric\n\n\nPoints\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\ncontributors\n\n\n6\n\n\nThe more contributors a project has, the more likely it is it stays alive\n\n\n\n\n\n\nsubscribers\n\n\n3\n\n\nMore subscribers = more popular project\n\n\n\n\n\n\nstars\n\n\n1\n\n\nMore stars = more popular project\n\n\n\n\n\n\nforks\n\n\n0\n\n\nMore forks = more people seem to use/modify this project\n\n\n\n\n\n\nhas_mit_license\n\n\n20\n\n\nfastlane is MIT licensed, it's good to have plugins use MIT too\n\n\n\n\n\n\nreadme_score\n\n\n25\n\n\nHow well is the README of the document written\n\n\n\n\n\n\nage\n\n\n0\n\n\nProject that have been around for longer tend to be more stable\n\n\n\n\n\n\nmajor_release\n\n\n0\n\n\nPost 1.0 releases are great\n\n\n\n\n\n\ngithub_issues\n\n\n0\n\n\nLots of open issues are not a good sign usually, unless the project is really popular\n\n\n\n\n\n\ndownloads\n\n\n2\n\n\nMore downloads = more users have been using the plugin for a while\n\n\n\n\n\n\ntests\n\n\n3\n\n\nThe more tests a plugin has, the better\n\n\n\n\n\n\n\n\n\n\n\n\n  \nOpen on GitHub\n\n\n\n\n\n\n\n\n59\n\n\n\nfind_replace_string\n\n\n\nvia Jonathan Ritchie\n\n\n\n\n\nFind a string in a file and replace it with a new one.\n\n\n\n\n\n\nScore details\n\n\n\n\n\n\n\n\nMetric\n\n\nPoints\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\ncontributors\n\n\n6\n\n\nThe more contributors a project has, the more likely it is it stays alive\n\n\n\n\n\n\nsubscribers\n\n\n0\n\n\nMore subscribers = more popular project\n\n\n\n\n\n\nstars\n\n\n0\n\n\nMore stars = more popular project\n\n\n\n\n\n\nforks\n\n\n0\n\n\nMore forks = more people seem to use/modify this project\n\n\n\n\n\n\nhas_mit_license\n\n\n20\n\n\nfastlane is MIT licensed, it's good to have plugins use MIT too\n\n\n\n\n\n\nreadme_score\n\n\n25\n\n\nHow well is the README of the document written\n\n\n\n\n\n\nage\n\n\n2\n\n\nProject that have been around for longer tend to be more stable\n\n\n\n\n\n\nmajor_release\n\n\n0\n\n\nPost 1.0 releases are great\n\n\n\n\n\n\ngithub_issues\n\n\n0\n\n\nLots of open issues are not a good sign usually, unless the project is really popular\n\n\n\n\n\n\ndownloads\n\n\n3\n\n\nMore downloads = more users have been using the plugin for a while\n\n\n\n\n\n\ntests\n\n\n3\n\n\nThe more tests a plugin has, the better\n\n\n\n\n\n\n\n\n\n\n\n\n  \nOpen on GitHub\n\n\n\n\n\n\n\n\n59\n\n\n\ngit_switch_branch\n\n\n\nvia zhangqi\n\n\n\n\n\nswitch to branch\n\n\n\n\n\n\nScore details\n\n\n\n\n\n\n\n\nMetric\n\n\nPoints\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\ncontributors\n\n\n6\n\n\nThe more contributors a project has, the more likely it is it stays alive\n\n\n\n\n\n\nsubscribers\n\n\n3\n\n\nMore subscribers = more popular project\n\n\n\n\n\n\nstars\n\n\n1\n\n\nMore stars = more popular project\n\n\n\n\n\n\nforks\n\n\n0\n\n\nMore forks = more people seem to use/modify this project\n\n\n\n\n\n\nhas_mit_license\n\n\n20\n\n\nfastlane is MIT licensed, it's good to have plugins use MIT too\n\n\n\n\n\n\nreadme_score\n\n\n25\n\n\nHow well is the README of the document written\n\n\n\n\n\n\nage\n\n\n0\n\n\nProject that have been around for longer tend to be more stable\n\n\n\n\n\n\nmajor_release\n\n\n0\n\n\nPost 1.0 releases are great\n\n\n\n\n\n\ngithub_issues\n\n\n0\n\n\nLots of open issues are not a good sign usually, unless the project is really popular\n\n\n\n\n\n\ndownloads\n\n\n1\n\n\nMore downloads = more users have been using the plugin for a while\n\n\n\n\n\n\ntests\n\n\n3\n\n\nThe more tests a plugin has, the better\n\n\n\n\n\n\n\n\n\n\n\n\n  \nOpen on GitHub\n\n\n\n\n\n\n\n\n59\n\n\n\nxliff_en_gen\n\n\n\nvia alexander sun\n\n\n\n\n\ngen Localizable.strings file from xliff\n\n\n\n\n\n\nScore details\n\n\n\n\n\n\n\n\nMetric\n\n\nPoints\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\ncontributors\n\n\n0\n\n\nThe more contributors a project has, the more likely it is it stays alive\n\n\n\n\n\n\nsubscribers\n\n\n0\n\n\nMore subscribers = more popular project\n\n\n\n\n\n\nstars\n\n\n0\n\n\nMore stars = more popular project\n\n\n\n\n\n\nforks\n\n\n0\n\n\nMore forks = more people seem to use/modify this project\n\n\n\n\n\n\nhas_mit_license\n\n\n20\n\n\nfastlane is MIT licensed, it's good to have plugins use MIT too\n\n\n\n\n\n\nreadme_score\n\n\n25\n\n\nHow well is the README of the document written\n\n\n\n\n\n\nage\n\n\n3\n\n\nProject that have been around for longer tend to be more stable\n\n\n\n\n\n\nmajor_release\n\n\n0\n\n\nPost 1.0 releases are great\n\n\n\n\n\n\ngithub_issues\n\n\n0\n\n\nLots of open issues are not a good sign usually, unless the project is really popular\n\n\n\n\n\n\ndownloads\n\n\n8\n\n\nMore downloads = more users have been using the plugin for a while\n\n\n\n\n\n\ntests\n\n\n3\n\n\nThe more tests a plugin has, the better\n\n\n\n\n\n\n\n\n\n\n\n\n  \nOpen on GitHub\n\n\n\n\n\n\n\n\n58\n\n\n\nuser_default_set\n\n\n\nvia zhangqi\n\n\n\n\n\nfastlane save user default like ios userDefault\n\n\n\n\n\n\nScore details\n\n\n\n\n\n\n\n\nMetric\n\n\nPoints\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\ncontributors\n\n\n6\n\n\nThe more contributors a project has, the more likely it is it stays alive\n\n\n\n\n\n\nsubscribers\n\n\n3\n\n\nMore subscribers = more popular project\n\n\n\n\n\n\nstars\n\n\n1\n\n\nMore stars = more popular project\n\n\n\n\n\n\nforks\n\n\n0\n\n\nMore forks = more people seem to use/modify this project\n\n\n\n\n\n\nhas_mit_license\n\n\n20\n\n\nfastlane is MIT licensed, it's good to have plugins use MIT too\n\n\n\n\n\n\nreadme_score\n\n\n25\n\n\nHow well is the README of the document written\n\n\n\n\n\n\nage\n\n\n0\n\n\nProject that have been around for longer tend to be more stable\n\n\n\n\n\n\nmajor_release\n\n\n0\n\n\nPost 1.0 releases are great\n\n\n\n\n\n\ngithub_issues\n\n\n0\n\n\nLots of open issues are not a good sign usually, unless the project is really popular\n\n\n\n\n\n\ndownloads\n\n\n0\n\n\nMore downloads = more users have been using the plugin for a while\n\n\n\n\n\n\ntests\n\n\n3\n\n\nThe more tests a plugin has, the better\n\n\n\n\n\n\n\n\n\n\n\n\n  \nOpen on GitHub\n\n\n\n\n\n\n\n\n58\n\n\n\nuser_default_set\n\n\n\nvia zhangqi\n\n\n\n\n\nfastlane save user default like ios userDefault\n\n\n\n\n\n\nScore details\n\n\n\n\n\n\n\n\nMetric\n\n\nPoints\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\ncontributors\n\n\n6\n\n\nThe more contributors a project has, the more likely it is it stays alive\n\n\n\n\n\n\nsubscribers\n\n\n3\n\n\nMore subscribers = more popular project\n\n\n\n\n\n\nstars\n\n\n1\n\n\nMore stars = more popular project\n\n\n\n\n\n\nforks\n\n\n0\n\n\nMore forks = more people seem to use/modify this project\n\n\n\n\n\n\nhas_mit_license\n\n\n20\n\n\nfastlane is MIT licensed, it's good to have plugins use MIT too\n\n\n\n\n\n\nreadme_score\n\n\n25\n\n\nHow well is the README of the document written\n\n\n\n\n\n\nage\n\n\n0\n\n\nProject that have been around for longer tend to be more stable\n\n\n\n\n\n\nmajor_release\n\n\n0\n\n\nPost 1.0 releases are great\n\n\n\n\n\n\ngithub_issues\n\n\n0\n\n\nLots of open issues are not a good sign usually, unless the project is really popular\n\n\n\n\n\n\ndownloads\n\n\n0\n\n\nMore downloads = more users have been using the plugin for a while\n\n\n\n\n\n\ntests\n\n\n3\n\n\nThe more tests a plugin has, the better\n\n\n\n\n\n\n\n\n\n\n\n\n  \nOpen on GitHub\n\n\n\n\n\n\n\n\n58\n\n\n\ngit_status_clean\n\n\n\nvia zhangqi\n\n\n\n\n\nclean git status\n\n\n\n\n\n\nScore details\n\n\n\n\n\n\n\n\nMetric\n\n\nPoints\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\ncontributors\n\n\n6\n\n\nThe more contributors a project has, the more likely it is it stays alive\n\n\n\n\n\n\nsubscribers\n\n\n3\n\n\nMore subscribers = more popular project\n\n\n\n\n\n\nstars\n\n\n1\n\n\nMore stars = more popular project\n\n\n\n\n\n\nforks\n\n\n0\n\n\nMore forks = more people seem to use/modify this project\n\n\n\n\n\n\nhas_mit_license\n\n\n20\n\n\nfastlane is MIT licensed, it's good to have plugins use MIT too\n\n\n\n\n\n\nreadme_score\n\n\n25\n\n\nHow well is the README of the document written\n\n\n\n\n\n\nage\n\n\n0\n\n\nProject that have been around for longer tend to be more stable\n\n\n\n\n\n\nmajor_release\n\n\n0\n\n\nPost 1.0 releases are great\n\n\n\n\n\n\ngithub_issues\n\n\n0\n\n\nLots of open issues are not a good sign usually, unless the project is really popular\n\n\n\n\n\n\ndownloads\n\n\n0\n\n\nMore downloads = more users have been using the plugin for a while\n\n\n\n\n\n\ntests\n\n\n3\n\n\nThe more tests a plugin has, the better\n\n\n\n\n\n\n\n\n\n\n\n\n  \nOpen on GitHub\n\n\n\n\n\n\n\n\n58\n\n\n\nuser_default_get\n\n\n\nvia zhangqi\n\n\n\n\n\nget value like ios userDefault\n\n\n\n\n\n\nScore details\n\n\n\n\n\n\n\n\nMetric\n\n\nPoints\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\ncontributors\n\n\n6\n\n\nThe more contributors a project has, the more likely it is it stays alive\n\n\n\n\n\n\nsubscribers\n\n\n3\n\n\nMore subscribers = more popular project\n\n\n\n\n\n\nstars\n\n\n1\n\n\nMore stars = more popular project\n\n\n\n\n\n\nforks\n\n\n0\n\n\nMore forks = more people seem to use/modify this project\n\n\n\n\n\n\nhas_mit_license\n\n\n20\n\n\nfastlane is MIT licensed, it's good to have plugins use MIT too\n\n\n\n\n\n\nreadme_score\n\n\n25\n\n\nHow well is the README of the document written\n\n\n\n\n\n\nage\n\n\n0\n\n\nProject that have been around for longer tend to be more stable\n\n\n\n\n\n\nmajor_release\n\n\n0\n\n\nPost 1.0 releases are great\n\n\n\n\n\n\ngithub_issues\n\n\n0\n\n\nLots of open issues are not a good sign usually, unless the project is really popular\n\n\n\n\n\n\ndownloads\n\n\n0\n\n\nMore downloads = more users have been using the plugin for a while\n\n\n\n\n\n\ntests\n\n\n3\n\n\nThe more tests a plugin has, the better\n\n\n\n\n\n\n\n\n\n\n\n\n  \nOpen on GitHub\n\n\n\n\n\n\n\n\n57\n\n\n\nreplace_file\n\n\n\nvia Jonathan Ritchie\n\n\n\n\n\nReplace any file in your mobile project.\n\n\n\n\n\n\nScore details\n\n\n\n\n\n\n\n\nMetric\n\n\nPoints\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\ncontributors\n\n\n6\n\n\nThe more contributors a project has, the more likely it is it stays alive\n\n\n\n\n\n\nsubscribers\n\n\n0\n\n\nMore subscribers = more popular project\n\n\n\n\n\n\nstars\n\n\n0\n\n\nMore stars = more popular project\n\n\n\n\n\n\nforks\n\n\n0\n\n\nMore forks = more people seem to use/modify this project\n\n\n\n\n\n\nhas_mit_license\n\n\n20\n\n\nfastlane is MIT licensed, it's good to have plugins use MIT too\n\n\n\n\n\n\nreadme_score\n\n\n25\n\n\nHow well is the README of the document written\n\n\n\n\n\n\nage\n\n\n2\n\n\nProject that have been around for longer tend to be more stable\n\n\n\n\n\n\nmajor_release\n\n\n0\n\n\nPost 1.0 releases are great\n\n\n\n\n\n\ngithub_issues\n\n\n0\n\n\nLots of open issues are not a good sign usually, unless the project is really popular\n\n\n\n\n\n\ndownloads\n\n\n1\n\n\nMore downloads = more users have been using the plugin for a while\n\n\n\n\n\n\ntests\n\n\n3\n\n\nThe more tests a plugin has, the better\n\n\n\n\n\n\n\n\n\n\n\n\n  \nOpen on GitHub\n\n\n\n\n\n\n\n\n57\n\n\n\nload_json\n\n\n\nvia Felix Krause\n\n\n\n\n\nLoads a local JSON file and parses it\n\n\n\n\n\n\nScore details\n\n\n\n\n\n\n\n\nMetric\n\n\nPoints\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\ncontributors\n\n\n6\n\n\nThe more contributors a project has, the more likely it is it stays alive\n\n\n\n\n\n\nsubscribers\n\n\n3\n\n\nMore subscribers = more popular project\n\n\n\n\n\n\nstars\n\n\n1\n\n\nMore stars = more popular project\n\n\n\n\n\n\nforks\n\n\n0\n\n\nMore forks = more people seem to use/modify this project\n\n\n\n\n\n\nhas_mit_license\n\n\n20\n\n\nfastlane is MIT licensed, it's good to have plugins use MIT too\n\n\n\n\n\n\nreadme_score\n\n\n25\n\n\nHow well is the README of the document written\n\n\n\n\n\n\nage\n\n\n1\n\n\nProject that have been around for longer tend to be more stable\n\n\n\n\n\n\nmajor_release\n\n\n0\n\n\nPost 1.0 releases are great\n\n\n\n\n\n\ngithub_issues\n\n\n0\n\n\nLots of open issues are not a good sign usually, unless the project is really popular\n\n\n\n\n\n\ndownloads\n\n\n1\n\n\nMore downloads = more users have been using the plugin for a while\n\n\n\n\n\n\ntests\n\n\n0\n\n\nThe more tests a plugin has, the better\n\n\n\n\n\n\n\n\n\n\n\n\n  \nOpen on GitHub\n\n\n\n\n\n\n\n\n54\n\n\n\ngit_info_extract\n\n\n\nvia alexander sun\n\n\n\n\n\nExtract JIRA information from git merge\n\n\n\n\n\n\nScore details\n\n\n\n\n\n\n\n\nMetric\n\n\nPoints\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\ncontributors\n\n\n0\n\n\nThe more contributors a project has, the more likely it is it stays alive\n\n\n\n\n\n\nsubscribers\n\n\n0\n\n\nMore subscribers = more popular project\n\n\n\n\n\n\nstars\n\n\n0\n\n\nMore stars = more popular project\n\n\n\n\n\n\nforks\n\n\n0\n\n\nMore forks = more people seem to use/modify this project\n\n\n\n\n\n\nhas_mit_license\n\n\n20\n\n\nfastlane is MIT licensed, it's good to have plugins use MIT too\n\n\n\n\n\n\nreadme_score\n\n\n25\n\n\nHow well is the README of the document written\n\n\n\n\n\n\nage\n\n\n2\n\n\nProject that have been around for longer tend to be more stable\n\n\n\n\n\n\nmajor_release\n\n\n0\n\n\nPost 1.0 releases are great\n\n\n\n\n\n\ngithub_issues\n\n\n0\n\n\nLots of open issues are not a good sign usually, unless the project is really popular\n\n\n\n\n\n\ndownloads\n\n\n4\n\n\nMore downloads = more users have been using the plugin for a while\n\n\n\n\n\n\ntests\n\n\n3\n\n\nThe more tests a plugin has, the better\n\n\n\n\n\n\n\n\n\n\n\n\n  \nOpen on GitHub\n\n\n\n\n\n\n\n\n53\n\n\n\nincrement_version_code_android\n\n\n\nvia SimoneCorsini\n\n\n\n\n\nIncrement the version code of your android project, supporting different product flavors.\n\n\n\n\n\n\nScore details\n\n\n\n\n\n\n\n\nMetric\n\n\nPoints\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\ncontributors\n\n\n0\n\n\nThe more contributors a project has, the more likely it is it stays alive\n\n\n\n\n\n\nsubscribers\n\n\n3\n\n\nMore subscribers = more popular project\n\n\n\n\n\n\nstars\n\n\n0\n\n\nMore stars = more popular project\n\n\n\n\n\n\nforks\n\n\n0\n\n\nMore forks = more people seem to use/modify this project\n\n\n\n\n\n\nhas_mit_license\n\n\n20\n\n\nfastlane is MIT licensed, it's good to have plugins use MIT too\n\n\n\n\n\n\nreadme_score\n\n\n25\n\n\nHow well is the README of the document written\n\n\n\n\n\n\nage\n\n\n1\n\n\nProject that have been around for longer tend to be more stable\n\n\n\n\n\n\nmajor_release\n\n\n0\n\n\nPost 1.0 releases are great\n\n\n\n\n\n\ngithub_issues\n\n\n0\n\n\nLots of open issues are not a good sign usually, unless the project is really popular\n\n\n\n\n\n\ndownloads\n\n\n1\n\n\nMore downloads = more users have been using the plugin for a while\n\n\n\n\n\n\ntests\n\n\n3\n\n\nThe more tests a plugin has, the better\n\n\n\n\n\n\n\n\n\n\n\n\n  \nOpen on GitHub\n\n\n\n\n\n\n\n\n53\n\n\n\nappdynamics\n\n\n\nvia Artur Rybak\n\n\n\n\n\nUpload dSYM files to AppDynamics\n\n\n\n\n\n\nScore details\n\n\n\n\n\n\n\n\nMetric\n\n\nPoints\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\ncontributors\n\n\n0\n\n\nThe more contributors a project has, the more likely it is it stays alive\n\n\n\n\n\n\nsubscribers\n\n\n3\n\n\nMore subscribers = more popular project\n\n\n\n\n\n\nstars\n\n\n0\n\n\nMore stars = more popular project\n\n\n\n\n\n\nforks\n\n\n0\n\n\nMore forks = more people seem to use/modify this project\n\n\n\n\n\n\nhas_mit_license\n\n\n20\n\n\nfastlane is MIT licensed, it's good to have plugins use MIT too\n\n\n\n\n\n\nreadme_score\n\n\n25\n\n\nHow well is the README of the document written\n\n\n\n\n\n\nage\n\n\n1\n\n\nProject that have been around for longer tend to be more stable\n\n\n\n\n\n\nmajor_release\n\n\n0\n\n\nPost 1.0 releases are great\n\n\n\n\n\n\ngithub_issues\n\n\n0\n\n\nLots of open issues are not a good sign usually, unless the project is really popular\n\n\n\n\n\n\ndownloads\n\n\n1\n\n\nMore downloads = more users have been using the plugin for a while\n\n\n\n\n\n\ntests\n\n\n3\n\n\nThe more tests a plugin has, the better\n\n\n\n\n\n\n\n\n\n\n\n\n  \nOpen on GitHub\n\n\n\n\n\n\n\n\n51\n\n\n\ngoodify_info_plist\n\n\n\nvia Lyndsey Ferguson\n\n\n\n\n\nThis plugin will update the plist so that the built application can be deployed and managed within BlackBerry's Good Dynamics Control Center for Enterprise Mobility Management.\n\n\n\n\n\n\nScore details\n\n\n\n\n\n\n\n\nMetric\n\n\nPoints\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\ncontributors\n\n\n12\n\n\nThe more contributors a project has, the more likely it is it stays alive\n\n\n\n\n\n\nsubscribers\n\n\n0\n\n\nMore subscribers = more popular project\n\n\n\n\n\n\nstars\n\n\n0\n\n\nMore stars = more popular project\n\n\n\n\n\n\nforks\n\n\n0\n\n\nMore forks = more people seem to use/modify this project\n\n\n\n\n\n\nhas_mit_license\n\n\n20\n\n\nfastlane is MIT licensed, it's good to have plugins use MIT too\n\n\n\n\n\n\nreadme_score\n\n\n0\n\n\nHow well is the README of the document written\n\n\n\n\n\n\nage\n\n\n0\n\n\nProject that have been around for longer tend to be more stable\n\n\n\n\n\n\nmajor_release\n\n\n0\n\n\nPost 1.0 releases are great\n\n\n\n\n\n\ngithub_issues\n\n\n0\n\n\nLots of open issues are not a good sign usually, unless the project is really popular\n\n\n\n\n\n\ndownloads\n\n\n19\n\n\nMore downloads = more users have been using the plugin for a while\n\n\n\n\n\n\ntests\n\n\n0\n\n\nThe more tests a plugin has, the better\n\n\n\n\n\n\n\n\n\n\n\n\n  \nOpen on GitHub\n\n\n\n\n\n\n\n\n46\n\n\n\ndeploy_file_provider\n\n\n\nvia Kamil Krzyk, Przemys\u0142aw Wo\u015bko\n\n\n\n\n\nPrepares metadata files with structure ready for AppStore, PlayStore deploy\n\n\n\n\n\n\nScore details\n\n\n\n\n\n\n\n\nMetric\n\n\nPoints\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\ncontributors\n\n\n0\n\n\nThe more contributors a project has, the more likely it is it stays alive\n\n\n\n\n\n\nsubscribers\n\n\n0\n\n\nMore subscribers = more popular project\n\n\n\n\n\n\nstars\n\n\n0\n\n\nMore stars = more popular project\n\n\n\n\n\n\nforks\n\n\n0\n\n\nMore forks = more people seem to use/modify this project\n\n\n\n\n\n\nhas_mit_license\n\n\n20\n\n\nfastlane is MIT licensed, it's good to have plugins use MIT too\n\n\n\n\n\n\nreadme_score\n\n\n0\n\n\nHow well is the README of the document written\n\n\n\n\n\n\nage\n\n\n0\n\n\nProject that have been around for longer tend to be more stable\n\n\n\n\n\n\nmajor_release\n\n\n0\n\n\nPost 1.0 releases are great\n\n\n\n\n\n\ngithub_issues\n\n\n0\n\n\nLots of open issues are not a good sign usually, unless the project is really popular\n\n\n\n\n\n\ndownloads\n\n\n26\n\n\nMore downloads = more users have been using the plugin for a while\n\n\n\n\n\n\ntests\n\n\n0\n\n\nThe more tests a plugin has, the better\n\n\n\n\n\n\n\n\n\n\n\n\n  \nOpen website\n\n  \n(no GitHub link provided in gemspec)\n\n\n\n\n\n\n\n\n44\n\n\n\ngs_project_flow_ios\n\n\n\nvia \u0421\u0435\u0440\u0433\u0435\u0438\u0306 \u0412\u0435\u0441\u0435\u043b\u043e\u0432\u0441\u043a\u0438\u0438\u0306\n\n\n\n\n\nPlugin contains project flow code for code sharing between projects\n\n\n\n\n\n\nScore details\n\n\n\n\n\n\n\n\nMetric\n\n\nPoints\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\ncontributors\n\n\n0\n\n\nThe more contributors a project has, the more likely it is it stays alive\n\n\n\n\n\n\nsubscribers\n\n\n0\n\n\nMore subscribers = more popular project\n\n\n\n\n\n\nstars\n\n\n0\n\n\nMore stars = more popular project\n\n\n\n\n\n\nforks\n\n\n0\n\n\nMore forks = more people seem to use/modify this project\n\n\n\n\n\n\nhas_mit_license\n\n\n20\n\n\nfastlane is MIT licensed, it's good to have plugins use MIT too\n\n\n\n\n\n\nreadme_score\n\n\n0\n\n\nHow well is the README of the document written\n\n\n\n\n\n\nage\n\n\n0\n\n\nProject that have been around for longer tend to be more stable\n\n\n\n\n\n\nmajor_release\n\n\n0\n\n\nPost 1.0 releases are great\n\n\n\n\n\n\ngithub_issues\n\n\n0\n\n\nLots of open issues are not a good sign usually, unless the project is really popular\n\n\n\n\n\n\ndownloads\n\n\n24\n\n\nMore downloads = more users have been using the plugin for a while\n\n\n\n\n\n\ntests\n\n\n0\n\n\nThe more tests a plugin has, the better\n\n\n\n\n\n\n\n\n\n\n\n\n  \nOpen website\n\n  \n(no GitHub link provided in gemspec)\n\n\n\n\n\n\n\n\n42\n\n\n\ncheck_good_version\n\n\n\nvia Lyndsey Ferguson\n\n\n\n\n\nChecks the version of the installed Good framework\n\n\n\n\n\n\nScore details\n\n\n\n\n\n\n\n\nMetric\n\n\nPoints\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\ncontributors\n\n\n12\n\n\nThe more contributors a project has, the more likely it is it stays alive\n\n\n\n\n\n\nsubscribers\n\n\n0\n\n\nMore subscribers = more popular project\n\n\n\n\n\n\nstars\n\n\n0\n\n\nMore stars = more popular project\n\n\n\n\n\n\nforks\n\n\n0\n\n\nMore forks = more people seem to use/modify this project\n\n\n\n\n\n\nhas_mit_license\n\n\n20\n\n\nfastlane is MIT licensed, it's good to have plugins use MIT too\n\n\n\n\n\n\nreadme_score\n\n\n0\n\n\nHow well is the README of the document written\n\n\n\n\n\n\nage\n\n\n0\n\n\nProject that have been around for longer tend to be more stable\n\n\n\n\n\n\nmajor_release\n\n\n0\n\n\nPost 1.0 releases are great\n\n\n\n\n\n\ngithub_issues\n\n\n0\n\n\nLots of open issues are not a good sign usually, unless the project is really popular\n\n\n\n\n\n\ndownloads\n\n\n10\n\n\nMore downloads = more users have been using the plugin for a while\n\n\n\n\n\n\ntests\n\n\n0\n\n\nThe more tests a plugin has, the better\n\n\n\n\n\n\n\n\n\n\n\n\n  \nOpen on GitHub\n\n\n\n\n\n\n\n\n41\n\n\n\nacknowledgements\n\n\n\nvia Simon Rice, Christophe Knage\n\n\n\n\n\nUse Fastlane to give credit where it's rightfully due\n\n\n\n\n\n\nScore details\n\n\n\n\n\n\n\n\nMetric\n\n\nPoints\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\ncontributors\n\n\n6\n\n\nThe more contributors a project has, the more likely it is it stays alive\n\n\n\n\n\n\nsubscribers\n\n\n0\n\n\nMore subscribers = more popular project\n\n\n\n\n\n\nstars\n\n\n0\n\n\nMore stars = more popular project\n\n\n\n\n\n\nforks\n\n\n0\n\n\nMore forks = more people seem to use/modify this project\n\n\n\n\n\n\nhas_mit_license\n\n\n-50\n\n\nfastlane is MIT licensed, it's good to have plugins use MIT too\n\n\n\n\n\n\nreadme_score\n\n\n50\n\n\nHow well is the README of the document written\n\n\n\n\n\n\nage\n\n\n1\n\n\nProject that have been around for longer tend to be more stable\n\n\n\n\n\n\nmajor_release\n\n\n30\n\n\nPost 1.0 releases are great\n\n\n\n\n\n\ngithub_issues\n\n\n0\n\n\nLots of open issues are not a good sign usually, unless the project is really popular\n\n\n\n\n\n\ndownloads\n\n\n1\n\n\nMore downloads = more users have been using the plugin for a while\n\n\n\n\n\n\ntests\n\n\n3\n\n\nThe more tests a plugin has, the better\n\n\n\n\n\n\n\n\n\n\n\n\n  \nOpen on GitHub\n\n\n\n\n\n\n\n\n39\n\n\n\ngithub_job_status\n\n\n\nvia Justin Singer\n\n\n\n\n\nPost the status of your test jobs to your pull requests\n\n\n\n\n\n\nScore details\n\n\n\n\n\n\n\n\nMetric\n\n\nPoints\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\ncontributors\n\n\n12\n\n\nThe more contributors a project has, the more likely it is it stays alive\n\n\n\n\n\n\nsubscribers\n\n\n0\n\n\nMore subscribers = more popular project\n\n\n\n\n\n\nstars\n\n\n0\n\n\nMore stars = more popular project\n\n\n\n\n\n\nforks\n\n\n0\n\n\nMore forks = more people seem to use/modify this project\n\n\n\n\n\n\nhas_mit_license\n\n\n20\n\n\nfastlane is MIT licensed, it's good to have plugins use MIT too\n\n\n\n\n\n\nreadme_score\n\n\n0\n\n\nHow well is the README of the document written\n\n\n\n\n\n\nage\n\n\n0\n\n\nProject that have been around for longer tend to be more stable\n\n\n\n\n\n\nmajor_release\n\n\n0\n\n\nPost 1.0 releases are great\n\n\n\n\n\n\ngithub_issues\n\n\n0\n\n\nLots of open issues are not a good sign usually, unless the project is really popular\n\n\n\n\n\n\ndownloads\n\n\n7\n\n\nMore downloads = more users have been using the plugin for a while\n\n\n\n\n\n\ntests\n\n\n0\n\n\nThe more tests a plugin has, the better\n\n\n\n\n\n\n\n\n\n\n\n\n  \nOpen on GitHub\n\n\n\n\n\n\n\n\n38\n\n\n\nemoji_fetcher\n\n\n\nvia Felix Krause\n\n\n\n\n\nFetch the emoji font file and copy it to a local directory\n\n\n\n\n\n\nScore details\n\n\n\n\n\n\n\n\nMetric\n\n\nPoints\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\ncontributors\n\n\n12\n\n\nThe more contributors a project has, the more likely it is it stays alive\n\n\n\n\n\n\nsubscribers\n\n\n0\n\n\nMore subscribers = more popular project\n\n\n\n\n\n\nstars\n\n\n0\n\n\nMore stars = more popular project\n\n\n\n\n\n\nforks\n\n\n0\n\n\nMore forks = more people seem to use/modify this project\n\n\n\n\n\n\nhas_mit_license\n\n\n20\n\n\nfastlane is MIT licensed, it's good to have plugins use MIT too\n\n\n\n\n\n\nreadme_score\n\n\n0\n\n\nHow well is the README of the document written\n\n\n\n\n\n\nage\n\n\n0\n\n\nProject that have been around for longer tend to be more stable\n\n\n\n\n\n\nmajor_release\n\n\n0\n\n\nPost 1.0 releases are great\n\n\n\n\n\n\ngithub_issues\n\n\n0\n\n\nLots of open issues are not a good sign usually, unless the project is really popular\n\n\n\n\n\n\ndownloads\n\n\n6\n\n\nMore downloads = more users have been using the plugin for a while\n\n\n\n\n\n\ntests\n\n\n0\n\n\nThe more tests a plugin has, the better\n\n\n\n\n\n\n\n\n\n\n\n\n  \nOpen on GitHub\n\n\n\n\n\n\n\n\n35\n\n\n\ntransifex_api\n\n\n\nvia alexander sun\n\n\n\n\n\nbasic transifex api wrapper\n\n\n\n\n\n\nScore details\n\n\n\n\n\n\n\n\nMetric\n\n\nPoints\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\ncontributors\n\n\n12\n\n\nThe more contributors a project has, the more likely it is it stays alive\n\n\n\n\n\n\nsubscribers\n\n\n0\n\n\nMore subscribers = more popular project\n\n\n\n\n\n\nstars\n\n\n0\n\n\nMore stars = more popular project\n\n\n\n\n\n\nforks\n\n\n0\n\n\nMore forks = more people seem to use/modify this project\n\n\n\n\n\n\nhas_mit_license\n\n\n20\n\n\nfastlane is MIT licensed, it's good to have plugins use MIT too\n\n\n\n\n\n\nreadme_score\n\n\n0\n\n\nHow well is the README of the document written\n\n\n\n\n\n\nage\n\n\n0\n\n\nProject that have been around for longer tend to be more stable\n\n\n\n\n\n\nmajor_release\n\n\n0\n\n\nPost 1.0 releases are great\n\n\n\n\n\n\ngithub_issues\n\n\n0\n\n\nLots of open issues are not a good sign usually, unless the project is really popular\n\n\n\n\n\n\ndownloads\n\n\n3\n\n\nMore downloads = more users have been using the plugin for a while\n\n\n\n\n\n\ntests\n\n\n0\n\n\nThe more tests a plugin has, the better\n\n\n\n\n\n\n\n\n\n\n\n\n  \nOpen on GitHub\n\n\n\n\n\n\n\n\n34\n\n\n\nfirim\n\n\n\nvia whlsxl\n\n\n\n\n\nfirim\n\n\n\n\n\n\nScore details\n\n\n\n\n\n\n\n\nMetric\n\n\nPoints\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\ncontributors\n\n\n12\n\n\nThe more contributors a project has, the more likely it is it stays alive\n\n\n\n\n\n\nsubscribers\n\n\n0\n\n\nMore subscribers = more popular project\n\n\n\n\n\n\nstars\n\n\n0\n\n\nMore stars = more popular project\n\n\n\n\n\n\nforks\n\n\n0\n\n\nMore forks = more people seem to use/modify this project\n\n\n\n\n\n\nhas_mit_license\n\n\n20\n\n\nfastlane is MIT licensed, it's good to have plugins use MIT too\n\n\n\n\n\n\nreadme_score\n\n\n0\n\n\nHow well is the README of the document written\n\n\n\n\n\n\nage\n\n\n0\n\n\nProject that have been around for longer tend to be more stable\n\n\n\n\n\n\nmajor_release\n\n\n0\n\n\nPost 1.0 releases are great\n\n\n\n\n\n\ngithub_issues\n\n\n0\n\n\nLots of open issues are not a good sign usually, unless the project is really popular\n\n\n\n\n\n\ndownloads\n\n\n2\n\n\nMore downloads = more users have been using the plugin for a while\n\n\n\n\n\n\ntests\n\n\n0\n\n\nThe more tests a plugin has, the better\n\n\n\n\n\n\n\n\n\n\n\n\n  \nOpen on GitHub\n\n\n\n\n\n\n\n\n34\n\n\n\nfetch_itc_versions\n\n\n\nvia Bennett Rogers\n\n\n\n\n\nReturns a listing of all app versions and their latest builds from iTunes Connect.\n\n\n\n\n\n\nScore details\n\n\n\n\n\n\n\n\nMetric\n\n\nPoints\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\ncontributors\n\n\n12\n\n\nThe more contributors a project has, the more likely it is it stays alive\n\n\n\n\n\n\nsubscribers\n\n\n0\n\n\nMore subscribers = more popular project\n\n\n\n\n\n\nstars\n\n\n0\n\n\nMore stars = more popular project\n\n\n\n\n\n\nforks\n\n\n0\n\n\nMore forks = more people seem to use/modify this project\n\n\n\n\n\n\nhas_mit_license\n\n\n20\n\n\nfastlane is MIT licensed, it's good to have plugins use MIT too\n\n\n\n\n\n\nreadme_score\n\n\n0\n\n\nHow well is the README of the document written\n\n\n\n\n\n\nage\n\n\n0\n\n\nProject that have been around for longer tend to be more stable\n\n\n\n\n\n\nmajor_release\n\n\n0\n\n\nPost 1.0 releases are great\n\n\n\n\n\n\ngithub_issues\n\n\n0\n\n\nLots of open issues are not a good sign usually, unless the project is really popular\n\n\n\n\n\n\ndownloads\n\n\n2\n\n\nMore downloads = more users have been using the plugin for a while\n\n\n\n\n\n\ntests\n\n\n0\n\n\nThe more tests a plugin has, the better\n\n\n\n\n\n\n\n\n\n\n\n\n  \nOpen on GitHub\n\n\n\n\n\n\n\n\n33\n\n\n\nxcode8_srgb_workaround\n\n\n\nvia Siarhei Fiedartsou\n\n\n\n\n\nConverts PNGs and JPEGs in your project to sRGB format to avoid crashes when building with Xcode 8 for iOS 8 and earlier deployment target\n\n\n\n\n\n\nScore details\n\n\n\n\n\n\n\n\nMetric\n\n\nPoints\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\ncontributors\n\n\n12\n\n\nThe more contributors a project has, the more likely it is it stays alive\n\n\n\n\n\n\nsubscribers\n\n\n0\n\n\nMore subscribers = more popular project\n\n\n\n\n\n\nstars\n\n\n0\n\n\nMore stars = more popular project\n\n\n\n\n\n\nforks\n\n\n0\n\n\nMore forks = more people seem to use/modify this project\n\n\n\n\n\n\nhas_mit_license\n\n\n20\n\n\nfastlane is MIT licensed, it's good to have plugins use MIT too\n\n\n\n\n\n\nreadme_score\n\n\n0\n\n\nHow well is the README of the document written\n\n\n\n\n\n\nage\n\n\n0\n\n\nProject that have been around for longer tend to be more stable\n\n\n\n\n\n\nmajor_release\n\n\n0\n\n\nPost 1.0 releases are great\n\n\n\n\n\n\ngithub_issues\n\n\n0\n\n\nLots of open issues are not a good sign usually, unless the project is really popular\n\n\n\n\n\n\ndownloads\n\n\n1\n\n\nMore downloads = more users have been using the plugin for a while\n\n\n\n\n\n\ntests\n\n\n0\n\n\nThe more tests a plugin has, the better\n\n\n\n\n\n\n\n\n\n\n\n\n  \nOpen on GitHub\n\n\n\n\n\n\n\n\n33\n\n\n\ngen_dev_workspace\n\n\n\nvia Andrew Breckenridge\n\n\n\n\n\nConfigures an xcworkspace with specified xcodeprojs\n\n\n\n\n\n\nScore details\n\n\n\n\n\n\n\n\nMetric\n\n\nPoints\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\ncontributors\n\n\n12\n\n\nThe more contributors a project has, the more likely it is it stays alive\n\n\n\n\n\n\nsubscribers\n\n\n0\n\n\nMore subscribers = more popular project\n\n\n\n\n\n\nstars\n\n\n0\n\n\nMore stars = more popular project\n\n\n\n\n\n\nforks\n\n\n0\n\n\nMore forks = more people seem to use/modify this project\n\n\n\n\n\n\nhas_mit_license\n\n\n20\n\n\nfastlane is MIT licensed, it's good to have plugins use MIT too\n\n\n\n\n\n\nreadme_score\n\n\n0\n\n\nHow well is the README of the document written\n\n\n\n\n\n\nage\n\n\n0\n\n\nProject that have been around for longer tend to be more stable\n\n\n\n\n\n\nmajor_release\n\n\n0\n\n\nPost 1.0 releases are great\n\n\n\n\n\n\ngithub_issues\n\n\n0\n\n\nLots of open issues are not a good sign usually, unless the project is really popular\n\n\n\n\n\n\ndownloads\n\n\n1\n\n\nMore downloads = more users have been using the plugin for a while\n\n\n\n\n\n\ntests\n\n\n0\n\n\nThe more tests a plugin has, the better\n\n\n\n\n\n\n\n\n\n\n\n\n  \nOpen on GitHub\n\n\n\n\n\n\n\n\n33\n\n\n\nprofile_expiration_info\n\n\n\nvia Steven Chung\n\n\n\n\n\nReturns if the provisioning profile has expired and the DateTime it expires\n\n\n\n\n\n\nScore details\n\n\n\n\n\n\n\n\nMetric\n\n\nPoints\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\ncontributors\n\n\n12\n\n\nThe more contributors a project has, the more likely it is it stays alive\n\n\n\n\n\n\nsubscribers\n\n\n0\n\n\nMore subscribers = more popular project\n\n\n\n\n\n\nstars\n\n\n0\n\n\nMore stars = more popular project\n\n\n\n\n\n\nforks\n\n\n0\n\n\nMore forks = more people seem to use/modify this project\n\n\n\n\n\n\nhas_mit_license\n\n\n20\n\n\nfastlane is MIT licensed, it's good to have plugins use MIT too\n\n\n\n\n\n\nreadme_score\n\n\n0\n\n\nHow well is the README of the document written\n\n\n\n\n\n\nage\n\n\n0\n\n\nProject that have been around for longer tend to be more stable\n\n\n\n\n\n\nmajor_release\n\n\n0\n\n\nPost 1.0 releases are great\n\n\n\n\n\n\ngithub_issues\n\n\n0\n\n\nLots of open issues are not a good sign usually, unless the project is really popular\n\n\n\n\n\n\ndownloads\n\n\n1\n\n\nMore downloads = more users have been using the plugin for a while\n\n\n\n\n\n\ntests\n\n\n0\n\n\nThe more tests a plugin has, the better\n\n\n\n\n\n\n\n\n\n\n\n\n  \nOpen on GitHub\n\n\n\n\n\n\n\n\n28\n\n\n\nslack_train\n\n\n\nvia Felix Krause\n\n\n\n\n\nShow a train of the fastlane progress\n\n\n\n\n\n\nScore details\n\n\n\n\n\n\n\n\nMetric\n\n\nPoints\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\ncontributors\n\n\n0\n\n\nThe more contributors a project has, the more likely it is it stays alive\n\n\n\n\n\n\nsubscribers\n\n\n0\n\n\nMore subscribers = more popular project\n\n\n\n\n\n\nstars\n\n\n0\n\n\nMore stars = more popular project\n\n\n\n\n\n\nforks\n\n\n0\n\n\nMore forks = more people seem to use/modify this project\n\n\n\n\n\n\nhas_mit_license\n\n\n20\n\n\nfastlane is MIT licensed, it's good to have plugins use MIT too\n\n\n\n\n\n\nreadme_score\n\n\n0\n\n\nHow well is the README of the document written\n\n\n\n\n\n\nage\n\n\n0\n\n\nProject that have been around for longer tend to be more stable\n\n\n\n\n\n\nmajor_release\n\n\n0\n\n\nPost 1.0 releases are great\n\n\n\n\n\n\ngithub_issues\n\n\n0\n\n\nLots of open issues are not a good sign usually, unless the project is really popular\n\n\n\n\n\n\ndownloads\n\n\n8\n\n\nMore downloads = more users have been using the plugin for a while\n\n\n\n\n\n\ntests\n\n\n0\n\n\nThe more tests a plugin has, the better\n\n\n\n\n\n\n\n\n\n\n\n\n  \nOpen website\n\n  \n(no GitHub link provided in gemspec)\n\n\n\n\n\n\n\n\n27\n\n\n\nversion_from_last_tag\n\n\n\nvia Jeff Stein\n\n\n\n\n\nPerform a regex on last (latest) git tag and perform a regex to extract a version number such as Release 1.2.3\n\n\n\n\n\n\nScore details\n\n\n\n\n\n\n\n\nMetric\n\n\nPoints\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\ncontributors\n\n\n0\n\n\nThe more contributors a project has, the more likely it is it stays alive\n\n\n\n\n\n\nsubscribers\n\n\n0\n\n\nMore subscribers = more popular project\n\n\n\n\n\n\nstars\n\n\n0\n\n\nMore stars = more popular project\n\n\n\n\n\n\nforks\n\n\n0\n\n\nMore forks = more people seem to use/modify this project\n\n\n\n\n\n\nhas_mit_license\n\n\n20\n\n\nfastlane is MIT licensed, it's good to have plugins use MIT too\n\n\n\n\n\n\nreadme_score\n\n\n0\n\n\nHow well is the README of the document written\n\n\n\n\n\n\nage\n\n\n0\n\n\nProject that have been around for longer tend to be more stable\n\n\n\n\n\n\nmajor_release\n\n\n0\n\n\nPost 1.0 releases are great\n\n\n\n\n\n\ngithub_issues\n\n\n0\n\n\nLots of open issues are not a good sign usually, unless the project is really popular\n\n\n\n\n\n\ndownloads\n\n\n7\n\n\nMore downloads = more users have been using the plugin for a while\n\n\n\n\n\n\ntests\n\n\n0\n\n\nThe more tests a plugin has, the better\n\n\n\n\n\n\n\n\n\n\n\n\n  \nOpen website\n\n  \n(no GitHub link provided in gemspec)\n\n\n\n\n\n\n\n\n26\n\n\n\nupload_symbols_to_new_relic\n\n\n\nvia Helmut Januschka\n\n\n\n\n\nUploads dSym to New Relic\n\n\n\n\n\n\nScore details\n\n\n\n\n\n\n\n\nMetric\n\n\nPoints\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\ncontributors\n\n\n0\n\n\nThe more contributors a project has, the more likely it is it stays alive\n\n\n\n\n\n\nsubscribers\n\n\n0\n\n\nMore subscribers = more popular project\n\n\n\n\n\n\nstars\n\n\n0\n\n\nMore stars = more popular project\n\n\n\n\n\n\nforks\n\n\n0\n\n\nMore forks = more people seem to use/modify this project\n\n\n\n\n\n\nhas_mit_license\n\n\n20\n\n\nfastlane is MIT licensed, it's good to have plugins use MIT too\n\n\n\n\n\n\nreadme_score\n\n\n0\n\n\nHow well is the README of the document written\n\n\n\n\n\n\nage\n\n\n0\n\n\nProject that have been around for longer tend to be more stable\n\n\n\n\n\n\nmajor_release\n\n\n0\n\n\nPost 1.0 releases are great\n\n\n\n\n\n\ngithub_issues\n\n\n0\n\n\nLots of open issues are not a good sign usually, unless the project is really popular\n\n\n\n\n\n\ndownloads\n\n\n6\n\n\nMore downloads = more users have been using the plugin for a while\n\n\n\n\n\n\ntests\n\n\n0\n\n\nThe more tests a plugin has, the better\n\n\n\n\n\n\n\n\n\n\n\n\n  \nOpen website\n\n  \n(no GitHub link provided in gemspec)\n\n\n\n\n\n\n\n\n25\n\n\n\nlogme\n\n\n\nvia Lui\u0301s Esteves\n\n\n\n\n\nProvides a simple way to get logs from two delta commits\n\n\n\n\n\n\nScore details\n\n\n\n\n\n\n\n\nMetric\n\n\nPoints\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\ncontributors\n\n\n0\n\n\nThe more contributors a project has, the more likely it is it stays alive\n\n\n\n\n\n\nsubscribers\n\n\n0\n\n\nMore subscribers = more popular project\n\n\n\n\n\n\nstars\n\n\n0\n\n\nMore stars = more popular project\n\n\n\n\n\n\nforks\n\n\n0\n\n\nMore forks = more people seem to use/modify this project\n\n\n\n\n\n\nhas_mit_license\n\n\n20\n\n\nfastlane is MIT licensed, it's good to have plugins use MIT too\n\n\n\n\n\n\nreadme_score\n\n\n0\n\n\nHow well is the README of the document written\n\n\n\n\n\n\nage\n\n\n0\n\n\nProject that have been around for longer tend to be more stable\n\n\n\n\n\n\nmajor_release\n\n\n0\n\n\nPost 1.0 releases are great\n\n\n\n\n\n\ngithub_issues\n\n\n0\n\n\nLots of open issues are not a good sign usually, unless the project is really popular\n\n\n\n\n\n\ndownloads\n\n\n5\n\n\nMore downloads = more users have been using the plugin for a while\n\n\n\n\n\n\ntests\n\n\n0\n\n\nThe more tests a plugin has, the better\n\n\n\n\n\n\n\n\n\n\n\n\n  \nOpen website\n\n  \n(no GitHub link provided in gemspec)\n\n\n\n\n\n\n\n\n25\n\n\n\nauth0_shipper\n\n\n\nvia Hernan Zalazar\n\n\n\n\n\nOSS libraries release process for Auth0\n\n\n\n\n\n\nScore details\n\n\n\n\n\n\n\n\nMetric\n\n\nPoints\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\ncontributors\n\n\n0\n\n\nThe more contributors a project has, the more likely it is it stays alive\n\n\n\n\n\n\nsubscribers\n\n\n0\n\n\nMore subscribers = more popular project\n\n\n\n\n\n\nstars\n\n\n0\n\n\nMore stars = more popular project\n\n\n\n\n\n\nforks\n\n\n0\n\n\nMore forks = more people seem to use/modify this project\n\n\n\n\n\n\nhas_mit_license\n\n\n20\n\n\nfastlane is MIT licensed, it's good to have plugins use MIT too\n\n\n\n\n\n\nreadme_score\n\n\n0\n\n\nHow well is the README of the document written\n\n\n\n\n\n\nage\n\n\n0\n\n\nProject that have been around for longer tend to be more stable\n\n\n\n\n\n\nmajor_release\n\n\n0\n\n\nPost 1.0 releases are great\n\n\n\n\n\n\ngithub_issues\n\n\n0\n\n\nLots of open issues are not a good sign usually, unless the project is really popular\n\n\n\n\n\n\ndownloads\n\n\n5\n\n\nMore downloads = more users have been using the plugin for a while\n\n\n\n\n\n\ntests\n\n\n0\n\n\nThe more tests a plugin has, the better\n\n\n\n\n\n\n\n\n\n\n\n\n  \nOpen website\n\n  \n(no GitHub link provided in gemspec)\n\n\n\n\n\n\n\n\n24\n\n\n\nintentconfirmation\n\n\n\nvia Kamil Krzyk\n\n\n\n\n\nHalts the lane invocation, asks user to confirm if he wants to continue, may require password or key.\n\n\n\n\n\n\nScore details\n\n\n\n\n\n\n\n\nMetric\n\n\nPoints\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\ncontributors\n\n\n0\n\n\nThe more contributors a project has, the more likely it is it stays alive\n\n\n\n\n\n\nsubscribers\n\n\n0\n\n\nMore subscribers = more popular project\n\n\n\n\n\n\nstars\n\n\n0\n\n\nMore stars = more popular project\n\n\n\n\n\n\nforks\n\n\n0\n\n\nMore forks = more people seem to use/modify this project\n\n\n\n\n\n\nhas_mit_license\n\n\n20\n\n\nfastlane is MIT licensed, it's good to have plugins use MIT too\n\n\n\n\n\n\nreadme_score\n\n\n0\n\n\nHow well is the README of the document written\n\n\n\n\n\n\nage\n\n\n0\n\n\nProject that have been around for longer tend to be more stable\n\n\n\n\n\n\nmajor_release\n\n\n0\n\n\nPost 1.0 releases are great\n\n\n\n\n\n\ngithub_issues\n\n\n0\n\n\nLots of open issues are not a good sign usually, unless the project is really popular\n\n\n\n\n\n\ndownloads\n\n\n4\n\n\nMore downloads = more users have been using the plugin for a while\n\n\n\n\n\n\ntests\n\n\n0\n\n\nThe more tests a plugin has, the better\n\n\n\n\n\n\n\n\n\n\n\n\n  \nOpen website\n\n  \n(no GitHub link provided in gemspec)\n\n\n\n\n\n\n\n\n23\n\n\n\nfiglet\n\n\n\nvia Jeff Stein\n\n\n\n\n\nWrapper around figlet which makes large ascii text words\n\n\n\n\n\n\nScore details\n\n\n\n\n\n\n\n\nMetric\n\n\nPoints\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\ncontributors\n\n\n0\n\n\nThe more contributors a project has, the more likely it is it stays alive\n\n\n\n\n\n\nsubscribers\n\n\n0\n\n\nMore subscribers = more popular project\n\n\n\n\n\n\nstars\n\n\n0\n\n\nMore stars = more popular project\n\n\n\n\n\n\nforks\n\n\n0\n\n\nMore forks = more people seem to use/modify this project\n\n\n\n\n\n\nhas_mit_license\n\n\n20\n\n\nfastlane is MIT licensed, it's good to have plugins use MIT too\n\n\n\n\n\n\nreadme_score\n\n\n0\n\n\nHow well is the README of the document written\n\n\n\n\n\n\nage\n\n\n0\n\n\nProject that have been around for longer tend to be more stable\n\n\n\n\n\n\nmajor_release\n\n\n0\n\n\nPost 1.0 releases are great\n\n\n\n\n\n\ngithub_issues\n\n\n0\n\n\nLots of open issues are not a good sign usually, unless the project is really popular\n\n\n\n\n\n\ndownloads\n\n\n3\n\n\nMore downloads = more users have been using the plugin for a while\n\n\n\n\n\n\ntests\n\n\n0\n\n\nThe more tests a plugin has, the better\n\n\n\n\n\n\n\n\n\n\n\n\n  \nOpen website\n\n  \n(no GitHub link provided in gemspec)\n\n\n\n\n\n\n\n\n23\n\n\n\npixie\n\n\n\nvia Piotrek Dubiel\n\n\n\n\n\nShow your build status on PIXIE!\n\n\n\n\n\n\nScore details\n\n\n\n\n\n\n\n\nMetric\n\n\nPoints\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\ncontributors\n\n\n0\n\n\nThe more contributors a project has, the more likely it is it stays alive\n\n\n\n\n\n\nsubscribers\n\n\n0\n\n\nMore subscribers = more popular project\n\n\n\n\n\n\nstars\n\n\n0\n\n\nMore stars = more popular project\n\n\n\n\n\n\nforks\n\n\n0\n\n\nMore forks = more people seem to use/modify this project\n\n\n\n\n\n\nhas_mit_license\n\n\n20\n\n\nfastlane is MIT licensed, it's good to have plugins use MIT too\n\n\n\n\n\n\nreadme_score\n\n\n0\n\n\nHow well is the README of the document written\n\n\n\n\n\n\nage\n\n\n0\n\n\nProject that have been around for longer tend to be more stable\n\n\n\n\n\n\nmajor_release\n\n\n0\n\n\nPost 1.0 releases are great\n\n\n\n\n\n\ngithub_issues\n\n\n0\n\n\nLots of open issues are not a good sign usually, unless the project is really popular\n\n\n\n\n\n\ndownloads\n\n\n3\n\n\nMore downloads = more users have been using the plugin for a while\n\n\n\n\n\n\ntests\n\n\n0\n\n\nThe more tests a plugin has, the better\n\n\n\n\n\n\n\n\n\n\n\n\n  \nOpen website\n\n  \n(no GitHub link provided in gemspec)\n\n\n\n\n\n\n\n\n22\n\n\n\nbluepillar\n\n\n\nvia Shashikant86\n\n\n\n\n\nFastlane Plugin to Run XCUITests in Parallel using Bluepill.\n\n\n\n\n\n\nScore details\n\n\n\n\n\n\n\n\nMetric\n\n\nPoints\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\ncontributors\n\n\n0\n\n\nThe more contributors a project has, the more likely it is it stays alive\n\n\n\n\n\n\nsubscribers\n\n\n0\n\n\nMore subscribers = more popular project\n\n\n\n\n\n\nstars\n\n\n0\n\n\nMore stars = more popular project\n\n\n\n\n\n\nforks\n\n\n0\n\n\nMore forks = more people seem to use/modify this project\n\n\n\n\n\n\nhas_mit_license\n\n\n20\n\n\nfastlane is MIT licensed, it's good to have plugins use MIT too\n\n\n\n\n\n\nreadme_score\n\n\n0\n\n\nHow well is the README of the document written\n\n\n\n\n\n\nage\n\n\n0\n\n\nProject that have been around for longer tend to be more stable\n\n\n\n\n\n\nmajor_release\n\n\n0\n\n\nPost 1.0 releases are great\n\n\n\n\n\n\ngithub_issues\n\n\n0\n\n\nLots of open issues are not a good sign usually, unless the project is really popular\n\n\n\n\n\n\ndownloads\n\n\n2\n\n\nMore downloads = more users have been using the plugin for a while\n\n\n\n\n\n\ntests\n\n\n0\n\n\nThe more tests a plugin has, the better\n\n\n\n\n\n\n\n\n\n\n\n\n  \nOpen website\n\n  \n(no GitHub link provided in gemspec)\n\n\n\n\n\n\n\n\n22\n\n\n\nplayship\n\n\n\nvia Helmut Januschka\n\n\n\n\n\nInteract with Google Play Api\n\n\n\n\n\n\nScore details\n\n\n\n\n\n\n\n\nMetric\n\n\nPoints\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\ncontributors\n\n\n0\n\n\nThe more contributors a project has, the more likely it is it stays alive\n\n\n\n\n\n\nsubscribers\n\n\n0\n\n\nMore subscribers = more popular project\n\n\n\n\n\n\nstars\n\n\n0\n\n\nMore stars = more popular project\n\n\n\n\n\n\nforks\n\n\n0\n\n\nMore forks = more people seem to use/modify this project\n\n\n\n\n\n\nhas_mit_license\n\n\n20\n\n\nfastlane is MIT licensed, it's good to have plugins use MIT too\n\n\n\n\n\n\nreadme_score\n\n\n0\n\n\nHow well is the README of the document written\n\n\n\n\n\n\nage\n\n\n0\n\n\nProject that have been around for longer tend to be more stable\n\n\n\n\n\n\nmajor_release\n\n\n0\n\n\nPost 1.0 releases are great\n\n\n\n\n\n\ngithub_issues\n\n\n0\n\n\nLots of open issues are not a good sign usually, unless the project is really popular\n\n\n\n\n\n\ndownloads\n\n\n2\n\n\nMore downloads = more users have been using the plugin for a while\n\n\n\n\n\n\ntests\n\n\n0\n\n\nThe more tests a plugin has, the better\n\n\n\n\n\n\n\n\n\n\n\n\n  \nOpen website\n\n  \n(no GitHub link provided in gemspec)\n\n\n\n\n\n\n\n\n22\n\n\n\nandroid_change_app_name\n\n\n\nvia MaximusMcCann\n\n\n\n\n\nChanges the manifest's label attribute (appName).  Stores the original name for revertinng.\n\n\n\n\n\n\nScore details\n\n\n\n\n\n\n\n\nMetric\n\n\nPoints\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\ncontributors\n\n\n0\n\n\nThe more contributors a project has, the more likely it is it stays alive\n\n\n\n\n\n\nsubscribers\n\n\n0\n\n\nMore subscribers = more popular project\n\n\n\n\n\n\nstars\n\n\n0\n\n\nMore stars = more popular project\n\n\n\n\n\n\nforks\n\n\n0\n\n\nMore forks = more people seem to use/modify this project\n\n\n\n\n\n\nhas_mit_license\n\n\n20\n\n\nfastlane is MIT licensed, it's good to have plugins use MIT too\n\n\n\n\n\n\nreadme_score\n\n\n0\n\n\nHow well is the README of the document written\n\n\n\n\n\n\nage\n\n\n0\n\n\nProject that have been around for longer tend to be more stable\n\n\n\n\n\n\nmajor_release\n\n\n0\n\n\nPost 1.0 releases are great\n\n\n\n\n\n\ngithub_issues\n\n\n0\n\n\nLots of open issues are not a good sign usually, unless the project is really popular\n\n\n\n\n\n\ndownloads\n\n\n2\n\n\nMore downloads = more users have been using the plugin for a while\n\n\n\n\n\n\ntests\n\n\n0\n\n\nThe more tests a plugin has, the better\n\n\n\n\n\n\n\n\n\n\n\n\n  \nOpen website\n\n  \n(no GitHub link provided in gemspec)\n\n\n\n\n\n\n\n\n21\n\n\n\ndevicelab_bot\n\n\n\nvia Almouro\n\n\n\n\n\nAutomatically install your app on your devicelab with the devicelab bot\n\n\n\n\n\n\nScore details\n\n\n\n\n\n\n\n\nMetric\n\n\nPoints\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\ncontributors\n\n\n0\n\n\nThe more contributors a project has, the more likely it is it stays alive\n\n\n\n\n\n\nsubscribers\n\n\n0\n\n\nMore subscribers = more popular project\n\n\n\n\n\n\nstars\n\n\n0\n\n\nMore stars = more popular project\n\n\n\n\n\n\nforks\n\n\n0\n\n\nMore forks = more people seem to use/modify this project\n\n\n\n\n\n\nhas_mit_license\n\n\n20\n\n\nfastlane is MIT licensed, it's good to have plugins use MIT too\n\n\n\n\n\n\nreadme_score\n\n\n0\n\n\nHow well is the README of the document written\n\n\n\n\n\n\nage\n\n\n0\n\n\nProject that have been around for longer tend to be more stable\n\n\n\n\n\n\nmajor_release\n\n\n0\n\n\nPost 1.0 releases are great\n\n\n\n\n\n\ngithub_issues\n\n\n0\n\n\nLots of open issues are not a good sign usually, unless the project is really popular\n\n\n\n\n\n\ndownloads\n\n\n1\n\n\nMore downloads = more users have been using the plugin for a while\n\n\n\n\n\n\ntests\n\n\n0\n\n\nThe more tests a plugin has, the better\n\n\n\n\n\n\n\n\n\n\n\n\n  \nOpen website\n\n  \n(no GitHub link provided in gemspec)\n\n\n\n\n\n\n\n\n21\n\n\n\ndevresponse\n\n\n\nvia Helmut Januschka\n\n\n\n\n\nEnables Spaceship to deal with developer response\n\n\n\n\n\n\nScore details\n\n\n\n\n\n\n\n\nMetric\n\n\nPoints\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\ncontributors\n\n\n0\n\n\nThe more contributors a project has, the more likely it is it stays alive\n\n\n\n\n\n\nsubscribers\n\n\n0\n\n\nMore subscribers = more popular project\n\n\n\n\n\n\nstars\n\n\n0\n\n\nMore stars = more popular project\n\n\n\n\n\n\nforks\n\n\n0\n\n\nMore forks = more people seem to use/modify this project\n\n\n\n\n\n\nhas_mit_license\n\n\n20\n\n\nfastlane is MIT licensed, it's good to have plugins use MIT too\n\n\n\n\n\n\nreadme_score\n\n\n0\n\n\nHow well is the README of the document written\n\n\n\n\n\n\nage\n\n\n0\n\n\nProject that have been around for longer tend to be more stable\n\n\n\n\n\n\nmajor_release\n\n\n0\n\n\nPost 1.0 releases are great\n\n\n\n\n\n\ngithub_issues\n\n\n0\n\n\nLots of open issues are not a good sign usually, unless the project is really popular\n\n\n\n\n\n\ndownloads\n\n\n1\n\n\nMore downloads = more users have been using the plugin for a while\n\n\n\n\n\n\ntests\n\n\n0\n\n\nThe more tests a plugin has, the better\n\n\n\n\n\n\n\n\n\n\n\n\n  \nOpen website\n\n  \n(no GitHub link provided in gemspec)\n\n\n\n\n\n\n\n\n21\n\n\n\nresetsims\n\n\n\nvia Lui\u0301s Esteves\n\n\n\n\n\nMakes an reset on xcode simulators\n\n\n\n\n\n\nScore details\n\n\n\n\n\n\n\n\nMetric\n\n\nPoints\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\ncontributors\n\n\n0\n\n\nThe more contributors a project has, the more likely it is it stays alive\n\n\n\n\n\n\nsubscribers\n\n\n0\n\n\nMore subscribers = more popular project\n\n\n\n\n\n\nstars\n\n\n0\n\n\nMore stars = more popular project\n\n\n\n\n\n\nforks\n\n\n0\n\n\nMore forks = more people seem to use/modify this project\n\n\n\n\n\n\nhas_mit_license\n\n\n20\n\n\nfastlane is MIT licensed, it's good to have plugins use MIT too\n\n\n\n\n\n\nreadme_score\n\n\n0\n\n\nHow well is the README of the document written\n\n\n\n\n\n\nage\n\n\n0\n\n\nProject that have been around for longer tend to be more stable\n\n\n\n\n\n\nmajor_release\n\n\n0\n\n\nPost 1.0 releases are great\n\n\n\n\n\n\ngithub_issues\n\n\n0\n\n\nLots of open issues are not a good sign usually, unless the project is really popular\n\n\n\n\n\n\ndownloads\n\n\n1\n\n\nMore downloads = more users have been using the plugin for a while\n\n\n\n\n\n\ntests\n\n\n0\n\n\nThe more tests a plugin has, the better\n\n\n\n\n\n\n\n\n\n\n\n\n  \nOpen website\n\n  \n(no GitHub link provided in gemspec)\n\n\n\n\n\n\n\n\n21\n\n\n\ncarthage_cache_ftps\n\n\n\nvia Wolfgang Lutz\n\n\n\n\n\nAllows to publish or install the carthage builds via ftps to avoid recompilation\n\n\n\n\n\n\nScore details\n\n\n\n\n\n\n\n\nMetric\n\n\nPoints\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\ncontributors\n\n\n0\n\n\nThe more contributors a project has, the more likely it is it stays alive\n\n\n\n\n\n\nsubscribers\n\n\n0\n\n\nMore subscribers = more popular project\n\n\n\n\n\n\nstars\n\n\n0\n\n\nMore stars = more popular project\n\n\n\n\n\n\nforks\n\n\n0\n\n\nMore forks = more people seem to use/modify this project\n\n\n\n\n\n\nhas_mit_license\n\n\n20\n\n\nfastlane is MIT licensed, it's good to have plugins use MIT too\n\n\n\n\n\n\nreadme_score\n\n\n0\n\n\nHow well is the README of the document written\n\n\n\n\n\n\nage\n\n\n0\n\n\nProject that have been around for longer tend to be more stable\n\n\n\n\n\n\nmajor_release\n\n\n0\n\n\nPost 1.0 releases are great\n\n\n\n\n\n\ngithub_issues\n\n\n0\n\n\nLots of open issues are not a good sign usually, unless the project is really popular\n\n\n\n\n\n\ndownloads\n\n\n1\n\n\nMore downloads = more users have been using the plugin for a while\n\n\n\n\n\n\ntests\n\n\n0\n\n\nThe more tests a plugin has, the better\n\n\n\n\n\n\n\n\n\n\n\n\n  \nOpen website\n\n  \n(no GitHub link provided in gemspec)\n\n\n\n\n\n\n\n\n21\n\n\n\ncovfefe\n\n\n\nvia Jakob Jensen\n\n\n\n\n\nA templating engine for generating common file structures.\n\n\n\n\n\n\nScore details\n\n\n\n\n\n\n\n\nMetric\n\n\nPoints\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\ncontributors\n\n\n0\n\n\nThe more contributors a project has, the more likely it is it stays alive\n\n\n\n\n\n\nsubscribers\n\n\n0\n\n\nMore subscribers = more popular project\n\n\n\n\n\n\nstars\n\n\n0\n\n\nMore stars = more popular project\n\n\n\n\n\n\nforks\n\n\n0\n\n\nMore forks = more people seem to use/modify this project\n\n\n\n\n\n\nhas_mit_license\n\n\n20\n\n\nfastlane is MIT licensed, it's good to have plugins use MIT too\n\n\n\n\n\n\nreadme_score\n\n\n0\n\n\nHow well is the README of the document written\n\n\n\n\n\n\nage\n\n\n0\n\n\nProject that have been around for longer tend to be more stable\n\n\n\n\n\n\nmajor_release\n\n\n0\n\n\nPost 1.0 releases are great\n\n\n\n\n\n\ngithub_issues\n\n\n0\n\n\nLots of open issues are not a good sign usually, unless the project is really popular\n\n\n\n\n\n\ndownloads\n\n\n1\n\n\nMore downloads = more users have been using the plugin for a while\n\n\n\n\n\n\ntests\n\n\n0\n\n\nThe more tests a plugin has, the better\n\n\n\n\n\n\n\n\n\n\n\n\n  \nOpen website\n\n  \n(no GitHub link provided in gemspec)\n\n\n\n\n\n\n\n\n21\n\n\n\napp_info\n\n\n\nvia icyleaf\n\n\n\n\n\nTeardown tool for mobile app(ipa/apk), analysis metedata like version, name, icon etc.\n\n\n\n\n\n\nScore details\n\n\n\n\n\n\n\n\nMetric\n\n\nPoints\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\ncontributors\n\n\n0\n\n\nThe more contributors a project has, the more likely it is it stays alive\n\n\n\n\n\n\nsubscribers\n\n\n0\n\n\nMore subscribers = more popular project\n\n\n\n\n\n\nstars\n\n\n0\n\n\nMore stars = more popular project\n\n\n\n\n\n\nforks\n\n\n0\n\n\nMore forks = more people seem to use/modify this project\n\n\n\n\n\n\nhas_mit_license\n\n\n20\n\n\nfastlane is MIT licensed, it's good to have plugins use MIT too\n\n\n\n\n\n\nreadme_score\n\n\n0\n\n\nHow well is the README of the document written\n\n\n\n\n\n\nage\n\n\n0\n\n\nProject that have been around for longer tend to be more stable\n\n\n\n\n\n\nmajor_release\n\n\n0\n\n\nPost 1.0 releases are great\n\n\n\n\n\n\ngithub_issues\n\n\n0\n\n\nLots of open issues are not a good sign usually, unless the project is really popular\n\n\n\n\n\n\ndownloads\n\n\n1\n\n\nMore downloads = more users have been using the plugin for a while\n\n\n\n\n\n\ntests\n\n\n0\n\n\nThe more tests a plugin has, the better\n\n\n\n\n\n\n\n\n\n\n\n\n  \nOpen website\n\n  \n(no GitHub link provided in gemspec)\n\n\n\n\n\n\n\n\n21\n\n\n\nandroid_change_package_identifier\n\n\n\nvia MaximusMcCann\n\n\n\n\n\nChange the package identifier in the AndroidManifest.xml file. Can revert as well.\n\n\n\n\n\n\nScore details\n\n\n\n\n\n\n\n\nMetric\n\n\nPoints\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\ncontributors\n\n\n0\n\n\nThe more contributors a project has, the more likely it is it stays alive\n\n\n\n\n\n\nsubscribers\n\n\n0\n\n\nMore subscribers = more popular project\n\n\n\n\n\n\nstars\n\n\n0\n\n\nMore stars = more popular project\n\n\n\n\n\n\nforks\n\n\n0\n\n\nMore forks = more people seem to use/modify this project\n\n\n\n\n\n\nhas_mit_license\n\n\n20\n\n\nfastlane is MIT licensed, it's good to have plugins use MIT too\n\n\n\n\n\n\nreadme_score\n\n\n0\n\n\nHow well is the README of the document written\n\n\n\n\n\n\nage\n\n\n0\n\n\nProject that have been around for longer tend to be more stable\n\n\n\n\n\n\nmajor_release\n\n\n0\n\n\nPost 1.0 releases are great\n\n\n\n\n\n\ngithub_issues\n\n\n0\n\n\nLots of open issues are not a good sign usually, unless the project is really popular\n\n\n\n\n\n\ndownloads\n\n\n1\n\n\nMore downloads = more users have been using the plugin for a while\n\n\n\n\n\n\ntests\n\n\n0\n\n\nThe more tests a plugin has, the better\n\n\n\n\n\n\n\n\n\n\n\n\n  \nOpen website\n\n  \n(no GitHub link provided in gemspec)\n\n\n\n\n\n\n\n\n20\n\n\n\nu3d\n\n\n\nvia Jerome Lacoste\n\n\n\n\n\nFastgame's u3d (a Unity3d CLI) integration\n\n\n\n\n\n\nScore details\n\n\n\n\n\n\n\n\nMetric\n\n\nPoints\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\ncontributors\n\n\n0\n\n\nThe more contributors a project has, the more likely it is it stays alive\n\n\n\n\n\n\nsubscribers\n\n\n0\n\n\nMore subscribers = more popular project\n\n\n\n\n\n\nstars\n\n\n0\n\n\nMore stars = more popular project\n\n\n\n\n\n\nforks\n\n\n0\n\n\nMore forks = more people seem to use/modify this project\n\n\n\n\n\n\nhas_mit_license\n\n\n20\n\n\nfastlane is MIT licensed, it's good to have plugins use MIT too\n\n\n\n\n\n\nreadme_score\n\n\n0\n\n\nHow well is the README of the document written\n\n\n\n\n\n\nage\n\n\n0\n\n\nProject that have been around for longer tend to be more stable\n\n\n\n\n\n\nmajor_release\n\n\n0\n\n\nPost 1.0 releases are great\n\n\n\n\n\n\ngithub_issues\n\n\n0\n\n\nLots of open issues are not a good sign usually, unless the project is really popular\n\n\n\n\n\n\ndownloads\n\n\n0\n\n\nMore downloads = more users have been using the plugin for a while\n\n\n\n\n\n\ntests\n\n\n0\n\n\nThe more tests a plugin has, the better\n\n\n\n\n\n\n\n\n\n\n\n\n  \nOpen website\n\n  \n(no GitHub link provided in gemspec)\n\n\n\n\n\n\n\n\n20\n\n\n\nensure_swift_version\n\n\n\nvia Shashikant86\n\n\n\n\n\nThis plugin ensure version of Swift language used for project\n\n\n\n\n\n\nScore details\n\n\n\n\n\n\n\n\nMetric\n\n\nPoints\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\ncontributors\n\n\n0\n\n\nThe more contributors a project has, the more likely it is it stays alive\n\n\n\n\n\n\nsubscribers\n\n\n0\n\n\nMore subscribers = more popular project\n\n\n\n\n\n\nstars\n\n\n0\n\n\nMore stars = more popular project\n\n\n\n\n\n\nforks\n\n\n0\n\n\nMore forks = more people seem to use/modify this project\n\n\n\n\n\n\nhas_mit_license\n\n\n20\n\n\nfastlane is MIT licensed, it's good to have plugins use MIT too\n\n\n\n\n\n\nreadme_score\n\n\n0\n\n\nHow well is the README of the document written\n\n\n\n\n\n\nage\n\n\n0\n\n\nProject that have been around for longer tend to be more stable\n\n\n\n\n\n\nmajor_release\n\n\n0\n\n\nPost 1.0 releases are great\n\n\n\n\n\n\ngithub_issues\n\n\n0\n\n\nLots of open issues are not a good sign usually, unless the project is really popular\n\n\n\n\n\n\ndownloads\n\n\n0\n\n\nMore downloads = more users have been using the plugin for a while\n\n\n\n\n\n\ntests\n\n\n0\n\n\nThe more tests a plugin has, the better\n\n\n\n\n\n\n\n\n\n\n\n\n  \nOpen website\n\n  \n(no GitHub link provided in gemspec)", 
            "title": "Available Plugins"
        }, 
        {
            "location": "/plugins/available-plugins/#available-plugins", 
            "text": "875", 
            "title": "Available Plugins"
        }, 
        {
            "location": "/plugins/create-plugin/", 
            "text": "fastlane Plugins\n\n\nThe instructions below require \nfastlane\n 1.93.0 or higher\n\n\nLocal actions\n\n\nYou can create your own actions to extend the functionality of fastlane for your project. The action you create will behave exactly like the built in actions.\n\n\nJust run \nfastlane new_action\n, enter the name of the action and edit the generated Ruby file in \nfastlane/actions/[action_name].rb\n. After you finished writing your action, add it to your version control, so it is available for your whole team.\n\n\nFrom then on, you can just use your action in your \nFastfile\n, just like any other action.\n\n\nSubmitting the action to the fastlane main repo\n\n\nPlease be aware we may not accept all actions submitted to be bundled with \nfastlane\n. Before you submit a pull request adding the action to the \nfastlane\n code base, submit an issue proposing the new action and why it should be built-in.\n\n\nIn general we tend to accept actions that\n\n\n\n\nGenerally usable for a big majority of developers (e.g. basic interactions with git)\n\n\nSolve pain points for mobile app developers (iOS and Android)\n\n\nhave an easy to read documentation and great test coverage\n\n\n\n\nIn general, we might not accept actions that\n\n\n\n\nSolve specific use-cases for only a small subset of developers\n\n\nAccess the API of a third party service, the third party service should own and maintain the action\n\n\nComplex actions, that will require a lot of work to maintain in the future\n\n\nEverything that isn't mobile developer related\n\n\n\n\nPlugins\n\n\nfastlane\n is an open platform and we enable every developer to extend it to fit their needs. That's why we built a plugin system that allows you and your company to provide \nfastlane\n plugins to other \nfastlane\n users. You have the full power and responsibility of maintaining your plugin and keeping it up to date. This is useful if you maintain your own library or web service, and want to make sure the \nfastlane\n plugin is always up to date.\n\n\nFind a plugin\n\n\nHead over to \nAvailable Plugins\n for a list of plugins you can use.\n\n\nList all available plugins using\n\n\nfastlane search_plugins\n\n\n\n\nTo search for something specific \n\n\nfastlane search_plugins [query]\n\n\n\n\nAdd a plugin to your project\n\n\nfastlane add_plugin [name]\n\n\n\n\nfastlane\n will assist you on setting up your project to start using plugins.\n\n\nThis will:\n\n\n\n\nAdd the plugin to \nfastlane/Pluginfile\n\n\nMake sure your \nfastlane/Pluginfile\n is properly referenced from your \n./Gemfile\n\n\nRun \nfastlane install_plugins\n to make sure all required dependencies are installed on your local machine (this step might ask for your admin password to install Ruby gems)\n\n\nYou'll have 3 new files, that should all be checked into version control: \nGemfile\n, \nGemfile.lock\n and \nfastlane/Pluginfile\n\n\n\n\nPlugin Source\n\n\nYour \nfastlane/Pluginfile\n contains the list of all \nfastlane\n plugins your project uses. The \nPluginfile\n is a \nGemfile\n that gets imported from your main \nGemfile\n.\nYou specify all dependencies, including the required version numbers:\n\n\n# Fetched from RubyGems.org\ngem \nfastlane-plugin-xcversion\n\n\n# Fetched from GitHub\ngem \nfastlane-plugin-xcversion\n, git: \nhttps://github.com/fastlane/fastlane-plugin-xcversion\n\n\n# Fetched from a local directory\ngem \nfastlane-plugin-xcversion\n, path: \n../fastlane-plugin-xcversion\n\n\n# Specify a version requirements\ngem \nfastlane-plugin-xcversion\n, \n1.1.0\n\ngem \nfastlane-plugin-xcversion\n, \n= 1.0\n\n\n\n\n\nMore information about a Gemfile\n\n\nInstall plugins on another machine\n\n\nTo make sure all plugins are installed on the local machine, run\n\n\nfastlane install_plugins\n\n\n\n\nRemove a plugin\n\n\nOpen your \nfastlane/Pluginfile\n and remove the line that looks like this\n\n\ngem \nfastlane-plugin-[plugin_name]\n\n\n\n\n\nCreate your own plugin\n\n\ncd ~/new/folder/\n\nfastlane new_plugin [plugin_name]\n\n\n\n\n\n\nfastlane\n creates the directory structure that's needed to be a valid Ruby gem\n\n\nEdit the \nlib/fastlane/plugin/[plugin_name]/actions/[plugin_name].rb\n and implement your action\n\n\nEasily test the plugin locally by running \nfastlane add_plugin\n in your project's directory and specifying the local path when asked for it\n\n\n\n\nNew plugin for existing gem\n\n\nIf you already have an exiting gem you want to provide a \nfastlane\n plugin for, you'll still have to create a new Ruby gem. The reason for that is the way plugins are imported.\n\n\nThe example project \nxcake\n contains a folder named \nfastlane-plugin-xcake\n.\n\n\nAll you have to do if you have an exiting gem:\n\n\n\n\nNavigate to your gem\n\n\nfastlane new_plugin [plugin_name]\n\n\nInside the newly created folder, edit the \nfastlane-plugin-[plugin_name].gemspec\n and add your gem as a dependency. It is recommended to also specify a version number requirement\n\n\n\n\nPublishing your plugin\n\n\nRubyGems\n\n\nThe recommended way to publish your plugin is to publish it on \nRubyGems.org\n. Follow the steps below to publish your plugin.\n\n\n\n\nCreate an account at \nRubyGems.org\n\n\nPublish your plugin to a \nGitHub\n repo\n\n\nUpdate the \nfastlane-plugin-[plugin_name].gemspec\n file so that the \nspec.homepage\n points to your github repo.\n\n\nPublish the first release of your plugin:\n\n\n\n\nbundle install\nrake install\nrake release\n\n\n\n\nNow all your users can run \nfastlane add_plugin [plugin_name]\n to install and use your plugin.\n\n\nGitHub\n\n\nIf for some reason you don't want to use RubyGems, you can also make your plugin available on GitHub. Your users then need to add the following to the \nPluginfile\n\n\ngem \nfastlane-plugin-[plugin_name]\n, git: \nhttps://github.com/[user]/[plugin_name]\n\n\n\n\n\nAdvanced\n\n\nMultiple actions in one plugin\n\n\nLet's assume you work on a \nfastlane\n plugin for project management software. You could call it \nfastlane-plugin-pm\n and it may contain any number of actions and helpers, just add them to your \nactions\n folder. Make sure to mention the available actions in your plugin's \nREADME.md\n.", 
            "title": "Create Your Own Plugin"
        }, 
        {
            "location": "/plugins/create-plugin/#fastlane-plugins", 
            "text": "The instructions below require  fastlane  1.93.0 or higher", 
            "title": "fastlane Plugins"
        }, 
        {
            "location": "/plugins/create-plugin/#local-actions", 
            "text": "You can create your own actions to extend the functionality of fastlane for your project. The action you create will behave exactly like the built in actions.  Just run  fastlane new_action , enter the name of the action and edit the generated Ruby file in  fastlane/actions/[action_name].rb . After you finished writing your action, add it to your version control, so it is available for your whole team.  From then on, you can just use your action in your  Fastfile , just like any other action.", 
            "title": "Local actions"
        }, 
        {
            "location": "/plugins/create-plugin/#submitting-the-action-to-the-fastlane-main-repo", 
            "text": "Please be aware we may not accept all actions submitted to be bundled with  fastlane . Before you submit a pull request adding the action to the  fastlane  code base, submit an issue proposing the new action and why it should be built-in.  In general we tend to accept actions that   Generally usable for a big majority of developers (e.g. basic interactions with git)  Solve pain points for mobile app developers (iOS and Android)  have an easy to read documentation and great test coverage   In general, we might not accept actions that   Solve specific use-cases for only a small subset of developers  Access the API of a third party service, the third party service should own and maintain the action  Complex actions, that will require a lot of work to maintain in the future  Everything that isn't mobile developer related", 
            "title": "Submitting the action to the fastlane main repo"
        }, 
        {
            "location": "/plugins/create-plugin/#plugins", 
            "text": "fastlane  is an open platform and we enable every developer to extend it to fit their needs. That's why we built a plugin system that allows you and your company to provide  fastlane  plugins to other  fastlane  users. You have the full power and responsibility of maintaining your plugin and keeping it up to date. This is useful if you maintain your own library or web service, and want to make sure the  fastlane  plugin is always up to date.", 
            "title": "Plugins"
        }, 
        {
            "location": "/plugins/create-plugin/#find-a-plugin", 
            "text": "Head over to  Available Plugins  for a list of plugins you can use.  List all available plugins using  fastlane search_plugins  To search for something specific   fastlane search_plugins [query]", 
            "title": "Find a plugin"
        }, 
        {
            "location": "/plugins/create-plugin/#add-a-plugin-to-your-project", 
            "text": "fastlane add_plugin [name]  fastlane  will assist you on setting up your project to start using plugins.  This will:   Add the plugin to  fastlane/Pluginfile  Make sure your  fastlane/Pluginfile  is properly referenced from your  ./Gemfile  Run  fastlane install_plugins  to make sure all required dependencies are installed on your local machine (this step might ask for your admin password to install Ruby gems)  You'll have 3 new files, that should all be checked into version control:  Gemfile ,  Gemfile.lock  and  fastlane/Pluginfile", 
            "title": "Add a plugin to your project"
        }, 
        {
            "location": "/plugins/create-plugin/#plugin-source", 
            "text": "Your  fastlane/Pluginfile  contains the list of all  fastlane  plugins your project uses. The  Pluginfile  is a  Gemfile  that gets imported from your main  Gemfile .\nYou specify all dependencies, including the required version numbers:  # Fetched from RubyGems.org\ngem  fastlane-plugin-xcversion \n\n# Fetched from GitHub\ngem  fastlane-plugin-xcversion , git:  https://github.com/fastlane/fastlane-plugin-xcversion \n\n# Fetched from a local directory\ngem  fastlane-plugin-xcversion , path:  ../fastlane-plugin-xcversion \n\n# Specify a version requirements\ngem  fastlane-plugin-xcversion ,  1.1.0 \ngem  fastlane-plugin-xcversion ,  = 1.0   More information about a Gemfile", 
            "title": "Plugin Source"
        }, 
        {
            "location": "/plugins/create-plugin/#install-plugins-on-another-machine", 
            "text": "To make sure all plugins are installed on the local machine, run  fastlane install_plugins", 
            "title": "Install plugins on another machine"
        }, 
        {
            "location": "/plugins/create-plugin/#remove-a-plugin", 
            "text": "Open your  fastlane/Pluginfile  and remove the line that looks like this  gem  fastlane-plugin-[plugin_name]", 
            "title": "Remove a plugin"
        }, 
        {
            "location": "/plugins/create-plugin/#create-your-own-plugin", 
            "text": "cd ~/new/folder/\n\nfastlane new_plugin [plugin_name]   fastlane  creates the directory structure that's needed to be a valid Ruby gem  Edit the  lib/fastlane/plugin/[plugin_name]/actions/[plugin_name].rb  and implement your action  Easily test the plugin locally by running  fastlane add_plugin  in your project's directory and specifying the local path when asked for it", 
            "title": "Create your own plugin"
        }, 
        {
            "location": "/plugins/create-plugin/#new-plugin-for-existing-gem", 
            "text": "If you already have an exiting gem you want to provide a  fastlane  plugin for, you'll still have to create a new Ruby gem. The reason for that is the way plugins are imported.  The example project  xcake  contains a folder named  fastlane-plugin-xcake .  All you have to do if you have an exiting gem:   Navigate to your gem  fastlane new_plugin [plugin_name]  Inside the newly created folder, edit the  fastlane-plugin-[plugin_name].gemspec  and add your gem as a dependency. It is recommended to also specify a version number requirement", 
            "title": "New plugin for existing gem"
        }, 
        {
            "location": "/plugins/create-plugin/#publishing-your-plugin", 
            "text": "", 
            "title": "Publishing your plugin"
        }, 
        {
            "location": "/plugins/create-plugin/#rubygems", 
            "text": "The recommended way to publish your plugin is to publish it on  RubyGems.org . Follow the steps below to publish your plugin.   Create an account at  RubyGems.org  Publish your plugin to a  GitHub  repo  Update the  fastlane-plugin-[plugin_name].gemspec  file so that the  spec.homepage  points to your github repo.  Publish the first release of your plugin:   bundle install\nrake install\nrake release  Now all your users can run  fastlane add_plugin [plugin_name]  to install and use your plugin.", 
            "title": "RubyGems"
        }, 
        {
            "location": "/plugins/create-plugin/#github", 
            "text": "If for some reason you don't want to use RubyGems, you can also make your plugin available on GitHub. Your users then need to add the following to the  Pluginfile  gem  fastlane-plugin-[plugin_name] , git:  https://github.com/[user]/[plugin_name]", 
            "title": "GitHub"
        }, 
        {
            "location": "/plugins/create-plugin/#advanced", 
            "text": "", 
            "title": "Advanced"
        }, 
        {
            "location": "/plugins/create-plugin/#multiple-actions-in-one-plugin", 
            "text": "Let's assume you work on a  fastlane  plugin for project management software. You could call it  fastlane-plugin-pm  and it may contain any number of actions and helpers, just add them to your  actions  folder. Make sure to mention the available actions in your plugin's  README.md .", 
            "title": "Multiple actions in one plugin"
        }, 
        {
            "location": "/plugins/plugins-troubleshooting/", 
            "text": "fastlane plugins troubleshooting\n\n\nIf you're having trouble calling a plugin action, here is a simple guide on how to resolve the issue:\n\n\nMake sure fastlane is up to date\n\n\nRun \nfastlane -v\n and \nbundle exec fastlane -v\n and make sure it's at least version 1.93.0.\n\n\nUpdate your plugins\n\n\nRun \nfastlane update_plugins\n to make sure to have all the latest plugins and their dependencies installed.\n\n\nUse \nbundle exec\n\n\nRun \nfastlane\n using \nbundle exec fastlane [lane]\n to make sure your plugins are properly loaded.\n\n\nThis is required when you use plugins from a local path or a git remote.\n\n\nUse the \n--verbose\n mode\n\n\nRunning \nfastlane [lane] --verbose\n will show a lot more information that might be useful to resolve the issue.\n\n\nMake sure the action name is correct\n\n\nA plugin can contain any number of actions. Make sure to read the docs for the plugin itself!\n\n\nAdditionally check out the source code of the plugin:\n\n\nlib/fastlane/plugin/[plugin_name]/actions/[action_name].rb\n\n\n\n\nOpen the \n[action_name].rb\n file and make sure the name of the class on line 3 looks like this:\n\n\nclass [ActionName]Action \n Action\n\n\n\n\nNote how the name of the class should be capitalised and have \nAction\n appended in the name. Additionally this class must be a subclass of \nAction\n.\n\n\nGemfile and Pluginfile\n\n\nYour \nGemfile\n should look something like this:\n\n\ngem \nfastlane\n\n\nplugins_path = File.join(File.dirname(__FILE__), 'fastlane', 'Pluginfile')\neval_gemfile(plugins_path) if File.exist?(plugins_path)\n\n\n\n\nYour \nPluginfile\n should look something like this\n\n\n# Autogenerated by fastlane\n\ngem 'fastlane-plugin-ruby'\n\n\n\n\nBuilding your own plugin\n\n\nIf you have issues with running your local plugins during plugin development, make sure to run\n\n\nbundle install --with development\n\n\n\n\nto install all required development dependencies\n\n\nMore help\n\n\nIf it's still not working for you, please \nsubmit a new GitHub issue\n with your \nGemfile\n, \nGemfile.lock\n, \nPluginfile\n, \nFastfile\n and terminal output when running \nfastlane\n using the \n--verbose\n flag.", 
            "title": "Plugins Troubleshooting"
        }, 
        {
            "location": "/plugins/plugins-troubleshooting/#fastlane-plugins-troubleshooting", 
            "text": "If you're having trouble calling a plugin action, here is a simple guide on how to resolve the issue:", 
            "title": "fastlane plugins troubleshooting"
        }, 
        {
            "location": "/plugins/plugins-troubleshooting/#make-sure-fastlane-is-up-to-date", 
            "text": "Run  fastlane -v  and  bundle exec fastlane -v  and make sure it's at least version 1.93.0.", 
            "title": "Make sure fastlane is up to date"
        }, 
        {
            "location": "/plugins/plugins-troubleshooting/#update-your-plugins", 
            "text": "Run  fastlane update_plugins  to make sure to have all the latest plugins and their dependencies installed.", 
            "title": "Update your plugins"
        }, 
        {
            "location": "/plugins/plugins-troubleshooting/#use-bundle-exec", 
            "text": "Run  fastlane  using  bundle exec fastlane [lane]  to make sure your plugins are properly loaded.  This is required when you use plugins from a local path or a git remote.", 
            "title": "Use bundle exec"
        }, 
        {
            "location": "/plugins/plugins-troubleshooting/#use-the-verbose-mode", 
            "text": "Running  fastlane [lane] --verbose  will show a lot more information that might be useful to resolve the issue.", 
            "title": "Use the --verbose mode"
        }, 
        {
            "location": "/plugins/plugins-troubleshooting/#make-sure-the-action-name-is-correct", 
            "text": "A plugin can contain any number of actions. Make sure to read the docs for the plugin itself!  Additionally check out the source code of the plugin:  lib/fastlane/plugin/[plugin_name]/actions/[action_name].rb  Open the  [action_name].rb  file and make sure the name of the class on line 3 looks like this:  class [ActionName]Action   Action  Note how the name of the class should be capitalised and have  Action  appended in the name. Additionally this class must be a subclass of  Action .", 
            "title": "Make sure the action name is correct"
        }, 
        {
            "location": "/plugins/plugins-troubleshooting/#gemfile-and-pluginfile", 
            "text": "Your  Gemfile  should look something like this:  gem  fastlane \n\nplugins_path = File.join(File.dirname(__FILE__), 'fastlane', 'Pluginfile')\neval_gemfile(plugins_path) if File.exist?(plugins_path)  Your  Pluginfile  should look something like this  # Autogenerated by fastlane\n\ngem 'fastlane-plugin-ruby'", 
            "title": "Gemfile and Pluginfile"
        }, 
        {
            "location": "/plugins/plugins-troubleshooting/#building-your-own-plugin", 
            "text": "If you have issues with running your local plugins during plugin development, make sure to run  bundle install --with development  to install all required development dependencies", 
            "title": "Building your own plugin"
        }, 
        {
            "location": "/plugins/plugins-troubleshooting/#more-help", 
            "text": "If it's still not working for you, please  submit a new GitHub issue  with your  Gemfile ,  Gemfile.lock ,  Pluginfile ,  Fastfile  and terminal output when running  fastlane  using the  --verbose  flag.", 
            "title": "More help"
        }, 
        {
            "location": "/best-practices/source-control/", 
            "text": "Source Control\n\n\nIt is recommended that you keep \nfastlane\n configuration files in the repository. You may want to add the following lines to the repository's \n.gitignore\n (Git) or \n.hgignore\n (Mercurial) file to exclude generated and temporary files:\n\n\n# fastlane specific\nfastlane/report.xml\n\n# deliver temporary files\nfastlane/Preview.html\n\n# snapshot generated screenshots\nfastlane/screenshots\n\n# scan temporary files\nfastlane/test_output\n\n\n\n\nIt is also recommended that you avoid storing screenshots or other delivery artifacts in the repository. Instead, use \nfastlane\n to re-generate whenever needed.", 
            "title": "Source Control"
        }, 
        {
            "location": "/best-practices/source-control/#source-control", 
            "text": "It is recommended that you keep  fastlane  configuration files in the repository. You may want to add the following lines to the repository's  .gitignore  (Git) or  .hgignore  (Mercurial) file to exclude generated and temporary files:  # fastlane specific\nfastlane/report.xml\n\n# deliver temporary files\nfastlane/Preview.html\n\n# snapshot generated screenshots\nfastlane/screenshots\n\n# scan temporary files\nfastlane/test_output  It is also recommended that you avoid storing screenshots or other delivery artifacts in the repository. Instead, use  fastlane  to re-generate whenever needed.", 
            "title": "Source Control"
        }, 
        {
            "location": "/best-practices/continuous-integration/", 
            "text": "Continuous Integration\n\n\nBest Practices\n\n\nTwo-step or Two-factor auth\n\n\nIf you want to upload builds to TestFlight/iTunes Connect from your CI machine, you need to generate an application specific password:\n\n\n\n\nVisit \nappleid.apple.com/account/manage\n\n\nGenerate a new application specific password\n\n\nProvide the application specific password using the environment variable \nFASTLANE_APPLE_APPLICATION_SPECIFIC_PASSWORD\n\n\n\n\nBecause your CI machine will not be able to prompt you for your two-step or two-factor auth information, you also need to generate a login session for your CI machine in advance. You can get this by running:\n\n\nfastlane spaceauth -u user@email.com\n\n\n\n\nThis will generate a token you can set using the \nFASTLANE_SESSION\n environment variable on your CI system.\n\n\nDeploy Strategy\n\n\nYou should \nnot\n deploy a new App Store update after every commit, since you still have to wait 1-2 days for the review. Instead it is recommended that you use Git Tags, or custom triggers to deploy a new update.\n\n\nYou can set up your own \nRelease\n job, which is only triggered manually.\n\n\nJenkins Integration\n\n\nDeploying from your own computer isn't cool. You know what's cool? Letting a remote server publish app updates for you.\n\n\nfastlane\n automatically generates a JUnit report for you. This allows Continuous Integration systems, like \nJenkins\n, access the results of your deployment.\n\n\nInstallation\n\n\nThe recommended way to install \nJenkins\n is through \nhomebrew\n:\n\n\nbrew update \n brew install jenkins\n\n\n\n\nFrom now on start \nJenkins\n by running:\n\n\njenkins\n\n\n\n\nTo store the password in the Keychain of your remote machine, it is recommended that you run \nmatch\n or \ndeliver\n using ssh or remote desktop at least once.\n\n\nRuby Environment\n\n\nWe recommend using \nrbenv\n for installing Ruby, though \nrvm\n and the version of Ruby that comes bundled on macOS are fine too.\n\n\nIf using a Gemfile in your project, add an \"Execute shell\" step as your first build step and call \nbundle update\n.\n\n\nPlugins\n\n\nYou'll find the following Jenkins plugins to be useful:\n\n\n(note: We do not recommend installing the Xcode plugin)\n\n\n\n\nHTML Publisher Plugin\n:\n Can be used to show the generated screenshots right inside Jenkins.\n\n\nAnsiColor Plugin\n:\n Used to show the coloured output of the fastlane tools. Don\u2019t forget to enable \nColor ANSI Console Output\n in the \nBuild Environment\n or your project.\n\n\nRebuild Plugin\n:\n This plugin will save you a lot of time.\n\n\nKeychains and Provisioning Profiles Plugin\n:\n Manages keychains across Jenkins installations.\n\n\n\n\nBuild Step\n\n\nAdd an \"Execute shell\" build step using your appropriate \nfastlane\n command per the example below:\n\n\nfastlane appstore\n\n\n\n\nReplace \nappstore\n with the lane you want to use.\n\n\n(note: if using a Gemfile, prefix that command with \nbundle exec\n)\n\n\nsetup_jenkins\n\n\nYou can use \nsetup_jenkins\n action which integrates well with the \nKeychains and Provisioning Profiles Plugin\n. Selected keychain will automatically unlocked and the selected code signing identity will be used. Also all build results, like IPA files, archives, dSYMs and result bundles will be stored in the \n./output\n folder in the job workspace. In additions \nsetup_jenkins\n will create separate derived data folder for each job (in the \n./derivedData\n).\n\n\nUnder the hood \nsetup_jenkins\n configures other actions like: \ngym\n, \nscan\n, \nxcodebuild\n, \nbackup_xcarchive\n and \nclear_derived_data\n.\n\n\ncommit_version_bump || git_commit\n\n\nYou can use \ncommit_version_bump\n or \ngit_commit\n action to commit changes to your repository in your fastlane setup. When you are using webhooks to trigger your build on a push this will cause an infinite loop of triggering builds.\n\n\nGitlab\n\n\nWhen you are using Gitlab you will need the \nGitLab Plugin\n. Inside the job you want to configure you go to \nBuild Triggers \n Build when a change is pushed to GitLab \n Enable [ci-skip]\n.\nWhen you include \n[ci-skip]\n in your build this commit won't trigger the build in jenkins at all.\n\n\nExample\n  \n\n\nbuild_number = increment_build_number\ncommit_version_bump(message:\n[ci-skip] Version Bump to #{build_number}\n)\ngit_commit(path:\n./CHANGELOG.md\n, message:\n[ci-skip] Updated CHANGELOG for Build #{build_number}\n)\npush_to_git_remote\n\n\n\n\nTest Results and Screenshots\n\n\nTo show the \ndeployment result\n right in \nJenkins\n\n\n\n\nAdd post-build action\n\n\nPublish JUnit test result report\n\n\nTest report XMLs\n: \nfastlane/report.xml\n\n\n\n\nTo show the \ngenerated screenshots\n right in \nJenkins\n\n\n\n\nAdd post-build action\n\n\nPublish HTML reports\n\n\nHTML directory to archive\n: \nfastlane/screenshots\n\n\nIndex page\n: \nscreenshots.html\n\n\n\n\nSave and run. The result should look like this:\n\n\n\n\nCircle Integration\n\n\nTo run fastlane on Circle as your CI, first create a \nGemfile\n in the root of your project with the following content\n\n\nsource \nhttps://rubygems.org\n\n\ngem \nfastlane\n\n\n\n\n\nand run\n\n\ngem install bundler \n bundle update\n\n\n\n\nThis will create a \nGemfile.lock\n, that defines all Ruby dependencies. Make sure to commit both files to version control.\n\n\nNext, use the following \ncircle.yml\n file\n\n\nmachine:\n  xcode:\n    version: \n7.3\n\ndependencies:\n  override:\n    - bundle check --path=vendor/bundle || bundle install --path=vendor/bundle --jobs=4 --retry=3 --without development\n  cache_directories:\n    - vendor/bundle\ntest:\n  override:\n    - bundle exec fastlane test\n\n\n\n\nThis will automatically cache the installed gems on Circle, making your CI builds much faster!\n\n\nTravis Integration\n\n\nUpdate your \n.travis.yml\n to look like this:\n\n\nlanguage: objective-c\nosx_image: xcode8.3\ninstall:\n- bundle install\nscript:\n- fastlane beta\n\n\n\n\nThe above config files assume you have a \nGemfile\n set up, if you don't have one yet, make sure to follow our \nGemfile guide\n and run \nbundle update\n to make sure you're using the most recent \nfastlane\n release.\n\n\nReplace \nbeta\n with the lane you want to run for your setup. If you want to build, sign and distribute builds from Travis, you'll need to add one more action to your \nFastfile\n, as by default, the Travis keychain is locked.\n\n\nAt the top of your \nFastfile\n, add\n\n\nsetup_travis\n\n\n\n\nwhich will setup the keychain to work well with \nmatch\n and \ngym\n. This action will also enable the \nreadonly\n mode for \nmatch\n, so your CI doesn't create new certificates or provisioning profiles.\n\n\nBamboo Integration\n\n\nRepository setup\n\n\nIn bamboo under \nLinked Repositories\n (where you configure your git repo) under \nAdvanced Settings\n is an option called \nExclude changesets\n\n\nThis dialog will allow you to enter a regular expression that if a commit matches, a build will not be triggered.\n\n\nFor example, if your \nFastfile\n is configured to make a commit message in the style of\n\n\nBuild Version bump by fastlane to Version [0.3] Build [8]\n\n\n\n\nThen you could use the following regex to ignore these commits\n\n\n^.*Build Version bump by fastlane.*$\n\n\n\n\nSetting repository remote\n\n\nBy default bamboo will do an anonymous shallow clone of the repo.  This will not preserve the  \ngit remote\n information nor the list of tags.  If you are using bamboo to create commits you may want to use a code block similar to the following:\n\n\n# In prep for eventually committing a version/build bump - set the git params\nsh('git config user.name \nCOMMITTER USERNAME\n')\nsh('git config user.email \nCOMITTER EMAIL\n')\n\n# Bamboo does an anonymous checkout so in order to update the build versions must set the git repo URL\ngit_remote_cmd = 'git remote set-url origin ' + ENV['bamboo_repository_git_repositoryUrl']\nsh(git_remote_cmd)\n\n\n\n\nSpeeding up build times with carthage\n\n\nCarthage is a wonderful dependency manager but once you are start using a large number of frameworks, things can start to slow down, especially if your CI server has to run \ncarthage\n EVERY time you check in a small line of code.\n\n\nOne way to make build times faster is to break your work up into two separate build plans (\nthis can get even more funky if you start having multiple branches\n)\n\n\nThe general idea is to make a build plan: \nProject - Artifacts\n that builds the \nCarthage\n directory and stores it as a shared artifact.  Then you create a second build plan \nProject - Fastlane\n that pulls down the \nCarthage\n directory and runs \nfastlane\n.\n\n\nArtifact Plan\n\n\nUse a simple setup to create this build plan. First off you want to make sure this plan is manually triggered only - because you only need to run it whenever the \nCartfile\n changes as opposed to after ever single commit.  It could also be on a nightly build perhaps if you desire.\n\n\nStages / Jobs / Tasks\n\n\nThis plan consists of 1 Job, 1 Stage and 2 Tasks\n\n\n\n\nTask 1: \nSource Code Checkout\n\n\nTask 2: \nScript\n (\ncarthage update\n)\n\n\n\n\nArtifact definitions\n\n\nCreate a shared artifact with the following info:\n\n\n\n\nName:\n CarthageFolder\n\n\nLocation:\n (leave blank)\n\n\nCopy Pattern:\n Carthage/Build/**\n\n\n\n\nOptional\n: You may want to automatically make the \nfastlane plan\n trigger whenever this plan is built\n\n\nfastlane\n plan\n\n\nWhen configuring \nfastlane\n to run in this setup you need to make sure that you are not calling either:\n\n\nreset_git_repo(force: true)\n\n\n\n\nor\n\n\nensure_git_status_clean\n\n\n\n\nas these calls will either fail the build or delete the \nCarthage\n directory.  Additionally you want to remove any \ncarthage\n tasks from inside your \nFastfile\n as \ncarthage\n is now happening externally to the build.\n\n\nBuild plan setup\n\n\nWhat this build plan does is it checks out the source code, then it downloads the entire \nCarthage/Build/\n directory into your local project - which is exactly what would be created from \ncarthage bootstrap\n and then it runs \nfastlane\n\n\n\n\nTask 1: \nSource Code Checkout\n\n\nTask 2: \nArtifact Download\n\n\nTask 3: \nfastlane\n\n\n\n\nGitLab CI Integration\n\n\nUse \nGitLab CI Runner\n running on a macOS machine\nto build using fastlane.\n\n\nRepository setup\n\n\nFirst create a \nGemfile\n in the root of your project with the following content:\n\n\nsource \nhttps://rubygems.org\n\n\ngem \nfastlane\n\n\n\n\n\nAdd a \n.gitlab-ci.yml\n file to trigger \nfastlane\n.\n\n\nstages:\n  - unit_tests\n  - test_flight\n\nvariables:\n  LC_ALL: \nen_US.UTF-8\n\n  LANG: \nen_US.UTF-8\n\n\nbefore_script:\n  - gem install bundler\n  - bundle install\n\nunit_tests:\n  dependencies: []\n  stage: unit_tests\n  artifacts:\n    paths:\n      - fastlane/screenshots\n      - fastlane/logs\n  script:\n    - fastlane tests\n  tags:\n    - ios\n\ntest_flight_build:\n  dependencies: []\n  stage: test_flight\n  artifacts:\n    paths:\n      - fastlane/screenshots\n      - fastlane/logs\n  script:\n    - fastlane beta\n  tags:\n    - ios\n  only:\n     - /^release-.*$/\n     - master\n\n\n\n\nSee \nthe \n`.gitlab-ci.yml\n documentation\n\nfor more information on how this file works.\n\n\nSetting up the lanes\n\n\nYou should have a lane - in this example called \nbeta\n - which should do the usual, \nmatch\n, \ngym\n, \npilot\n, to distribute an updated Test Flight version, and one lane \ntests\n which calls \nscan\n to run UI Tests.\n\n\nAuto-incremented build number.\n\n\nTo get an auto-incremented build number you can use something like the following lane:\n\n\nlane :increment_build_number do\n  increment_build_number(build_number: ENV['CI_BUILD_ID'])\nend\n\n\n\n\nThen the GitLab CI build ID (which iterates on each build) will be used.\n\n\nVisual Studio Team Services\n\n\nMicrosoft Visual Studio Team Services (VSTS) and Team Foundation Server (TFS) use \nfastlane\n in their \nApple App Store\n extension.\n\n\nGetting Started\n\n\nOnce you have created or retrieved credentials for your App Store account, then perform the following steps to automate releasing updates from a VSTS build or release definition:\n1. Install the App Store extension from the VSTS Marketplace\n1. Go to your VSTS or TFS project, click on the \nBuild\n tab, and create a new build definition (the \"+\" icon) that is hooked up to your project's appropriate source repo\n1. Click \nAdd build step...\n and select the neccessary tasks to generate your release assets (e.g. Gulp, Cordova Build)\n1. Click \nAdd build step...\n and select \nApp Store Release\n from the \nDeploy\n category\n1. Configure the \nApp Store Release\n task with the desired authentication method, the generated IPA file path, and the desired release track.\n\n\nNow when you build, your app will automatically be published to \niTunes Connect\n!\n\n\nConfiguring \nfastlane\n versions\n\n\nThe extension can be configured to install the latest version of \nfastlane\n or a specific version of \nfastlane\n:\n1. In the Build for your project, click on the \nApple App Store\n task (supported in both \nApple App Store Release\n and \nApple App Store Promote\n), go to the \nAdvanced\n section of the Task, click \nInstall fastlane\n\n1. Optionally, select \nSpecific Version\n from \nfastlane version\n, and enter a specific version of \nfastlane\n\n\nMore Information\n\n\nFor more documentation, see the \nApple App Store\n in the Visual Studio Team Server marketplace.", 
            "title": "Continuous Integration"
        }, 
        {
            "location": "/best-practices/continuous-integration/#continuous-integration", 
            "text": "", 
            "title": "Continuous Integration"
        }, 
        {
            "location": "/best-practices/continuous-integration/#best-practices", 
            "text": "", 
            "title": "Best Practices"
        }, 
        {
            "location": "/best-practices/continuous-integration/#two-step-or-two-factor-auth", 
            "text": "If you want to upload builds to TestFlight/iTunes Connect from your CI machine, you need to generate an application specific password:   Visit  appleid.apple.com/account/manage  Generate a new application specific password  Provide the application specific password using the environment variable  FASTLANE_APPLE_APPLICATION_SPECIFIC_PASSWORD   Because your CI machine will not be able to prompt you for your two-step or two-factor auth information, you also need to generate a login session for your CI machine in advance. You can get this by running:  fastlane spaceauth -u user@email.com  This will generate a token you can set using the  FASTLANE_SESSION  environment variable on your CI system.", 
            "title": "Two-step or Two-factor auth"
        }, 
        {
            "location": "/best-practices/continuous-integration/#deploy-strategy", 
            "text": "You should  not  deploy a new App Store update after every commit, since you still have to wait 1-2 days for the review. Instead it is recommended that you use Git Tags, or custom triggers to deploy a new update.  You can set up your own  Release  job, which is only triggered manually.", 
            "title": "Deploy Strategy"
        }, 
        {
            "location": "/best-practices/continuous-integration/#jenkins-integration", 
            "text": "Deploying from your own computer isn't cool. You know what's cool? Letting a remote server publish app updates for you.  fastlane  automatically generates a JUnit report for you. This allows Continuous Integration systems, like  Jenkins , access the results of your deployment.", 
            "title": "Jenkins Integration"
        }, 
        {
            "location": "/best-practices/continuous-integration/#installation", 
            "text": "The recommended way to install  Jenkins  is through  homebrew :  brew update   brew install jenkins  From now on start  Jenkins  by running:  jenkins  To store the password in the Keychain of your remote machine, it is recommended that you run  match  or  deliver  using ssh or remote desktop at least once.", 
            "title": "Installation"
        }, 
        {
            "location": "/best-practices/continuous-integration/#ruby-environment", 
            "text": "We recommend using  rbenv  for installing Ruby, though  rvm  and the version of Ruby that comes bundled on macOS are fine too.  If using a Gemfile in your project, add an \"Execute shell\" step as your first build step and call  bundle update .", 
            "title": "Ruby Environment"
        }, 
        {
            "location": "/best-practices/continuous-integration/#plugins", 
            "text": "You'll find the following Jenkins plugins to be useful:  (note: We do not recommend installing the Xcode plugin)   HTML Publisher Plugin :  Can be used to show the generated screenshots right inside Jenkins.  AnsiColor Plugin :  Used to show the coloured output of the fastlane tools. Don\u2019t forget to enable  Color ANSI Console Output  in the  Build Environment  or your project.  Rebuild Plugin :  This plugin will save you a lot of time.  Keychains and Provisioning Profiles Plugin :  Manages keychains across Jenkins installations.", 
            "title": "Plugins"
        }, 
        {
            "location": "/best-practices/continuous-integration/#build-step", 
            "text": "Add an \"Execute shell\" build step using your appropriate  fastlane  command per the example below:  fastlane appstore  Replace  appstore  with the lane you want to use.  (note: if using a Gemfile, prefix that command with  bundle exec )", 
            "title": "Build Step"
        }, 
        {
            "location": "/best-practices/continuous-integration/#setup_jenkins", 
            "text": "You can use  setup_jenkins  action which integrates well with the  Keychains and Provisioning Profiles Plugin . Selected keychain will automatically unlocked and the selected code signing identity will be used. Also all build results, like IPA files, archives, dSYMs and result bundles will be stored in the  ./output  folder in the job workspace. In additions  setup_jenkins  will create separate derived data folder for each job (in the  ./derivedData ).  Under the hood  setup_jenkins  configures other actions like:  gym ,  scan ,  xcodebuild ,  backup_xcarchive  and  clear_derived_data .", 
            "title": "setup_jenkins"
        }, 
        {
            "location": "/best-practices/continuous-integration/#commit_version_bump-git_commit", 
            "text": "You can use  commit_version_bump  or  git_commit  action to commit changes to your repository in your fastlane setup. When you are using webhooks to trigger your build on a push this will cause an infinite loop of triggering builds.", 
            "title": "commit_version_bump || git_commit"
        }, 
        {
            "location": "/best-practices/continuous-integration/#gitlab", 
            "text": "When you are using Gitlab you will need the  GitLab Plugin . Inside the job you want to configure you go to  Build Triggers   Build when a change is pushed to GitLab   Enable [ci-skip] .\nWhen you include  [ci-skip]  in your build this commit won't trigger the build in jenkins at all.  Example     build_number = increment_build_number\ncommit_version_bump(message: [ci-skip] Version Bump to #{build_number} )\ngit_commit(path: ./CHANGELOG.md , message: [ci-skip] Updated CHANGELOG for Build #{build_number} )\npush_to_git_remote", 
            "title": "Gitlab"
        }, 
        {
            "location": "/best-practices/continuous-integration/#test-results-and-screenshots", 
            "text": "To show the  deployment result  right in  Jenkins   Add post-build action  Publish JUnit test result report  Test report XMLs :  fastlane/report.xml   To show the  generated screenshots  right in  Jenkins   Add post-build action  Publish HTML reports  HTML directory to archive :  fastlane/screenshots  Index page :  screenshots.html   Save and run. The result should look like this:", 
            "title": "Test Results and Screenshots"
        }, 
        {
            "location": "/best-practices/continuous-integration/#circle-integration", 
            "text": "To run fastlane on Circle as your CI, first create a  Gemfile  in the root of your project with the following content  source  https://rubygems.org \n\ngem  fastlane   and run  gem install bundler   bundle update  This will create a  Gemfile.lock , that defines all Ruby dependencies. Make sure to commit both files to version control.  Next, use the following  circle.yml  file  machine:\n  xcode:\n    version:  7.3 \ndependencies:\n  override:\n    - bundle check --path=vendor/bundle || bundle install --path=vendor/bundle --jobs=4 --retry=3 --without development\n  cache_directories:\n    - vendor/bundle\ntest:\n  override:\n    - bundle exec fastlane test  This will automatically cache the installed gems on Circle, making your CI builds much faster!", 
            "title": "Circle Integration"
        }, 
        {
            "location": "/best-practices/continuous-integration/#travis-integration", 
            "text": "Update your  .travis.yml  to look like this:  language: objective-c\nosx_image: xcode8.3\ninstall:\n- bundle install\nscript:\n- fastlane beta  The above config files assume you have a  Gemfile  set up, if you don't have one yet, make sure to follow our  Gemfile guide  and run  bundle update  to make sure you're using the most recent  fastlane  release.  Replace  beta  with the lane you want to run for your setup. If you want to build, sign and distribute builds from Travis, you'll need to add one more action to your  Fastfile , as by default, the Travis keychain is locked.  At the top of your  Fastfile , add  setup_travis  which will setup the keychain to work well with  match  and  gym . This action will also enable the  readonly  mode for  match , so your CI doesn't create new certificates or provisioning profiles.", 
            "title": "Travis Integration"
        }, 
        {
            "location": "/best-practices/continuous-integration/#bamboo-integration", 
            "text": "", 
            "title": "Bamboo Integration"
        }, 
        {
            "location": "/best-practices/continuous-integration/#repository-setup", 
            "text": "In bamboo under  Linked Repositories  (where you configure your git repo) under  Advanced Settings  is an option called  Exclude changesets  This dialog will allow you to enter a regular expression that if a commit matches, a build will not be triggered.  For example, if your  Fastfile  is configured to make a commit message in the style of  Build Version bump by fastlane to Version [0.3] Build [8]  Then you could use the following regex to ignore these commits  ^.*Build Version bump by fastlane.*$", 
            "title": "Repository setup"
        }, 
        {
            "location": "/best-practices/continuous-integration/#setting-repository-remote", 
            "text": "By default bamboo will do an anonymous shallow clone of the repo.  This will not preserve the   git remote  information nor the list of tags.  If you are using bamboo to create commits you may want to use a code block similar to the following:  # In prep for eventually committing a version/build bump - set the git params\nsh('git config user.name  COMMITTER USERNAME ')\nsh('git config user.email  COMITTER EMAIL ')\n\n# Bamboo does an anonymous checkout so in order to update the build versions must set the git repo URL\ngit_remote_cmd = 'git remote set-url origin ' + ENV['bamboo_repository_git_repositoryUrl']\nsh(git_remote_cmd)", 
            "title": "Setting repository remote"
        }, 
        {
            "location": "/best-practices/continuous-integration/#speeding-up-build-times-with-carthage", 
            "text": "Carthage is a wonderful dependency manager but once you are start using a large number of frameworks, things can start to slow down, especially if your CI server has to run  carthage  EVERY time you check in a small line of code.  One way to make build times faster is to break your work up into two separate build plans ( this can get even more funky if you start having multiple branches )  The general idea is to make a build plan:  Project - Artifacts  that builds the  Carthage  directory and stores it as a shared artifact.  Then you create a second build plan  Project - Fastlane  that pulls down the  Carthage  directory and runs  fastlane .", 
            "title": "Speeding up build times with carthage"
        }, 
        {
            "location": "/best-practices/continuous-integration/#artifact-plan", 
            "text": "Use a simple setup to create this build plan. First off you want to make sure this plan is manually triggered only - because you only need to run it whenever the  Cartfile  changes as opposed to after ever single commit.  It could also be on a nightly build perhaps if you desire.", 
            "title": "Artifact Plan"
        }, 
        {
            "location": "/best-practices/continuous-integration/#stages-jobs-tasks", 
            "text": "This plan consists of 1 Job, 1 Stage and 2 Tasks   Task 1:  Source Code Checkout  Task 2:  Script  ( carthage update )", 
            "title": "Stages / Jobs / Tasks"
        }, 
        {
            "location": "/best-practices/continuous-integration/#artifact-definitions", 
            "text": "Create a shared artifact with the following info:   Name:  CarthageFolder  Location:  (leave blank)  Copy Pattern:  Carthage/Build/**   Optional : You may want to automatically make the  fastlane plan  trigger whenever this plan is built", 
            "title": "Artifact definitions"
        }, 
        {
            "location": "/best-practices/continuous-integration/#fastlane-plan", 
            "text": "When configuring  fastlane  to run in this setup you need to make sure that you are not calling either:  reset_git_repo(force: true)  or  ensure_git_status_clean  as these calls will either fail the build or delete the  Carthage  directory.  Additionally you want to remove any  carthage  tasks from inside your  Fastfile  as  carthage  is now happening externally to the build.", 
            "title": "fastlane plan"
        }, 
        {
            "location": "/best-practices/continuous-integration/#build-plan-setup", 
            "text": "What this build plan does is it checks out the source code, then it downloads the entire  Carthage/Build/  directory into your local project - which is exactly what would be created from  carthage bootstrap  and then it runs  fastlane   Task 1:  Source Code Checkout  Task 2:  Artifact Download  Task 3:  fastlane", 
            "title": "Build plan setup"
        }, 
        {
            "location": "/best-practices/continuous-integration/#gitlab-ci-integration", 
            "text": "Use  GitLab CI Runner  running on a macOS machine\nto build using fastlane.", 
            "title": "GitLab CI Integration"
        }, 
        {
            "location": "/best-practices/continuous-integration/#repository-setup_1", 
            "text": "First create a  Gemfile  in the root of your project with the following content:  source  https://rubygems.org \n\ngem  fastlane   Add a  .gitlab-ci.yml  file to trigger  fastlane .  stages:\n  - unit_tests\n  - test_flight\n\nvariables:\n  LC_ALL:  en_US.UTF-8 \n  LANG:  en_US.UTF-8 \n\nbefore_script:\n  - gem install bundler\n  - bundle install\n\nunit_tests:\n  dependencies: []\n  stage: unit_tests\n  artifacts:\n    paths:\n      - fastlane/screenshots\n      - fastlane/logs\n  script:\n    - fastlane tests\n  tags:\n    - ios\n\ntest_flight_build:\n  dependencies: []\n  stage: test_flight\n  artifacts:\n    paths:\n      - fastlane/screenshots\n      - fastlane/logs\n  script:\n    - fastlane beta\n  tags:\n    - ios\n  only:\n     - /^release-.*$/\n     - master  See  the  `.gitlab-ci.yml  documentation \nfor more information on how this file works.", 
            "title": "Repository setup"
        }, 
        {
            "location": "/best-practices/continuous-integration/#setting-up-the-lanes", 
            "text": "You should have a lane - in this example called  beta  - which should do the usual,  match ,  gym ,  pilot , to distribute an updated Test Flight version, and one lane  tests  which calls  scan  to run UI Tests.", 
            "title": "Setting up the lanes"
        }, 
        {
            "location": "/best-practices/continuous-integration/#auto-incremented-build-number", 
            "text": "To get an auto-incremented build number you can use something like the following lane:  lane :increment_build_number do\n  increment_build_number(build_number: ENV['CI_BUILD_ID'])\nend  Then the GitLab CI build ID (which iterates on each build) will be used.", 
            "title": "Auto-incremented build number."
        }, 
        {
            "location": "/best-practices/continuous-integration/#visual-studio-team-services", 
            "text": "Microsoft Visual Studio Team Services (VSTS) and Team Foundation Server (TFS) use  fastlane  in their  Apple App Store  extension.", 
            "title": "Visual Studio Team Services"
        }, 
        {
            "location": "/best-practices/continuous-integration/#getting-started", 
            "text": "Once you have created or retrieved credentials for your App Store account, then perform the following steps to automate releasing updates from a VSTS build or release definition:\n1. Install the App Store extension from the VSTS Marketplace\n1. Go to your VSTS or TFS project, click on the  Build  tab, and create a new build definition (the \"+\" icon) that is hooked up to your project's appropriate source repo\n1. Click  Add build step...  and select the neccessary tasks to generate your release assets (e.g. Gulp, Cordova Build)\n1. Click  Add build step...  and select  App Store Release  from the  Deploy  category\n1. Configure the  App Store Release  task with the desired authentication method, the generated IPA file path, and the desired release track.  Now when you build, your app will automatically be published to  iTunes Connect !", 
            "title": "Getting Started"
        }, 
        {
            "location": "/best-practices/continuous-integration/#configuring-fastlane-versions", 
            "text": "The extension can be configured to install the latest version of  fastlane  or a specific version of  fastlane :\n1. In the Build for your project, click on the  Apple App Store  task (supported in both  Apple App Store Release  and  Apple App Store Promote ), go to the  Advanced  section of the Task, click  Install fastlane \n1. Optionally, select  Specific Version  from  fastlane version , and enter a specific version of  fastlane", 
            "title": "Configuring fastlane versions"
        }, 
        {
            "location": "/best-practices/continuous-integration/#more-information", 
            "text": "For more documentation, see the  Apple App Store  in the Visual Studio Team Server marketplace.", 
            "title": "More Information"
        }, 
        {
            "location": "/best-practices/keys/", 
            "text": "fastlane keys\n\n\nThis guide will show you the best ways to store and use your keys for services like Crashlytics, Slack, etc.\n\n\nIn your \nFastfile\n\n\nlane :beta do\n  crashlytics(api_token: \n123abc\n, build_secret: \nsecret_key\n)\nend\n\n\n\n\nor if you want to only define the keys once and use it multiple times\n\n\nENV[\nCRASHLYTICS_API_TOKEN\n] = \n123abc\n\nENV[\nCRASHLYTICS_BUILD_SECRET\n] = \nsecret_key\n\n\nlane :beta do\n  crashlytics\nend\n\n\n\n\nThis is the most straight forward and easiest solution, but might cause a few issues:\n\n\n\n\nIf you ever decide to open source your application you'll have to make sure to remove the keys from your git history\n\n\nIf your keys got invalidated for whatever reason and you decide to rollback your code base to an earlier stage the keys will also be rolled back\n\n\n\n\nTo get the name of the available environment variables, run \nfastlane action [action_name]\n.\n\n\nBash Profile\n\n\nTo not store your keys in \ngit\n, you can pass all parameters of all actions using environment variables.\n\n\nYou can edit your \n~/.bash_profile\n to include something like\n\n\nexport SLACK_URL=\nhttps://hooks.slack.com/services/T03NA19Q5/...\n\nexport CRASHLYTICS_API_TOKEN=\n123abc\n\n\n\n\n\nIf you use a different shell (e.g. \nzshell\n) you'll need to edit \n~/.zshrc\n instead.\n\n\nAfter editing the \n.bash_profile\n you need to either re-open your terminal session or run \nsource ~/.bash_profile\n.\n\n\nDisadvantages\n\n\n\n\nEvery terminal tool you run gets access to your environment variables. \n\n\nYou have to edit your bash profile on every computer you want to run \nfastlane\n from\n\n\nThe bash profile isn't automatically loaded by some CI-systems like Jenkins\n\n\n\n\nTo get the name of the available environment variables, run \nfastlane action [action_name]\n.\n\n\ndotenv\n\n\ndotenv\n is a system to store your environment in a file that is project specific. Basically you have a hidden file in your project containing all the environment variables for your project.\n\n\nYou can store a default configuration in \n.env.default\n which will be loaded by \nfastlane\n automatically.\n\n\nSLACK_URL=\nhttps://hooks.slack.com/services/T03NA19Q5/...\n\nCRASHLYTICS_API_TOKEN=\n123abc\n\n\n\n\n\nYou might want different configurations depending on your environment.\n\n\nfastlane beta --env development\n\n\n\n\nand store the configuration in \n.env.development\n with all keys for the development environment.\n\n\nInstall \n[sudo] gem install dotenv\n or add \ndotenv\n to your \nGemfile\n. More information about the \nrecommend way to install gems\n.\n\n\nTo get the name of the available environment variables, run \nfastlane action [action_name]\n.", 
            "title": "Keys"
        }, 
        {
            "location": "/best-practices/keys/#fastlane-keys", 
            "text": "This guide will show you the best ways to store and use your keys for services like Crashlytics, Slack, etc.", 
            "title": "fastlane keys"
        }, 
        {
            "location": "/best-practices/keys/#in-your-fastfile", 
            "text": "lane :beta do\n  crashlytics(api_token:  123abc , build_secret:  secret_key )\nend  or if you want to only define the keys once and use it multiple times  ENV[ CRASHLYTICS_API_TOKEN ] =  123abc \nENV[ CRASHLYTICS_BUILD_SECRET ] =  secret_key \n\nlane :beta do\n  crashlytics\nend  This is the most straight forward and easiest solution, but might cause a few issues:   If you ever decide to open source your application you'll have to make sure to remove the keys from your git history  If your keys got invalidated for whatever reason and you decide to rollback your code base to an earlier stage the keys will also be rolled back   To get the name of the available environment variables, run  fastlane action [action_name] .", 
            "title": "In your Fastfile"
        }, 
        {
            "location": "/best-practices/keys/#bash-profile", 
            "text": "To not store your keys in  git , you can pass all parameters of all actions using environment variables.  You can edit your  ~/.bash_profile  to include something like  export SLACK_URL= https://hooks.slack.com/services/T03NA19Q5/... \nexport CRASHLYTICS_API_TOKEN= 123abc   If you use a different shell (e.g.  zshell ) you'll need to edit  ~/.zshrc  instead.  After editing the  .bash_profile  you need to either re-open your terminal session or run  source ~/.bash_profile .  Disadvantages   Every terminal tool you run gets access to your environment variables.   You have to edit your bash profile on every computer you want to run  fastlane  from  The bash profile isn't automatically loaded by some CI-systems like Jenkins   To get the name of the available environment variables, run  fastlane action [action_name] .", 
            "title": "Bash Profile"
        }, 
        {
            "location": "/best-practices/keys/#dotenv", 
            "text": "dotenv  is a system to store your environment in a file that is project specific. Basically you have a hidden file in your project containing all the environment variables for your project.  You can store a default configuration in  .env.default  which will be loaded by  fastlane  automatically.  SLACK_URL= https://hooks.slack.com/services/T03NA19Q5/... \nCRASHLYTICS_API_TOKEN= 123abc   You might want different configurations depending on your environment.  fastlane beta --env development  and store the configuration in  .env.development  with all keys for the development environment.  Install  [sudo] gem install dotenv  or add  dotenv  to your  Gemfile . More information about the  recommend way to install gems .  To get the name of the available environment variables, run  fastlane action [action_name] .", 
            "title": "dotenv"
        }, 
        {
            "location": "/advanced/", 
            "text": "Advanced fastlane\n\n\nPassing Parameters\n\n\nTo pass parameters from the command line to your lane, use the following syntax:\n\n\nfastlane [lane] key:value key2:value2\n\nfastlane deploy submit:false build_number:24\n\n\n\n\nTo access those values, change your lane declaration to also include \n|options|\n\n\nbefore_all do |lane, options|\n  # ...\nend\n\nbefore_each do |lane, options|\n  # ...\nend\n\nlane :deploy do |options|\n  # ...\n  if options[:submit]\n    # Only when submit is true\n  end\n  # ...\n  increment_build_number(build_number: options[:build_number])\n  # ...\nend\n\nafter_all do |lane, options|\n  # ...\nend\n\nafter_each do |lane, options|\n  # ...\nend\n\nerror do |lane, exception, options|\n  if options[:debug]\n    puts \nHi :)\n\n  end\nend\n\n\n\n\nSwitching lanes\n\n\nTo switch lanes while executing a lane, use the following code:\n\n\nlane :deploy do |options|\n  # ...\n  build(release: true) # that's the important bit\n  hockey\n  # ...\nend\n\nlane :staging do |options|\n  # ...\n  build # it also works when you don't pass parameters\n  hockey\n  # ...\nend\n\nlane :build do |options|\n  scheme = (options[:release] ? \nRelease\n : \nStaging\n)\n  ipa(scheme: scheme)\nend\n\n\n\n\nfastlane\n takes care of all the magic for you. You can call lanes of the same platform or a general lane outside of the \nplatform\n definition.\n\n\nPassing parameters is optional.\n\n\nReturning values\n\n\nAdditionally, you can retrieve the return value. In Ruby, the last line of the \nlane\n definition is the return value. Here is an example:\n\n\nlane :deploy do |options|\n  value = calculate(value: 3)\n  puts value # =\n 5\nend\n\nlane :calculate do |options|\n  # ...\n  2 + options[:value] # the last line will always be the return value\nend\n\n\n\n\nStop executing a lane early\n\n\nThe \nnext\n keyword can be used to stop executing a \nlane\n before it reaches the end.\n\n\nlane :build do |options|\n  if cached_build_available?\n    UI.important 'Skipping build because a cached build is available!'\n    next # skip doing the rest of this lane\n  end\n  match\n  gym\nend\n\nprivate_lane :cached_build_available? do |options|\n  # ...\n  true\nend\n\n\n\n\nWhen \nnext\n is used during a \nlane\n switch, control returns to the previous \nlane\n that was executing.\n\n\nlane :first_lane do |options|\n  puts \nIf you run: `fastlane first_lane`\n\n  puts \nYou'll see this!\n\n  second_lane\n  puts \nAs well as this!\n\nend\n\nprivate_lane :second_lane do |options|\n  next\n  puts \nThis won't be shown\n\nend\n\n\n\n\nWhen you stop executing a lane early with \nnext\n, any \nafter_each\n and \nafter_all\n blocks you have will still trigger as usual :+1:\n\n\nbefore_each\n and \nafter_each\n blocks\n\n\nbefore_each\n blocks are called before any lane is called. This would include being called before each lane you've switched to.\n\n\nbefore_each do |lane, options|\n  # ...\nend\n\n\n\n\nafter_each\n blocks are called after any lane is called. This would include being called after each lane you've switched to.\nJust like \nafter_all\n, \nafter_each\n is not called if an error occurs. The \nerror\n block should be used in this case.\n\n\nafter_each do |lane, options|\n  # ...\nend\n\n\n\n\ne.g. With this scenario, \nbefore_each\n and \nafter_each\n would be called 4 times: before the \ndeploy\n lane, before the switch to \narchive\n, \nsign\n, and \nupload\n, and after each of these lanes as well.\n\n\nlane :deploy do\n  archive\n  sign\n  upload\nend\n\nlane :archive do\n  # ...\nend\n\nlane :sign do\n  # ...\nend\n\nlane :upload do\n  # ...\nend\n\n\n\n\nRun actions directly\n\n\nIf you just want to try an action without adding them to your \nFastfile\n yet, you can use\n\n\nfastlane run notification message:\nMy Text\n title:\nThe Title\n\n\n\n\n\nTo get the available options for any action run \nfastlane action [action_name]\n. You might not be able to set some kind of parameters using this method.\n\n\nShell values\n\n\nYou can get value from shell commands:\n\n\noutput = sh(\npod update\n)\n\n\n\n\nPriorities of parameters and options\n\n\nThe order in which \nfastlane\n tools take their values from\n\n\n\n\nCLI parameter (e.g. \ngym --scheme Example\n) or Fastfile (e.g. \ngym(scheme: 'Example')\n)\n\n\nEnvironment variable (e.g. \nGYM_SCHEME\n)\n\n\nTool specific config file (e.g. \nGymfile\n containing \nscheme 'Example'\n)\n\n\nDefault value (which might be taken from the \nAppfile\n, e.g. \napp_identifier\n from the \nAppfile\n)\n\n\nIf this value is required, you'll be asked for it (e.g. you have multiple schemes, you'll be asked for it)\n\n\n\n\nImporting another Fastfile\n\n\nWithin your \nFastfile\n you can import another \nFastfile\n using 2 methods:\n\n\nimport\n\n\nImport a \nFastfile\n from a local path\n\n\nimport \n../GeneralFastfile\n\n\noverride_lane :from_general do\n  # ...\nend\n\n\n\n\nimport_from_git\n\n\nImport from another git repository, which you can use to have one git repo with a default \nFastfile\n for all your project\n\n\nimport_from_git(url: 'https://github.com/fastlane/fastlane/tree/master/fastlane')\n# or\nimport_from_git(url: 'git@github.com:MyAwesomeRepo/MyAwesomeFastlaneStandardSetup.git',\n               path: 'fastlane/Fastfile')\n\nlane :new_main_lane do\n  # ...\nend\n\n\n\n\nThis will also automatically import all the local actions from this repo.\n\n\nNote\n\n\nYou should import the other \nFastfile\n on the top above your lane declarations. When defining a new lane \nfastlane\n will make sure to not run into any name conflicts. If you want to overwrite an existing lane (from the imported one), use the \noverride_lane\n keyword.\n\n\nEnvironment Variables\n\n\nYou can define environment variables in a \n.env\n or \n.env.default\n file in the same directory as your \nFastfile\n. Environment variables are loading using \ndotenv\n. Here's an example.\n\n\nWORKSPACE=YourApp.xcworkspace\nHOCKEYAPP_API_TOKEN=your-hockey-api-token\n\n\n\n\nfastlane\n also has a \n--env\n option that allows loading of environment specific \ndotenv\n files. \n.env\n and \n.env.default\n will be loaded before environment specific \ndotenv\n files are loaded. The naming convention for environment specific \ndotenv\n files is \n.env.\nenvironment\n\n\nFor example, \nfastlane \nlane-name\n --env development\n will load \n.env\n, \n.env.default\n, and \n.env.development\n\n\nLane Context\n\n\nThe different actions can \ncommunicate\n with each other using a shared hash. You can access them in your lanes with the following code.\n\n\nReplace \nVARIABLE_NAME_HERE\n with any of the following.\n\n\nlane_context[SharedValues::LANE_NAME]                   # The name of the current lane (stays the same when switching lanes)\nlane_context[SharedValues::BUILD_NUMBER]                # Generated by `increment_build_number`\nlane_context[SharedValues::VERSION_NUMBER]              # Generated by `increment_version_number`\nlane_context[SharedValues::SNAPSHOT_SCREENSHOTS_PATH]   # Generated by _snapshot_\nlane_context[SharedValues::PRODUCE_APPLE_ID]            # The Apple ID of the newly created app\nlane_context[SharedValues::IPA_OUTPUT_PATH]             # Generated by _gym_\nlane_context[SharedValues::DSYM_OUTPUT_PATH]            # Generated by _gym_\nlane_context[SharedValues::SIGH_PROFILE_PATH]           # Generated by _sigh_\nlane_context[SharedValues::SIGH_UDID]                   # The UDID of the generated provisioning profile\nlane_context[SharedValues::HOCKEY_DOWNLOAD_LINK]        # Generated by `hockey`\nlane_context[SharedValues::GRADLE_APK_OUTPUT_PATH]      # Generated by `gradle`\nlane_context[SharedValues::GRADLE_ALL_APK_OUTPUT_PATHS] # Generated by `gradle`\nlane_context[SharedValues::GRADLE_FLAVOR]               # Generated by `gradle`\nlane_context[SharedValues::GRADLE_BUILD_TYPE]           # Generated by `gradle`\n\n\n\n\nTo get information about the available lane variables, run \nfastlane action [action_name]\n.\n\n\nPrivate lanes\n\n\nSometimes you might have a lane that is used from different lanes, for example:\n\n\nlane :production do\n  # ...\n  build(release: true)\n  appstore # Deploy to the AppStore\n  # ...\nend\n\nlane :beta do\n  # ...\n  build(release: false)\n  crashlytics # Distribute to testers\n  # ...\nend\n\nlane :build do |options|\n  # ...\n  ipa\n  # ...\nend\n\n\n\n\nIt probably doesn't make sense to execute the \nbuild\n lane directly using \nfastlane build\n. You can hide this lane using\n\n\nprivate_lane :build do |options|\n  # ...\nend\n\n\n\n\nThis will hide the lane from:\n\n\n\n\nfastlane lanes\n\n\nfastlane list\n\n\nfastlane docs\n\n\n\n\nAnd also, you can't call the private lane using \nfastlane build\n.\n\n\nThe resulting private lane can only be called from another lane using the lane switching technology.\n\n\nLoad own actions from external folder\n\n\nAdd this to the top of your \nFastfile\n.\n\n\nactions_path '../custom_actions_folder/'\n\n\n\n\nSkip update check when launching \nfastlane\n\n\nYou can set the environment variable \nFASTLANE_SKIP_UPDATE_CHECK\n to skip the update check.\n\n\nAdding Credentials\n\n\nYou can add credentials for use by \nfastlane\n to your keychain using the \nCredentialsManager\n command line interface. This is useful for situations like CI environments.\n\n\nAdding a Credential\n\n\nfastlane-credentials add --username felix@krausefx.com\nPassword: *********\nCredential felix@krausefx.com:********* added to keychain.\n\n\n\n\nRemoving a Credential\n\n\nfastlane-credentials remove --username felix@krausefx.com\npassword has been deleted.\n\n\n\n\nControl configuration by lane and by platform\n\n\nIn general, configuration files take only the first value given for a particular configuration item. That means that for an \nAppfile\n like the following:\n\n\napp_identifier \ncom.used.id\n\napp_identifier \ncom.ignored.id\n\n\n\n\n\nthe \napp_identfier\n will be \n\"com.used.id\"\n and the second value will be ignored. The \nfor_lane\n and \nfor_platform\n configuration blocks provide a limited exception to this rule.\n\n\nAll configuration files (Appfile, Matchfile, Screengrabfile, etc.) can use \nfor_lane\n and \nfor_platform\n blocks to control (and override) configuration values for those circumstances.\n\n\nfor_lane\n blocks will be called when the name of lane invoked on the command line matches the one specified by the block. So, given a \nScreengrabfile\n like:\n\n\nlocales ['en-US', 'fr-FR', 'ja-JP']\n\nfor_lane :screenshots_english_only do\n  locales ['en-US']\nend\n\nfor_lane :screenshots_french_only do\n  locales ['fr-FR']\nend\n\n\n\n\nlocales\n will have the values \n['en-US', 'fr-FR', 'ja-JP']\n by default, but will only have one value when running the \nfastlane screenshots_english_only\n or \nfastlane screenshots_french_only\n.\n\n\nfor_platform\n gives you similar control based on the platform for which you have invoked \nfastlane\n. So, for an \nAppfile\n configured like:\n\n\napp_identifier \ncom.default.id\n\n\nfor_lane :enterprise do\n  app_identifier \ncom.forlane.enterprise\n\nend\n\nfor_platform :mac do\n  app_identifier \ncom.forplatform.mac\n\n\n  for_lane :release do\n    app_identifier \ncom.forplatform.mac.forlane.release\n\n  end\nend\n\n\n\n\nyou can expect the \napp_identifier\n to equal \n\"com.forplatform.mac.forlane.release\"\n when invoking \nfastlane mac release\n.\n\n\nManually Manage the fastlane match Repo\n\n\nMost users can benefit from \nmatch\n's automatic management of the repo that stores certificates and provisioning profiles. From time to time, it may be necessary to manually change the files in this repo.\n\n\nFor example, \nfastlane\n requires admin access to the Apple Developer account to generate the appropriate files. If you are provided with an updated certificate or profile but do not have admin access, you can manually edit the repo.\n\n\n\n\nWarning:\n Manually editing your \nmatch\n repo can introduce unexpected behavior and is not recommended. Proceed with caution.\n\n\n\n\n\n\nInstructions\n\n\nOverview\n\n\nBecause:\n\n\n\n\nfastlane\n encrypts the repo, and\n\n\nfastlane\n doesn't support manual edits to the repo\n\n\n\n\nit's necessary to manually decrypt, then modify, then encrypt, the repo to make any changes.\n\n\n\n\nThese instructions presuppose you already have \nfastlane\n \nmatch\n configured correctly.\n\n\n\n\n\ud83d\udd13 Decryption Instructions\n\n\nThe easiest way to decrypt the repo is to use the \nfastlane\n \nmatch\n \nGitHelper\n class. You can do this from an interactive Ruby console:\n\n\n$ bundle console\nirb(main):001:0\n\n\n\n\n\nThen, require \nmatch\n and set the appropriate parameters:\n\n\nirb(main):001:0\n require 'match'\nirb(main):002:0\n git_url = 'https://github.com/fastlane/example-certificate-repo'\n=\n \nhttps://github.com/fastlane/example-certificate-repo\n\nirb(main):003:0\n shallow_clone = false\n=\n false\nirb(main):004:0\n manual_password = 'example-password'\n=\n \nexample-password\n\n\n\n\n\nNow call \nGitHelper.clone\n, which will clone and decrypt the repo for you. Assign the return value to \nworkspace\n, which we'll need later when we re-encrypt:\n\n\nirb(main):005:0\n workspace = Match::GitHelper.clone(git_url, shallow_clone, manual_password: manual_password)\n[14:49:30]: Cloning remote git repo...\n[14:49:31]: \ud83d\udd13  Successfully decrypted certificates repo\n=\n \n/var/folders/0j/29ytx6wx0fg86sznfb4mqdph0000gn/T/d20170314-14350-11hmdro\n\n\n\n\n\nThe directory beginning with \n/var/folders\n contains the decrypted git repo. Modify it as needed.\n\n\nIf you are updating a \n.p12\n file, ensure it's exported from the keychain without a password, since \nmatch\n doesn't support importing private keys with a password.\n\n\n\n\nWarning:\n Do \nnot\n commit your changes. Allow \nfastlane\n to do that for you.\n\n\n\n\nOnce your changes are made, we'll need to encrypt the repo and push it.\n\n\n\ud83d\udd12 Encryption Instructions\n\n\nIn the Ruby console, call \nGitHelper.commit_changes\n, passing in the commit message you want. For example:\n\n\nirb(main):006:0\n Match::GitHelper.commit_changes(workspace, \nremove password from p12 file\n, git_url)\n\n\n\n\nYour changes will be encrypted, committed, and pushed.\n\n\n\n\nNote:\n If your keychain doesn't include the encryption passcode, you may be prompted for it. If so, just enter the same password you used to decrypt it.\n\n\n\n\n\n\nDirectory behavior\n\n\nfastlane\n was designed in a way that you can run \nfastlane\n from both the root directory of the project, and from the \n./fastlane\n sub-folder.\n\n\nTake this example \nFastfile\n on the path \nfastlane/Fastfile\n\n\nsh \npwd\n # =\n \n[root]/fastlane\n\nputs Dir.pwd # =\n \n[root]/fastlane\n\n\nlane :something do\n  sh \npwd\n # =\n \n[root]/fastlane\n\n  puts Dir.pwd # =\n \n[root]/fastlane\n\n\n  my_action\nend\n\n\n\n\nThe implementation of \nmy_action\n looks like this:\n\n\ndef run(params)\n  puts Dir.pwd # =\n \n[root]\n\nend\n\n\n\n\nNotice how every action and every plugin's code runs in the root of the project, while all user code from the \nFastfile\n runs inside the \n./fastlane\n directory. This is important to consider when migrating existing code from your \nFastfile\n into your own action or plugin. To change the directory manually you can use standard Ruby blocks:\n\n\nDir.chdir(\n..\n) do\n  # code here runs in the parent directory\nend\n\n\n\n\nThis behavior isn't great, and has been like this since the very early days of \nfastlane\n. As much as we'd like to change it, there is no good way to do so, without breaking thousands of production setups, so we decided to keep it as is for now.", 
            "title": "Advanced"
        }, 
        {
            "location": "/advanced/#advanced-fastlane", 
            "text": "", 
            "title": "Advanced fastlane"
        }, 
        {
            "location": "/advanced/#passing-parameters", 
            "text": "To pass parameters from the command line to your lane, use the following syntax:  fastlane [lane] key:value key2:value2\n\nfastlane deploy submit:false build_number:24  To access those values, change your lane declaration to also include  |options|  before_all do |lane, options|\n  # ...\nend\n\nbefore_each do |lane, options|\n  # ...\nend\n\nlane :deploy do |options|\n  # ...\n  if options[:submit]\n    # Only when submit is true\n  end\n  # ...\n  increment_build_number(build_number: options[:build_number])\n  # ...\nend\n\nafter_all do |lane, options|\n  # ...\nend\n\nafter_each do |lane, options|\n  # ...\nend\n\nerror do |lane, exception, options|\n  if options[:debug]\n    puts  Hi :) \n  end\nend", 
            "title": "Passing Parameters"
        }, 
        {
            "location": "/advanced/#switching-lanes", 
            "text": "To switch lanes while executing a lane, use the following code:  lane :deploy do |options|\n  # ...\n  build(release: true) # that's the important bit\n  hockey\n  # ...\nend\n\nlane :staging do |options|\n  # ...\n  build # it also works when you don't pass parameters\n  hockey\n  # ...\nend\n\nlane :build do |options|\n  scheme = (options[:release] ?  Release  :  Staging )\n  ipa(scheme: scheme)\nend  fastlane  takes care of all the magic for you. You can call lanes of the same platform or a general lane outside of the  platform  definition.  Passing parameters is optional.", 
            "title": "Switching lanes"
        }, 
        {
            "location": "/advanced/#returning-values", 
            "text": "Additionally, you can retrieve the return value. In Ruby, the last line of the  lane  definition is the return value. Here is an example:  lane :deploy do |options|\n  value = calculate(value: 3)\n  puts value # =  5\nend\n\nlane :calculate do |options|\n  # ...\n  2 + options[:value] # the last line will always be the return value\nend", 
            "title": "Returning values"
        }, 
        {
            "location": "/advanced/#stop-executing-a-lane-early", 
            "text": "The  next  keyword can be used to stop executing a  lane  before it reaches the end.  lane :build do |options|\n  if cached_build_available?\n    UI.important 'Skipping build because a cached build is available!'\n    next # skip doing the rest of this lane\n  end\n  match\n  gym\nend\n\nprivate_lane :cached_build_available? do |options|\n  # ...\n  true\nend  When  next  is used during a  lane  switch, control returns to the previous  lane  that was executing.  lane :first_lane do |options|\n  puts  If you run: `fastlane first_lane` \n  puts  You'll see this! \n  second_lane\n  puts  As well as this! \nend\n\nprivate_lane :second_lane do |options|\n  next\n  puts  This won't be shown \nend  When you stop executing a lane early with  next , any  after_each  and  after_all  blocks you have will still trigger as usual :+1:", 
            "title": "Stop executing a lane early"
        }, 
        {
            "location": "/advanced/#before_each-and-after_each-blocks", 
            "text": "before_each  blocks are called before any lane is called. This would include being called before each lane you've switched to.  before_each do |lane, options|\n  # ...\nend  after_each  blocks are called after any lane is called. This would include being called after each lane you've switched to.\nJust like  after_all ,  after_each  is not called if an error occurs. The  error  block should be used in this case.  after_each do |lane, options|\n  # ...\nend  e.g. With this scenario,  before_each  and  after_each  would be called 4 times: before the  deploy  lane, before the switch to  archive ,  sign , and  upload , and after each of these lanes as well.  lane :deploy do\n  archive\n  sign\n  upload\nend\n\nlane :archive do\n  # ...\nend\n\nlane :sign do\n  # ...\nend\n\nlane :upload do\n  # ...\nend", 
            "title": "before_each and after_each blocks"
        }, 
        {
            "location": "/advanced/#run-actions-directly", 
            "text": "If you just want to try an action without adding them to your  Fastfile  yet, you can use  fastlane run notification message: My Text  title: The Title   To get the available options for any action run  fastlane action [action_name] . You might not be able to set some kind of parameters using this method.", 
            "title": "Run actions directly"
        }, 
        {
            "location": "/advanced/#shell-values", 
            "text": "You can get value from shell commands:  output = sh( pod update )", 
            "title": "Shell values"
        }, 
        {
            "location": "/advanced/#priorities-of-parameters-and-options", 
            "text": "The order in which  fastlane  tools take their values from   CLI parameter (e.g.  gym --scheme Example ) or Fastfile (e.g.  gym(scheme: 'Example') )  Environment variable (e.g.  GYM_SCHEME )  Tool specific config file (e.g.  Gymfile  containing  scheme 'Example' )  Default value (which might be taken from the  Appfile , e.g.  app_identifier  from the  Appfile )  If this value is required, you'll be asked for it (e.g. you have multiple schemes, you'll be asked for it)", 
            "title": "Priorities of parameters and options"
        }, 
        {
            "location": "/advanced/#importing-another-fastfile", 
            "text": "Within your  Fastfile  you can import another  Fastfile  using 2 methods:", 
            "title": "Importing another Fastfile"
        }, 
        {
            "location": "/advanced/#import", 
            "text": "Import a  Fastfile  from a local path  import  ../GeneralFastfile \n\noverride_lane :from_general do\n  # ...\nend", 
            "title": "import"
        }, 
        {
            "location": "/advanced/#import_from_git", 
            "text": "Import from another git repository, which you can use to have one git repo with a default  Fastfile  for all your project  import_from_git(url: 'https://github.com/fastlane/fastlane/tree/master/fastlane')\n# or\nimport_from_git(url: 'git@github.com:MyAwesomeRepo/MyAwesomeFastlaneStandardSetup.git',\n               path: 'fastlane/Fastfile')\n\nlane :new_main_lane do\n  # ...\nend  This will also automatically import all the local actions from this repo.", 
            "title": "import_from_git"
        }, 
        {
            "location": "/advanced/#note", 
            "text": "You should import the other  Fastfile  on the top above your lane declarations. When defining a new lane  fastlane  will make sure to not run into any name conflicts. If you want to overwrite an existing lane (from the imported one), use the  override_lane  keyword.", 
            "title": "Note"
        }, 
        {
            "location": "/advanced/#environment-variables", 
            "text": "You can define environment variables in a  .env  or  .env.default  file in the same directory as your  Fastfile . Environment variables are loading using  dotenv . Here's an example.  WORKSPACE=YourApp.xcworkspace\nHOCKEYAPP_API_TOKEN=your-hockey-api-token  fastlane  also has a  --env  option that allows loading of environment specific  dotenv  files.  .env  and  .env.default  will be loaded before environment specific  dotenv  files are loaded. The naming convention for environment specific  dotenv  files is  .env. environment  For example,  fastlane  lane-name  --env development  will load  .env ,  .env.default , and  .env.development", 
            "title": "Environment Variables"
        }, 
        {
            "location": "/advanced/#lane-context", 
            "text": "The different actions can  communicate  with each other using a shared hash. You can access them in your lanes with the following code.  Replace  VARIABLE_NAME_HERE  with any of the following.  lane_context[SharedValues::LANE_NAME]                   # The name of the current lane (stays the same when switching lanes)\nlane_context[SharedValues::BUILD_NUMBER]                # Generated by `increment_build_number`\nlane_context[SharedValues::VERSION_NUMBER]              # Generated by `increment_version_number`\nlane_context[SharedValues::SNAPSHOT_SCREENSHOTS_PATH]   # Generated by _snapshot_\nlane_context[SharedValues::PRODUCE_APPLE_ID]            # The Apple ID of the newly created app\nlane_context[SharedValues::IPA_OUTPUT_PATH]             # Generated by _gym_\nlane_context[SharedValues::DSYM_OUTPUT_PATH]            # Generated by _gym_\nlane_context[SharedValues::SIGH_PROFILE_PATH]           # Generated by _sigh_\nlane_context[SharedValues::SIGH_UDID]                   # The UDID of the generated provisioning profile\nlane_context[SharedValues::HOCKEY_DOWNLOAD_LINK]        # Generated by `hockey`\nlane_context[SharedValues::GRADLE_APK_OUTPUT_PATH]      # Generated by `gradle`\nlane_context[SharedValues::GRADLE_ALL_APK_OUTPUT_PATHS] # Generated by `gradle`\nlane_context[SharedValues::GRADLE_FLAVOR]               # Generated by `gradle`\nlane_context[SharedValues::GRADLE_BUILD_TYPE]           # Generated by `gradle`  To get information about the available lane variables, run  fastlane action [action_name] .", 
            "title": "Lane Context"
        }, 
        {
            "location": "/advanced/#private-lanes", 
            "text": "Sometimes you might have a lane that is used from different lanes, for example:  lane :production do\n  # ...\n  build(release: true)\n  appstore # Deploy to the AppStore\n  # ...\nend\n\nlane :beta do\n  # ...\n  build(release: false)\n  crashlytics # Distribute to testers\n  # ...\nend\n\nlane :build do |options|\n  # ...\n  ipa\n  # ...\nend  It probably doesn't make sense to execute the  build  lane directly using  fastlane build . You can hide this lane using  private_lane :build do |options|\n  # ...\nend  This will hide the lane from:   fastlane lanes  fastlane list  fastlane docs   And also, you can't call the private lane using  fastlane build .  The resulting private lane can only be called from another lane using the lane switching technology.", 
            "title": "Private lanes"
        }, 
        {
            "location": "/advanced/#load-own-actions-from-external-folder", 
            "text": "Add this to the top of your  Fastfile .  actions_path '../custom_actions_folder/'", 
            "title": "Load own actions from external folder"
        }, 
        {
            "location": "/advanced/#skip-update-check-when-launching-fastlane", 
            "text": "You can set the environment variable  FASTLANE_SKIP_UPDATE_CHECK  to skip the update check.", 
            "title": "Skip update check when launching fastlane"
        }, 
        {
            "location": "/advanced/#adding-credentials", 
            "text": "You can add credentials for use by  fastlane  to your keychain using the  CredentialsManager  command line interface. This is useful for situations like CI environments.  Adding a Credential  fastlane-credentials add --username felix@krausefx.com\nPassword: *********\nCredential felix@krausefx.com:********* added to keychain.  Removing a Credential  fastlane-credentials remove --username felix@krausefx.com\npassword has been deleted.", 
            "title": "Adding Credentials"
        }, 
        {
            "location": "/advanced/#control-configuration-by-lane-and-by-platform", 
            "text": "In general, configuration files take only the first value given for a particular configuration item. That means that for an  Appfile  like the following:  app_identifier  com.used.id \napp_identifier  com.ignored.id   the  app_identfier  will be  \"com.used.id\"  and the second value will be ignored. The  for_lane  and  for_platform  configuration blocks provide a limited exception to this rule.  All configuration files (Appfile, Matchfile, Screengrabfile, etc.) can use  for_lane  and  for_platform  blocks to control (and override) configuration values for those circumstances.  for_lane  blocks will be called when the name of lane invoked on the command line matches the one specified by the block. So, given a  Screengrabfile  like:  locales ['en-US', 'fr-FR', 'ja-JP']\n\nfor_lane :screenshots_english_only do\n  locales ['en-US']\nend\n\nfor_lane :screenshots_french_only do\n  locales ['fr-FR']\nend  locales  will have the values  ['en-US', 'fr-FR', 'ja-JP']  by default, but will only have one value when running the  fastlane screenshots_english_only  or  fastlane screenshots_french_only .  for_platform  gives you similar control based on the platform for which you have invoked  fastlane . So, for an  Appfile  configured like:  app_identifier  com.default.id \n\nfor_lane :enterprise do\n  app_identifier  com.forlane.enterprise \nend\n\nfor_platform :mac do\n  app_identifier  com.forplatform.mac \n\n  for_lane :release do\n    app_identifier  com.forplatform.mac.forlane.release \n  end\nend  you can expect the  app_identifier  to equal  \"com.forplatform.mac.forlane.release\"  when invoking  fastlane mac release .", 
            "title": "Control configuration by lane and by platform"
        }, 
        {
            "location": "/advanced/#manually-manage-the-fastlane-match-repo", 
            "text": "Most users can benefit from  match 's automatic management of the repo that stores certificates and provisioning profiles. From time to time, it may be necessary to manually change the files in this repo.  For example,  fastlane  requires admin access to the Apple Developer account to generate the appropriate files. If you are provided with an updated certificate or profile but do not have admin access, you can manually edit the repo.   Warning:  Manually editing your  match  repo can introduce unexpected behavior and is not recommended. Proceed with caution.    Instructions", 
            "title": "Manually Manage the fastlane match Repo"
        }, 
        {
            "location": "/advanced/#overview", 
            "text": "Because:   fastlane  encrypts the repo, and  fastlane  doesn't support manual edits to the repo   it's necessary to manually decrypt, then modify, then encrypt, the repo to make any changes.   These instructions presuppose you already have  fastlane   match  configured correctly.", 
            "title": "Overview"
        }, 
        {
            "location": "/advanced/#decryption-instructions", 
            "text": "The easiest way to decrypt the repo is to use the  fastlane   match   GitHelper  class. You can do this from an interactive Ruby console:  $ bundle console\nirb(main):001:0   Then, require  match  and set the appropriate parameters:  irb(main):001:0  require 'match'\nirb(main):002:0  git_url = 'https://github.com/fastlane/example-certificate-repo'\n=   https://github.com/fastlane/example-certificate-repo \nirb(main):003:0  shallow_clone = false\n=  false\nirb(main):004:0  manual_password = 'example-password'\n=   example-password   Now call  GitHelper.clone , which will clone and decrypt the repo for you. Assign the return value to  workspace , which we'll need later when we re-encrypt:  irb(main):005:0  workspace = Match::GitHelper.clone(git_url, shallow_clone, manual_password: manual_password)\n[14:49:30]: Cloning remote git repo...\n[14:49:31]: \ud83d\udd13  Successfully decrypted certificates repo\n=   /var/folders/0j/29ytx6wx0fg86sznfb4mqdph0000gn/T/d20170314-14350-11hmdro   The directory beginning with  /var/folders  contains the decrypted git repo. Modify it as needed.  If you are updating a  .p12  file, ensure it's exported from the keychain without a password, since  match  doesn't support importing private keys with a password.   Warning:  Do  not  commit your changes. Allow  fastlane  to do that for you.   Once your changes are made, we'll need to encrypt the repo and push it.", 
            "title": "\ud83d\udd13 Decryption Instructions"
        }, 
        {
            "location": "/advanced/#encryption-instructions", 
            "text": "In the Ruby console, call  GitHelper.commit_changes , passing in the commit message you want. For example:  irb(main):006:0  Match::GitHelper.commit_changes(workspace,  remove password from p12 file , git_url)  Your changes will be encrypted, committed, and pushed.   Note:  If your keychain doesn't include the encryption passcode, you may be prompted for it. If so, just enter the same password you used to decrypt it.", 
            "title": "\ud83d\udd12 Encryption Instructions"
        }, 
        {
            "location": "/advanced/#directory-behavior", 
            "text": "fastlane  was designed in a way that you can run  fastlane  from both the root directory of the project, and from the  ./fastlane  sub-folder.  Take this example  Fastfile  on the path  fastlane/Fastfile  sh  pwd  # =   [root]/fastlane \nputs Dir.pwd # =   [root]/fastlane \n\nlane :something do\n  sh  pwd  # =   [root]/fastlane \n  puts Dir.pwd # =   [root]/fastlane \n\n  my_action\nend  The implementation of  my_action  looks like this:  def run(params)\n  puts Dir.pwd # =   [root] \nend  Notice how every action and every plugin's code runs in the root of the project, while all user code from the  Fastfile  runs inside the  ./fastlane  directory. This is important to consider when migrating existing code from your  Fastfile  into your own action or plugin. To change the directory manually you can use standard Ruby blocks:  Dir.chdir( .. ) do\n  # code here runs in the parent directory\nend  This behavior isn't great, and has been like this since the very early days of  fastlane . As much as we'd like to change it, there is no good way to do so, without breaking thousands of production setups, so we decided to keep it as is for now.", 
            "title": "Directory behavior"
        }
    ]
}