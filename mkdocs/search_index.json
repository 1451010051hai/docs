{
    "docs": [
        {
            "location": "/", 
            "text": "fastlane\n\n\n\n\n\n\n\n\nfastlane\n is \nthe\n tool to release your iOS and Android app \ud83d\ude80 It handles all tedious tasks, like generating screenshots, dealing with code signing, and releasing your application.\n\n\nYou can start by creating a \nFastfile\n file in your repository, here\u2019s one that defines your beta or App Store release process:\n\n\nlane :beta do\n  increment_build_number\n  gym                       # Build your app\n  testflight                # Upload to TestFlight\nend\n\nlane :appstore do\n  snapshot                  # Generate screenshots for the App Store\n  gym                       # Build your app\n  deliver                   # Upload the screenshots and the binary to iTunes\n  slack                     # Let your team-mates know the new version is live\nend\n\n\n\n\nYou just defined 2 different lanes, one for beta deployment, one for App Store. To release your app in the App Store, all you have to do is\n\n\nfastlane appstore\n\n\n\n\nWhy fastlane?\n\n\n\n\n\n\n\n\n\n\nfastlane\n\n\n\n\n\n\n\n\n\n\n\ud83d\ude80\n\n\nSave \nhours\n every time you push a new release to the store or beta testing service\n\n\n\n\n\n\n\u2728\n\n\nIntegrates with all your existing tools and services (170 actions currently)\n\n\n\n\n\n\n\ud83d\udcd6\n\n\n100% open source under the MIT license\n\n\n\n\n\n\n\ud83c\udfa9\n\n\nEasy setup assistant to get started in a few minutes\n\n\n\n\n\n\n\u2692\n\n\nRuns on \nyour\n machine, it's your app and your data\n\n\n\n\n\n\n\ud83d\udc7b\n\n\nIntegrates with all major CI systems\n\n\n\n\n\n\n\ud83d\udda5\n\n\nSupports iOS, Mac, and Android apps\n\n\n\n\n\n\n\ud83d\udd27\n\n\nExtend and customise \nfastlane\n to fit your needs, you're not dependent on anyone\n\n\n\n\n\n\n\ud83d\udcad\n\n\nNever remember any commands any more, just \nfastlane\n\n\n\n\n\n\n\ud83d\udea2\n\n\nDeploy from any computer, including a CI server\n\n\n\n\n\n\n\n\nGetting Started\n\n\nMake sure you have the latest version of the Xcode command line tools installed:\n\n\nxcode-select --install\n\n\n\n\nUsing the terminal\n\n\nsudo gem install fastlane --verbose\n\n\n\n\nNavigate to your iOS or Android app and run\n\n\nfastlane init\n\n\n\n\nfastlane\n will automatically detect your project, and ask for any missing information.\n\n\nFor more details about how to get up and running, check out the getting started guides:\n\n\n\n\nfastlane Getting Started guide for iOS\n\n\nfastlane Getting Started guide for Android\n\n\n\n\nUsing the Fabric app\n\n\nIf you're not familiar with the terminal and prefer a graphical user interface, download the \nFabric app\n and use the built-in \nfastlane\n button.\n\n\nQuestions and support\n\n\nAll fastlane related questions, problems and feature ideas should be posted as \nGitHub issue\n. This way, other users can search existing discussions, and everybody can jump in.\n\n\nSystem requirements\n\n\nfastlane\n requires macOS or Linux with Ruby 2.0.0 or above\n\n\nLicense\n\n\nThis project is licensed under the terms of the MIT license. See the \nLICENSE\n file.\n\n\n\n\nThis project and all fastlane tools are in no way affiliated with Apple Inc or Google. This project is open source under the MIT license, which means you have full access to the source code and can modify it to fit your own needs. All fastlane tools run on your own computer or server, so your credentials or other sensitive information will never leave your own computer. You are responsible for how you use fastlane tools.", 
            "title": "Home"
        }, 
        {
            "location": "/#fastlane", 
            "text": "fastlane  is  the  tool to release your iOS and Android app \ud83d\ude80 It handles all tedious tasks, like generating screenshots, dealing with code signing, and releasing your application.  You can start by creating a  Fastfile  file in your repository, here\u2019s one that defines your beta or App Store release process:  lane :beta do\n  increment_build_number\n  gym                       # Build your app\n  testflight                # Upload to TestFlight\nend\n\nlane :appstore do\n  snapshot                  # Generate screenshots for the App Store\n  gym                       # Build your app\n  deliver                   # Upload the screenshots and the binary to iTunes\n  slack                     # Let your team-mates know the new version is live\nend  You just defined 2 different lanes, one for beta deployment, one for App Store. To release your app in the App Store, all you have to do is  fastlane appstore", 
            "title": "fastlane"
        }, 
        {
            "location": "/#why-fastlane", 
            "text": "fastlane      \ud83d\ude80  Save  hours  every time you push a new release to the store or beta testing service    \u2728  Integrates with all your existing tools and services (170 actions currently)    \ud83d\udcd6  100% open source under the MIT license    \ud83c\udfa9  Easy setup assistant to get started in a few minutes    \u2692  Runs on  your  machine, it's your app and your data    \ud83d\udc7b  Integrates with all major CI systems    \ud83d\udda5  Supports iOS, Mac, and Android apps    \ud83d\udd27  Extend and customise  fastlane  to fit your needs, you're not dependent on anyone    \ud83d\udcad  Never remember any commands any more, just  fastlane    \ud83d\udea2  Deploy from any computer, including a CI server", 
            "title": "Why fastlane?"
        }, 
        {
            "location": "/#getting-started", 
            "text": "Make sure you have the latest version of the Xcode command line tools installed:  xcode-select --install", 
            "title": "Getting Started"
        }, 
        {
            "location": "/#using-the-terminal", 
            "text": "sudo gem install fastlane --verbose  Navigate to your iOS or Android app and run  fastlane init  fastlane  will automatically detect your project, and ask for any missing information.  For more details about how to get up and running, check out the getting started guides:   fastlane Getting Started guide for iOS  fastlane Getting Started guide for Android", 
            "title": "Using the terminal"
        }, 
        {
            "location": "/#using-the-fabric-app", 
            "text": "If you're not familiar with the terminal and prefer a graphical user interface, download the  Fabric app  and use the built-in  fastlane  button.", 
            "title": "Using the Fabric app"
        }, 
        {
            "location": "/#questions-and-support", 
            "text": "All fastlane related questions, problems and feature ideas should be posted as  GitHub issue . This way, other users can search existing discussions, and everybody can jump in.", 
            "title": "Questions and support"
        }, 
        {
            "location": "/#system-requirements", 
            "text": "fastlane  requires macOS or Linux with Ruby 2.0.0 or above", 
            "title": "System requirements"
        }, 
        {
            "location": "/#license", 
            "text": "This project is licensed under the terms of the MIT license. See the  LICENSE  file.   This project and all fastlane tools are in no way affiliated with Apple Inc or Google. This project is open source under the MIT license, which means you have full access to the source code and can modify it to fit your own needs. All fastlane tools run on your own computer or server, so your credentials or other sensitive information will never leave your own computer. You are responsible for how you use fastlane tools.", 
            "title": "License"
        }, 
        {
            "location": "/getting-started/ios/setup/", 
            "text": "Getting started with \nfastlane\n for iOS\n\n\nInstalling fastlane\n\n\nsudo gem install fastlane --verbose\n\n\n\n\nSetting up fastlane\n\n\nNavigate your terminal to your project's directory and run\n\n\nfastlane init\n\n\n\n\nYou'll be asked for your Apple ID, and \nfastlane\n will automatically generate a fastlane configuration for you, based on the information provided.\n\n\nYou can see the newly created \nfastlane\n directory, with all your existing metadata fetched from iTunes Connect.\n\n\n\n\nThe most interesting file is \nfastlane/Fastfile\n, which contains all the information that is needed to distribute your app.\n\n\nWhat's next?\n\n\nfastlane\n created all the required files for you, now you can go ahead and customise it to generate screenshots or to automatically distribute new builds\n\n\n\n\nAutomatically generate screenshots\n\n\nDistribute beta builds\n\n\nDeploy to the App Store\n\n\n\n\nUse a Gemfile\n\n\nIt is recommended that you use a \nGemfile\n to define your dependency on \nfastlane\n. This will clearly define the used \nfastlane\n version, and its dependencies, and will also speed up using \nfastlane\n.\n\n\n\n\nInstall \nbundler\n using \nsudo gem install bundler\n\n\nCreate a \n./Gemfile\n in the root directory of your project with the content\n\n\n\n\nsource \nhttps://rubygems.org\n\n\ngem \nfastlane\n\n\n\n\n\n\n\nRun \n[sudo] bundle update\n and add both the \n./Gemfile\n and the \n./Gemfile.lock\n to version control\n\n\nEvery time you run \nfastlane\n, use \nbundle exec fastlane [lane]\n\n\nOn your CI, add \n[sudo] bundle install\n as your first build step\n\n\nTo update \nfastlane\n, just run \n[sudo] bundle update", 
            "title": "Setup"
        }, 
        {
            "location": "/getting-started/ios/setup/#getting-started-with-fastlane-for-ios", 
            "text": "", 
            "title": "Getting started with fastlane for iOS"
        }, 
        {
            "location": "/getting-started/ios/setup/#installing-fastlane", 
            "text": "sudo gem install fastlane --verbose", 
            "title": "Installing fastlane"
        }, 
        {
            "location": "/getting-started/ios/setup/#setting-up-fastlane", 
            "text": "Navigate your terminal to your project's directory and run  fastlane init  You'll be asked for your Apple ID, and  fastlane  will automatically generate a fastlane configuration for you, based on the information provided.  You can see the newly created  fastlane  directory, with all your existing metadata fetched from iTunes Connect.   The most interesting file is  fastlane/Fastfile , which contains all the information that is needed to distribute your app.", 
            "title": "Setting up fastlane"
        }, 
        {
            "location": "/getting-started/ios/setup/#whats-next", 
            "text": "fastlane  created all the required files for you, now you can go ahead and customise it to generate screenshots or to automatically distribute new builds   Automatically generate screenshots  Distribute beta builds  Deploy to the App Store", 
            "title": "What's next?"
        }, 
        {
            "location": "/getting-started/ios/setup/#use-a-gemfile", 
            "text": "It is recommended that you use a  Gemfile  to define your dependency on  fastlane . This will clearly define the used  fastlane  version, and its dependencies, and will also speed up using  fastlane .   Install  bundler  using  sudo gem install bundler  Create a  ./Gemfile  in the root directory of your project with the content   source  https://rubygems.org \n\ngem  fastlane    Run  [sudo] bundle update  and add both the  ./Gemfile  and the  ./Gemfile.lock  to version control  Every time you run  fastlane , use  bundle exec fastlane [lane]  On your CI, add  [sudo] bundle install  as your first build step  To update  fastlane , just run  [sudo] bundle update", 
            "title": "Use a Gemfile"
        }, 
        {
            "location": "/getting-started/ios/screenshots/", 
            "text": "fastlane screenshots for iOS and tvOS\n\n\nYour App Store screenshots are probably the most important thing when it comes to convincing potential users to download or purchase your app. Unfortunately, many apps don't do screenshots well. This is often because taking screenshots of your app and then preparing them for display is time consuming, and it's hard to get everything right and consistent! For example:\n\n\n\n\nAre the screenshots in the App Store inconsistent with your latest app design?\n\n\nIs your app localized into many languages that require different screenshots for each?\n\n\nHave you made sure that no loading indicators are showing?\n\n\nIs the same content displayed for each of your size variations?\n\n\n\n\nfastlane\n tools can automate this process making it fast, and consistent while giving you beautiful results!\n\n\nAlternatives\n\n\nFor the full story about the many ways that developers can capture and beautify screenshots check out \nthis article\n.\n\n\nManually Capturing Screenshots\n\n\nManually taking screenshots takes too much time, which also decreases the quality of the screenshots. Since it is not automated, the screenshots will show slightly different content on the various devices and languages. Many companies choose to create screenshots in one language and use them for all languages. While this might seem okay to us developers, there are many potential users out there that cannot read the text on your app screenshots if they are not localised. Have you ever looked at a screenshots with content in a language you don't know? It won't convince you to download the app.\n\n\nHowever, the biggest disadvantage of this method is what happens when you need to repeat the process. If you notice a spelling mistake in the screenshots, if you release an update with a new design, or if you just want to show more up to date content, you'll have to create new screenshots for all languages and devices... manually.\n\n\nThe positive side of this approach is that your screenshots will all be crisp and correctly sized, with readable text.\n\n\nScaled Screenshots via iTunes Connect\n\n\nWith the \niTunes Connect screenshot update\n from August 2016, you can now use one set of screenshots for all available devices and screenshots. iTunes Connect will automatically scale the images for you, so that each device renders the same image.\n\n\nWhile this is convenient, this approach has the same problems as the device frame approach: The screenshots don't actually show how the app looks on the user's device. It's a valid way to start though, since you can gradually overwrite screenshots for specific languages and devices.\n\n\nCapture Screenshots Automatically\n\n\nsnapshot\n works with \nfastlane\n to automate the process of capturing screenshots of your app. It allows you to:\n\n\n\n\nCapture hundreds of screenshots in multiple languages on all simulators\n\n\nDo something else while the computer takes the screenshots for you\n\n\nConfigure it once, and store the configuration so anyone on the team can run it\n\n\nGenerate a beautiful web page showing all screenshots on all devices. This is perfect to send to Q\nA, marketing, or translators for verification\n\n\nAvoid having loading indicators in your App Store screenshots by intelligently waiting for network requests to be finished\n\n\nGet a summary of how your app looks like across all supported devices and languages\n\n\n\n\nAfter \nsnapshot\n successfully captures all the screenshots, it will show you a beautiful HTML page to summarize all the screens that were captured:\n\n\n\n  \n\n\n\n\nGetting Started Using UI Tests\n\n\nsnapshot\n uses the capabilities of Apple's UI Tests to drive interactions with your app. To get familiar with writing UI Tests, check out the following introductions:\n\n\n\n\nWWDC 2015 Introduction to UI Tests\n\n\nA first look into UI Tests\n\n\nUI Testing in Xcode 7\n\n\nHSTestingBackchannel : \u2018Cheat\u2019 by communicating directly with your app\n\n\nAutomating App Store screenshots using fastlane snapshot and frameit\n\n\n\n\nTo jump-start your UI tests, you can use the UI Test recorder, which you can start by clicking the red record button on the bottom of the window. By interacting with your app through the simulator while using it, Xcode will generate UI Test code for you. To learn more, check out this \nthis blog post\n!\n\n\nSetting Up \nsnapshot\n\n\n\n\nCreate a new UI Test target in your Xcode project (See the top part of \nthis article\n)\n\n\nRun \nfastlane snapshot init\n in your project folder\n\n\nAdd the \n./SnapshotHelper.swift\n file to your UI Test target (You can move the file anywhere you want)\n\n\n(Objective C only) Add the bridging header to your test class.\n\n\n#import \"MYUITests-Swift.h\"\n\n\nThe bridging header is named after your test target with -Swift.h appended.\n\n\n\n\n\n\nIn your UI Test class, click the \nRecord\n button on the bottom left and record your interaction\n\n\nTo take a screenshot, call the following between interactions\n\n\nSwift: \nsnapshot(\"01LoginScreen\")\n\n\nObjective C: \n[Snapshot snapshot:@\"01LoginScreen\" waitForLoadingIndicator:YES];\n\n\n\n\n\n\nAdd the following code to your \nsetUp()\n method:\n\n\n\n\nThis will generate a \nSnapfile\n, looking similar to\n\n\n# A list of devices you want to take the screenshots from\n# devices([\n#   \niPhone 6\n,\n#   \niPhone 6 Plus\n,\n#   \niPhone 5\n,\n#   \niPhone 4s\n,\n#   \niPad Retina\n,\n#   \niPad Pro\n\n# ])\n\nlanguages([\n  \nen-US\n,\n  \nde-DE\n\n])\n\n# The name of the scheme which contains the UI Tests\n# scheme \nSchemeName\n\n\n# Where should the resulting screenshots be stored?\n# output_directory \n./screenshots\n\n\n# clear_previous_screenshots true # remove the '#' to clear all previously generated screenshots before creating new ones\n\n# Choose which project/workspace to use\n# project \n./Project.xcodeproj\n\n# workspace \n./Project.xcworkspace\n\n\n# For more information about all available options run\n# fastlane action snapshot\n\n\n\n\nYou can adapt this file to fit your project. Every time you run \nfastlane snapshot\n the file will be loaded automatically.\n\n\nSwift\n\n\nlet app = XCUIApplication()\nsetupSnapshot(app)\napp.launch()\n\n\n\n\nObjective C\n\n\nXCUIApplication *app = [[XCUIApplication alloc] init];\n[Snapshot setupSnapshot:app];\n[app launch];\n\n\n\n\nIf you have \nfastlane\n installed, it's easy to give \nsnapshot\n a try. First clone the \nfastlane\n repo, head over to the \nsnapshot\n example project, and then run \nfastlane snapshot\n\n\ngit clone https://github.com/fastlane/fastlane  # Clone the fastlane repo\ncd fastlane/snapshot/example                    # Navigate to the example project\nfastlane snapshot                               # Generate screenshots for the sample app\n\n\n\n\n\n\nUpload Screenshots to the App Store\n\n\nAfter generating your screenshots using \nfastlane snapshot\n, you usually want to upload them to iTunes Connect.\n\n\nIf you followed the setup guide, you already ran \nfastlane init\n before, so you should have your existing screenshots and metadata inside the \nfastlane/screenshots\n and \nfastlane/metadata\n directory. Running \nfastlane snapshot\n will store the screenshots in the \nfastlane/screenshots\n directory by default. \n\n\nTo upload the screenshots stored in \nfastlane/screenshots\n, just run\n\n\nfastlane deliver\n\n\n\n\nThis will also show you a metadata summary, before actually uploading the screenshots, as this will overwrite the metadata and screenshots you already have on iTunes Connect. \n\n\nUse in Fastfile\n\n\nTo put all of this together so that anyone on your team could trigger generating and uploading new screenshots, you can define a \nfastlane\n lane called \nscreenshots\n. It would be responsible for:\n\n\n\n\nRunning your app through \nsnapshot\n to automatically capture your screenshots\n\n\nHaving \ndeliver\n send your final screenshots to iTunes Connect for use in the App Store\n\n\n\n\nAdd the following code to your \nfastlane/Fastfile\n:\n\n\nlane :screenshots do\n  snapshot\n  deliver\nend\n\n\n\n\nTo get a list of all available options for each of the steps, run\n\n\nfastlane action snapshot\nfastlane action deliver\n\n\n\n\nPut Your Screenshots Into Device Frames\n\n\nframeit\n helps you beautify your screenshots with devices frames and text by running one simple command. It provides support for:\n\n\n\n\nMultiple device types\n\n\nPortrait and landscape orientations\n\n\nBlack and silver devices\n\n\nSetting a background color and decorating the image with text\n\n\n\n\n\n  \n\n\n\n\nUsage\n\n\nAutomatically add device frames around all screenshots in the current directory and its subdirectories, just run\n\n\nfastlane frameit\n\n\n\n\nThis will only add a device frame around the screenshots, not the background and title. Those images can be used for your website, email newsletter and similar.\n\n\nIf you want to implement the custom titles and background, you'll have to setup a \nFramefile.json\n, more information can be found \nhere\n.\n\n\nIf you want to upload the screenshots to the App Store, you \nhave\n to provide a \nFramefile.json\n, with titles and background, otherwise the resolution of the framed screenshots doesn't match the requirements of iTunes Connect.\n\n\nDependencies\n\n\n\n\nInstalling ImageMagick\n\n\nframeit\n depends on a tool called \nimagemagick\n to do image manipulation. The easiest way to install it is through \nhomebrew\n:\n\n\nbrew install libpng jpeg imagemagick\n\n\n\n\n\n\n\n\nTroubleshooting ImageMagick\n\n\nIf you have installed \nimagemagick\n but are seeing error messages like:\n\n\nmogrify: no decode delegate for this image format `PNG'\n\n\n\n\nYou may need to reinstall and build from source. Run:\n\n\nbrew uninstall imagemagick; brew install libpng jpeg; brew install imagemagick --build-from-source\n\n\n\n\n\n\n\n\nSetting Up Device Frames\n\n\nfastlane\n uses device frames provided by Apple which need to be downloaded and installed separately for legal reasons. Running \nfastlane frameit setup\n can walk you through the process.\n\n\nfastlane frameit setup\n\n\n\n\n\n\nTo add the framing to your deployment process, use the following code in your \nFastfile\n:\n\n\nlane :screenshots do\n  snapshot\n  frameit(white: true)\n  deliver\nend", 
            "title": "Screenshots"
        }, 
        {
            "location": "/getting-started/ios/screenshots/#fastlane-screenshots-for-ios-and-tvos", 
            "text": "Your App Store screenshots are probably the most important thing when it comes to convincing potential users to download or purchase your app. Unfortunately, many apps don't do screenshots well. This is often because taking screenshots of your app and then preparing them for display is time consuming, and it's hard to get everything right and consistent! For example:   Are the screenshots in the App Store inconsistent with your latest app design?  Is your app localized into many languages that require different screenshots for each?  Have you made sure that no loading indicators are showing?  Is the same content displayed for each of your size variations?   fastlane  tools can automate this process making it fast, and consistent while giving you beautiful results!", 
            "title": "fastlane screenshots for iOS and tvOS"
        }, 
        {
            "location": "/getting-started/ios/screenshots/#alternatives", 
            "text": "For the full story about the many ways that developers can capture and beautify screenshots check out  this article .", 
            "title": "Alternatives"
        }, 
        {
            "location": "/getting-started/ios/screenshots/#manually-capturing-screenshots", 
            "text": "Manually taking screenshots takes too much time, which also decreases the quality of the screenshots. Since it is not automated, the screenshots will show slightly different content on the various devices and languages. Many companies choose to create screenshots in one language and use them for all languages. While this might seem okay to us developers, there are many potential users out there that cannot read the text on your app screenshots if they are not localised. Have you ever looked at a screenshots with content in a language you don't know? It won't convince you to download the app.  However, the biggest disadvantage of this method is what happens when you need to repeat the process. If you notice a spelling mistake in the screenshots, if you release an update with a new design, or if you just want to show more up to date content, you'll have to create new screenshots for all languages and devices... manually.  The positive side of this approach is that your screenshots will all be crisp and correctly sized, with readable text.", 
            "title": "Manually Capturing Screenshots"
        }, 
        {
            "location": "/getting-started/ios/screenshots/#scaled-screenshots-via-itunes-connect", 
            "text": "With the  iTunes Connect screenshot update  from August 2016, you can now use one set of screenshots for all available devices and screenshots. iTunes Connect will automatically scale the images for you, so that each device renders the same image.  While this is convenient, this approach has the same problems as the device frame approach: The screenshots don't actually show how the app looks on the user's device. It's a valid way to start though, since you can gradually overwrite screenshots for specific languages and devices.", 
            "title": "Scaled Screenshots via iTunes Connect"
        }, 
        {
            "location": "/getting-started/ios/screenshots/#capture-screenshots-automatically", 
            "text": "snapshot  works with  fastlane  to automate the process of capturing screenshots of your app. It allows you to:   Capture hundreds of screenshots in multiple languages on all simulators  Do something else while the computer takes the screenshots for you  Configure it once, and store the configuration so anyone on the team can run it  Generate a beautiful web page showing all screenshots on all devices. This is perfect to send to Q A, marketing, or translators for verification  Avoid having loading indicators in your App Store screenshots by intelligently waiting for network requests to be finished  Get a summary of how your app looks like across all supported devices and languages   After  snapshot  successfully captures all the screenshots, it will show you a beautiful HTML page to summarize all the screens that were captured:", 
            "title": "Capture Screenshots Automatically"
        }, 
        {
            "location": "/getting-started/ios/screenshots/#getting-started-using-ui-tests", 
            "text": "snapshot  uses the capabilities of Apple's UI Tests to drive interactions with your app. To get familiar with writing UI Tests, check out the following introductions:   WWDC 2015 Introduction to UI Tests  A first look into UI Tests  UI Testing in Xcode 7  HSTestingBackchannel : \u2018Cheat\u2019 by communicating directly with your app  Automating App Store screenshots using fastlane snapshot and frameit   To jump-start your UI tests, you can use the UI Test recorder, which you can start by clicking the red record button on the bottom of the window. By interacting with your app through the simulator while using it, Xcode will generate UI Test code for you. To learn more, check out this  this blog post !", 
            "title": "Getting Started Using UI Tests"
        }, 
        {
            "location": "/getting-started/ios/screenshots/#setting-up-snapshot", 
            "text": "Create a new UI Test target in your Xcode project (See the top part of  this article )  Run  fastlane snapshot init  in your project folder  Add the  ./SnapshotHelper.swift  file to your UI Test target (You can move the file anywhere you want)  (Objective C only) Add the bridging header to your test class.  #import \"MYUITests-Swift.h\"  The bridging header is named after your test target with -Swift.h appended.    In your UI Test class, click the  Record  button on the bottom left and record your interaction  To take a screenshot, call the following between interactions  Swift:  snapshot(\"01LoginScreen\")  Objective C:  [Snapshot snapshot:@\"01LoginScreen\" waitForLoadingIndicator:YES];    Add the following code to your  setUp()  method:   This will generate a  Snapfile , looking similar to  # A list of devices you want to take the screenshots from\n# devices([\n#    iPhone 6 ,\n#    iPhone 6 Plus ,\n#    iPhone 5 ,\n#    iPhone 4s ,\n#    iPad Retina ,\n#    iPad Pro \n# ])\n\nlanguages([\n   en-US ,\n   de-DE \n])\n\n# The name of the scheme which contains the UI Tests\n# scheme  SchemeName \n\n# Where should the resulting screenshots be stored?\n# output_directory  ./screenshots \n\n# clear_previous_screenshots true # remove the '#' to clear all previously generated screenshots before creating new ones\n\n# Choose which project/workspace to use\n# project  ./Project.xcodeproj \n# workspace  ./Project.xcworkspace \n\n# For more information about all available options run\n# fastlane action snapshot  You can adapt this file to fit your project. Every time you run  fastlane snapshot  the file will be loaded automatically.  Swift  let app = XCUIApplication()\nsetupSnapshot(app)\napp.launch()  Objective C  XCUIApplication *app = [[XCUIApplication alloc] init];\n[Snapshot setupSnapshot:app];\n[app launch];  If you have  fastlane  installed, it's easy to give  snapshot  a try. First clone the  fastlane  repo, head over to the  snapshot  example project, and then run  fastlane snapshot  git clone https://github.com/fastlane/fastlane  # Clone the fastlane repo\ncd fastlane/snapshot/example                    # Navigate to the example project\nfastlane snapshot                               # Generate screenshots for the sample app", 
            "title": "Setting Up snapshot"
        }, 
        {
            "location": "/getting-started/ios/screenshots/#upload-screenshots-to-the-app-store", 
            "text": "After generating your screenshots using  fastlane snapshot , you usually want to upload them to iTunes Connect.  If you followed the setup guide, you already ran  fastlane init  before, so you should have your existing screenshots and metadata inside the  fastlane/screenshots  and  fastlane/metadata  directory. Running  fastlane snapshot  will store the screenshots in the  fastlane/screenshots  directory by default.   To upload the screenshots stored in  fastlane/screenshots , just run  fastlane deliver  This will also show you a metadata summary, before actually uploading the screenshots, as this will overwrite the metadata and screenshots you already have on iTunes Connect.", 
            "title": "Upload Screenshots to the App Store"
        }, 
        {
            "location": "/getting-started/ios/screenshots/#use-in-fastfile", 
            "text": "To put all of this together so that anyone on your team could trigger generating and uploading new screenshots, you can define a  fastlane  lane called  screenshots . It would be responsible for:   Running your app through  snapshot  to automatically capture your screenshots  Having  deliver  send your final screenshots to iTunes Connect for use in the App Store   Add the following code to your  fastlane/Fastfile :  lane :screenshots do\n  snapshot\n  deliver\nend  To get a list of all available options for each of the steps, run  fastlane action snapshot\nfastlane action deliver", 
            "title": "Use in Fastfile"
        }, 
        {
            "location": "/getting-started/ios/screenshots/#put-your-screenshots-into-device-frames", 
            "text": "frameit  helps you beautify your screenshots with devices frames and text by running one simple command. It provides support for:   Multiple device types  Portrait and landscape orientations  Black and silver devices  Setting a background color and decorating the image with text", 
            "title": "Put Your Screenshots Into Device Frames"
        }, 
        {
            "location": "/getting-started/ios/screenshots/#usage", 
            "text": "Automatically add device frames around all screenshots in the current directory and its subdirectories, just run  fastlane frameit  This will only add a device frame around the screenshots, not the background and title. Those images can be used for your website, email newsletter and similar.  If you want to implement the custom titles and background, you'll have to setup a  Framefile.json , more information can be found  here .  If you want to upload the screenshots to the App Store, you  have  to provide a  Framefile.json , with titles and background, otherwise the resolution of the framed screenshots doesn't match the requirements of iTunes Connect.", 
            "title": "Usage"
        }, 
        {
            "location": "/getting-started/ios/screenshots/#dependencies", 
            "text": "Installing ImageMagick  frameit  depends on a tool called  imagemagick  to do image manipulation. The easiest way to install it is through  homebrew :  brew install libpng jpeg imagemagick    Troubleshooting ImageMagick  If you have installed  imagemagick  but are seeing error messages like:  mogrify: no decode delegate for this image format `PNG'  You may need to reinstall and build from source. Run:  brew uninstall imagemagick; brew install libpng jpeg; brew install imagemagick --build-from-source    Setting Up Device Frames  fastlane  uses device frames provided by Apple which need to be downloaded and installed separately for legal reasons. Running  fastlane frameit setup  can walk you through the process.  fastlane frameit setup   To add the framing to your deployment process, use the following code in your  Fastfile :  lane :screenshots do\n  snapshot\n  frameit(white: true)\n  deliver\nend", 
            "title": "Dependencies"
        }, 
        {
            "location": "/getting-started/ios/beta-deployment/", 
            "text": "iOS Beta deployment using \nfastlane\n\n\nBuilding your app\n\n\nfastlane\n takes care of building your app using a feature called \ngym\n, just add the following to your \nFastfile\n:\n\n\nlane :beta do\n  gym(scheme: \nMyApp\n)\nend\n\n\n\n\nAdditionally you can specify more options for building your app, for example\n\n\nlane :beta do\n  gym(scheme: \nMyApp\n,\n      workspace: \nExample.xcworkspace\n,\n      include_bitcode: true)\nend\n\n\n\n\nTry running the lane using\n\n\nfastlane beta\n\n\n\n\nIf everything works, you should have a \n[ProductName].ipa\n file in the current directory. To get a list of all available parameters for \ngym\n, run \nfastlane action gym\n.\n\n\nCodesigning\n\n\nChances are that something went wrong because of code signing at the previous step. We prepared our own \nCode Signing Guide\n that helps you setting up the right code signing approach for your project.\n\n\nUploading your app\n\n\nAfter building your app, it's ready to be uploaded to a beta testing service of your choice. The beauty of \nfastlane\n is that you can easily switch beta provider, or even upload to multiple at once, without any extra work.\n\n\nAll you have to do is to put the name of the beta testing provider of your choice after building the app using \ngym\n:\n\n\nlane :beta do\n  match(type: \nappstore\n)       # see code signing guide for more information\n  gym(scheme: \nMyApp\n)          # build your app\n  testflight                    # upload your app to TestFlight\n  slack(message: \nSuccessfully distributed a new beta build\n)\nend\n\n\n\n\nfastlane\n automatically passes on information about the generated \n.ipa\n file from \ngym\n to the beta testing provider of your choice.\n\n\nSupported beta testing services\n\n\n\n\nTestFlight\n\n\nYou can easily upload new builds to TestFlight (which is part of iTunes Connect) using \nfastlane\n. To do so, just use the built-in \ntestflight\n action after building your app\n\n\nlane :beta do\n  # ...\n  gym\n  testflight\nend\n\n\n\n\nSome example use cases\n\n\nlane :beta do\n  # ...\n  gym\n\n  # Variant 1: Provide a changelog to your build\n  testflight(changelog: \nAdd rocket emoji\n)\n\n  # Variant 2: Skip the \nWaiting for processing\n of the binary\n  #   While this will speed up your build, it will not distribute\n  #   the binary to your tests, nor set a changelog\n  testflight(skip_waiting_for_build_processing: true)\nend\n\n\n\n\nIf you used \nfastlane init\n to setup \nfastlane\n, your Apple ID is stored in the \nfastlane/Appfile\n. You can also overwrite the username, using \ntestflight(username: \"bot@fastlane.tools\")\n.\n\n\nTo get a list of all available options, run\n\n\nfastlane action testflight\n\n\n\n\nWith \nfastlane\n, you can also automatically manage your beta testers, check out TODO for more information.\n\n\n\n\n\n\n\n\nCrashlytics\n\n\nlane :beta do\n  # ...\n  gym\n  crashlytics(api_token: \n[insert_key_here]\n,\n              build_secret: \n[insert_key_here]\n)\nend\n\n\n\n\nTo get your API token, open the \norganizations settings page\n and click on the API key and build secret links. \n\n\nTo get a list of all available options, run\n\n\nfastlane action crashlytics\n\n\n\n\nTODO: Also mention the other onboarding method\n\n\n\n\n\n\n\n\nHockeyApp\n\n\nlane :beta do\n  # ...\n  gym\n  hockey(api_token: \n[insert_key_here]\n)\nend\n\n\n\n\nTo get your API token, open \nAPI Tokens in Account Settings\n. From there, you can find your existing API token, or create a new one. \n\n\nTo get a list of all available options see the \nhockey\n action docs\n, or run \n\n\nfastlane action hockey\n\n\n\n\n\n\n\n\nTestFairy\n\n\nlane :beta do\n  # ...\n  gym\n\n  testfairy(api_key: \n[insert_key_here]\n)\n\n  # Variant 1: Provide a changelog\n  testfairy(api_key: \n[insert_key_here]\n, \n            comment: \nAdd rocket emoji\n)\n\n  # Variant 2: Specify tester groups\n  testfairy(api_key: \n[insert_key_here]\n, testers_groups: [\ngroup1\n])\nend\n\n\n\n\nTo get a list of all available options, run\n\n\nfastlane action testfairy\n\n\n\n\nMore information about the service on \nTestFairy.com\n.\n\n\n\n\nRelease Notes\n\n\n\n\nAutomatically based on git commits\n\n\nYour changelog changes, so it doesn't make a lot of sense to store a static release note in the \nFastfile\n.\n\n\nlane :beta do\n  match\n  gym\n\n  changelog_from_git_commits # this will generate the changelog based on your last commits\n  testflight\nend\n\n\n\n\nGet a list of all available options using \nfastlane action changelog_from_git_commits\n, here are some examples\n\n\nchangelog_from_git_commits(\n  between: ['7b092b3', 'HEAD'], # Optional, lets you specify a revision/tag range between which to collect commit info\n  include_merges: true # Optional, lets you filter out merge commits\n)\n\n\n\n\n\n\n\n\n\n\nPrompt for changelog\n\n\nYou can automatically be asked for the changelog in your terminal using the \nprompt\n action:\n\n\nlane :beta do\n  # Variant 1: Ask for a one line input\n  changelog = prompt(\nChangelog: \n)\n\n  # Variant 2: Ask for a multi-line input\n  #   The user confirms their input by typing `END` and Enter\n  changelog = prompt(\n    text: \nChangelog: \n,\n    multi_line_end_keyword: \nEND\n\n  )\n\n  match\n  gym\n\n  testflight(changelog: changelog)\nend\n\n\n\n\n\n\n\n\n\n\nFetching the changelog from the file system or remote server\n\n\nYou can fetch values from anywhere in your \nFastfile\n, including the file system and remote server\n\n\nlane :beta do\n  # Variant 1: Read from file system\n  #   note the `..`, since fastlane runs in the _fastlane_ directory\n  changelog = File.read(\n../Changelog.txt\n)\n\n  # Variant 2: Fetch data from a remote web server\n  changelog = download(url: \nhttps://lookatmycms.com/changelog.txt\n)\n\n  match\n  gym\n\n  testflight(changelog: changelog)\nend\n\n\n\n\n\n\n\n\nBest Practices\n\n\n\n\nManage devices and testers using \nfastlane\n\n\n\n\nTestFlight\n\n\nIf you're using TestFlight you don't need to worry about UDIDs of your devices. Instead you just maintain a list of testers based on their Apple ID email address.\n\n\nfastlane\n supports automatically registering devices using different approaches\n\n\nboarding\n\n\nboarding\n allows you set up a registration page for your beta testers, so they can enter their email address and start testing your application.\n\n\n\n\nCheck out the \nboarding GitHub repo\n for more information.\n\n\npilot\n\n\npilot\n is automatically installed with \nfastlane\n, you can use it to register individual testers to TestFlight\n\n\n# Register a new external tester\nfastlane pilot add email@invite.com\n\n# Register a new external tester and add them to your app\nfastlane pilot add email@invite.com -a com.app.name\n\n\n\n\n\n\n\n\n\n\nThird party beta testing services\n\n\nIf you're using a third party beta testing service, you'll need to manage your registered devices and their UDIDs. \nfastlane\n already supports device registrations and updating provisioning profiles out of the box. \n\n\nlane :beta do\n  # Before calling match, we make sure all our devices are registered on the Apple Developer Portal\n  register_devices(devices_file: \ndevices.txt\n)\n\n  # After registering the new devices, we'll make sure to update the provisioning profile if necessary\n  # Note how we make sure to pass \nadhoc\n to get and use a provisioning profile for Ad Hoc distribution\n  match(force_for_new_devices: true, type: \nadhoc\n)\n  gym\n  # ...\nend\n\n\n\n\nThe \ndevices.txt\n should look like this:\n\n\nDevice ID Device Name\nA123456789012345678901234567890123456789  DeviceName1\nB123456789012345678901234567890123456789  DeviceName2\n\n\n\n\n\n\n\n\n\n\nIncrementing the build number\n\n\nDepending on the beta testing service you use, you'll have to increment the build number each time you upload a new build. This is a requirement for TestFlight for example.\n\n\nTo do so, there are some built-in fastlane actions available, here are some examples\n\n\nlane :beta do\n  # Ensure that there that your git status is not dirty\n  ensure_git_status_clean\n\n  # Increment the build number (not the version number)\n  # Providing the xcodeproj is optional\n  increment_build_number(xcodeproj: \nExample.xcodeproj\n)\n\n  # Commit the version bump\n  commit_version_bump(xcodeproj: \nExample.xcodeproj\n)\n\n  # Add a git tag for this build. This will automatically\n  # use an appropriate git tag name\n  add_git_tag\n\n  # Push the new commit and tag back to your git remote\n  push_to_git_remote\nend\n\n\n\n\nFor all the steps above, there are more parameters available, run the following to get a full list:\n\n\nfastlane action [action_name]", 
            "title": "Beta Deployment"
        }, 
        {
            "location": "/getting-started/ios/beta-deployment/#ios-beta-deployment-using-fastlane", 
            "text": "", 
            "title": "iOS Beta deployment using fastlane"
        }, 
        {
            "location": "/getting-started/ios/beta-deployment/#building-your-app", 
            "text": "fastlane  takes care of building your app using a feature called  gym , just add the following to your  Fastfile :  lane :beta do\n  gym(scheme:  MyApp )\nend  Additionally you can specify more options for building your app, for example  lane :beta do\n  gym(scheme:  MyApp ,\n      workspace:  Example.xcworkspace ,\n      include_bitcode: true)\nend  Try running the lane using  fastlane beta  If everything works, you should have a  [ProductName].ipa  file in the current directory. To get a list of all available parameters for  gym , run  fastlane action gym .", 
            "title": "Building your app"
        }, 
        {
            "location": "/getting-started/ios/beta-deployment/#codesigning", 
            "text": "Chances are that something went wrong because of code signing at the previous step. We prepared our own  Code Signing Guide  that helps you setting up the right code signing approach for your project.", 
            "title": "Codesigning"
        }, 
        {
            "location": "/getting-started/ios/beta-deployment/#uploading-your-app", 
            "text": "After building your app, it's ready to be uploaded to a beta testing service of your choice. The beauty of  fastlane  is that you can easily switch beta provider, or even upload to multiple at once, without any extra work.  All you have to do is to put the name of the beta testing provider of your choice after building the app using  gym :  lane :beta do\n  match(type:  appstore )       # see code signing guide for more information\n  gym(scheme:  MyApp )          # build your app\n  testflight                    # upload your app to TestFlight\n  slack(message:  Successfully distributed a new beta build )\nend  fastlane  automatically passes on information about the generated  .ipa  file from  gym  to the beta testing provider of your choice.", 
            "title": "Uploading your app"
        }, 
        {
            "location": "/getting-started/ios/beta-deployment/#supported-beta-testing-services", 
            "text": "TestFlight  You can easily upload new builds to TestFlight (which is part of iTunes Connect) using  fastlane . To do so, just use the built-in  testflight  action after building your app  lane :beta do\n  # ...\n  gym\n  testflight\nend  Some example use cases  lane :beta do\n  # ...\n  gym\n\n  # Variant 1: Provide a changelog to your build\n  testflight(changelog:  Add rocket emoji )\n\n  # Variant 2: Skip the  Waiting for processing  of the binary\n  #   While this will speed up your build, it will not distribute\n  #   the binary to your tests, nor set a changelog\n  testflight(skip_waiting_for_build_processing: true)\nend  If you used  fastlane init  to setup  fastlane , your Apple ID is stored in the  fastlane/Appfile . You can also overwrite the username, using  testflight(username: \"bot@fastlane.tools\") .  To get a list of all available options, run  fastlane action testflight  With  fastlane , you can also automatically manage your beta testers, check out TODO for more information.     Crashlytics  lane :beta do\n  # ...\n  gym\n  crashlytics(api_token:  [insert_key_here] ,\n              build_secret:  [insert_key_here] )\nend  To get your API token, open the  organizations settings page  and click on the API key and build secret links.   To get a list of all available options, run  fastlane action crashlytics  TODO: Also mention the other onboarding method     HockeyApp  lane :beta do\n  # ...\n  gym\n  hockey(api_token:  [insert_key_here] )\nend  To get your API token, open  API Tokens in Account Settings . From there, you can find your existing API token, or create a new one.   To get a list of all available options see the  hockey  action docs , or run   fastlane action hockey    TestFairy  lane :beta do\n  # ...\n  gym\n\n  testfairy(api_key:  [insert_key_here] )\n\n  # Variant 1: Provide a changelog\n  testfairy(api_key:  [insert_key_here] , \n            comment:  Add rocket emoji )\n\n  # Variant 2: Specify tester groups\n  testfairy(api_key:  [insert_key_here] , testers_groups: [ group1 ])\nend  To get a list of all available options, run  fastlane action testfairy", 
            "title": "Supported beta testing services"
        }, 
        {
            "location": "/getting-started/ios/beta-deployment/#more-information-about-the-service-on-testfairycom", 
            "text": "", 
            "title": "More information about the service on TestFairy.com."
        }, 
        {
            "location": "/getting-started/ios/beta-deployment/#release-notes", 
            "text": "Automatically based on git commits  Your changelog changes, so it doesn't make a lot of sense to store a static release note in the  Fastfile .  lane :beta do\n  match\n  gym\n\n  changelog_from_git_commits # this will generate the changelog based on your last commits\n  testflight\nend  Get a list of all available options using  fastlane action changelog_from_git_commits , here are some examples  changelog_from_git_commits(\n  between: ['7b092b3', 'HEAD'], # Optional, lets you specify a revision/tag range between which to collect commit info\n  include_merges: true # Optional, lets you filter out merge commits\n)     Prompt for changelog  You can automatically be asked for the changelog in your terminal using the  prompt  action:  lane :beta do\n  # Variant 1: Ask for a one line input\n  changelog = prompt( Changelog:  )\n\n  # Variant 2: Ask for a multi-line input\n  #   The user confirms their input by typing `END` and Enter\n  changelog = prompt(\n    text:  Changelog:  ,\n    multi_line_end_keyword:  END \n  )\n\n  match\n  gym\n\n  testflight(changelog: changelog)\nend     Fetching the changelog from the file system or remote server  You can fetch values from anywhere in your  Fastfile , including the file system and remote server  lane :beta do\n  # Variant 1: Read from file system\n  #   note the `..`, since fastlane runs in the _fastlane_ directory\n  changelog = File.read( ../Changelog.txt )\n\n  # Variant 2: Fetch data from a remote web server\n  changelog = download(url:  https://lookatmycms.com/changelog.txt )\n\n  match\n  gym\n\n  testflight(changelog: changelog)\nend", 
            "title": "Release Notes"
        }, 
        {
            "location": "/getting-started/ios/beta-deployment/#best-practices", 
            "text": "Manage devices and testers using  fastlane   TestFlight  If you're using TestFlight you don't need to worry about UDIDs of your devices. Instead you just maintain a list of testers based on their Apple ID email address.  fastlane  supports automatically registering devices using different approaches", 
            "title": "Best Practices"
        }, 
        {
            "location": "/getting-started/ios/beta-deployment/#boarding", 
            "text": "boarding  allows you set up a registration page for your beta testers, so they can enter their email address and start testing your application.   Check out the  boarding GitHub repo  for more information.", 
            "title": "boarding"
        }, 
        {
            "location": "/getting-started/ios/beta-deployment/#pilot", 
            "text": "pilot  is automatically installed with  fastlane , you can use it to register individual testers to TestFlight  # Register a new external tester\nfastlane pilot add email@invite.com\n\n# Register a new external tester and add them to your app\nfastlane pilot add email@invite.com -a com.app.name     Third party beta testing services  If you're using a third party beta testing service, you'll need to manage your registered devices and their UDIDs.  fastlane  already supports device registrations and updating provisioning profiles out of the box.   lane :beta do\n  # Before calling match, we make sure all our devices are registered on the Apple Developer Portal\n  register_devices(devices_file:  devices.txt )\n\n  # After registering the new devices, we'll make sure to update the provisioning profile if necessary\n  # Note how we make sure to pass  adhoc  to get and use a provisioning profile for Ad Hoc distribution\n  match(force_for_new_devices: true, type:  adhoc )\n  gym\n  # ...\nend  The  devices.txt  should look like this:  Device ID Device Name\nA123456789012345678901234567890123456789  DeviceName1\nB123456789012345678901234567890123456789  DeviceName2     Incrementing the build number  Depending on the beta testing service you use, you'll have to increment the build number each time you upload a new build. This is a requirement for TestFlight for example.  To do so, there are some built-in fastlane actions available, here are some examples  lane :beta do\n  # Ensure that there that your git status is not dirty\n  ensure_git_status_clean\n\n  # Increment the build number (not the version number)\n  # Providing the xcodeproj is optional\n  increment_build_number(xcodeproj:  Example.xcodeproj )\n\n  # Commit the version bump\n  commit_version_bump(xcodeproj:  Example.xcodeproj )\n\n  # Add a git tag for this build. This will automatically\n  # use an appropriate git tag name\n  add_git_tag\n\n  # Push the new commit and tag back to your git remote\n  push_to_git_remote\nend  For all the steps above, there are more parameters available, run the following to get a full list:  fastlane action [action_name]", 
            "title": "pilot"
        }, 
        {
            "location": "/getting-started/ios/appstore-deployment/", 
            "text": "iOS App Store deployment using \nfastlane\n\n\nBuilding your app\n\n\nfastlane\n takes care of building your app using a feature called \ngym\n, just add the following to your \nFastfile\n:\n\n\nlane :appstore do\n  gym(scheme: \nMyApp\n)\nend\n\n\n\n\nAdditionally you can specify more options for building your app, for example\n\n\nlane :appstore do\n  gym(scheme: \nMyApp\n,\n      workspace: \nExample.xcworkspace\n,\n      include_bitcode: true)\nend\n\n\n\n\nTry running the lane using\n\n\nfastlane appstore\n\n\n\n\nIf everything works, you should have a \n[ProductName].ipa\n file in the current directory. To get a list of all available parameters for \ngym\n, run \nfastlane action gym\n.\n\n\nCodesigning\n\n\nChances are that something went wrong because of code signing at the previous step. We prepared our own \nCode Signing Guide\n that helps you setting up the right code signing approach for your project.\n\n\nSubmitting your app\n\n\nGenerating screenshots\n\n\nTo find out more about how to automatically generate screenshots for the App Store, check out the \nscreenshots guide\n.\n\n\nUpload the binary and app metadata\n\n\nAfter building your app, it's ready to be uploaded to the App Store. If you've already followed the \nbeta deployment guide\n, the following code might look similar already. \n\n\nlane :appstore do\n  snapshot                      # generate new screenshots for the App Store\n  match(type: \nappstore\n)       # see code signing guide for more information\n  gym(scheme: \nMyApp\n)          # build your app\n  appstore                      # upload your app to iTunes Connect\n  slack(message: \nSuccessfully uploaded a new App Store build\n)\nend\n\n\n\n\nfastlane\n automatically passes on information about the generated screenshots and the binary to the \nappstore\n action of your \nFastfile\n.\n\n\nFor a list of all options for each of the steps run \nfastlane action [action_name]\n.\n\n\nBest Practices\n\n\n\n\nPush Notifications\n\n\nTo make sure your latest push notification certificate is still valid during your submission process, add the following at the beginning of your lane:\n\n\nlane :appstore do\n  pem\n  # ...\nend\n\n\n\n\npem\n will ensure your certificate is valid for at least another 2 weeks, and create a new one if it isn't.\n\n\nIf you don't have any push certificates already, \npem\n will create one for you and store locally in your project's directory. To get more information about the available options run \nfastlane action pem\n.", 
            "title": "App Store Deployment"
        }, 
        {
            "location": "/getting-started/ios/appstore-deployment/#ios-app-store-deployment-using-fastlane", 
            "text": "", 
            "title": "iOS App Store deployment using fastlane"
        }, 
        {
            "location": "/getting-started/ios/appstore-deployment/#building-your-app", 
            "text": "fastlane  takes care of building your app using a feature called  gym , just add the following to your  Fastfile :  lane :appstore do\n  gym(scheme:  MyApp )\nend  Additionally you can specify more options for building your app, for example  lane :appstore do\n  gym(scheme:  MyApp ,\n      workspace:  Example.xcworkspace ,\n      include_bitcode: true)\nend  Try running the lane using  fastlane appstore  If everything works, you should have a  [ProductName].ipa  file in the current directory. To get a list of all available parameters for  gym , run  fastlane action gym .", 
            "title": "Building your app"
        }, 
        {
            "location": "/getting-started/ios/appstore-deployment/#codesigning", 
            "text": "Chances are that something went wrong because of code signing at the previous step. We prepared our own  Code Signing Guide  that helps you setting up the right code signing approach for your project.", 
            "title": "Codesigning"
        }, 
        {
            "location": "/getting-started/ios/appstore-deployment/#submitting-your-app", 
            "text": "", 
            "title": "Submitting your app"
        }, 
        {
            "location": "/getting-started/ios/appstore-deployment/#generating-screenshots", 
            "text": "To find out more about how to automatically generate screenshots for the App Store, check out the  screenshots guide .", 
            "title": "Generating screenshots"
        }, 
        {
            "location": "/getting-started/ios/appstore-deployment/#upload-the-binary-and-app-metadata", 
            "text": "After building your app, it's ready to be uploaded to the App Store. If you've already followed the  beta deployment guide , the following code might look similar already.   lane :appstore do\n  snapshot                      # generate new screenshots for the App Store\n  match(type:  appstore )       # see code signing guide for more information\n  gym(scheme:  MyApp )          # build your app\n  appstore                      # upload your app to iTunes Connect\n  slack(message:  Successfully uploaded a new App Store build )\nend  fastlane  automatically passes on information about the generated screenshots and the binary to the  appstore  action of your  Fastfile .  For a list of all options for each of the steps run  fastlane action [action_name] .", 
            "title": "Upload the binary and app metadata"
        }, 
        {
            "location": "/getting-started/ios/appstore-deployment/#best-practices", 
            "text": "Push Notifications  To make sure your latest push notification certificate is still valid during your submission process, add the following at the beginning of your lane:  lane :appstore do\n  pem\n  # ...\nend  pem  will ensure your certificate is valid for at least another 2 weeks, and create a new one if it isn't.  If you don't have any push certificates already,  pem  will create one for you and store locally in your project's directory. To get more information about the available options run  fastlane action pem .", 
            "title": "Best Practices"
        }, 
        {
            "location": "/getting-started/android/setup/", 
            "text": "Getting started with \nfastlane\n for Android\n\n\nInstalling \nfastlane\n\n\nsudo gem install fastlane --verbose\n\n\n\n\nSetting up \nfastlane\n\n\nNavigate your terminal to your project's directory and run\n\n\nfastlane init\n\n\n\n\nYou'll be asked to confirm that you're ready to begin, and then for a few pieces of information. To get started quickly:\n\n\n\n\nProvide the package name for your application when asked (e.g. io.fabric.yourapp)\n\n\nPress enter when asked for the path to your json secret file\n\n\nAnswer 'n' when asked if you plan on uploading info to Google Play via fastlane (we can set this up later)\n\n\n\n\nThat's it! \nfastlane\n will automatically generate a configuration for you based on the information provided.\n\n\nYou can see the newly created \n./fastlane\n directory, with the following files:\n\n\n\n\nAppfile\n which defines configuration information that is global to your app\n\n\nFastfile\n which defines the \"lanes\" that drive the behavior of \nfastlane\n\n\n\n\n\n\nThe most interesting file is \nfastlane/Fastfile\n, which contains all the information that is needed to distribute your app.\n\n\nSetting up \nsupply\n\n\nsupply\n is a \nfastlane\n tool that uploads app metadata, screenshots and binaries to Google Play. You can also select tracks for builds and promote builds to production!\n\n\nSetting it up requires downloading a credentials file from your Google Developers Service Account.\n\n\nCollect your Google credentials\n\n\n\n\nOpen the \nGoogle Play Console\n\n\nSelect \nSettings\n tab, followed by the \nAPI access\n tab\n\n\nClick the \nCreate Service Account\n button and follow the \nGoogle Developers Console\n link in the dialog\n\n\nClick the \nCreate Service account\n button at the top of the developers console screen\n\n\nProvide a name for the service account\n\n\nClick \nSelect a role\n and choose \nProject \n Service Account Actor\n\n\nCheck the \nFurnish a new private key\n checkbox\n\n\nSelect \nJSON\n as the Key type\n\n\nClick \nCreate\n to close the dialog\n\n\nMake a note of the file name of the JSON file downloaded to your computer\n\n\nBack on the Google Play developer console, click \nDone\n to close the dialog\n\n\nClick on \nGrant Access\n for the newly added service account\n\n\nChoose \nRelease Manager\n from the \nRole\n dropdown\n\n\nClick \nAdd user\n to close the dialog\n\n\n\n\nConfigure \nsupply\n\n\nEdit your \nfastlane/Appfile\n and change the \njson_key_file\n line to have the path to your credentials file:\n\n\njson_key_file \n/path/to/your/downloaded/key.json\n\n\n\n\n\nFetch your app metadata\n\n\nIf your app has been created on the Google Play developer console, you're ready to start using \nsupply\n to manage it! Run:\n\n\nfastlane supply init\n\n\n\n\nand all of your current Google Play store metadata will be downloaded to \nfastlane/metadata/android\n.\n\n\n\n\nDue to limitations of the Google Play API, \nsupply\n can't download existing screenshots or videos.\n\n\nWhat's next?\n\n\nfastlane\n is ready to generate screenshots and automatically distribute new builds! To learn more, check out:\n\n\n\n\nAutomatically generate screenshots\n\n\nDeploy to Google Play for production release\n\n\n\n\nUse a Gemfile\n\n\nIt is recommended that you use a \nGemfile\n to define your dependency on \nfastlane\n. This will clearly define the used \nfastlane\n version, and its dependencies, and will also speed up using \nfastlane\n.\n\n\n\n\nInstall \nbundler\n using \nsudo gem install bundler\n\n\nCreate a \n./Gemfile\n in the root directory of your project with the content\n\n\n\n\nsource \nhttps://rubygems.org\n\n\ngem \nfastlane\n\n\n\n\n\n\n\nRun \n[sudo] bundle update\n and add both the \n./Gemfile\n and the \n./Gemfile.lock\n to version control\n\n\nEvery time you run \nfastlane\n, use \nbundle exec fastlane [lane]\n\n\nOn your CI, add \n[sudo] bundle install\n as your first build step\n\n\nTo update \nfastlane\n, just run \n[sudo] bundle update", 
            "title": "Setup"
        }, 
        {
            "location": "/getting-started/android/setup/#getting-started-with-fastlane-for-android", 
            "text": "", 
            "title": "Getting started with fastlane for Android"
        }, 
        {
            "location": "/getting-started/android/setup/#installing-fastlane", 
            "text": "sudo gem install fastlane --verbose", 
            "title": "Installing fastlane"
        }, 
        {
            "location": "/getting-started/android/setup/#setting-up-fastlane", 
            "text": "Navigate your terminal to your project's directory and run  fastlane init  You'll be asked to confirm that you're ready to begin, and then for a few pieces of information. To get started quickly:   Provide the package name for your application when asked (e.g. io.fabric.yourapp)  Press enter when asked for the path to your json secret file  Answer 'n' when asked if you plan on uploading info to Google Play via fastlane (we can set this up later)   That's it!  fastlane  will automatically generate a configuration for you based on the information provided.  You can see the newly created  ./fastlane  directory, with the following files:   Appfile  which defines configuration information that is global to your app  Fastfile  which defines the \"lanes\" that drive the behavior of  fastlane    The most interesting file is  fastlane/Fastfile , which contains all the information that is needed to distribute your app.", 
            "title": "Setting up fastlane"
        }, 
        {
            "location": "/getting-started/android/setup/#setting-up-supply", 
            "text": "supply  is a  fastlane  tool that uploads app metadata, screenshots and binaries to Google Play. You can also select tracks for builds and promote builds to production!  Setting it up requires downloading a credentials file from your Google Developers Service Account.", 
            "title": "Setting up supply"
        }, 
        {
            "location": "/getting-started/android/setup/#collect-your-google-credentials", 
            "text": "Open the  Google Play Console  Select  Settings  tab, followed by the  API access  tab  Click the  Create Service Account  button and follow the  Google Developers Console  link in the dialog  Click the  Create Service account  button at the top of the developers console screen  Provide a name for the service account  Click  Select a role  and choose  Project   Service Account Actor  Check the  Furnish a new private key  checkbox  Select  JSON  as the Key type  Click  Create  to close the dialog  Make a note of the file name of the JSON file downloaded to your computer  Back on the Google Play developer console, click  Done  to close the dialog  Click on  Grant Access  for the newly added service account  Choose  Release Manager  from the  Role  dropdown  Click  Add user  to close the dialog", 
            "title": "Collect your Google credentials"
        }, 
        {
            "location": "/getting-started/android/setup/#configure-supply", 
            "text": "Edit your  fastlane/Appfile  and change the  json_key_file  line to have the path to your credentials file:  json_key_file  /path/to/your/downloaded/key.json", 
            "title": "Configure supply"
        }, 
        {
            "location": "/getting-started/android/setup/#fetch-your-app-metadata", 
            "text": "If your app has been created on the Google Play developer console, you're ready to start using  supply  to manage it! Run:  fastlane supply init  and all of your current Google Play store metadata will be downloaded to  fastlane/metadata/android .   Due to limitations of the Google Play API,  supply  can't download existing screenshots or videos.", 
            "title": "Fetch your app metadata"
        }, 
        {
            "location": "/getting-started/android/setup/#whats-next", 
            "text": "fastlane  is ready to generate screenshots and automatically distribute new builds! To learn more, check out:   Automatically generate screenshots  Deploy to Google Play for production release", 
            "title": "What's next?"
        }, 
        {
            "location": "/getting-started/android/setup/#use-a-gemfile", 
            "text": "It is recommended that you use a  Gemfile  to define your dependency on  fastlane . This will clearly define the used  fastlane  version, and its dependencies, and will also speed up using  fastlane .   Install  bundler  using  sudo gem install bundler  Create a  ./Gemfile  in the root directory of your project with the content   source  https://rubygems.org \n\ngem  fastlane    Run  [sudo] bundle update  and add both the  ./Gemfile  and the  ./Gemfile.lock  to version control  Every time you run  fastlane , use  bundle exec fastlane [lane]  On your CI, add  [sudo] bundle install  as your first build step  To update  fastlane , just run  [sudo] bundle update", 
            "title": "Use a Gemfile"
        }, 
        {
            "location": "/getting-started/android/screenshots/", 
            "text": "fastlane screenshots for Android\n\n\nYour app screenshots are probably the most important thing when it comes to convincing potential users to download or purchase your app. Unfortunately, many apps don't do screenshots well. This is often because taking screenshots of your app and then preparing them for display is time consuming, and it's hard to get everything right and consistent! For example:\n\n\n\n\nAre the screenshots in Google Play inconsistent with your latest app design?\n\n\nIs your app localized into many languages that require different screenshots for each?\n\n\nIs the same content displayed for each of your size variations?\n\n\n\n\nfastlane\n tools can automate this process, making it fast and consistent while giving you beautiful results!\n\n\n\n\nCapture Screenshots Automatically\n\n\nscreengrab\n works with \nfastlane\n to automate the process of capturing screenshots of your app. It allows you to:\n\n\n\n\nCapture hundreds of screenshots in multiple languages on any simulator\n\n\nDo something else while the computer takes the screenshots for you\n\n\nConfigure it once, and store the configuration so anyone on the team can run it\n\n\nGet a summary of how your app looks like across all supported devices and languages\n\n\n\n\nAfter \nscreengrab\n completes, it will show you summary of the screenshots you captured:\n\n\n\n\nGetting Started Using Espresso\n\n\nscreengrab\n uses the capabilities of Android's built-in \nInstrumented tests\n combined with \nEspresso\n to drive interactions with your app. To get familiar with writing UI Tests with Espresso, check out \nTesting UI for a Single App\n.\n\n\nInstalling \nscreengrab\n\n\nInstall the gem:\n\n\nsudo gem install screengrab\n\n\n\n\nGradle dependency\n\n\nAdd the test dependency to your Gradle build:\n\n\nandroidTestCompile 'tools.fastlane:screengrab:x.x.x'\n\n\n\n\nThe latest version can be determined by visiting the \nscreengrab\n RubyGems page\n\n\nConfiguring your Manifest Permissions\n\n\nEnsure that the following permissions exist in your \nsrc/debug/AndroidManifest.xml\n\n\n!-- Allows unlocking your device and activating its screen so UI tests can succeed --\n\n\nuses-permission android:name=\nandroid.permission.DISABLE_KEYGUARD\n/\n\n\nuses-permission android:name=\nandroid.permission.WAKE_LOCK\n/\n\n\n\n!-- Allows for storing and retrieving screenshots --\n\n\nuses-permission android:name=\nandroid.permission.WRITE_EXTERNAL_STORAGE\n /\n\n\nuses-permission android:name=\nandroid.permission.READ_EXTERNAL_STORAGE\n /\n\n\n\n!-- Allows changing locales --\n\n\nuses-permission android:name=\nandroid.permission.CHANGE_CONFIGURATION\n /\n\n\n\n\n\nConfiguring your UI Tests for \nscreengrab\n\n\n\n\nAdd \n@ClassRule public static final LocaleTestRule localeTestRule = new LocaleTestRule();\n to your tests class to handle automatic switching of locales\n\n\nTo capture screenshots, add the following to your tests \nScreengrab.screenshot(\"name_of_screenshot_here\");\n on the appropriate screens\n\n\n\n\nGenerating Screenshots with Screengrab\n\n\n\n\nRun \n./gradlew assembleDebug assembleAndroidTest\n to generate debug and test APKs\n\n\nRun \nfastlane screengrab\n in your app project directory to generate screenshots\n\n\nYou will be prompted to provide any required parameters which are not in your \nScreengrabfile\n, or provided as command line arguments\n\n\n\n\n\n\nYour screenshots will be saved to \nfastlane/metadata/android\n in the directory where you ran \nfastlane screengrab\n\n\n\n\nImproved screenshot capture with UI Automator\n\n\nAs of \nscreengrab\n 0.5.0, you can specify different strategies to control the way \nscreengrab\n captures screenshots. The newer strategy delegates to \nUI Automator\n which fixes a number of problems compared to the original strategy:\n\n\n\n\nShadows/elevation are correctly captured for Material UI\n\n\nMulti-window situations are correctly captured (dialogs, etc.)\n\n\nWorks on Android N\n\n\n\n\nHowever, UI Automator requires a device with \nAPI level \n= 18\n, so it is not yet the default strategy. To enable it for all screenshots by default, make the following call before your tests run:\n\n\nScreengrab.setDefaultScreenshotStrategy(new UiAutomatorScreenshotStrategy());\n\n\n\n\nUpload Screenshots to Google Play\n\n\nAfter generating your screenshots using \nfastlane screengrab\n, you'll usually want to upload them to Google Play.\n\n\nTo upload the screenshots stored in \nfastlane/metadata/android\n, just run:\n\n\nfastlane supply\n\n\n\n\nUse in Fastfile\n\n\nTo put all of this together so that anyone on your team could trigger generating and uploading new screenshots, you can define a \nfastlane\n lane called \nscreenshots\n. It would be responsible for:\n\n\n\n\nRunning your app through \nscreengrab\n to automatically capture your screenshots\n\n\nHaving \nsupply\n send your screenshots to Google Play for use in the store\n\n\n\n\nAdd the following code to your \nfastlane/Fastfile\n:\n\n\nlane :screenshots do\n  screengrab\n  supply\nend\n\n\n\n\nTo get a list of all available options for each of the steps, run\n\n\nfastlane action screengrab\nfastlane action supply", 
            "title": "Screenshots"
        }, 
        {
            "location": "/getting-started/android/screenshots/#fastlane-screenshots-for-android", 
            "text": "Your app screenshots are probably the most important thing when it comes to convincing potential users to download or purchase your app. Unfortunately, many apps don't do screenshots well. This is often because taking screenshots of your app and then preparing them for display is time consuming, and it's hard to get everything right and consistent! For example:   Are the screenshots in Google Play inconsistent with your latest app design?  Is your app localized into many languages that require different screenshots for each?  Is the same content displayed for each of your size variations?   fastlane  tools can automate this process, making it fast and consistent while giving you beautiful results!", 
            "title": "fastlane screenshots for Android"
        }, 
        {
            "location": "/getting-started/android/screenshots/#capture-screenshots-automatically", 
            "text": "screengrab  works with  fastlane  to automate the process of capturing screenshots of your app. It allows you to:   Capture hundreds of screenshots in multiple languages on any simulator  Do something else while the computer takes the screenshots for you  Configure it once, and store the configuration so anyone on the team can run it  Get a summary of how your app looks like across all supported devices and languages   After  screengrab  completes, it will show you summary of the screenshots you captured:", 
            "title": "Capture Screenshots Automatically"
        }, 
        {
            "location": "/getting-started/android/screenshots/#getting-started-using-espresso", 
            "text": "screengrab  uses the capabilities of Android's built-in  Instrumented tests  combined with  Espresso  to drive interactions with your app. To get familiar with writing UI Tests with Espresso, check out  Testing UI for a Single App .", 
            "title": "Getting Started Using Espresso"
        }, 
        {
            "location": "/getting-started/android/screenshots/#installing-screengrab", 
            "text": "Install the gem:  sudo gem install screengrab", 
            "title": "Installing screengrab"
        }, 
        {
            "location": "/getting-started/android/screenshots/#gradle-dependency", 
            "text": "Add the test dependency to your Gradle build:  androidTestCompile 'tools.fastlane:screengrab:x.x.x'  The latest version can be determined by visiting the  screengrab  RubyGems page", 
            "title": "Gradle dependency"
        }, 
        {
            "location": "/getting-started/android/screenshots/#configuring-your-manifest-permissions", 
            "text": "Ensure that the following permissions exist in your  src/debug/AndroidManifest.xml  !-- Allows unlocking your device and activating its screen so UI tests can succeed --  uses-permission android:name= android.permission.DISABLE_KEYGUARD /  uses-permission android:name= android.permission.WAKE_LOCK /  !-- Allows for storing and retrieving screenshots --  uses-permission android:name= android.permission.WRITE_EXTERNAL_STORAGE  /  uses-permission android:name= android.permission.READ_EXTERNAL_STORAGE  /  !-- Allows changing locales --  uses-permission android:name= android.permission.CHANGE_CONFIGURATION  /", 
            "title": "Configuring your Manifest Permissions"
        }, 
        {
            "location": "/getting-started/android/screenshots/#configuring-your-ui-tests-for-screengrab", 
            "text": "Add  @ClassRule public static final LocaleTestRule localeTestRule = new LocaleTestRule();  to your tests class to handle automatic switching of locales  To capture screenshots, add the following to your tests  Screengrab.screenshot(\"name_of_screenshot_here\");  on the appropriate screens", 
            "title": "Configuring your UI Tests for screengrab"
        }, 
        {
            "location": "/getting-started/android/screenshots/#generating-screenshots-with-screengrab", 
            "text": "Run  ./gradlew assembleDebug assembleAndroidTest  to generate debug and test APKs  Run  fastlane screengrab  in your app project directory to generate screenshots  You will be prompted to provide any required parameters which are not in your  Screengrabfile , or provided as command line arguments    Your screenshots will be saved to  fastlane/metadata/android  in the directory where you ran  fastlane screengrab", 
            "title": "Generating Screenshots with Screengrab"
        }, 
        {
            "location": "/getting-started/android/screenshots/#improved-screenshot-capture-with-ui-automator", 
            "text": "As of  screengrab  0.5.0, you can specify different strategies to control the way  screengrab  captures screenshots. The newer strategy delegates to  UI Automator  which fixes a number of problems compared to the original strategy:   Shadows/elevation are correctly captured for Material UI  Multi-window situations are correctly captured (dialogs, etc.)  Works on Android N   However, UI Automator requires a device with  API level  = 18 , so it is not yet the default strategy. To enable it for all screenshots by default, make the following call before your tests run:  Screengrab.setDefaultScreenshotStrategy(new UiAutomatorScreenshotStrategy());", 
            "title": "Improved screenshot capture with UI Automator"
        }, 
        {
            "location": "/getting-started/android/screenshots/#upload-screenshots-to-google-play", 
            "text": "After generating your screenshots using  fastlane screengrab , you'll usually want to upload them to Google Play.  To upload the screenshots stored in  fastlane/metadata/android , just run:  fastlane supply", 
            "title": "Upload Screenshots to Google Play"
        }, 
        {
            "location": "/getting-started/android/screenshots/#use-in-fastfile", 
            "text": "To put all of this together so that anyone on your team could trigger generating and uploading new screenshots, you can define a  fastlane  lane called  screenshots . It would be responsible for:   Running your app through  screengrab  to automatically capture your screenshots  Having  supply  send your screenshots to Google Play for use in the store   Add the following code to your  fastlane/Fastfile :  lane :screenshots do\n  screengrab\n  supply\nend  To get a list of all available options for each of the steps, run  fastlane action screengrab\nfastlane action supply", 
            "title": "Use in Fastfile"
        }, 
        {
            "location": "/getting-started/android/beta-deployment/", 
            "text": "Deploy to Beta distribution services using \nfastlane\n\n\nIf you would like to distribute your beta builds to Google Play, please make sure you've done the steps from \nSetting up \nsupply\n before continuing.\n\n\nBuilding your app\n\n\nfastlane\n takes care of building your app by delegating to your existing Gradle build. Just add the following to your \nFastfile\n:\n\n\nlane :beta\n  # Adjust the `build_type` and `flavor` params as needed to build the right APK for your setup\n  gradle(\n    task: 'assemble',\n    build_type: 'Release'\n  )\n\n  # ...\nend\n\n\n\n\nTry running the lane with:\n\n\nfastlane beta\n\n\n\n\nWhen that completes you should have the appropriate APK ready to go in the standard output directory.\n\n\nTo get a list of all available parameters for the \ngradle\n action, run:\n\n\nfastlane action gradle\n\n\n\n\nUploading your app\n\n\nAfter building your app, it's ready to be uploaded to a beta testing service of your choice. The beauty of \nfastlane\n is that you can easily switch beta providers, or even upload to multiple at once, with a minimum of configuration. Follow that with a notification posted to the group messaging service of your choice to let the team know that you've shipped.\n\n\nlane :beta\n  gradle(task: 'assemble', build_type: 'Release')\n  supply(track: 'beta')\n  slack(message: 'Successfully distributed a new beta build')\nend\n\n\n\n\nSupported beta testing services\n\n\n\n\nGoogle Play\n\n\nIn order to distribute to Google Play with \nsupply\n you will need to have your Google credentials set up. Make sure you've gone through \nSetting up \nsupply\n before continuing!\n\n\nlane :beta do\n  # ...\n  gradle(\n    task: 'assemble',\n    build_type: 'Release'\n  )\n  supply(track: 'beta')\n  # ...\nend\n\n\n\n\nTo get a list of all available options, run:\n\n\nfastlane action supply\n\n\n\n\n\n\n\n\n\n\nCrashlytics\n\n\nlane :beta do\n  # ...\n  gradle(\n    task: 'assemble',\n    build_type: 'Release'\n  )\n\n  crashlytics(\n    api_token: '[insert_key_here]',\n    build_secret: '[insert_secret_here]'\n  )\n  # ...\nend\n\n\n\n\nTo get your API token, open the \norganizations settings page\n and click on the API key and build secret links.\n\n\nAdditionally you can specify \nnotes\n, \nemails\n, \ngroups\n and \nnotifications\n. To get a list of all available options, run:\n\n\nfastlane action crashlytics\n\n\n\n\n\n\n\n\nRelease Notes\n\n\n\n\nGenerate based on Git commits\n\n\nYou take the time to write great Git commit messages, right? Why not take advantage of them to automatically summarize the work done for your latest beta release?\n\n\nlane :beta do\n  # ...\n\n  # Generate the changelog based on commit messages since your last tag\n  changelog_from_git_commits\n\n  # The crashlytics action knows how to use the generated changelog automatically\n  crashlytics(\n    api_token: '[insert_key_here]',\n    build_secret: '[insert_secret_here]'\n  )\nend\n\n\n\n\nYou can get a list of all available options by running \nfastlane action changelog_from_git_commits\n, but here are some examples:\n\n\nchangelog_from_git_commits(\n  between: ['7b092b3', 'HEAD'], # Optional, lets you specify a revision/tag range between which to collect commit info\n  merge_commit_filtering: 'exclude_merges' # Optional, lets you filter out merge commits\n)\n\n\n\n\n\n\n\n\n\n\nPrompt for changelog\n\n\nYou can automatically be asked for the changelog in your terminal using the \nprompt\n action:\n\n\nlane :beta do\n  # Variant 1: Ask for a one line input\n  changelog = prompt(\nChangelog: \n)\n\n  # Variant 2: Ask for a multi-line input\n  #   The user confirms their input by typing `END` and Enter\n  changelog = prompt(\n    text: \nChangelog: \n,\n    multi_line_end_keyword: \nEND\n\n  )\n\n  crashlytics(\n    api_token: '[insert_key_here]',\n    build_secret: '[insert_secret_here]',\n    notes: changelog\n  )\nend\n\n\n\n\n\n\n\n\n\n\nFetch the changelog from the file system or remote server\n\n\nYou can fetch values from anywhere, including the file system and remote server, by writing code in your \nFastfile\n\n\nlane :beta do\n  # Variant 1: Read from file system\n  #   note the `..`, since fastlane runs in the _fastlane_ directory\n  changelog = File.read(\n../Changelog.txt\n)\n\n  # Variant 2: Fetch data from a remote web server\n  changelog = download(url: \nhttps://lookatmycms.com/changelog.txt\n)\n\n  crashlytics(\n    api_token: '[insert_key_here]',\n    build_secret: '[insert_secret_here]',\n    notes: changelog\n  )\nend", 
            "title": "Beta Deployment"
        }, 
        {
            "location": "/getting-started/android/beta-deployment/#deploy-to-beta-distribution-services-using-fastlane", 
            "text": "If you would like to distribute your beta builds to Google Play, please make sure you've done the steps from  Setting up  supply  before continuing.", 
            "title": "Deploy to Beta distribution services using fastlane"
        }, 
        {
            "location": "/getting-started/android/beta-deployment/#building-your-app", 
            "text": "fastlane  takes care of building your app by delegating to your existing Gradle build. Just add the following to your  Fastfile :  lane :beta\n  # Adjust the `build_type` and `flavor` params as needed to build the right APK for your setup\n  gradle(\n    task: 'assemble',\n    build_type: 'Release'\n  )\n\n  # ...\nend  Try running the lane with:  fastlane beta  When that completes you should have the appropriate APK ready to go in the standard output directory.  To get a list of all available parameters for the  gradle  action, run:  fastlane action gradle", 
            "title": "Building your app"
        }, 
        {
            "location": "/getting-started/android/beta-deployment/#uploading-your-app", 
            "text": "After building your app, it's ready to be uploaded to a beta testing service of your choice. The beauty of  fastlane  is that you can easily switch beta providers, or even upload to multiple at once, with a minimum of configuration. Follow that with a notification posted to the group messaging service of your choice to let the team know that you've shipped.  lane :beta\n  gradle(task: 'assemble', build_type: 'Release')\n  supply(track: 'beta')\n  slack(message: 'Successfully distributed a new beta build')\nend", 
            "title": "Uploading your app"
        }, 
        {
            "location": "/getting-started/android/beta-deployment/#supported-beta-testing-services", 
            "text": "Google Play  In order to distribute to Google Play with  supply  you will need to have your Google credentials set up. Make sure you've gone through  Setting up  supply  before continuing!  lane :beta do\n  # ...\n  gradle(\n    task: 'assemble',\n    build_type: 'Release'\n  )\n  supply(track: 'beta')\n  # ...\nend  To get a list of all available options, run:  fastlane action supply     Crashlytics  lane :beta do\n  # ...\n  gradle(\n    task: 'assemble',\n    build_type: 'Release'\n  )\n\n  crashlytics(\n    api_token: '[insert_key_here]',\n    build_secret: '[insert_secret_here]'\n  )\n  # ...\nend  To get your API token, open the  organizations settings page  and click on the API key and build secret links.  Additionally you can specify  notes ,  emails ,  groups  and  notifications . To get a list of all available options, run:  fastlane action crashlytics", 
            "title": "Supported beta testing services"
        }, 
        {
            "location": "/getting-started/android/beta-deployment/#release-notes", 
            "text": "Generate based on Git commits  You take the time to write great Git commit messages, right? Why not take advantage of them to automatically summarize the work done for your latest beta release?  lane :beta do\n  # ...\n\n  # Generate the changelog based on commit messages since your last tag\n  changelog_from_git_commits\n\n  # The crashlytics action knows how to use the generated changelog automatically\n  crashlytics(\n    api_token: '[insert_key_here]',\n    build_secret: '[insert_secret_here]'\n  )\nend  You can get a list of all available options by running  fastlane action changelog_from_git_commits , but here are some examples:  changelog_from_git_commits(\n  between: ['7b092b3', 'HEAD'], # Optional, lets you specify a revision/tag range between which to collect commit info\n  merge_commit_filtering: 'exclude_merges' # Optional, lets you filter out merge commits\n)     Prompt for changelog  You can automatically be asked for the changelog in your terminal using the  prompt  action:  lane :beta do\n  # Variant 1: Ask for a one line input\n  changelog = prompt( Changelog:  )\n\n  # Variant 2: Ask for a multi-line input\n  #   The user confirms their input by typing `END` and Enter\n  changelog = prompt(\n    text:  Changelog:  ,\n    multi_line_end_keyword:  END \n  )\n\n  crashlytics(\n    api_token: '[insert_key_here]',\n    build_secret: '[insert_secret_here]',\n    notes: changelog\n  )\nend     Fetch the changelog from the file system or remote server  You can fetch values from anywhere, including the file system and remote server, by writing code in your  Fastfile  lane :beta do\n  # Variant 1: Read from file system\n  #   note the `..`, since fastlane runs in the _fastlane_ directory\n  changelog = File.read( ../Changelog.txt )\n\n  # Variant 2: Fetch data from a remote web server\n  changelog = download(url:  https://lookatmycms.com/changelog.txt )\n\n  crashlytics(\n    api_token: '[insert_key_here]',\n    build_secret: '[insert_secret_here]',\n    notes: changelog\n  )\nend", 
            "title": "Release Notes"
        }, 
        {
            "location": "/getting-started/android/release-deployment/", 
            "text": "Deploy to Google Play using \nfastlane\n\n\nBuilding your app\n\n\nfastlane\n takes care of building your app by delegating to your existing Gradle build. Just add the following to your \nFastfile\n:\n\n\nlane :playstore do\n  gradle(\n    task: 'assemble',\n    build_type: 'Release'\n  )\nend\n\n\n\n\nTry running the lane with:\n\n\nfastlane playstore\n\n\n\n\nWhen that completes you should have the appropriate APK ready to go in the standard output directory. To get a list of all available parameters for the \ngradle\n action, run:\n\n\nfastlane action gradle\n\n\n\n\nUploading your APK\n\n\nTo upload your binary to Google Play, \nfastlane\n uses a tool called \nsupply\n. Because \nsupply\n needs authentication information from Google, if you haven't yet done the \nsupply\n setup steps\n, please do those now!\n\n\nWith that done, simply add a call to \nsupply\n to the lane you set up above:\n\n\nlane :playstore do\n  gradle(\n    task: 'assemble',\n    build_type: 'Release'\n  )\n  supply # Uploads the APK built in the gradle step above\nend\n\n\n\n\nThis will also upload:\n\n\n\n\nApp metadata from \nfastlane/metadata/android\n if you previously ran \nfastlane supply init\n\n\nExpansion files (obbs) found under the same directory as your APK as long as:\n\n\nThey are identified by type as \nmain\n or \npatch\n by containing \nmain\n or \npatch\n in their file names\n\n\nThere is at most one of each type\n\n\n\n\n\n\nScreenshots from \nfastlane/metadata/android\n if you previously ran \nscreengrab\n\n\n\n\nIf you would like to capture and upload screenshots automatically as part of your deployment process, check out the \nfastlane screenshots for Android\n guide to get started!\n\n\nTo gradually roll out a new build you can use:\n\n\nlane :playstore do\n  # ...\n  supply(\n    track: 'rollout',\n    rollout: '0.5'\n  )\nend\n\n\n\n\nTo get a list of all available parameters for the \nsupply\n action, run:\n\n\nfastlane action supply", 
            "title": "Release Deployment"
        }, 
        {
            "location": "/getting-started/android/release-deployment/#deploy-to-google-play-using-fastlane", 
            "text": "", 
            "title": "Deploy to Google Play using fastlane"
        }, 
        {
            "location": "/getting-started/android/release-deployment/#building-your-app", 
            "text": "fastlane  takes care of building your app by delegating to your existing Gradle build. Just add the following to your  Fastfile :  lane :playstore do\n  gradle(\n    task: 'assemble',\n    build_type: 'Release'\n  )\nend  Try running the lane with:  fastlane playstore  When that completes you should have the appropriate APK ready to go in the standard output directory. To get a list of all available parameters for the  gradle  action, run:  fastlane action gradle", 
            "title": "Building your app"
        }, 
        {
            "location": "/getting-started/android/release-deployment/#uploading-your-apk", 
            "text": "To upload your binary to Google Play,  fastlane  uses a tool called  supply . Because  supply  needs authentication information from Google, if you haven't yet done the  supply  setup steps , please do those now!  With that done, simply add a call to  supply  to the lane you set up above:  lane :playstore do\n  gradle(\n    task: 'assemble',\n    build_type: 'Release'\n  )\n  supply # Uploads the APK built in the gradle step above\nend  This will also upload:   App metadata from  fastlane/metadata/android  if you previously ran  fastlane supply init  Expansion files (obbs) found under the same directory as your APK as long as:  They are identified by type as  main  or  patch  by containing  main  or  patch  in their file names  There is at most one of each type    Screenshots from  fastlane/metadata/android  if you previously ran  screengrab   If you would like to capture and upload screenshots automatically as part of your deployment process, check out the  fastlane screenshots for Android  guide to get started!  To gradually roll out a new build you can use:  lane :playstore do\n  # ...\n  supply(\n    track: 'rollout',\n    rollout: '0.5'\n  )\nend  To get a list of all available parameters for the  supply  action, run:  fastlane action supply", 
            "title": "Uploading your APK"
        }, 
        {
            "location": "/actions/", 
            "text": "fastlane actions\n\n\nThis page contains a list of all built-in fastlane actions and their available options.\n\n\nTo get the most up-to-date information from the command line on your current version you can also run\n\n\nfastlane actions # list all available fastlane actions\nfastlane action [action_name] # more information for a specific action\n\n\n\n\nYou can import another \nFastfile\n by using the \nimport\n action. This is useful if you have shared lanes across multiple apps and you want to store a \nFastfile\n in a separate folder. The path must be relative to the \nFastfile\n this is called from.\n\n\nimport './path/to/other/Fastfile'\n\n\n\n\n\n\nTesting\n\n\nBuilding\n\n\nScreenshots\n\n\nProject\n\n\nCode Signing\n\n\nDocumentation\n\n\nBeta\n\n\nPush\n\n\nReleasing your app\n\n\nSource Control\n\n\nNotifications\n\n\nDeprecated\n\n\nMisc\n\n\nPlugins\n\n\n\n\nTesting\n\n\nscan\n\n\nEasily run tests of your iOS app using \nscan\n\n\n\n\nMore information: https://github.com/fastlane/fastlane/tree/master/scan\n\n\n\n\n\n\n\n\n\n\nscan\n\n\n\n\n\n\n\n\n\n\n\n\nSupported platforms\n\n\nios, mac\n\n\n\n\n\n\nAuthor\n\n\n@KrauseFx\n\n\n\n\n\n\n\n\n\n\n2 Examples\n\n\nscan\n\n\n\n\nscan(\n  workspace: \nApp.xcworkspace\n,\n  scheme: \nMyTests\n,\n  clean: false\n)\n\n\n\n\n\n\n\n\nParameters\n\n\n\n\n\n\n\n\nKey\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nworkspace\n\n\nPath the workspace file\n\n\n\n\n\n\nproject\n\n\nPath the project file\n\n\n\n\n\n\ndevice\n\n\nThe name of the simulator type you want to run tests on (e.g. 'iPhone 6')\n\n\n\n\n\n\ndevices\n\n\nArray of devices to run the tests on (e.g. ['iPhone 6', 'iPad Air'])\n\n\n\n\n\n\nscheme\n\n\nThe project's scheme. Make sure it's marked as \nShared\n\n\n\n\n\n\nclean\n\n\nShould the project be cleaned before building it?\n\n\n\n\n\n\ncode_coverage\n\n\nShould generate code coverage (Xcode 7 only)?\n\n\n\n\n\n\naddress_sanitizer\n\n\nShould turn on the address sanitizer?\n\n\n\n\n\n\nskip_build\n\n\nShould skip debug build before test build?\n\n\n\n\n\n\noutput_directory\n\n\nThe directory in which all reports will be stored\n\n\n\n\n\n\noutput_style\n\n\nDefine how the output should look like (standard, basic, rspec or raw)\n\n\n\n\n\n\noutput_types\n\n\nComma separated list of the output types (e.g. html, junit)\n\n\n\n\n\n\nbuildlog_path\n\n\nThe directory were to store the raw log\n\n\n\n\n\n\nformatter\n\n\nA custom xcpretty formatter to use\n\n\n\n\n\n\nderived_data_path\n\n\nThe directory where build products and other derived data will go\n\n\n\n\n\n\nresult_bundle\n\n\nProduce the result bundle describing what occurred will be placed\n\n\n\n\n\n\nsdk\n\n\nThe SDK that should be used for building the application\n\n\n\n\n\n\nopen_report\n\n\nShould the HTML report be opened when tests are completed\n\n\n\n\n\n\nconfiguration\n\n\nThe configuration to use when building the app. Defaults to 'Release'\n\n\n\n\n\n\ndestination\n\n\nUse only if you're a pro, use the other options instead\n\n\n\n\n\n\nxcargs\n\n\nPass additional arguments to xcodebuild. Be sure to quote the setting names and values e.g. OTHER_LDFLAGS=\"-ObjC -lstdc++\"\n\n\n\n\n\n\nxcconfig\n\n\nUse an extra XCCONFIG file to build your app\n\n\n\n\n\n\nslack_url\n\n\nCreate an Incoming WebHook for your Slack group to post results there\n\n\n\n\n\n\nslack_channel\n\n\n#channel or @username\n\n\n\n\n\n\nslack_message\n\n\nThe message included with each message posted to slack\n\n\n\n\n\n\nskip_slack\n\n\nDon't publish to slack, even when an URL is given\n\n\n\n\n\n\nslack_only_on_failure\n\n\nOnly post on Slack if the tests fail\n\n\n\n\n\n\nuse_clang_report_name\n\n\nGenerate the json compilation database with clang naming convention (compile_commands.json)\n\n\n\n\n\n\ncustom_report_file_name\n\n\nSets custom full report file name\n\n\n\n\n\n\nfail_build\n\n\nShould this step stop the build if the tests fail? Set this to false if you're using trainer\n\n\n\n\n\n\n\n\n\n\nxctool\n\n\nRun tests using xctool\n\n\n\n\nYou can run any \nxctool\n action. This will require having \nxctool\n installed through \nhomebrew\n. It is recommended to store the build configuration in the \n.xctool-args\n file. More information available on GitHub: https://github.com/fastlane/fastlane/blob/master/fastlane/docs/Actions.md#xctool\n\n\n\n\n\n\n\n\n\n\nxctool\n\n\n\n\n\n\n\n\n\n\n\n\nSupported platforms\n\n\nios, mac\n\n\n\n\n\n\nAuthor\n\n\n@KrauseFx\n\n\n\n\n\n\n\n\n\n\n2 Examples\n\n\nxctool :test\n\n\n\n\n# If you prefer to have the build configuration stored in the `Fastfile`:\nxctool :test, [\n  \n--workspace\n, \n'AwesomeApp.xcworkspace'\n,\n  \n--scheme\n, \n'Schema Name'\n,\n  \n--configuration\n, \nDebug\n,\n  \n--sdk\n, \niphonesimulator\n,\n  \n--arch\n, \ni386\n\n].join(\n \n)\n\n\n\n\n\n\nslather\n\n\nUse slather to generate a code coverage report\n\n\n\n\nSlather works with multiple code coverage formats including Xcode7 code coverage.\nSlather is available at https://github.com/SlatherOrg/slather\n\n\n\n\n\n\n\n\n\n\nslather\n\n\n\n\n\n\n\n\n\n\n\n\nSupported platforms\n\n\nios, mac\n\n\n\n\n\n\nAuthor\n\n\n@mattdelves\n\n\n\n\n\n\n\n\n\n\n1 Example\n\n\nslather(\n  build_directory: \nfoo\n,\n  input_format: \nbah\n,\n  scheme: \nMyScheme\n,\n  proj: \nMyProject.xcodeproj\n\n)\n\n\n\n\n\n\n\n\nParameters\n\n\n\n\n\n\n\n\nKey\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nbuild_directory\n\n\nThe location of the build output\n\n\n\n\n\n\nproj\n\n\nThe project file that slather looks at\n\n\n\n\n\n\nworkspace\n\n\nThe workspace that slather looks at\n\n\n\n\n\n\nscheme\n\n\nScheme to use when calling slather\n\n\n\n\n\n\ninput_format\n\n\nThe input format that slather should look for\n\n\n\n\n\n\nbuildkite\n\n\nTell slather that it is running on Buildkite\n\n\n\n\n\n\nteamcity\n\n\nTell slather that it is running on TeamCity\n\n\n\n\n\n\njenkins\n\n\nTell slather that it is running on Jenkins\n\n\n\n\n\n\ntravis\n\n\nTell slather that it is running on TravisCI\n\n\n\n\n\n\ncircleci\n\n\nTell slather that it is running on CircleCI\n\n\n\n\n\n\ncoveralls\n\n\nTell slather that it should post data to Coveralls\n\n\n\n\n\n\nsimple_output\n\n\nTell slather that it should output results to the terminal\n\n\n\n\n\n\ngutter_json\n\n\nTell slather that it should output results as Gutter JSON format\n\n\n\n\n\n\ncobertura_xml\n\n\nTell slather that it should output results as Cobertura XML format\n\n\n\n\n\n\nhtml\n\n\nTell slather that it should output results as static HTML pages\n\n\n\n\n\n\nshow\n\n\nTell slather that it should open static html pages automatically\n\n\n\n\n\n\nsource_directory\n\n\nTell slather the location of your source files\n\n\n\n\n\n\noutput_directory\n\n\nTell slather the location of for your output files\n\n\n\n\n\n\nignore\n\n\nTell slather to ignore files matching a path or any path from an array of paths\n\n\n\n\n\n\nverbose\n\n\nTell slather to enable verbose mode\n\n\n\n\n\n\nuse_bundle_exec\n\n\nUse bundle exec to execute slather. Make sure it is in the Gemfile\n\n\n\n\n\n\nbinary_basename\n\n\nBasename of the binary file, this should match the name of your bundle excluding its extension (i.e. YourApp [for YourApp.app bundle])\n\n\n\n\n\n\nbinary_file\n\n\nBinary file name to be used for code coverage\n\n\n\n\n\n\nsource_files\n\n\nA Dir.glob compatible pattern used to limit the lookup to specific source files. Ignored in gcov mode\n\n\n\n\n\n\ndecimals\n\n\nThe amount of decimals to use for % coverage reporting\n\n\n\n\n\n\n\n\n\n\nswiftlint\n\n\nRun swift code validation using SwiftLint\n\n\n\n\n\n\n\n\nswiftlint\n\n\n\n\n\n\n\n\n\n\n\n\nSupported platforms\n\n\nios, mac\n\n\n\n\n\n\nAuthor\n\n\n@KrauseFx\n\n\n\n\n\n\n\n\n\n\n1 Example\n\n\nswiftlint(\n  mode: :lint,      # SwiftLint mode: :lint (default) or :autocorrect\n  output_file: \nswiftlint.result.json\n, # The path of the output file (optional)\n  config_file: \n.swiftlint-ci.yml\n,     # The path of the configuration file (optional)\n  files: [# List of files to process (optional)\n    \nAppDelegate.swift\n,\n    \npath/to/project/Model.swift\n\n  ],\n  ignore_exit_status: true    # Allow fastlane to continue even if SwiftLint returns a non-zero exit status\n)\n\n\n\n\n\n\n\n\nParameters\n\n\n\n\n\n\n\n\nKey\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nmode\n\n\nSwiftLint mode: :lint (default) or :autocorrect; default is :lint\n\n\n\n\n\n\noutput_file\n\n\nPath to output SwiftLint result\n\n\n\n\n\n\nconfig_file\n\n\nCustom configuration file of SwiftLint\n\n\n\n\n\n\nstrict\n\n\nFail on warnings? (true/false)\n\n\n\n\n\n\nfiles\n\n\nList of files to process\n\n\n\n\n\n\nignore_exit_status\n\n\nIgnore the exit status of the SwiftLint command, so that serious violations                                                     don't fail the build (true/false)\n\n\n\n\n\n\n\n\n\n\noclint\n\n\nLints implementation files with OCLint\n\n\n\n\nRun the static analyzer tool \nOCLint\n for your project. You need to have a \ncompile_commands.json\n file in your \nfastlane\n directory or pass a path to your file\n\n\n\n\n\n\n\n\n\n\noclint\n\n\n\n\n\n\n\n\n\n\n\n\nSupported platforms\n\n\nios, android, mac\n\n\n\n\n\n\nAuthor\n\n\n@HeEAaD\n\n\n\n\n\n\n\n\n\n\n1 Example\n\n\noclint(\n  compile_commands: \ncommands.json\n,    # The JSON compilation database, use xctool reporter \njson-compilation-database\n\n  select_regex: /ViewController.m/,     # Select all files matching this regex\n  exclude_regex: /Test.m/,    # Exclude all files matching this regex\n  report_type: \npmd\n,         # The type of the report (default: html)\n  max_priority_1: 10,         # The max allowed number of priority 1 violations\n  max_priority_2: 100,        # The max allowed number of priority 2 violations\n  max_priority_3: 1000,       # The max allowed number of priority 3 violations\n  thresholds: [     # Override the default behavior of rules\n    \nLONG_LINE=200\n,\n    \nLONG_METHOD=200\n\n  ],\n  enable_rules: [   # List of rules to pick explicitly\n    \nDoubleNegative\n,\n    \nSwitchStatementsDon'TNeedDefaultWhenFullyCovered\n\n  ],\n  disable_rules: [\nGotoStatement\n],     # List of rules to disable\n  list_enabled_rules: true,   # List enabled rules\n  enable_clang_static_analyzer: true,   # Enable Clang Static Analyzer, and integrate results into OCLint report\n  enable_global_analysis: true,         # Compile every source, and analyze across global contexts (depends on number of source files, could results in high memory load)\n  allow_duplicated_violations: true     # Allow duplicated violations in the OCLint report\n)\n\n\n\n\n\n\n\n\nParameters\n\n\n\n\n\n\n\n\nKey\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\noclint_path\n\n\nThe path to oclint binary\n\n\n\n\n\n\ncompile_commands\n\n\nThe json compilation database, use xctool reporter 'json-compilation-database'\n\n\n\n\n\n\nselect_reqex\n\n\nSelect all files matching this reqex\n\n\n\n\n\n\nselect_regex\n\n\nSelect all files matching this regex\n\n\n\n\n\n\nexclude_regex\n\n\nExclude all files matching this regex\n\n\n\n\n\n\nreport_type\n\n\nThe type of the report (default: html)\n\n\n\n\n\n\nreport_path\n\n\nThe reports file path\n\n\n\n\n\n\nlist_enabled_rules\n\n\nList enabled rules\n\n\n\n\n\n\nrc\n\n\nOverride the default behavior of rules\n\n\n\n\n\n\nthresholds\n\n\nList of rule thresholds to override the default behavior of rules\n\n\n\n\n\n\nenable_rules\n\n\nList of rules to pick explicitly\n\n\n\n\n\n\ndisable_rules\n\n\nList of rules to disable\n\n\n\n\n\n\nmax_priority_1\n\n\nThe max allowed number of priority 1 violations\n\n\n\n\n\n\nmax_priority_2\n\n\nThe max allowed number of priority 2 violations\n\n\n\n\n\n\nmax_priority_3\n\n\nThe max allowed number of priority 3 violations\n\n\n\n\n\n\nenable_clang_static_analyzer\n\n\nEnable Clang Static Analyzer, and integrate results into OCLint report\n\n\n\n\n\n\nenable_global_analysis\n\n\nCompile every source, and analyze across global contexts (depends on number of source files, could results in high memory load)\n\n\n\n\n\n\nallow_duplicated_violations\n\n\nAllow duplicated violations in the OCLint report\n\n\n\n\n\n\n\n\n\n\nxcov\n\n\nNice code coverage reports without hassle\n\n\n\n\nCreate nice code coverage reports and post coverage summaries on Slack \n(xcov gem is required)\n.\nMore information: https://github.com/nakiostudio/xcov\n\n\n\n\n\n\n\n\n\n\nxcov\n\n\n\n\n\n\n\n\n\n\n\n\nSupported platforms\n\n\nios, mac\n\n\n\n\n\n\nAuthor\n\n\n@nakiostudio\n\n\n\n\n\n\n\n\n\n\n1 Example\n\n\nxcov(\n  workspace: \nYourWorkspace.xcworkspace\n,\n  scheme: \nYourScheme\n,\n  output_directory: \nxcov_output\n\n)\n\n\n\n\n\n\ngcovr\n\n\nRuns test coverage reports for your Xcode project\n\n\n\n\nGenerate summarized code coverage reports using \ngcovr\n\n\n\n\n\n\n\n\n\n\ngcovr\n\n\n\n\n\n\n\n\n\n\n\n\nSupported platforms\n\n\nios\n\n\n\n\n\n\nAuthor\n\n\n@dtrenz\n\n\n\n\n\n\n\n\n\n\n1 Example\n\n\ngcovr(\n  html: true,\n  html_details: true,\n  output: \n./code-coverage/report.html\n\n)\n\n\n\n\n\n\nsonar\n\n\nInvokes sonar-scanner to programmatically run SonarQube analysis\n\n\n\n\nSee http://docs.sonarqube.org/display/SCAN/Analyzing+with+SonarQube+Scanner for details.\nIt can process unit test results if formatted as junit report as shown in \nxctest\n action. It can also integrate coverage reports in Cobertura format, which can be transformed into by \nslather\n action.\n\n\n\n\n\n\n\n\n\n\nsonar\n\n\n\n\n\n\n\n\n\n\n\n\nSupported platforms\n\n\nios, android, mac\n\n\n\n\n\n\nAuthor\n\n\n@c_gretzki\n\n\n\n\n\n\nReturns\n\n\nThe exit code of the sonar-scanner binary\n\n\n\n\n\n\n\n\n\n\n1 Example\n\n\nsonar(\n  project_key: \nname.gretzki.awesomeApp\n,\n  project_version: \n1.0\n,\n  project_name: \niOS - AwesomeApp\n,\n  sources_path: File.expand_path(\n../AwesomeApp\n)\n)\n\n\n\n\n\n\n\n\nParameters\n\n\n\n\n\n\n\n\nKey\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nproject_configuration_path\n\n\nThe path to your sonar project configuration file; defaults to \nsonar-project.properties\n\n\n\n\n\n\nproject_key\n\n\nThe key sonar uses to identify the project, e.g. \nname.gretzki.awesomeApp\n. Must either be specified here or inside the sonar project configuration file\n\n\n\n\n\n\nproject_name\n\n\nThe name of the project that gets displayed on the sonar report page. Must either be specified here or inside the sonar project configuration file\n\n\n\n\n\n\nproject_version\n\n\nThe project's version that gets displayed on the sonar report page. Must either be specified here or inside the sonar project configuration file\n\n\n\n\n\n\nsources_path\n\n\nComma-separated paths to directories containing source files. Must either be specified here or inside the sonar project configuration file\n\n\n\n\n\n\nproject_language\n\n\nLanguage key, e.g. objc\n\n\n\n\n\n\nsource_encoding\n\n\nUsed encoding of source files, e.g., UTF-8\n\n\n\n\n\n\nsonar_runner_args\n\n\nPass additional arguments to sonar-scanner. Be sure to provide the arguments with a leading \n-D\n e.g. FL_SONAR_RUNNER_ARGS=\"-Dsonar.verbose=true\"\n\n\n\n\n\n\n\n\n\n\nlcov\n\n\nGenerates coverage data using lcov\n\n\n\n\n\n\n\n\nlcov\n\n\n\n\n\n\n\n\n\n\n\n\nSupported platforms\n\n\nios, mac\n\n\n\n\n\n\nAuthor\n\n\n@thiagolioy\n\n\n\n\n\n\n\n\n\n\n1 Example\n\n\nlcov(\n  project_name: \nProjectName\n,\n  scheme: \nyourScheme\n,\n  output_dir: \ncov_reports\n # This value is optional. Default is coverage_reports\n)\n\n\n\n\n\n\n\n\nParameters\n\n\n\n\n\n\n\n\nKey\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nproject_name\n\n\nName of the project\n\n\n\n\n\n\nscheme\n\n\nScheme of the project\n\n\n\n\n\n\narch\n\n\nThe build arch where will search .gcda files\n\n\n\n\n\n\noutput_dir\n\n\nThe output directory that coverage data will be stored. If not passed will use coverage_reports as default value\n\n\n\n\n\n\n\n\n\n\nappium\n\n\nRun UI test by Appium with RSpec\n\n\n\n\n\n\n\n\nappium\n\n\n\n\n\n\n\n\n\n\n\n\nSupported platforms\n\n\nios\n\n\n\n\n\n\nAuthor\n\n\n@yonekawa\n\n\n\n\n\n\n\n\n\n\n1 Example\n\n\nappium(\n  app_path:  \nappium/apps/TargetApp.app\n,\n  spec_path: \nappium/spec\n,\n  platform:  \niOS\n,\n  caps: {\n    versionNumber: \n9.1\n,\n    deviceName:    \niPhone 6\n\n  }\n)\n\n\n\n\n\n\n\n\nParameters\n\n\n\n\n\n\n\n\nKey\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nplatform\n\n\nAppium platform name\n\n\n\n\n\n\nspec_path\n\n\nPath to Appium spec directory\n\n\n\n\n\n\napp_path\n\n\nPath to Appium target app file\n\n\n\n\n\n\ninvoke_appium_server\n\n\nUse local Appium server with invoke automatically\n\n\n\n\n\n\nhost\n\n\nHostname of Appium server\n\n\n\n\n\n\nport\n\n\nHTTP port of Appium server\n\n\n\n\n\n\nappium_path\n\n\nPath to Appium executable\n\n\n\n\n\n\ncaps\n\n\nHash of caps for Appium::Driver\n\n\n\n\n\n\n\n\n\n\nxcode_server_get_assets\n\n\nDownloads Xcode Bot assets like the \n.xcarchive\n and logs\n\n\n\n\nThis action downloads assets from your Xcode Server Bot (works with Xcode Server\n          using Xcode 6 and 7. By default this action downloads all assets, unzips them and\n          deletes everything except for the \n.xcarchive\n. If you'd like to keep all downloaded\n          assets, pass \n:keep_all_assets: true\n. This action returns the path to the downloaded\n          assets folder and puts into shared values the paths to the asset folder and to the \n.xcarchive\n inside it\n\n\n\n\n\n\n\n\n\n\nxcode_server_get_assets\n\n\n\n\n\n\n\n\n\n\n\n\nSupported platforms\n\n\nios, mac\n\n\n\n\n\n\nAuthor\n\n\n@czechboy0\n\n\n\n\n\n\n\n\n\n\n1 Example\n\n\nxcode_server_get_assets(\n  host: \n10.99.0.59\n, # Specify Xcode Server's Host or IP Address\n  bot_name: \nrelease-1.3.4\n # Specify the particular Bot\n)\n\n\n\n\n\n\n\n\nParameters\n\n\n\n\n\n\n\n\nKey\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nhost\n\n\nIP Address/Hostname of Xcode Server\n\n\n\n\n\n\nbot_name\n\n\nName of the Bot to pull assets from\n\n\n\n\n\n\nintegration_number\n\n\nOptionally you can override which integration's assets should be downloaded. If not provided, the latest integration is used\n\n\n\n\n\n\nusername\n\n\nUsername for your Xcode Server\n\n\n\n\n\n\npassword\n\n\nPassword for your Xcode Server\n\n\n\n\n\n\ntarget_folder\n\n\nRelative path to a folder into which to download assets\n\n\n\n\n\n\nkeep_all_assets\n\n\nWhether to keep all assets or let the script delete everything except for the .xcarchive\n\n\n\n\n\n\ntrust_self_signed_certs\n\n\nWhether to trust self-signed certs on your Xcode Server\n\n\n\n\n\n\n\n\n\n\nBuilding\n\n\ngym\n\n\nEasily build and sign your app using \ngym\n\n\n\n\nMore information: https://fastlane.tools/gym\n\n\n\n\n\n\n\n\n\n\ngym\n\n\n\n\n\n\n\n\n\n\n\n\nSupported platforms\n\n\nios, mac\n\n\n\n\n\n\nAuthor\n\n\n@KrauseFx\n\n\n\n\n\n\nReturns\n\n\nThe absolute path to the generated ipa file\n\n\n\n\n\n\n\n\n\n\n2 Examples\n\n\ngym(scheme: \nMyApp\n, workspace: \nMyApp.xcworkspace\n)\n\n\n\n\ngym(\n  workspace: \nMyApp.xcworkspace\n,\n  configuration: \nDebug\n,\n  scheme: \nMyApp\n,\n  silent: true,\n  clean: true,\n  output_directory: \npath/to/dir\n, # Destination directory. Defaults to current directory.\n  output_name: \nmy-app.ipa\n,       # specify the name of the .ipa file to generate (including file extension)\n  sdk: \n10.0\n  # use SDK as the name or path of the base SDK when building the project.\n)\n\n\n\n\n\n\n\n\nParameters\n\n\n\n\n\n\n\n\nKey\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nworkspace\n\n\nPath the workspace file\n\n\n\n\n\n\nproject\n\n\nPath the project file\n\n\n\n\n\n\nscheme\n\n\nThe project's scheme. Make sure it's marked as \nShared\n\n\n\n\n\n\nclean\n\n\nShould the project be cleaned before building it?\n\n\n\n\n\n\noutput_directory\n\n\nThe directory in which the ipa file should be stored in\n\n\n\n\n\n\noutput_name\n\n\nThe name of the resulting ipa file\n\n\n\n\n\n\nconfiguration\n\n\nThe configuration to use when building the app. Defaults to 'Release'\n\n\n\n\n\n\nsilent\n\n\nHide all information that's not necessary while building\n\n\n\n\n\n\ncodesigning_identity\n\n\nThe name of the code signing identity to use. It has to match the name exactly. e.g. 'iPhone Distribution: SunApps GmbH'\n\n\n\n\n\n\ninclude_symbols\n\n\nShould the ipa file include symbols?\n\n\n\n\n\n\ninclude_bitcode\n\n\nShould the ipa include bitcode?\n\n\n\n\n\n\nuse_legacy_build_api\n\n\nDon't use the new API because of https://openradar.appspot.com/radar?id=4952000420642816\n\n\n\n\n\n\nexport_method\n\n\nHow should gym export the archive?\n\n\n\n\n\n\nexport_options\n\n\nSpecifies path to export options plist. User xcodebuild -help to print the full set of available options\n\n\n\n\n\n\nskip_build_archive\n\n\nExport ipa from previously build xarchive. Uses archive_path as source\n\n\n\n\n\n\nbuild_path\n\n\nThe directory in which the archive should be stored in\n\n\n\n\n\n\narchive_path\n\n\nThe path to the created archive\n\n\n\n\n\n\nderived_data_path\n\n\nThe directory where build products and other derived data will go\n\n\n\n\n\n\nresult_bundle\n\n\nProduce the result bundle describing what occurred will be placed\n\n\n\n\n\n\nbuildlog_path\n\n\nThe directory where to store the build log\n\n\n\n\n\n\nsdk\n\n\nThe SDK that should be used for building the application\n\n\n\n\n\n\ntoolchain\n\n\nThe toolchain that should be used for building the application (e.g. com.apple.dt.toolchain.Swift_2_3, org.swift.30p620160816a)\n\n\n\n\n\n\nprovisioning_profile_path\n\n\n[DEPRECATED!] Use target specific provisioning profiles instead - The path to the provisioning profile (optional)\n\n\n\n\n\n\ndestination\n\n\nUse a custom destination for building the app\n\n\n\n\n\n\nexport_team_id\n\n\nOptional: Sometimes you need to specify a team id when exporting the ipa file\n\n\n\n\n\n\nxcargs\n\n\nPass additional arguments to xcodebuild. Be sure to quote the setting names and values e.g. OTHER_LDFLAGS=\"-ObjC -lstdc++\"\n\n\n\n\n\n\nxcconfig\n\n\nUse an extra XCCONFIG file to build your app\n\n\n\n\n\n\nsuppress_xcode_output\n\n\nSuppress the output of xcodebuild to stdout. Output is still saved in buildlog_path\n\n\n\n\n\n\ndisable_xcpretty\n\n\nDisable xcpretty formatting of build output\n\n\n\n\n\n\nxcpretty_test_format\n\n\nUse the test (RSpec style) format for build output\n\n\n\n\n\n\nxcpretty_formatter\n\n\nA custom xcpretty formatter to use\n\n\n\n\n\n\nxcpretty_report_junit\n\n\nHave xcpretty create a JUnit-style XML report at the provided path\n\n\n\n\n\n\nxcpretty_report_html\n\n\nHave xcpretty create a simple HTML report at the provided path\n\n\n\n\n\n\nxcpretty_report_json\n\n\nHave xcpretty create a JSON compilation database at the provided path\n\n\n\n\n\n\n\n\n\n\ncocoapods\n\n\nRuns \npod install\n for the project\n\n\n\n\nIf you use \nCocoaPods\n you can use the \ncocoapods\n integration to run \npod install\n before building your app.\n\n\n\n\n\n\n\n\n\n\ncocoapods\n\n\n\n\n\n\n\n\n\n\n\n\nSupported platforms\n\n\nios, mac\n\n\n\n\n\n\nAuthor\n\n\n@KrauseFx, @tadpol, @birmacher, @Liquidsoul\n\n\n\n\n\n\n\n\n\n\n2 Examples\n\n\ncocoapods\n\n\n\n\ncocoapods(\n  clean: true,\n  podfile: \n./CustomPodfile\n\n)\n\n\n\n\n\n\n\n\nParameters\n\n\n\n\n\n\n\n\nKey\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nclean\n\n\nRemove SCM directories\n\n\n\n\n\n\nintegrate\n\n\nIntegrate the Pods libraries into the Xcode project(s)\n\n\n\n\n\n\nrepo_update\n\n\nRun \npod repo update\n before install\n\n\n\n\n\n\nsilent\n\n\nExecute command without logging output\n\n\n\n\n\n\nverbose\n\n\nShow more debugging information\n\n\n\n\n\n\nansi\n\n\nShow output with ANSI codes\n\n\n\n\n\n\nuse_bundle_exec\n\n\nUse bundle exec when there is a Gemfile presented\n\n\n\n\n\n\npodfile\n\n\nExplicitly specify the path to the Cocoapods' Podfile. You can either set it to the Podfile's path or to the folder containing the Podfile file\n\n\n\n\n\n\n\n\n\n\nclear_derived_data\n\n\nDeletes the Xcode Derived Data\n\n\n\n\nDeletes the Derived Data from '~/Library/Developer/Xcode/DerivedData' or a supplied path\n\n\n\n\n\n\n\n\n\n\nclear_derived_data\n\n\n\n\n\n\n\n\n\n\n\n\nSupported platforms\n\n\nios, mac\n\n\n\n\n\n\nAuthor\n\n\n@KrauseFx\n\n\n\n\n\n\n\n\n\n\n2 Examples\n\n\nclear_derived_data\n\n\n\n\nclear_derived_data(derived_data_path: \n/custom/\n)\n\n\n\n\n\n\n\n\nParameters\n\n\n\n\n\n\n\n\nKey\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nderived_data_path\n\n\nCustom path for derivedData\n\n\n\n\n\n\n\n\n\n\ncarthage\n\n\nRuns \ncarthage\n for your project\n\n\n\n\n\n\n\n\ncarthage\n\n\n\n\n\n\n\n\n\n\n\n\nSupported platforms\n\n\nios, mac\n\n\n\n\n\n\nAuthor\n\n\n@bassrock, @petester42, @jschmid, @JaviSoto, @uny, @phatblat, @bfcrampton\n\n\n\n\n\n\n\n\n\n\n2 Examples\n\n\ncarthage\n\n\n\n\ncarthage(\n  command: \nbootstrap\n,       # One of: build, bootstrap, update, archive. (default: bootstrap)\n  dependencies: [\nAlamofire\n, \nNotice\n],# Specify which dependencies to update (only for the update command)\n  use_ssh: false,   # Use SSH for downloading GitHub repositories.\n  use_submodules: false,      # Add dependencies as Git submodules.\n  use_binaries: true,         # Check out dependency repositories even when prebuilt frameworks exist\n  no_build: false,  # When bootstrapping Carthage do not build\n  no_skip_current: false,     # Don't skip building the current project (only for frameworks)\n  verbose: false,   # Print xcodebuild output inline\n  platform: \nall\n,  # Define which platform to build for (one of \u2018all\u2019, \u2018Mac\u2019, \u2018iOS\u2019, \u2018watchOS\u2019, \u2018tvOS\u2018, or comma-separated values of the formers except for \u2018all\u2019)\n  configuration: \nRelease\n,   # Build configuration to use when building\n  toolchain: \ncom.apple.dt.toolchain.Swift_2_3\n   # Specify the xcodebuild toolchain\n)\n\n\n\n\n\n\n\n\nParameters\n\n\n\n\n\n\n\n\nKey\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\ncommand\n\n\nCarthage command (one of: build, bootstrap, update, archive)\n\n\n\n\n\n\ndependencies\n\n\nCarthage dependencies to update\n\n\n\n\n\n\nuse_ssh\n\n\nUse SSH for downloading GitHub repositories\n\n\n\n\n\n\nuse_submodules\n\n\nAdd dependencies as Git submodules\n\n\n\n\n\n\nuse_binaries\n\n\nCheck out dependency repositories even when prebuilt frameworks exist\n\n\n\n\n\n\nno_build\n\n\nWhen bootstrapping Carthage do not build\n\n\n\n\n\n\nno_skip_current\n\n\nDon't skip building the Carthage project (in addition to its dependencies)\n\n\n\n\n\n\nderived_data\n\n\nUse derived data folder at path\n\n\n\n\n\n\nverbose\n\n\nPrint xcodebuild output inline\n\n\n\n\n\n\nplatform\n\n\nDefine which platform to build for\n\n\n\n\n\n\nconfiguration\n\n\nDefine which build configuration to use when building\n\n\n\n\n\n\ntoolchain\n\n\nDefine which xcodebuild toolchain to use when building\n\n\n\n\n\n\nproject_directory\n\n\nDefine the directory containing the Carthage project\n\n\n\n\n\n\n\n\n\n\ngradle\n\n\nAll gradle related actions, including building and testing your Android app\n\n\n\n\nRun \n./gradlew tasks\n to get a list of all available gradle tasks for your project\n\n\n\n\n\n\n\n\n\n\ngradle\n\n\n\n\n\n\n\n\n\n\n\n\nSupported platforms\n\n\nios, android\n\n\n\n\n\n\nAuthor\n\n\n@KrauseFx, @lmirosevic\n\n\n\n\n\n\nReturns\n\n\nThe output of running the gradle task\n\n\n\n\n\n\n\n\n\n\n3 Examples\n\n\ngradle(\n  task: \nassemble\n,\n  flavor: \nWorldDomination\n,\n  build_type: \nRelease\n\n)\n\n\n\n\ngradle(\n  # ...\n\n  properties: {\n    \nversionCode\n =\n 100,\n    \nversionName\n =\n \n1.0.0\n,\n    # ...\n  }\n)\n\n\n\n\n# If you need to pass sensitive information through the `gradle` action, and don\nt want the generated command to be printed before it is run, you can suppress that:\ngradle(\n  # ...\n  print_command: false\n)\n\n\n\n\nYou can also suppress printing the output generated by running the generated Gradle command:\n\n\ngradle(\n  # ...\n  print_command_output: false\n)\n\n\n\n\nTo pass any other CLI flags to gradle use:\n\n\ngradle(\n  # ...\n\n  flags: \n--exitcode --xml file.xml\n\n)\n\n\n\n\n\n\n\n\nParameters\n\n\n\n\n\n\n\n\nKey\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\ntask\n\n\nThe gradle task you want to execute, e.g. \nassemble\n or \ntest\n. For tasks such as \nassembleMyFlavorRelease\n you should use gradle(task: 'assemble', flavor: 'Myflavor', build_type: 'Release')\n\n\n\n\n\n\nflavor\n\n\nThe flavor that you want the task for, e.g. \nMyFlavor\n. If you are running the \nassemble\n task in a multi-flavor project, and you rely on Actions.lane_context[Actions.SharedValues::GRADLE_APK_OUTPUT_PATH] then you must specify a flavor here or else this value will be undefined\n\n\n\n\n\n\nbuild_type\n\n\nThe build type that you want the task for, e.g. \nRelease\n. Useful for some tasks such as \nassemble\n\n\n\n\n\n\nflags\n\n\nAll parameter flags you want to pass to the gradle command, e.g. \n--exitcode --xml file.xml\n\n\n\n\n\n\nproject_dir\n\n\nThe root directory of the gradle project. Defaults to \n.\n\n\n\n\n\n\ngradle_path\n\n\nThe path to your \ngradlew\n. If you specify a relative path, it is assumed to be relative to the \nproject_dir\n\n\n\n\n\n\nproperties\n\n\nGradle properties to be exposed to the gradle script\n\n\n\n\n\n\nserial\n\n\nAndroid serial, wich device should be used for this command\n\n\n\n\n\n\nprint_command\n\n\nControl whether the generated Gradle command is printed as output before running it (true/false)\n\n\n\n\n\n\nprint_command_output\n\n\nControl whether the output produced by given Gradle command is printed while running (true/false)\n\n\n\n\n\n\n\n\n\n\nxcode_select\n\n\nChange the xcode-path to use. Useful for beta versions of Xcode\n\n\n\n\nSelect and build with the Xcode installed at the provided path. Use the \nxcversion\n action if you want to select an Xcode based on a version specifier or you don't have known, stable paths as may happen in a CI environment.\n\n\n\n\n\n\n\n\n\n\nxcode_select\n\n\n\n\n\n\n\n\n\n\n\n\nSupported platforms\n\n\nios, mac\n\n\n\n\n\n\nAuthor\n\n\n@dtrenz\n\n\n\n\n\n\n\n\n\n\n1 Example\n\n\nxcode_select \n/Applications/Xcode6.1.app\n\n\n\n\n\n\n\nxcodebuild\n\n\nUse the \nxcodebuild\n command to build and sign your app\n\n\n\n\nNote\n: \nxcodebuild\n is a complex command, so it is recommended to use \ngym\n for building your ipa file and \nscan\n for testing your app instead.\n\n\n\n\n\n\n\n\n\n\nxcodebuild\n\n\n\n\n\n\n\n\n\n\n\n\nSupported platforms\n\n\nios, mac\n\n\n\n\n\n\nAuthor\n\n\n@dtrenz\n\n\n\n\n\n\n\n\n\n\n1 Example\n\n\nxcodebuild(\n  archive: true,\n  archive_path: \n./build-dir/MyApp.xcarchive\n,\n  scheme: \nMyApp\n,\n  workspace: \nMyApp.xcworkspace\n\n)\n\n\n\n\n\n\nipa\n\n\nEasily build and sign your app using shenzhen\n\n\n\n\nNote\n: This action is deprecated, use \ngym\n instead More information on the shenzhen project page: https://github.com/nomad/shenzhen To make code signing work, follow https://docs.fastlane.tools/codesigning/xcode-project/#\n\n\n\n\n\n\n\n\n\n\nipa\n\n\n\n\n\n\n\n\n\n\n\n\nSupported platforms\n\n\nios\n\n\n\n\n\n\nAuthor\n\n\n@joshdholtz\n\n\n\n\n\n\n\n\n\n\n1 Example\n\n\nipa(\n  workspace: \nMyApp.xcworkspace\n,\n  configuration: \nDebug\n,\n  scheme: \nMyApp\n,\n  # (optionals)\n  clean: true, # This means \nDo Clean\n. Cleans project before building (the default if not specified).\n  destination: \npath/to/dir\n,      # Destination directory. Defaults to current directory.\n  ipa: \nmy-app.ipa\n,     # specify the name of the .ipa file to generate (including file extension)\n  xcargs: \nMY_ADHOC=0\n,  # pass additional arguments to xcodebuild when building the app.\n  embed: \nmy.mobileprovision\n,     # Sign .ipa file with .mobileprovision\n  identity: \nMyIdentity\n,# Identity to be used along with --embed\n  sdk: \n10.0\n, # use SDK as the name or path of the base SDK when building the project.\n  archive: true# this means \nDo Archive\n. Archive project after building (the default if not specified).\n)\n\n\n\n\n\n\n\n\nParameters\n\n\n\n\n\n\n\n\nKey\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nworkspace\n\n\nWORKSPACE Workspace (.xcworkspace) file to use to build app (automatically detected in current directory)\n\n\n\n\n\n\nproject\n\n\nProject (.xcodeproj) file to use to build app (automatically detected in current directory, overridden by --workspace option, if passed)\n\n\n\n\n\n\nconfiguration\n\n\nConfiguration used to build\n\n\n\n\n\n\nscheme\n\n\nScheme used to build app\n\n\n\n\n\n\nclean\n\n\nClean project before building\n\n\n\n\n\n\narchive\n\n\nArchive project after building\n\n\n\n\n\n\ndestination\n\n\nBuild destination. Defaults to current directory\n\n\n\n\n\n\nembed\n\n\nSign .ipa file with .mobileprovision\n\n\n\n\n\n\nidentity\n\n\nIdentity to be used along with --embed\n\n\n\n\n\n\nsdk\n\n\nUse SDK as the name or path of the base SDK when building the project\n\n\n\n\n\n\nipa\n\n\nSpecify the name of the .ipa file to generate (including file extension)\n\n\n\n\n\n\nxcconfig\n\n\nUse an extra XCCONFIG file to build the app\n\n\n\n\n\n\nxcargs\n\n\nPass additional arguments to xcodebuild when building the app. Be sure to quote multiple args\n\n\n\n\n\n\n\n\n\n\nxcode_install\n\n\nMake sure a certain version of Xcode is installed\n\n\n\n\nMakes sure a specific version of Xcode is installed. If that's not the case, it will automatically be downloaded by the \nxcode_install\n gem. This will make sure to use the correct Xcode for later actions.\n\n\n\n\n\n\n\n\n\n\nxcode_install\n\n\n\n\n\n\n\n\n\n\n\n\nSupported platforms\n\n\nios, mac\n\n\n\n\n\n\nAuthor\n\n\n@Krausefx\n\n\n\n\n\n\nReturns\n\n\nThe path to the newly installed Xcode version\n\n\n\n\n\n\n\n\n\n\n1 Example\n\n\nxcode_install(version: \n7.1\n)\n\n\n\n\n\n\n\n\nParameters\n\n\n\n\n\n\n\n\nKey\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nversion\n\n\nThe version number of the version of Xcode to install\n\n\n\n\n\n\nusername\n\n\nYour Apple ID Username\n\n\n\n\n\n\nteam_id\n\n\nThe ID of your team if you're in multiple teams\n\n\n\n\n\n\n\n\n\n\nadb\n\n\nRun ADB Actions\n\n\n\n\nsee adb --help for more details\n\n\n\n\n\n\n\n\n\n\nadb\n\n\n\n\n\n\n\n\n\n\n\n\nSupported platforms\n\n\nandroid\n\n\n\n\n\n\nAuthor\n\n\n@hjanuschka\n\n\n\n\n\n\nReturns\n\n\nThe output of the adb command\n\n\n\n\n\n\n\n\n\n\n1 Example\n\n\nadb(\n  command: \nshell ls\n\n)\n\n\n\n\n\n\n\n\nParameters\n\n\n\n\n\n\n\n\nKey\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nserial\n\n\nAndroid serial, which device should be used for this command\n\n\n\n\n\n\ncommand\n\n\nAll commands you want to pass to the adb command, e.g. \nkill-server\n\n\n\n\n\n\nadb_path\n\n\nThe path to your \nadb\n binary\n\n\n\n\n\n\n\n\n\n\nensure_xcode_version\n\n\nEnsure the selected Xcode version with xcode-select matches a value\n\n\n\n\nIf building your app requires a specific version of Xcode, you can invoke this command before using gym.\n        For example, to ensure that a beta version is not accidentally selected to build, which would make uploading to TestFlight fail.\n\n\n\n\n\n\n\n\n\n\nensure_xcode_version\n\n\n\n\n\n\n\n\n\n\n\n\nSupported platforms\n\n\nios, mac\n\n\n\n\n\n\nAuthor\n\n\n@JaviSoto\n\n\n\n\n\n\n\n\n\n\n1 Example\n\n\nensure_xcode_version(version: \n7.2\n)\n\n\n\n\n\n\n\n\nParameters\n\n\n\n\n\n\n\n\nKey\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nversion\n\n\nXcode version to verify that is selected\n\n\n\n\n\n\n\n\n\n\nxcversion\n\n\nSelect an Xcode to use by version specifier\n\n\n\n\nFinds and selects a version of an installed Xcode that best matches the provided \nGem::Version\n requirement specifier\n\n\n\n\n\n\n\n\n\n\nxcversion\n\n\n\n\n\n\n\n\n\n\n\n\nSupported platforms\n\n\nios, mac\n\n\n\n\n\n\nAuthor\n\n\n@oysta\n\n\n\n\n\n\n\n\n\n\n2 Examples\n\n\nxcversion version: \n7.1\n # Selects Xcode 7.1.0\n\n\n\n\nxcversion version: \n~\n 7.1.0\n # Selects the latest installed version from the 7.1.x set\n\n\n\n\n\n\n\n\nParameters\n\n\n\n\n\n\n\n\nKey\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nversion\n\n\nThe version of Xcode to select specified as a Gem::Version requirement string (e.g. '~\n 7.1.0')\n\n\n\n\n\n\n\n\n\n\nclean_cocoapods_cache\n\n\nRemove the cache for pods\n\n\n\n\n\n\n\n\nclean_cocoapods_cache\n\n\n\n\n\n\n\n\n\n\n\n\nSupported platforms\n\n\nios, mac\n\n\n\n\n\n\nAuthor\n\n\n@alexmx\n\n\n\n\n\n\n\n\n\n\n2 Examples\n\n\nclean_cocoapods_cache\n\n\n\n\nclean_cocoapods_cache(name: \nCACHED_POD\n)\n\n\n\n\n\n\n\n\nParameters\n\n\n\n\n\n\n\n\nKey\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nname\n\n\nPod name to be removed from cache\n\n\n\n\n\n\n\n\n\n\nverify_xcode\n\n\nVerifies that the Xcode installation is properly signed by Apple\n\n\n\n\nThis action was implemented after the recent Xcode attack to make sure\nyou're not using a hacked Xcode installation.\nhttp://researchcenter.paloaltonetworks.com/2015/09/novel-malware-xcodeghost-modifies-xcode-infects-apple-ios-apps-and-hits-app-store/\n\n\n\n\n\n\n\n\n\n\nverify_xcode\n\n\n\n\n\n\n\n\n\n\n\n\nSupported platforms\n\n\nios, mac\n\n\n\n\n\n\nAuthor\n\n\n@KrauseFx\n\n\n\n\n\n\n\n\n\n\n2 Examples\n\n\nverify_xcode\n\n\n\n\nverify_xcode(xcode_path: \n/Applications/Xcode.app\n)\n\n\n\n\n\n\n\n\nParameters\n\n\n\n\n\n\n\n\nKey\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nxcode_path\n\n\nThe path to the Xcode installation to test\n\n\n\n\n\n\n\n\n\n\nverify_pod_keys\n\n\nVerifies all keys referenced from the Podfile are non-empty\n\n\n\n\nRuns a check against all keys specified in your Podfile to make sure they're more than a single character long. This is to ensure you don't deploy with stubbed keys.\n\n\n\n\n\n\n\n\n\n\nverify_pod_keys\n\n\n\n\n\n\n\n\n\n\n\n\nSupported platforms\n\n\nios, mac\n\n\n\n\n\n\nAuthor\n\n\n@ashfurrow\n\n\n\n\n\n\n\n\n\n\n1 Example\n\n\nverify_pod_keys\n\n\n\n\n\n\nxctest\n\n\nRuns tests on the given simulator\n\n\n\n\n\n\n\n\nxctest\n\n\n\n\n\n\n\n\n\n\n\n\nSupported platforms\n\n\nios, mac\n\n\n\n\n\n\nAuthor\n\n\n@dtrenz\n\n\n\n\n\n\n\n\n\n\n1 Example\n\n\nxctest(\n  destination: \nname=iPhone 7s,OS=10.0\n\n)\n\n\n\n\n\n\nxcclean\n\n\nCleans the project using \nxcodebuild\n\n\n\n\n\n\n\n\nxcclean\n\n\n\n\n\n\n\n\n\n\n\n\nSupported platforms\n\n\nios, mac\n\n\n\n\n\n\nAuthor\n\n\n@dtrenz\n\n\n\n\n\n\n\n\n\n\n1 Example\n\n\nxcclean\n\n\n\n\n\n\nxcexport\n\n\nExports the project using \nxcodebuild\n\n\n\n\n\n\n\n\nxcexport\n\n\n\n\n\n\n\n\n\n\n\n\nSupported platforms\n\n\nios, mac\n\n\n\n\n\n\nAuthor\n\n\n@dtrenz\n\n\n\n\n\n\n\n\n\n\n1 Example\n\n\nxcexport\n\n\n\n\n\n\nxcarchive\n\n\nArchives the project using \nxcodebuild\n\n\n\n\n\n\n\n\nxcarchive\n\n\n\n\n\n\n\n\n\n\n\n\nSupported platforms\n\n\nios, mac\n\n\n\n\n\n\nAuthor\n\n\n@dtrenz\n\n\n\n\n\n\n\n\n\n\n1 Example\n\n\nxcarchive\n\n\n\n\n\n\nxcbuild\n\n\nBuilds the project using \nxcodebuild\n\n\n\n\n\n\n\n\nxcbuild\n\n\n\n\n\n\n\n\n\n\n\n\nSupported platforms\n\n\nios, mac\n\n\n\n\n\n\nAuthor\n\n\n@dtrenz\n\n\n\n\n\n\n\n\n\n\n1 Example\n\n\nxcbuild\n\n\n\n\n\n\nScreenshots\n\n\nsnapshot\n\n\nGenerate new localised screenshots on multiple devices\n\n\n\n\n\n\n\n\nsnapshot\n\n\n\n\n\n\n\n\n\n\n\n\nSupported platforms\n\n\nios\n\n\n\n\n\n\nAuthor\n\n\n@KrauseFx\n\n\n\n\n\n\n\n\n\n\n2 Examples\n\n\nsnapshot\n\n\n\n\nsnapshot(\n  skip_open_summary: true,\n  clean: true\n)\n\n\n\n\n\n\n\n\nParameters\n\n\n\n\n\n\n\n\nKey\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nworkspace\n\n\nPath the workspace file\n\n\n\n\n\n\nproject\n\n\nPath the project file\n\n\n\n\n\n\ndevices\n\n\nA list of devices you want to take the screenshots from\n\n\n\n\n\n\nlanguages\n\n\nA list of languages which should be used\n\n\n\n\n\n\nlaunch_arguments\n\n\nA list of launch arguments which should be used\n\n\n\n\n\n\noutput_directory\n\n\nThe directory where to store the screenshots\n\n\n\n\n\n\nios_version\n\n\nBy default, the latest version should be used automatically. If you want to change it, do it here\n\n\n\n\n\n\nskip_open_summary\n\n\nDon't open the HTML summary after running \nsnapshot\n\n\n\n\n\n\nclear_previous_screenshots\n\n\nEnabling this option will automatically clear previously generated screenshots before running snapshot\n\n\n\n\n\n\nreinstall_app\n\n\nEnabling this option will automatically uninstall the application before running it\n\n\n\n\n\n\nerase_simulator\n\n\nEnabling this option will automatically erase the simulator before running the application\n\n\n\n\n\n\nlocalize_simulator\n\n\nEnabling this option will configure the Simulator's system language\n\n\n\n\n\n\napp_identifier\n\n\nThe bundle identifier of the app to uninstall (only needed when enabling reinstall_app)\n\n\n\n\n\n\nadd_photos\n\n\nA list of photos that should be added to the simulator before running the application\n\n\n\n\n\n\nadd_videos\n\n\nA list of videos that should be added to the simulator before running the application\n\n\n\n\n\n\nbuildlog_path\n\n\nThe directory where to store the build log\n\n\n\n\n\n\nclean\n\n\nShould the project be cleaned before building it?\n\n\n\n\n\n\nconfiguration\n\n\nThe configuration to use when building the app. Defaults to 'Release'\n\n\n\n\n\n\nxcpretty_args\n\n\nAdditional xcpretty arguments\n\n\n\n\n\n\nsdk\n\n\nThe SDK that should be used for building the application\n\n\n\n\n\n\nscheme\n\n\nThe scheme you want to use, this must be the scheme for the UI Tests\n\n\n\n\n\n\nnumber_of_retries\n\n\nThe number of times a test can fail before snapshot should stop retrying\n\n\n\n\n\n\nstop_after_first_error\n\n\nShould snapshot stop immediately after the tests completely failed on one device?\n\n\n\n\n\n\nderived_data_path\n\n\nThe directory where build products and other derived data will go\n\n\n\n\n\n\n\n\n\n\nframeit\n\n\nAdds device frames around the screenshots using frameit\n\n\n\n\nUse \nframeit\n to prepare perfect screenshots for the App Store, your website, QA\nor emails. You can add background and titles to the framed screenshots as well.\n\n\n\n\n\n\n\n\n\n\nframeit\n\n\n\n\n\n\n\n\n\n\n\n\nSupported platforms\n\n\nios, mac\n\n\n\n\n\n\nAuthor\n\n\n@KrauseFx\n\n\n\n\n\n\n\n\n\n\n2 Examples\n\n\nframeit\n\n\n\n\nframeit :silver\n\n\n\n\n\n\n\n\nParameters\n\n\n\n\n\n\n\n\nKey\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nwhite\n\n\nUse white device frames\n\n\n\n\n\n\nsilver\n\n\nUse white device frames. Alias for :white\n\n\n\n\n\n\nforce_device_type\n\n\nForces a given device type, useful for Mac screenshots, as their sizes vary\n\n\n\n\n\n\nuse_legacy_iphone5s\n\n\nuse iPhone 5s instead of iPhone SE frames\n\n\n\n\n\n\npath\n\n\nThe path to the directory containing the screenshots\n\n\n\n\n\n\n\n\n\n\nscreengrab\n\n\nAutomated localized screenshots of your Android app on every device\n\n\n\n\n\n\n\n\nscreengrab\n\n\n\n\n\n\n\n\n\n\n\n\nSupported platforms\n\n\nandroid\n\n\n\n\n\n\nAuthor\n\n\n@asfalcone, @i2amsam, @mfurtak\n\n\n\n\n\n\n\n\n\n\n2 Examples\n\n\nscreengrab\n\n\n\n\nscreengrab(\n  locales: [\nen-US\n, \nfr-FR\n, \nja-JP\n],\n  clear_previous_screenshots: true,\n  app_apk_path: \nbuild/outputs/apk/example-debug.apk\n,\n  tests_apk_path: \nbuild/outputs/apk/example-debug-androidTest-unaligned.apk\n\n)\n\n\n\n\n\n\n\n\nParameters\n\n\n\n\n\n\n\n\nKey\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nandroid_home\n\n\nPath to the root of your Android SDK installation, e.g. ~/tools/android-sdk-macosx\n\n\n\n\n\n\nbuild_tools_version\n\n\nThe Android build tools version to use, e.g. '23.0.2'\n\n\n\n\n\n\nlocales\n\n\nA list of locales which should be used\n\n\n\n\n\n\nclear_previous_screenshots\n\n\nEnabling this option will automatically clear previously generated screenshots before running screengrab\n\n\n\n\n\n\noutput_directory\n\n\nThe directory where to store the screenshots\n\n\n\n\n\n\nskip_open_summary\n\n\nDon't open the summary after running \nscreengrab\n\n\n\n\n\n\napp_package_name\n\n\nThe package name of the app under test (e.g. com.yourcompany.yourapp)\n\n\n\n\n\n\ntests_package_name\n\n\nThe package name of the tests bundle (e.g. com.yourcompany.yourapp.test)\n\n\n\n\n\n\nuse_tests_in_packages\n\n\nOnly run tests in these Java packages\n\n\n\n\n\n\nuse_tests_in_classes\n\n\nOnly run tests in these Java classes\n\n\n\n\n\n\ntest_instrumentation_runner\n\n\nThe fully qualified class name of your test instrumentation runner\n\n\n\n\n\n\nending_locale\n\n\nReturn the device to this locale after running tests\n\n\n\n\n\n\napp_apk_path\n\n\nThe path to the APK for the app under test\n\n\n\n\n\n\ntests_apk_path\n\n\nThe path to the APK for the the tests bundle\n\n\n\n\n\n\nspecific_device\n\n\nUse the device or emulator with the given serial number or qualifier\n\n\n\n\n\n\ndevice_type\n\n\nType of device used for screenshots. Matches Google Play Types (phone, sevenInch, tenInch, tv, wear)\n\n\n\n\n\n\n\n\n\n\nProject\n\n\nincrement_build_number\n\n\nIncrement the build number of your project\n\n\n\n\n\n\n\n\nincrement_build_number\n\n\n\n\n\n\n\n\n\n\n\n\nSupported platforms\n\n\nios, mac\n\n\n\n\n\n\nAuthor\n\n\n@KrauseFx\n\n\n\n\n\n\nReturns\n\n\nThe new build number\n\n\n\n\n\n\n\n\n\n\n4 Examples\n\n\nincrement_build_number # automatically increment by one\n\n\n\n\nincrement_build_number(\n  build_number: \n75\n # set a specific number\n)\n\n\n\n\nincrement_build_number(\n  build_number: 75, # specify specific build number (optional, omitting it increments by one)\n  xcodeproj: \n./path/to/MyApp.xcodeproj\n # (optional, you must specify the path to your main Xcode project if it is not in the project root directory)\n)\n\n\n\n\nbuild_number = increment_build_number\n\n\n\n\n\n\n\n\nParameters\n\n\n\n\n\n\n\n\nKey\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nbuild_number\n\n\nChange to a specific version\n\n\n\n\n\n\nxcodeproj\n\n\noptional, you must specify the path to your main Xcode project if it is not in the project root directory\n\n\n\n\n\n\n\n\n\n\nset_info_plist_value\n\n\nSets value to Info.plist of your project as native Ruby data structures\n\n\n\n\n\n\n\n\nset_info_plist_value\n\n\n\n\n\n\n\n\n\n\n\n\nSupported platforms\n\n\nios, mac\n\n\n\n\n\n\nAuthor\n\n\n@kohtenko\n\n\n\n\n\n\n\n\n\n\n1 Example\n\n\nset_info_plist_value(path: \n./Info.plist\n, key: \nCFBundleIdentifier\n, value: \ncom.krausefx.app.beta\n)\n\n\n\n\n\n\n\n\nParameters\n\n\n\n\n\n\n\n\nKey\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nkey\n\n\nName of key in plist\n\n\n\n\n\n\nvalue\n\n\nValue to setup\n\n\n\n\n\n\npath\n\n\nPath to plist file you want to update\n\n\n\n\n\n\n\n\n\n\nget_version_number\n\n\nGet the version number of your project\n\n\n\n\nThis action will return the current version number set on your project. You first have to set up your Xcode project, if you haven't done it already: https://developer.apple.com/library/ios/qa/qa1827/_index.html\n\n\n\n\n\n\n\n\n\n\nget_version_number\n\n\n\n\n\n\n\n\n\n\n\n\nSupported platforms\n\n\nios, mac\n\n\n\n\n\n\nAuthor\n\n\n@Liquidsoul\n\n\n\n\n\n\n\n\n\n\n1 Example\n\n\nversion = get_version_number(xcodeproj: \nProject.xcodeproj\n)\n\n\n\n\n\n\n\n\nParameters\n\n\n\n\n\n\n\n\nKey\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nxcodeproj\n\n\noptional, you must specify the path to your main Xcode project if it is not in the project root directory\n\n\n\n\n\n\nscheme\n\n\n[DEPRECATED!] true - Specify a specific scheme if you have multiple per project, optional.\n\n\n\n\n\n\nThis parameter is deprecated and will be removed in a future release.\n\n\n\n\n\n\n\n\nPlease use the 'target' parameter instead. The behavior of this parameter\n\n\n\n\n\n\n\n\nis currently undefined if your scheme name doesn't match your target name\n\n\n\n\n\n\n\n\ntarget\n\n\nSpecify a specific target if you have multiple per project, optional\n\n\n\n\n\n\n\n\n\n\nupdate_info_plist\n\n\nUpdate a Info.plist file with bundle identifier and display name\n\n\n\n\nThis action allows you to modify your \nInfo.plist\n file before building. This may be useful if you want a separate build for alpha, beta or nightly builds, but don't want a separate target.\n\n\n\n\n\n\n\n\n\n\nupdate_info_plist\n\n\n\n\n\n\n\n\n\n\n\n\nSupported platforms\n\n\nios\n\n\n\n\n\n\nAuthor\n\n\n@tobiasstrebitzer\n\n\n\n\n\n\n\n\n\n\n5 Examples\n\n\nupdate_info_plist( # update app identifier string\n  plist_path: \npath/to/Info.plist\n,\n  app_identifier: \ncom.example.newappidentifier\n\n)\n\n\n\n\nupdate_info_plist( # Change the Display Name of your app\n  plist_path: \npath/to/Info.plist\n,\n  display_name: \nMyApp-Beta\n\n)\n\n\n\n\nupdate_info_plist( # Target a specific `xcodeproj` rather than finding the first available one\n  xcodeproj: \npath/to/Example.proj\n,\n  plist_path: \npath/to/Info.plist\n,\n  display_name: \nMyApp-Beta\n\n)\n\n\n\n\nupdate_info_plist( # Advanced processing: find URL scheme for particular key and replace value\n  xcodeproj: \npath/to/Example.proj\n,\n  plist_path: \npath/to/Info.plist\n,\n  block: lambda { |plist|\n    urlScheme = plist[\nCFBundleURLTypes\n].find{|scheme| scheme[\nCFBundleURLName\n] == \ncom.acme.default-url-handler\n}\n    urlScheme[:CFBundleURLSchemes] = [\nacme-production\n]\n  }\n)\n\n\n\n\nzip(\n  path: \nMyApp.app\n,\n  output_path: \nLatest.app.zip\n\n)\n\n\n\n\n\n\n\n\nParameters\n\n\n\n\n\n\n\n\nKey\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nxcodeproj\n\n\nPath to your Xcode project\n\n\n\n\n\n\nplist_path\n\n\nPath to info plist\n\n\n\n\n\n\nscheme\n\n\nScheme of info plist\n\n\n\n\n\n\napp_identifier\n\n\nThe App Identifier of your app\n\n\n\n\n\n\ndisplay_name\n\n\nThe Display Name of your app\n\n\n\n\n\n\nblock\n\n\nA block to process plist with custom logic\n\n\n\n\n\n\n\n\n\n\nincrement_version_number\n\n\nIncrement the version number of your project\n\n\n\n\nThis action will increment the version number. \nYou first have to set up your Xcode project, if you haven't done it already:\nhttps://developer.apple.com/library/ios/qa/qa1827/_index.html\n\n\n\n\n\n\n\n\n\n\nincrement_version_number\n\n\n\n\n\n\n\n\n\n\n\n\nSupported platforms\n\n\nios, mac\n\n\n\n\n\n\nAuthor\n\n\n@serluca\n\n\n\n\n\n\nReturns\n\n\nThe new version number\n\n\n\n\n\n\n\n\n\n\n7 Examples\n\n\nincrement_version_number # Automatically increment patch version number\n\n\n\n\nincrement_version_number(\n  bump_type: \npatch\n # Automatically increment patch version number\n)\n\n\n\n\nincrement_version_number(\n  bump_type: \nminor\n # Automatically increment minor version number\n)\n\n\n\n\nincrement_version_number(\n  bump_type: \nmajor\n # Automatically increment major version number\n)\n\n\n\n\nincrement_version_number(\n  version_number: \n2.1.1\n # Set a specific version number\n)\n\n\n\n\nincrement_version_number(\n  version_number: \n2.1.1\n,      # specify specific version number (optional, omitting it increments patch version number)\n  xcodeproj: \n./path/to/MyApp.xcodeproj\n  # (optional, you must specify the path to your main Xcode project if it is not in the project root directory)\n)\n\n\n\n\nversion = increment_version_number\n\n\n\n\n\n\n\n\nParameters\n\n\n\n\n\n\n\n\nKey\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nbump_type\n\n\nThe type of this version bump. Available: patch, minor, major\n\n\n\n\n\n\nversion_number\n\n\nChange to a specific version. This will replace the bump type value\n\n\n\n\n\n\nxcodeproj\n\n\noptional, you must specify the path to your main Xcode project if it is not in the project root directory\n\n\n\n\n\n\n\n\n\n\nget_build_number\n\n\nGet the build number of your project\n\n\n\n\nThis action will return the current build number set on your project. You first have to set up your Xcode project, if you haven't done it already: https://developer.apple.com/library/ios/qa/qa1827/_index.html\n\n\n\n\n\n\n\n\n\n\nget_build_number\n\n\n\n\n\n\n\n\n\n\n\n\nSupported platforms\n\n\nios, mac\n\n\n\n\n\n\nAuthor\n\n\n@Liquidsoul\n\n\n\n\n\n\n\n\n\n\n1 Example\n\n\nbuild_number = get_build_number(xcodeproj: \nProject.xcodeproj\n)\n\n\n\n\n\n\n\n\nParameters\n\n\n\n\n\n\n\n\nKey\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nxcodeproj\n\n\noptional, you must specify the path to your main Xcode project if it is not in the project root directory\n\n\n\n\n\n\n\n\n\n\nget_info_plist_value\n\n\nReturns value from Info.plist of your project as native Ruby data structures\n\n\n\n\nGet a value from a plist file, which can be used to fetch the app identifier and more information about your app\n\n\n\n\n\n\n\n\n\n\nget_info_plist_value\n\n\n\n\n\n\n\n\n\n\n\n\nSupported platforms\n\n\nios, mac\n\n\n\n\n\n\nAuthor\n\n\n@kohtenko\n\n\n\n\n\n\n\n\n\n\n1 Example\n\n\nidentifier = get_info_plist_value(path: \n./Info.plist\n, key: \nCFBundleIdentifier\n)\n\n\n\n\n\n\n\n\nParameters\n\n\n\n\n\n\n\n\nKey\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nkey\n\n\nName of parameter\n\n\n\n\n\n\npath\n\n\nPath to plist file you want to read\n\n\n\n\n\n\n\n\n\n\nupdate_app_identifier\n\n\nUpdate the project's bundle identifier\n\n\n\n\nUpdate an app identifier by either setting \nCFBundleIdentifier\n or \nPRODUCT_BUNDLE_IDENTIFIER\n, depending on which is already in use.\n\n\n\n\n\n\n\n\n\n\nupdate_app_identifier\n\n\n\n\n\n\n\n\n\n\n\n\nSupported platforms\n\n\nios\n\n\n\n\n\n\nAuthor\n\n\n@squarefrog, @tobiasstrebitzer\n\n\n\n\n\n\n\n\n\n\n1 Example\n\n\nupdate_app_identifier(\n  xcodeproj: \nExample.xcodeproj\n, # Optional path to xcodeproj, will use the first .xcodeproj if not set\n  plist_path: \nExample/Info.plist\n, # Path to info plist file, relative to xcodeproj\n  app_identifier: \ncom.test.example\n # The App Identifier\n)\n\n\n\n\n\n\n\n\nParameters\n\n\n\n\n\n\n\n\nKey\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nxcodeproj\n\n\nPath to your Xcode project\n\n\n\n\n\n\nplist_path\n\n\nPath to info plist, relative to your Xcode project\n\n\n\n\n\n\napp_identifier\n\n\nThe app Identifier you want to set\n\n\n\n\n\n\n\n\n\n\nupdate_project_team\n\n\nUpdate Xcode Development Team ID\n\n\n\n\nThis action update the Developer Team ID of your Xcode Project.\n\n\n\n\n\n\n\n\n\n\nupdate_project_team\n\n\n\n\n\n\n\n\n\n\n\n\nSupported platforms\n\n\nios, mac\n\n\n\n\n\n\nAuthor\n\n\n@lgaches\n\n\n\n\n\n\n\n\n\n\n1 Example\n\n\nupdate_project_team(\n  path: \nExample.xcodeproj\n,\n  teamid: \nA3ZZVJ7CNY\n\n)\n\n\n\n\n\n\n\n\nParameters\n\n\n\n\n\n\n\n\nKey\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\npath\n\n\nPath to your Xcode project\n\n\n\n\n\n\nteamid\n\n\nThe Team ID  you want to use\n\n\n\n\n\n\n\n\n\n\nupdate_app_group_identifiers\n\n\nThis action changes the app group identifiers in the entitlements file\n\n\n\n\nUpdates the App Group Identifiers in the given Entitlements file, so you can have app groups for the app store build and app groups for an enterprise build.\n\n\n\n\n\n\n\n\n\n\nupdate_app_group_identifiers\n\n\n\n\n\n\n\n\n\n\n\n\nSupported platforms\n\n\nios\n\n\n\n\n\n\nAuthor\n\n\n@mathiasAichinger\n\n\n\n\n\n\n\n\n\n\n1 Example\n\n\nupdate_app_group_identifiers(\n  entitlements_file: \n/path/to/entitlements_file.entitlements\n,\n  app_group_identifiers: [\ngroup.your.app.group.identifier\n]\n)\n\n\n\n\n\n\n\n\nParameters\n\n\n\n\n\n\n\n\nKey\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nentitlements_file\n\n\nThe path to the entitlement file which contains the app group identifiers\n\n\n\n\n\n\napp_group_identifiers\n\n\nAn Array of unique identifiers for the app groups. Eg. ['group.com.test.testapp']\n\n\n\n\n\n\n\n\n\n\nrecreate_schemes\n\n\nRecreate not shared Xcode project schemes\n\n\n\n\n\n\n\n\nrecreate_schemes\n\n\n\n\n\n\n\n\n\n\n\n\nSupported platforms\n\n\nios, mac\n\n\n\n\n\n\nAuthor\n\n\n@jerolimov\n\n\n\n\n\n\n\n\n\n\n1 Example\n\n\nrecreate_schemes(project: \n./path/to/MyApp.xcodeproj\n)\n\n\n\n\n\n\n\n\nParameters\n\n\n\n\n\n\n\n\nKey\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nproject\n\n\nThe Xcode project\n\n\n\n\n\n\n\n\n\n\nget_ipa_info_plist_value\n\n\nReturns a value from Info.plist inside a .ipa file\n\n\n\n\nThis is useful for introspecting Info.plist files for .ipa files that have already been built.\n\n\n\n\n\n\n\n\n\n\nget_ipa_info_plist_value\n\n\n\n\n\n\n\n\n\n\n\n\nSupported platforms\n\n\nios, mac\n\n\n\n\n\n\nAuthor\n\n\n@johnboiles\n\n\n\n\n\n\nReturns\n\n\nReturns the value in the .ipa's Info.plist corresponding to the passed in Key\n\n\n\n\n\n\n\n\n\n\n1 Example\n\n\nget_ipa_info_plist_value(ipa: \npath.ipa\n, key: \nKEY_YOU_READ\n)\n\n\n\n\n\n\n\n\nParameters\n\n\n\n\n\n\n\n\nKey\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nkey\n\n\nName of parameter\n\n\n\n\n\n\nipa\n\n\nPath to IPA\n\n\n\n\n\n\n\n\n\n\nset_build_number_repository\n\n\nSet the build number from the current repository\n\n\n\n\nThis action will set the \nbuild number\n according to what the SCM HEAD reports.\nCurrently supported SCMs are svn (uses root revision), git-svn (uses svn revision) and git (uses short hash) and mercurial (uses short hash or revision number).\nThere is an option, \n:use_hg_revision_number\n, which allows to use mercurial revision number instead of hash\n\n\n\n\n\n\n\n\n\n\nset_build_number_repository\n\n\n\n\n\n\n\n\n\n\n\n\nSupported platforms\n\n\nios, mac\n\n\n\n\n\n\nAuthor\n\n\n@pbrooks, @armadsen\n\n\n\n\n\n\n\n\n\n\n1 Example\n\n\nset_build_number_repository\n\n\n\n\n\n\n\n\nParameters\n\n\n\n\n\n\n\n\nKey\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nuse_hg_revision_number\n\n\nUse hg revision number instead of hash (ignored for non-hg repos)\n\n\n\n\n\n\n\n\n\n\nupdate_url_schemes\n\n\nUpdates the URL schemes in the given Info.plist\n\n\n\n\nThis action allows you to update the URL schemes of the app before building it.\nFor example, you can use this to set a different url scheme for the alpha\nor beta version of the app.\n\n\n\n\n\n\n\n\n\n\nupdate_url_schemes\n\n\n\n\n\n\n\n\n\n\n\n\nSupported platforms\n\n\nios, mac\n\n\n\n\n\n\nAuthor\n\n\n@kmikael\n\n\n\n\n\n\n\n\n\n\n1 Example\n\n\nupdate_url_schemes(\n  path: \npath/to/Info.plist\n,\n  url_schemes: [\ncom.myapp\n]\n)\n\n\n\n\n\n\n\n\nParameters\n\n\n\n\n\n\n\n\nKey\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\npath\n\n\nThe Plist file's path\n\n\n\n\n\n\nurl_schemes\n\n\nThe new URL schemes\n\n\n\n\n\n\n\n\n\n\nset_pod_key\n\n\nSets a value for a key with cocoapods-keys\n\n\n\n\nAdds a key to \ncocoapods-keys\n\n\n\n\n\n\n\n\n\n\nset_pod_key\n\n\n\n\n\n\n\n\n\n\n\n\nSupported platforms\n\n\nios, mac\n\n\n\n\n\n\nAuthor\n\n\n@marcelofabri\n\n\n\n\n\n\n\n\n\n\n1 Example\n\n\nset_pod_key(\n  key: \nAPIToken\n,\n  value: \n1234\n,\n  project: \nMyProject\n\n)\n\n\n\n\n\n\n\n\nParameters\n\n\n\n\n\n\n\n\nKey\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nuse_bundle_exec\n\n\nUse bundle exec when there is a Gemfile presented\n\n\n\n\n\n\nkey\n\n\nThe key to be saved with cocoapods-keys\n\n\n\n\n\n\nvalue\n\n\nThe value to be saved with cocoapods-keys\n\n\n\n\n\n\nproject\n\n\nThe project name\n\n\n\n\n\n\n\n\n\n\nCode Signing\n\n\nsigh\n\n\nGenerates a provisioning profile. Stores the profile in the current folder\n\n\n\n\nNote\n: It is recommended to use \nmatch\n according to the \ncodesigning.guide\n for generating and maintaining your provisioning profiles. Use \nsigh\n directly only if you want full control over what's going on and know more about codesigning.\n\n\n\n\n\n\n\n\n\n\nsigh\n\n\n\n\n\n\n\n\n\n\n\n\nSupported platforms\n\n\nios\n\n\n\n\n\n\nAuthor\n\n\n@KrauseFx\n\n\n\n\n\n\nReturns\n\n\nThe UDID of the profile sigh just fetched/generated\n\n\n\n\n\n\n\n\n\n\n2 Examples\n\n\nsigh\n\n\n\n\nsigh(\n  adhoc: true,\n  force: true,\n  filename: \nmyFile.mobileprovision\n\n)\n\n\n\n\n\n\n\n\nParameters\n\n\n\n\n\n\n\n\nKey\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nadhoc\n\n\nSetting this flag will generate AdHoc profiles instead of App Store Profiles\n\n\n\n\n\n\ndevelopment\n\n\nRenew the development certificate instead of the production one\n\n\n\n\n\n\nskip_install\n\n\nBy default, the certificate will be added on your local machine. Setting this flag will skip this action\n\n\n\n\n\n\nforce\n\n\nRenew provisioning profiles regardless of its state - to automatically add all devices for ad hoc profiles\n\n\n\n\n\n\napp_identifier\n\n\nThe bundle identifier of your app\n\n\n\n\n\n\nusername\n\n\nYour Apple ID Username\n\n\n\n\n\n\nteam_id\n\n\nThe ID of your team if you're in multiple teams\n\n\n\n\n\n\nteam_name\n\n\nThe name of your team if you're in multiple teams\n\n\n\n\n\n\nprovisioning_name\n\n\nThe name of the profile that is used on the Apple Developer Portal\n\n\n\n\n\n\nignore_profiles_with_different_name\n\n\nUse in combination with :provisioning_name - when true only profiles matching this exact name will be downloaded\n\n\n\n\n\n\noutput_path\n\n\nDirectory in which the profile should be stored\n\n\n\n\n\n\ncert_id\n\n\nThe ID of the code signing certificate to use (e.g. 78ADL6LVAA)\n\n\n\n\n\n\ncert_owner_name\n\n\nThe certificate name to use for new profiles, or to renew with. (e.g. \"Felix Krause\")\n\n\n\n\n\n\nfilename\n\n\nFilename to use for the generated provisioning profile (must include .mobileprovision)\n\n\n\n\n\n\nskip_fetch_profiles\n\n\nSkips the verification of existing profiles which is useful if you have thousands of profiles\n\n\n\n\n\n\nskip_certificate_verification\n\n\nSkips the verification of the certificates for every existing profiles. This will make sure the provisioning profile can be used on the local machine\n\n\n\n\n\n\n\n\n\n\nmatch\n\n\nEasily sync your certificates and profiles across your team using git\n\n\n\n\nMore details https://github.com/fastlane/fastlane/tree/master/match\n\n\n\n\n\n\n\n\n\n\nmatch\n\n\n\n\n\n\n\n\n\n\n\n\nSupported platforms\n\n\nios\n\n\n\n\n\n\nAuthor\n\n\n@KrauseFx\n\n\n\n\n\n\n\n\n\n\n2 Examples\n\n\nmatch(type: \nappstore\n, app_identifier: \ntools.fastlane.app\n)\n\n\n\n\nmatch(type: \ndevelopment\n, readonly: true)\n\n\n\n\n\n\n\n\nParameters\n\n\n\n\n\n\n\n\nKey\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\ngit_url\n\n\nURL to the git repo containing all the certificates\n\n\n\n\n\n\ngit_branch\n\n\nSpecific git branch to use\n\n\n\n\n\n\ntype\n\n\nCreate a development certificate instead of a distribution one\n\n\n\n\n\n\napp_identifier\n\n\nThe bundle identifier of your app\n\n\n\n\n\n\nusername\n\n\nYour Apple ID Username\n\n\n\n\n\n\nkeychain_name\n\n\nKeychain the items should be imported to\n\n\n\n\n\n\nreadonly\n\n\nOnly fetch existing certificates and profiles, don't generate new ones\n\n\n\n\n\n\nteam_id\n\n\nThe ID of your team if you're in multiple teams\n\n\n\n\n\n\nteam_name\n\n\nThe name of your team if you're in multiple teams\n\n\n\n\n\n\nverbose\n\n\nPrint out extra information and all commands\n\n\n\n\n\n\nforce\n\n\nRenew the provisioning profiles every time you run match\n\n\n\n\n\n\nshallow_clone\n\n\nMake a shallow clone of the repository (truncate the history to 1 revision)\n\n\n\n\n\n\nworkspace\n\n\n\n\n\n\n\n\nforce_for_new_devices\n\n\nRenew the provisioning profiles if the device count on the developer portal has changed\n\n\n\n\n\n\nskip_docs\n\n\nSkip generation of a README.md for the created git repository\n\n\n\n\n\n\n\n\n\n\ncert\n\n\nFetch or generate the latest available code signing identity\n\n\n\n\nImportant\n: It is recommended to use \nmatch\n according to the \ncodesigning.guide\n for generating and maintaining your certificates. Use \ncert\n directly only if you want full control over what's going on and know more about codesigning.\nUse this action to download the latest code signing identity\n\n\n\n\n\n\n\n\n\n\ncert\n\n\n\n\n\n\n\n\n\n\n\n\nSupported platforms\n\n\nios\n\n\n\n\n\n\nAuthor\n\n\n@KrauseFx\n\n\n\n\n\n\n\n\n\n\n2 Examples\n\n\ncert\n\n\n\n\ncert(\n  development: true,\n  username: \nuser@email.com\n\n)\n\n\n\n\n\n\n\n\nParameters\n\n\n\n\n\n\n\n\nKey\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\ndevelopment\n\n\nCreate a development certificate instead of a distribution one\n\n\n\n\n\n\nforce\n\n\nCreate a certificate even if an existing certificate exists\n\n\n\n\n\n\nusername\n\n\nYour Apple ID Username\n\n\n\n\n\n\nteam_id\n\n\nThe ID of your team if you're in multiple teams\n\n\n\n\n\n\nteam_name\n\n\nThe name of your team if you're in multiple teams\n\n\n\n\n\n\noutput_path\n\n\nThe path to a directory in which all certificates and private keys should be stored\n\n\n\n\n\n\nkeychain_path\n\n\nPath to a custom keychain\n\n\n\n\n\n\n\n\n\n\nupdate_project_provisioning\n\n\nUpdate projects code signing settings from your provisioning profile\n\n\n\n\nYou should check out the code signing gide before using this action: https://github.com/fastlane/fastlane/tree/master/fastlane/docs/Codesigning\nThis action retrieves a provisioning profile UUID from a provisioning profile (.mobileprovision) to set\nup the xcode projects' code signing settings in \n.xcodeproj/project.pbxproj\nThe \ntarget_filter\n value can be used to only update code signing for specified targets\nThe \nbuild_configuration\n value can be used to only update code signing for specified build configurations of the targets passing through the \ntarget_filter\n\nExample Usage is the WatchKit Extension or WatchKit App, where you need separate provisioning profiles\nExample: `update_project_provisioning(xcodeproj: \"..\", target_filter: \".\nWatchKit App.*\")\n\n\n\n\n\n\n\n\n\n\nupdate_project_provisioning\n\n\n\n\n\n\n\n\n\n\n\n\nSupported platforms\n\n\nios, mac\n\n\n\n\n\n\nAuthor\n\n\n@tobiasstrebitzer, @czechboy0\n\n\n\n\n\n\n\n\n\n\n1 Example\n\n\nupdate_project_provisioning(\n  xcodeproj: \nProject.xcodeproj\n,\n  profile: \n./watch_app_store.mobileprovision\n, # optional if you use sigh\n  target_filter: \n.*WatchKit Extension.*\n, # matches name or type of a target\n  build_configuration: \nRelease\n\n)\n\n\n\n\n\n\n\n\nParameters\n\n\n\n\n\n\n\n\nKey\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nxcodeproj\n\n\nPath to your Xcode project\n\n\n\n\n\n\nprofile\n\n\nPath to provisioning profile (.mobileprovision)\n\n\n\n\n\n\ntarget_filter\n\n\nA filter for the target name. Use a standard regex\n\n\n\n\n\n\nbuild_configuration_filter\n\n\nLegacy option, use 'target_filter' instead\n\n\n\n\n\n\nbuild_configuration\n\n\nA filter for the build configuration name. Use a standard regex. Applied to all configurations if not specified\n\n\n\n\n\n\ncertificate\n\n\nPath to apple root certificate\n\n\n\n\n\n\n\n\n\n\nimport_certificate\n\n\nImport certificate from inputfile into a keychain\n\n\n\n\nImport certificates into the current default keychain. Use \ncreate_keychain\n to create a new keychain.\n\n\n\n\n\n\n\n\n\n\nimport_certificate\n\n\n\n\n\n\n\n\n\n\n\n\nSupported platforms\n\n\nios, android, mac\n\n\n\n\n\n\nAuthor\n\n\n@gin0606\n\n\n\n\n\n\n\n\n\n\n2 Examples\n\n\nimport_certificate(certificate_path: \ncerts/AppleWWDRCA.cer\n)\n\n\n\n\nimport_certificate(\n  certificate_path: \ncerts/dist.p12\n,\n  certificate_password: ENV[\nCERTIFICATE_PASSWORD\n] || \ndefault\n\n)\n\n\n\n\n\n\n\n\nParameters\n\n\n\n\n\n\n\n\nKey\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nkeychain_name\n\n\nKeychain the items should be imported to\n\n\n\n\n\n\ncertificate_path\n\n\nPath to certificate\n\n\n\n\n\n\ncertificate_password\n\n\nCertificate password\n\n\n\n\n\n\nlog_output\n\n\nIf output should be logged to the console\n\n\n\n\n\n\n\n\n\n\nresign\n\n\nCodesign an existing ipa file\n\n\n\n\nYou may provide multiple provisioning profiles if the application contains\nnested applications or app extensions, which need their own provisioning\nprofile. You can do so by passing an array of provisiong profile strings or a\nhash that associates provisioning profile values to bundle identifier keys.\nresign(ipa: \"path\", signing_identity: \"identity\", provisioning_profile: {\n  \"com.example.awesome-app\" =\n \"App.mobileprovision\",\n  \"com.example.awesome-app.app-extension\" =\n \"Extension.mobileprovision\"\n})\n\n\n\n\n\n\n\n\n\n\nresign\n\n\n\n\n\n\n\n\n\n\n\n\nSupported platforms\n\n\nios\n\n\n\n\n\n\nAuthor\n\n\n@lmirosevic\n\n\n\n\n\n\n\n\n\n\n2 Examples\n\n\nresign(\n  ipa: \npath/to/ipa\n, # can omit if using the `ipa` action\n  signing_identity: \niPhone Distribution: Luka Mirosevic (0123456789)\n,\n  provisioning_profile: \npath/to/profile\n, # can omit if using the _sigh_ action\n)\n\n\n\n\nresign(\n  ipa: \npath/to/ipa\n, # can omit if using the `ipa` action\n  signing_identity: \niPhone Distribution: Luka Mirosevic (0123456789)\n,\n  provisioning_profile: {\n    \ncom.example.awesome-app\n =\n \npath/to/profile\n,\n    \ncom.example.awesome-app.app-extension\n =\n \npath/to/app-extension/profile\n\n  }\n)\n\n\n\n\n\n\n\n\nParameters\n\n\n\n\n\n\n\n\nKey\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nipa\n\n\nPath to the ipa file to resign. Optional if you use the \ngym\n or \nxcodebuild\n action\n\n\n\n\n\n\nsigning_identity\n\n\nCode signing identity to use. e.g. \"iPhone Distribution: Luka Mirosevic (0123456789)\"\n\n\n\n\n\n\nentitlements\n\n\nPath to the entitlement file to use, e.g. \"myApp/MyApp.entitlements\"\n\n\n\n\n\n\nprovisioning_profile\n\n\nPath to your provisioning_profile. Optional if you use \nsigh\n\n\n\n\n\n\nversion\n\n\nVersion number to force resigned ipa to use.\n\n\n\n\n\n\nUpdates both CFBundleShortVersionString and CFBundleVersion values in Info.plist.\n\n\n\n\n\n\n\n\nApplies for main app and all nested apps or extensions\n\n\n\n\n\n\n\n\ndisplay_name\n\n\nDisplay name to force resigned ipa to use\n\n\n\n\n\n\nshort_version\n\n\nShort version string to force resigned ipa to use (CFBundleShortVersionString)\n\n\n\n\n\n\nbundle_version\n\n\nBundle version to force resigned ipa to use (CFBundleVersion)\n\n\n\n\n\n\nbundle_id\n\n\nSet new bundle ID during resign (CFBundleIdentifier)\n\n\n\n\n\n\nuse_app_entitlements\n\n\nExtract app bundle codesigning entitlements\n\n\n\n\n\n\nand combine with entitlements from new provisionin profile\n\n\n\n\n\n\n\n\nkeychain_path\n\n\nProvide a path to a keychain file that should be used by /usr/bin/codesign\n\n\n\n\n\n\n\n\n\n\nregister_devices\n\n\nRegisters new devices to the Apple Dev Portal\n\n\n\n\nThis will register iOS devices with the Developer Portal so that you can include them in your provisioning profiles.\nThis is an optimistic action, in that it will only ever add new devices to the member center, and never remove devices. If a device which has already been registered within the member center is not passed to this action, it will be left alone in the member center and continue to work.\nThe action will connect to the Apple Developer Portal using the username you specified in your \nAppfile\n with \napple_id\n, but you can override it using the \nusername\n option, or by setting the env variable \nENV['DELIVER_USER']\n.\n\n\n\n\n\n\n\n\n\n\nregister_devices\n\n\n\n\n\n\n\n\n\n\n\n\nSupported platforms\n\n\nios\n\n\n\n\n\n\nAuthor\n\n\n@lmirosevic\n\n\n\n\n\n\n\n\n\n\n3 Examples\n\n\nregister_devices(\n  devices: {\n    \nLuka iPhone 6\n =\n \n1234567890123456789012345678901234567890\n,\n    \nFelix iPad Air 2\n =\n \nabcdefghijklmnopqrstvuwxyzabcdefghijklmn\n\n  }\n) # Simply provide a list of devices as a Hash\n\n\n\n\nregister_devices(\n  devices_file: \n./devices.txt\n\n) # Alternatively provide a standard UDID export .txt file, see the Apple Sample (https://devimages.apple.com.edgekey.net/downloads/devices/Multiple-Upload-Samples.zip)\n\n\n\n\nregister_devices(\n  devices_file: \n./devices.txt\n, # You must pass in either `devices_file` or `devices`.\n  team_id: \nXXXXXXXXXX\n,         # Optional, if you\nre a member of multiple teams, then you need to pass the team ID here.\n  username: \nluka@goonbee.com\n   # Optional, lets you override the Apple Member Center username.\n)\n\n\n\n\n\n\n\n\nParameters\n\n\n\n\n\n\n\n\nKey\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\ndevices\n\n\nA hash of devices, with the name as key and the UDID as value\n\n\n\n\n\n\ndevices_file\n\n\nProvide a path to the devices to register\n\n\n\n\n\n\nteam_id\n\n\noptional: Your team ID\n\n\n\n\n\n\nusername\n\n\nOptional: Your Apple ID\n\n\n\n\n\n\n\n\n\n\nDocumentation\n\n\njazzy\n\n\nGenerate docs using Jazzy\n\n\n\n\n\n\n\n\njazzy\n\n\n\n\n\n\n\n\n\n\n\n\nSupported platforms\n\n\nios, mac\n\n\n\n\n\n\nAuthor\n\n\n@KrauseFx\n\n\n\n\n\n\n\n\n\n\n1 Example\n\n\njazzy\n\n\n\n\n\n\n\n\nParameters\n\n\n\n\n\n\n\n\nKey\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nconfig\n\n\nPath to jazzy config file\n\n\n\n\n\n\n\n\n\n\nappledoc\n\n\nGenerate Apple-like source code documentation from the source code\n\n\n\n\nRuns \nappledoc [OPTIONS] \npaths to source dirs or files\n for the project\n\n\n\n\n\n\n\n\n\n\nappledoc\n\n\n\n\n\n\n\n\n\n\n\n\nSupported platforms\n\n\nios, mac\n\n\n\n\n\n\nAuthor\n\n\n@alexmx\n\n\n\n\n\n\n\n\n\n\n1 Example\n\n\nappledoc(\n  project_name: \nMyProjectName\n,\n  project_company: \nCompany Name\n,\n  input: \nMyProjectSources\n,\n  ignore: [\n    \nignore/path/1\n,\n    \ningore/path/2\n\n  ],\n  options: \n--keep-intermediate-files --search-undocumented-doc\n,\n  warnings: \n--warn-missing-output-path --warn-missing-company-id\n\n)\n\n\n\n\n\n\n\n\nParameters\n\n\n\n\n\n\n\n\nKey\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\ninput\n\n\nPath to source files\n\n\n\n\n\n\noutput\n\n\nOutput path\n\n\n\n\n\n\ntemplates\n\n\nTemplate files path\n\n\n\n\n\n\ndocset_install_path\n\n\nDocSet installation path\n\n\n\n\n\n\ninclude\n\n\nInclude static doc(s) at path\n\n\n\n\n\n\nignore\n\n\nIgnore given path\n\n\n\n\n\n\nexclude_output\n\n\nExclude given path from output\n\n\n\n\n\n\nindex_desc\n\n\nFile including main index description\n\n\n\n\n\n\nproject_name\n\n\nProject name\n\n\n\n\n\n\nproject_version\n\n\nProject version\n\n\n\n\n\n\nproject_company\n\n\nProject company\n\n\n\n\n\n\ncompany_id\n\n\nCompany UTI (i.e. reverse DNS name)\n\n\n\n\n\n\ncreate_html\n\n\nCreate HTML\n\n\n\n\n\n\ncreate_docset\n\n\nCreate documentation set\n\n\n\n\n\n\ninstall_docset\n\n\nInstall documentation set to Xcode\n\n\n\n\n\n\npublish_docset\n\n\nPrepare DocSet for publishing\n\n\n\n\n\n\nhtml_anchors\n\n\nThe html anchor format to use in DocSet HTML\n\n\n\n\n\n\nclean_output\n\n\nRemove contents of output path before starting\n\n\n\n\n\n\ndocset_bundle_id\n\n\nDocSet bundle identifier\n\n\n\n\n\n\ndocset_bundle_name\n\n\nDocSet bundle name\n\n\n\n\n\n\ndocset_desc\n\n\nDocSet description\n\n\n\n\n\n\ndocset_copyright\n\n\nDocSet copyright message\n\n\n\n\n\n\ndocset_feed_name\n\n\nDocSet feed name\n\n\n\n\n\n\ndocset_feed_url\n\n\nDocSet feed URL\n\n\n\n\n\n\ndocset_feed_formats\n\n\nDocSet feed formats. Separated by a comma [atom,xml]\n\n\n\n\n\n\ndocset_package_url\n\n\nDocSet package (.xar) URL\n\n\n\n\n\n\ndocset_fallback_url\n\n\nDocSet fallback URL\n\n\n\n\n\n\ndocset_publisher_id\n\n\nDocSet publisher identifier\n\n\n\n\n\n\ndocset_publisher_name\n\n\nDocSet publisher name\n\n\n\n\n\n\ndocset_min_xcode_version\n\n\nDocSet min. Xcode version\n\n\n\n\n\n\ndocset_platform_family\n\n\nDocSet platform familiy\n\n\n\n\n\n\ndocset_cert_issuer\n\n\nDocSet certificate issuer\n\n\n\n\n\n\ndocset_cert_signer\n\n\nDocSet certificate signer\n\n\n\n\n\n\ndocset_bundle_filename\n\n\nDocSet bundle filename\n\n\n\n\n\n\ndocset_atom_filename\n\n\nDocSet atom feed filename\n\n\n\n\n\n\ndocset_xml_filename\n\n\nDocSet xml feed filename\n\n\n\n\n\n\ndocset_package_filename\n\n\nDocSet package (.xar,.tgz) filename\n\n\n\n\n\n\noptions\n\n\nDocumentation generation options\n\n\n\n\n\n\ncrossref_format\n\n\nCross reference template regex\n\n\n\n\n\n\nexit_threshold\n\n\nExit code threshold below which 0 is returned\n\n\n\n\n\n\ndocs_section_title\n\n\nTitle of the documentation section (defaults to \"Programming Guides\"\n\n\n\n\n\n\nwarnings\n\n\nDocumentation generation warnings\n\n\n\n\n\n\nlogformat\n\n\nLog format [0-3]\n\n\n\n\n\n\nverbose\n\n\nLog verbosity level [0-6,xcode]\n\n\n\n\n\n\n\n\n\n\nBeta\n\n\npilot\n\n\nUpload a new binary to iTunes Connect for TestFlight beta testing\n\n\n\n\nMore details can be found on https://github.com/fastlane/fastlane/tree/master/pilot\nThis integration will only do the TestFlight upload\n\n\n\n\n\n\n\n\n\n\npilot\n\n\n\n\n\n\n\n\n\n\n\n\nSupported platforms\n\n\nios\n\n\n\n\n\n\nAuthor\n\n\n@KrauseFx\n\n\n\n\n\n\n\n\n\n\n4 Examples\n\n\ntestflight\n\n\n\n\npilot # alias for \ntestflight\n\n\n\n\n\ntestflight(skip_submission: true) # to only upload the build\n\n\n\n\ntestflight(\n  username: \nfelix@krausefx.com\n,\n  app_identifier: \ncom.krausefx.app\n,\n  itc_provider: \nabcde12345\n # pass a specific value to the iTMSTransporter -itc_provider option\n)\n\n\n\n\n\n\n\n\nParameters\n\n\n\n\n\n\n\n\nKey\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nusername\n\n\nYour Apple ID Username\n\n\n\n\n\n\napp_identifier\n\n\nThe bundle identifier of the app to upload or manage testers (optional)\n\n\n\n\n\n\nipa\n\n\nPath to the ipa file to upload\n\n\n\n\n\n\nchangelog\n\n\nProvide the what's new text when uploading a new build\n\n\n\n\n\n\nskip_submission\n\n\nSkip the distributing action of pilot and only upload the ipa file\n\n\n\n\n\n\nskip_waiting_for_build_processing\n\n\nDon't wait for the build to process. If set to true, the changelog won't be set\n\n\n\n\n\n\napple_id\n\n\nThe unique App ID provided by iTunes Connect\n\n\n\n\n\n\ndistribute_external\n\n\nShould the build be distributed to external testers?\n\n\n\n\n\n\nfirst_name\n\n\nThe tester's first name\n\n\n\n\n\n\nlast_name\n\n\nThe tester's last name\n\n\n\n\n\n\nemail\n\n\nThe tester's email\n\n\n\n\n\n\ntesters_file_path\n\n\nPath to a CSV file of testers\n\n\n\n\n\n\nwait_processing_interval\n\n\nInterval in seconds to wait for iTunes Connect processing\n\n\n\n\n\n\nteam_id\n\n\nThe ID of your team if you're in multiple teams\n\n\n\n\n\n\nteam_name\n\n\nThe name of your team if you're in multiple teams\n\n\n\n\n\n\ndev_portal_team_id\n\n\nThe short ID of your team in the developer portal, if you're in multiple teams. Different from your iTC team ID!\n\n\n\n\n\n\nitc_provider\n\n\nThe provider short name to be used with the iTMSTransporter to identify your team\n\n\n\n\n\n\n\n\n\n\ncrashlytics\n\n\nUpload a new build to Crashlytics Beta\n\n\n\n\nAdditionally you can specify \nnotes\n, \nemails\n, \ngroups\n and \nnotifications\n.\nDistributing to Groups: When using the \ngroups\n parameter, it's important to use the group \nalias\n names for each group you'd like to distribute to. A group's alias can be found in the web UI. If you're viewing the Beta page, you can open the groups dialog here:\n\n\n\n\n\n\n\n\n\n\ncrashlytics\n\n\n\n\n\n\n\n\n\n\n\n\nSupported platforms\n\n\nios, android, mac\n\n\n\n\n\n\nAuthor\n\n\n@KrauseFx, @pedrogimenez\n\n\n\n\n\n\n\n\n\n\n2 Examples\n\n\ncrashlytics\n\n\n\n\ncrashlytics(\n  crashlytics_path: \n./Pods/Crashlytics/\n, # path to your Crashlytics submit binary.\n  api_token: \n...\n,\n  build_secret: \n...\n,\n  ipa_path: \n./app.ipa\n\n)\n\n\n\n\n\n\n\n\nParameters\n\n\n\n\n\n\n\n\nKey\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nipa_path\n\n\nPath to your IPA file. Optional if you use the \ngym\n or \nxcodebuild\n action\n\n\n\n\n\n\napk_path\n\n\nPath to your APK file\n\n\n\n\n\n\ncrashlytics_path\n\n\nPath to the submit binary in the Crashlytics bundle (iOS) or \ncrashlytics-devtools.jar\n file (Android)\n\n\n\n\n\n\napi_token\n\n\nCrashlytics Beta API Token\n\n\n\n\n\n\nbuild_secret\n\n\nCrashlytics Build Secret\n\n\n\n\n\n\nnotes_path\n\n\nPath to the release notes\n\n\n\n\n\n\nnotes\n\n\nThe release notes as string - uses :notes_path under the hood\n\n\n\n\n\n\ngroups\n\n\nThe groups used for distribution, separated by commas\n\n\n\n\n\n\nemails\n\n\nPass email addresses of testers, separated by commas\n\n\n\n\n\n\nnotifications\n\n\nCrashlytics notification option (true/false)\n\n\n\n\n\n\ndebug\n\n\nCrashlytics debug option (true/false)\n\n\n\n\n\n\n\n\n\n\nhockey\n\n\nUpload a new build to HockeyApp\n\n\n\n\nSymbols will also be uploaded automatically if a \napp.dSYM.zip\n file is found next to \napp.ipa\n. In case it is located in a different place you can specify the path explicitly in \n:dsym\n parameter.\nMore information about the available options can be found in the \nHockeyApp Docs\n.\n\n\n\n\n\n\n\n\n\n\nhockey\n\n\n\n\n\n\n\n\n\n\n\n\nSupported platforms\n\n\nios, android, mac\n\n\n\n\n\n\nAuthor\n\n\n@KrauseFx, @modzelewski\n\n\n\n\n\n\n\n\n\n\n1 Example\n\n\nhockey(\n  api_token: \n...\n,\n  ipa: \n./app.ipa\n,\n  notes: \nChangelog\n\n)\n\n\n\n\n\n\n\n\nParameters\n\n\n\n\n\n\n\n\nKey\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\napk\n\n\nPath to your APK file\n\n\n\n\n\n\napi_token\n\n\nAPI Token for Hockey Access\n\n\n\n\n\n\nipa\n\n\nPath to your IPA file. Optional if you use the \ngym\n or \nxcodebuild\n action. For Mac zip the .app. For Android provide path to .apk file\n\n\n\n\n\n\ndsym\n\n\nPath to your symbols file. For iOS and Mac provide path to app.dSYM.zip. For Android provide path to mappings.txt file\n\n\n\n\n\n\nnotes\n\n\nBeta Notes\n\n\n\n\n\n\nnotify\n\n\nNotify testers? \"1\" for yes\n\n\n\n\n\n\nstatus\n\n\nDownload status: \"1\" = No user can download; \"2\" = Available for download\n\n\n\n\n\n\nnotes_type\n\n\nNotes type for your :notes, \"0\" = Textile, \"1\" = Markdown (default)\n\n\n\n\n\n\nrelease_type\n\n\nRelease type of the app: \"0\" = Beta (default), \"1\" = Store, \"2\" = Alpha, \"3\" = Enterprise\n\n\n\n\n\n\nmandatory\n\n\nSet to \"1\" to make this update mandatory\n\n\n\n\n\n\nteams\n\n\nComma separated list of team ID numbers to which this build will be restricted\n\n\n\n\n\n\nusers\n\n\nComma separated list of user ID numbers to which this build will be restricted\n\n\n\n\n\n\ntags\n\n\nComma separated list of tags which will receive access to the build\n\n\n\n\n\n\npublic_identifier\n\n\nPublic identifier of the app you are targeting, usually you won't need this value\n\n\n\n\n\n\ncommit_sha\n\n\nThe Git commit SHA for this build\n\n\n\n\n\n\nrepository_url\n\n\nThe URL of your source repository\n\n\n\n\n\n\nbuild_server_url\n\n\nThe URL of the build job on your build server\n\n\n\n\n\n\nupload_dsym_only\n\n\nFlag to upload only the dSYM file to hockey app\n\n\n\n\n\n\nowner_id\n\n\nID for the owner of the app\n\n\n\n\n\n\nstrategy\n\n\nStrategy: 'add' = to add the build as a new build even if it has the same build number (default); 'replace' = to replace a build with the same build number\n\n\n\n\n\n\n\n\n\n\ns3\n\n\nGenerates a plist file and uploads all to AWS S3\n\n\n\n\nUpload a new build to Amazon S3 to distribute the build to beta testers.  Works for both Ad Hoc and Enterprise signed applications. This step will generate the necessary HTML, plist, and version files for you. It is recommended to \nnot\n store the AWS access keys in the \nFastfile\n. The uploaded \nversion.json\n file provides an easy way for apps to poll if a new update is available.\n\n\n\n\n\n\n\n\n\n\ns3\n\n\n\n\n\n\n\n\n\n\n\n\nSupported platforms\n\n\nios\n\n\n\n\n\n\nAuthor\n\n\n@joshdholtz\n\n\n\n\n\n\n\n\n\n\n2 Examples\n\n\ns3\n\n\n\n\ns3(\n  # All of these are used to make Shenzhen's `ipa distribute:s3` command\n  access_key: ENV[\nS3_ACCESS_KEY\n],     # Required from user.\n  secret_access_key: ENV[\nS3_SECRET_ACCESS_KEY\n], # Required from user.\n  bucket: ENV[\nS3_BUCKET\n],   # Required from user.\n  ipa: \nAppName.ipa\n,         # Optional is you use `ipa` to build\n  dsym: \nAppName.app.dSYM.zip\n,         # Optional is you use `ipa` to build\n  path: \nv{CFBundleShortVersionString}_b{CFBundleVersion}/\n, # This is actually the default.\n  upload_metadata: true,      # Upload version.json, plist and HTML. Set to false to skip uploading of these files.\n  version_file_name: \napp_version.json\n,# Name of the file to upload to S3. Defaults to \nversion.json\n\n  version_template_path: \npath/to/erb\n  # Path to an ERB to configure the structure of the version JSON file\n)\n\n\n\n\n\n\n\n\nParameters\n\n\n\n\n\n\n\n\nKey\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nipa\n\n\n.ipa file for the build\n\n\n\n\n\n\ndsym\n\n\nzipped .dsym package for the build\n\n\n\n\n\n\nupload_metadata\n\n\nUpload relevant metadata for this build\n\n\n\n\n\n\nplist_template_path\n\n\nplist template path\n\n\n\n\n\n\nplist_file_name\n\n\nuploaded plist filename\n\n\n\n\n\n\nhtml_template_path\n\n\nhtml erb template path\n\n\n\n\n\n\nhtml_file_name\n\n\nuploaded html filename\n\n\n\n\n\n\nversion_template_path\n\n\nversion erb template path\n\n\n\n\n\n\nversion_file_name\n\n\nuploaded version filename\n\n\n\n\n\n\naccess_key\n\n\nAWS Access Key ID\n\n\n\n\n\n\nsecret_access_key\n\n\nAWS Secret Access Key\n\n\n\n\n\n\nbucket\n\n\nAWS bucket name\n\n\n\n\n\n\nregion\n\n\nAWS region (for bucket creation)\n\n\n\n\n\n\npath\n\n\nS3 'path'. Values from Info.plist will be substituded for keys wrapped in \n\n\n\n\n\n\nsource\n\n\nOptional source directory e.g. ./build\n\n\n\n\n\n\nacl\n\n\nUploaded object permissions e.g public_read (default), private, public_read_write, authenticated_read\n\n\n\n\n\n\n\n\n\n\ndeploygate\n\n\nUpload a new build to \nDeployGate\n\n\n\n\nYou can retrieve your username and API token on \nyour settings page\n\nMore information about the available options can be found in the \nDeployGate Push API document\n.\n\n\n\n\n\n\n\n\n\n\ndeploygate\n\n\n\n\n\n\n\n\n\n\n\n\nSupported platforms\n\n\nios\n\n\n\n\n\n\nAuthor\n\n\n@tnj\n\n\n\n\n\n\n\n\n\n\n1 Example\n\n\ndeploygate(\n  api_token: \n...\n,\n  user: \ntarget username or organization name\n,\n  ipa: \n./ipa_file.ipa\n,\n  message: \nBuild #{lane_context[SharedValues::BUILD_NUMBER]}\n,\n  distribution_key: \n(Optional) Target Distribution Key\n\n)\n\n\n\n\n\n\n\n\nParameters\n\n\n\n\n\n\n\n\nKey\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\napi_token\n\n\nDeploygate API Token\n\n\n\n\n\n\nuser\n\n\nTarget username or organization name\n\n\n\n\n\n\nipa\n\n\nPath to your IPA file. Optional if you use the \ngym\n or \nxcodebuild\n action\n\n\n\n\n\n\nmessage\n\n\nRelease Notes\n\n\n\n\n\n\ndistribution_key\n\n\nTarget Distribution Key\n\n\n\n\n\n\nrelease_note\n\n\nRelease note for distribution page\n\n\n\n\n\n\n\n\n\n\ntestflight\n\n\nAlias for the pilot action\n\n\n\n\n\n\n\n\ntestflight\n\n\n\n\n\n\n\n\n\n\n\n\nSupported platforms\n\n\nios\n\n\n\n\n\n\nAuthor\n\n\n@KrauseFx\n\n\n\n\n\n\n\n\n\n\n4 Examples\n\n\ntestflight\n\n\n\n\npilot # alias for \ntestflight\n\n\n\n\n\ntestflight(skip_submission: true) # to only upload the build\n\n\n\n\ntestflight(\n  username: \nfelix@krausefx.com\n,\n  app_identifier: \ncom.krausefx.app\n,\n  itc_provider: \nabcde12345\n # pass a specific value to the iTMSTransporter -itc_provider option\n)\n\n\n\n\n\n\n\n\nParameters\n\n\n\n\n\n\n\n\nKey\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nusername\n\n\nYour Apple ID Username\n\n\n\n\n\n\napp_identifier\n\n\nThe bundle identifier of the app to upload or manage testers (optional)\n\n\n\n\n\n\nipa\n\n\nPath to the ipa file to upload\n\n\n\n\n\n\nchangelog\n\n\nProvide the what's new text when uploading a new build\n\n\n\n\n\n\nskip_submission\n\n\nSkip the distributing action of pilot and only upload the ipa file\n\n\n\n\n\n\nskip_waiting_for_build_processing\n\n\nDon't wait for the build to process. If set to true, the changelog won't be set\n\n\n\n\n\n\napple_id\n\n\nThe unique App ID provided by iTunes Connect\n\n\n\n\n\n\ndistribute_external\n\n\nShould the build be distributed to external testers?\n\n\n\n\n\n\nfirst_name\n\n\nThe tester's first name\n\n\n\n\n\n\nlast_name\n\n\nThe tester's last name\n\n\n\n\n\n\nemail\n\n\nThe tester's email\n\n\n\n\n\n\ntesters_file_path\n\n\nPath to a CSV file of testers\n\n\n\n\n\n\nwait_processing_interval\n\n\nInterval in seconds to wait for iTunes Connect processing\n\n\n\n\n\n\nteam_id\n\n\nThe ID of your team if you're in multiple teams\n\n\n\n\n\n\nteam_name\n\n\nThe name of your team if you're in multiple teams\n\n\n\n\n\n\ndev_portal_team_id\n\n\nThe short ID of your team in the developer portal, if you're in multiple teams. Different from your iTC team ID!\n\n\n\n\n\n\nitc_provider\n\n\nThe provider short name to be used with the iTMSTransporter to identify your team\n\n\n\n\n\n\n\n\n\n\ntestfairy\n\n\nUpload a new build to TestFairy\n\n\n\n\nYou can retrieve your API key on \nyour settings page\n\n\n\n\n\n\n\n\n\n\ntestfairy\n\n\n\n\n\n\n\n\n\n\n\n\nSupported platforms\n\n\nios\n\n\n\n\n\n\nAuthor\n\n\n@taka0125, @tcurdt\n\n\n\n\n\n\n\n\n\n\n1 Example\n\n\ntestfairy(\n  api_key: \n...\n,\n  ipa: \n./ipa_file.ipa\n,\n  comment: \nBuild #{lane_context[SharedValues::BUILD_NUMBER]}\n,\n)\n\n\n\n\n\n\n\n\nParameters\n\n\n\n\n\n\n\n\nKey\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\napi_key\n\n\nAPI Key for TestFairy\n\n\n\n\n\n\nipa\n\n\nPath to your IPA file. Optional if you use the \ngym\n or \nxcodebuild\n action\n\n\n\n\n\n\nsymbols_file\n\n\nSymbols mapping file\n\n\n\n\n\n\ntesters_groups\n\n\nArray of tester groups to be notified\n\n\n\n\n\n\nmetrics\n\n\nArray of metrics to record (cpu,memory,network,phone_signal,gps,battery,mic,wifi)\n\n\n\n\n\n\nicon_watermark\n\n\nAdd a small watermark to app icon\n\n\n\n\n\n\ncomment\n\n\nAdditional release notes for this upload. This text will be added to email notifications\n\n\n\n\n\n\nauto_update\n\n\nAllows easy upgrade of all users to current version\n\n\n\n\n\n\nnotify\n\n\nSend email to testers\n\n\n\n\n\n\noptions\n\n\nArray of options (shake,video_only_wifi,anonymous)\n\n\n\n\n\n\n\n\n\n\nnexus_upload\n\n\nUpload a file to Sonatype Nexus platform\n\n\n\n\n\n\n\n\nnexus_upload\n\n\n\n\n\n\n\n\n\n\n\n\nSupported platforms\n\n\nios, android, mac\n\n\n\n\n\n\nAuthor\n\n\n@xfreebird\n\n\n\n\n\n\n\n\n\n\n1 Example\n\n\nnexus_upload(\n  file: \n/path/to/file.ipa\n,\n  repo_id: \nartefacts\n,\n  repo_group_id: \ncom.fastlane\n,\n  repo_project_name: \nipa\n,\n  repo_project_version: \n1.13\n,\n  repo_classifier: \ndSYM\n, # Optional\n  endpoint: \nhttp://localhost:8081\n,\n  username: \nadmin\n,\n  password: \nadmin123\n\n)\n\n\n\n\n\n\n\n\nParameters\n\n\n\n\n\n\n\n\nKey\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nfile\n\n\nFile to be uploaded to Nexus\n\n\n\n\n\n\nrepo_id\n\n\nNexus repository id e.g. artefacts\n\n\n\n\n\n\nrepo_group_id\n\n\nNexus repository group id e.g. com.company\n\n\n\n\n\n\nrepo_project_name\n\n\nNexus repository commandect name. Only letters, digits, underscores(_), hyphens(-), and dots(.) are allowed\n\n\n\n\n\n\nrepo_project_version\n\n\nNexus repository commandect version\n\n\n\n\n\n\nrepo_classifier\n\n\nNexus repository artifact classifier (optional)\n\n\n\n\n\n\nendpoint\n\n\nNexus endpoint e.g. http://nexus:8081\n\n\n\n\n\n\nmount_path\n\n\nNexus mount path. Defaults to /nexus\n\n\n\n\n\n\nusername\n\n\nNexus username\n\n\n\n\n\n\npassword\n\n\nNexus password\n\n\n\n\n\n\nssl_verify\n\n\nVerify SSL\n\n\n\n\n\n\nverbose\n\n\nMake detailed output\n\n\n\n\n\n\nproxy_username\n\n\nProxy username\n\n\n\n\n\n\nproxy_password\n\n\nProxy password\n\n\n\n\n\n\nproxy_address\n\n\nProxy address\n\n\n\n\n\n\nproxy_port\n\n\nProxy port\n\n\n\n\n\n\n\n\n\n\nappetize\n\n\nUpload your app to Appetize.io to stream it in the browser\n\n\n\n\nIf you provide a \npublic_key\n, this will overwrite an existing application. If you want to have this build as a new app version, you shouldn't provide this value.\nTo integrate appetize into your GitHub workflow check out the \ndevice_grid guide\n\n\n\n\n\n\n\n\n\n\nappetize\n\n\n\n\n\n\n\n\n\n\n\n\nSupported platforms\n\n\nios, android\n\n\n\n\n\n\nAuthor\n\n\n@klundberg, @giginet\n\n\n\n\n\n\n\n\n\n\n1 Example\n\n\nappetize(\n  path: \n./MyApp.zip\n,\n  api_token: \nyourapitoken\n, # get it from https://appetize.io/docs#request-api-token\n  public_key: \nyour_public_key\n # get it from https://appetize.io/dashboard\n)\n\n\n\n\n\n\n\n\nParameters\n\n\n\n\n\n\n\n\nKey\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\napi_token\n\n\nAppetize.io API Token\n\n\n\n\n\n\nurl\n\n\nURL from which the ipa file can be fetched. Alternative to :path\n\n\n\n\n\n\nplatform\n\n\nPlatform. Either \nios\n or \nandroid\n. Default is \nios\n\n\n\n\n\n\npath\n\n\nPath to zipped build on the local filesystem. Either this or \nurl\n must be specified\n\n\n\n\n\n\npublic_key\n\n\nIf not provided, a new app will be created. If provided, the existing build will be overwritten\n\n\n\n\n\n\nnote\n\n\nNotes you wish to add to the uploaded app\n\n\n\n\n\n\n\n\n\n\nsplunkmint\n\n\nUpload dSYM file to Splunk MINT\n\n\n\n\n\n\n\n\nsplunkmint\n\n\n\n\n\n\n\n\n\n\n\n\nSupported platforms\n\n\nios\n\n\n\n\n\n\nAuthor\n\n\n@xfreebird\n\n\n\n\n\n\n\n\n\n\n1 Example\n\n\nsplunkmint(\n  dsym: \nMy.app.dSYM.zip\n,\n  api_key: \n43564d3a\n,\n  api_token: \ne05456234c4869fb7e0b61\n\n)\n\n\n\n\n\n\n\n\nParameters\n\n\n\n\n\n\n\n\nKey\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\ndsym\n\n\ndSYM.zip file to upload to Splunk MINT\n\n\n\n\n\n\napi_key\n\n\nSplunk MINT App API key e.g. f57a57ca\n\n\n\n\n\n\napi_token\n\n\nSplunk MINT API token e.g. e05ba40754c4869fb7e0b61\n\n\n\n\n\n\nverbose\n\n\nMake detailed output\n\n\n\n\n\n\nupload_progress\n\n\nShow upload progress\n\n\n\n\n\n\nproxy_username\n\n\nProxy username\n\n\n\n\n\n\nproxy_password\n\n\nProxy password\n\n\n\n\n\n\nproxy_address\n\n\nProxy address\n\n\n\n\n\n\nproxy_port\n\n\nProxy port\n\n\n\n\n\n\n\n\n\n\nset_changelog\n\n\nSet the changelog for all languages on iTunes Connect\n\n\n\n\nThis is useful if you have only one changelog for all languages.\nYou can store the changelog in \n./fastlane/changelog.txt\n and it will automatically get loaded from there. This integration is useful if you support e.g. 10 languages and want to use the same \"What's new\"-text for all languages.\n\n\n\n\n\n\n\n\n\n\nset_changelog\n\n\n\n\n\n\n\n\n\n\n\n\nSupported platforms\n\n\nios, mac\n\n\n\n\n\n\nAuthor\n\n\n@KrauseFx\n\n\n\n\n\n\n\n\n\n\n1 Example\n\n\nset_changelog(app_identifier: \ncom.krausefx.app\n, version: \n1.0\n, changelog: \nAll Languages\n)\n\n\n\n\n\n\n\n\nParameters\n\n\n\n\n\n\n\n\nKey\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\napp_identifier\n\n\nThe bundle identifier of your app\n\n\n\n\n\n\nusername\n\n\nYour Apple ID Username\n\n\n\n\n\n\nversion\n\n\nThe version number to create/update\n\n\n\n\n\n\nchangelog\n\n\nChangelog text that should be uploaded to iTunes Connect\n\n\n\n\n\n\n\n\n\n\nappaloosa\n\n\nUpload your app to Appaloosa Store\n\n\n\n\nAppaloosa is a private mobile application store. This action \noffers a quick deployment on the platform. You can create an \naccount, push to your existing account, or manage your user \ngroups. We accept iOS and Android applications.\n\n\n\n\n\n\n\n\n\n\nappaloosa\n\n\n\n\n\n\n\n\n\n\n\n\nSupported platforms\n\n\nios, android, mac\n\n\n\n\n\n\nAuthor\n\n\n@Appaloosa\n\n\n\n\n\n\n\n\n\n\n1 Example\n\n\nappaloosa(\n  # Path tor your IPA or APK\n  binary: '/path/to/binary.ipa',\n  # You can find your store\u2019s id at the bottom of the \u201cSettings\u201d page of your store\n  store_id: 'your_store_id',\n  # You can find your api_token at the bottom of the \u201cSettings\u201d page of your store\n  api_token: 'your_api_key',\n  # User group_ids visibility, if it's not specified we'll publish the app for all users in your store'\n  group_ids: '112, 232, 387',\n  # You can use fastlane/snapshot or specify your own screenshots folder.\n  # If you use snapshot please specify a local and a device to upload your screenshots from.\n  # When multiple values are specified in the Snapfile, we default to 'en-US'\n  locale: 'en-US',\n  # By default, the screenshots from the last device will be used\n  device: 'iPhone6',\n  # Screenshots' filenames should start with device's name like 'iphone6-s1.png' if device specified\n  screenshots: '/path/to_your/screenshots'\n)\n\n\n\n\n\n\n\n\nParameters\n\n\n\n\n\n\n\n\nKey\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nbinary\n\n\nBinary path. Optional for ipa if you use the \nipa\n or \nxcodebuild\n action\n\n\n\n\n\n\napi_token\n\n\nYour API token\n\n\n\n\n\n\nstore_id\n\n\nYour Store id\n\n\n\n\n\n\ngroup_ids\n\n\nYour app is limited to special users? Give us the group ids\n\n\n\n\n\n\nscreenshots\n\n\nAdd some screenshots application to your store or hit [enter]\n\n\n\n\n\n\nlocale\n\n\nSelect the folder locale for yours screenshots\n\n\n\n\n\n\ndevice\n\n\nSelect the device format for yours screenshots\n\n\n\n\n\n\ndescription\n\n\nYour app description\n\n\n\n\n\n\n\n\n\n\napteligent\n\n\nUpload dSYM file to Apteligent (Crittercism)\n\n\n\n\n\n\n\n\napteligent\n\n\n\n\n\n\n\n\n\n\n\n\nSupported platforms\n\n\nios\n\n\n\n\n\n\nAuthor\n\n\n@Mo7amedFouad\n\n\n\n\n\n\n\n\n\n\n1 Example\n\n\napteligent(\n  app_id: \n...\n,\n  api_key: \n...\n\n)\n\n\n\n\n\n\n\n\nParameters\n\n\n\n\n\n\n\n\nKey\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\ndsym\n\n\ndSYM.zip file to upload to Apteligent\n\n\n\n\n\n\napp_id\n\n\nApteligent App ID key e.g. 569f5c87cb99e10e00c7xxxx\n\n\n\n\n\n\napi_key\n\n\nApteligent App API key e.g. IXPQIi8yCbHaLliqzRoo065tH0lxxxxx\n\n\n\n\n\n\n\n\n\n\ninstallr\n\n\nUpload a new build to Installr\n\n\n\n\n\n\n\n\ninstallr\n\n\n\n\n\n\n\n\n\n\n\n\nSupported platforms\n\n\nios\n\n\n\n\n\n\nAuthor\n\n\n@scottrhoyt\n\n\n\n\n\n\n\n\n\n\n1 Example\n\n\ninstallr(\n  api_token: \n...\n,\n  ipa: \ntest.ipa\n,\n  notes: \nThe next great version of the app!\n,\n  notify: \ndev,qa\n,\n  add: \nexec,ops\n\n)\n\n\n\n\n\n\n\n\nParameters\n\n\n\n\n\n\n\n\nKey\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\napi_token\n\n\nAPI Token for Installr Access\n\n\n\n\n\n\nipa\n\n\nPath to your IPA file. Optional if you use the \ngym\n or \nxcodebuild\n action\n\n\n\n\n\n\nnotes\n\n\nRelease notes\n\n\n\n\n\n\nnotify\n\n\nGroups to notify (e.g. 'dev,qa')\n\n\n\n\n\n\nadd\n\n\nGroups to add (e.g. 'exec,ops')\n\n\n\n\n\n\n\n\n\n\npodio_item\n\n\nCreates or updates an item within your Podio app\n\n\n\n\nUse this action to create or update an item within your Podio app\n        (see https://help.podio.com/hc/en-us/articles/201019278-Creating-apps-).\n        Pass in dictionary with field keys and their values.\n        Field key is located under Modify app -\n Advanced -\n Developer -\n External ID\n        (see https://developers.podio.com/examples/items)\n\n\n\n\n\n\n\n\n\n\npodio_item\n\n\n\n\n\n\n\n\n\n\n\n\nSupported platforms\n\n\nios, android, mac\n\n\n\n\n\n\nAuthor\n\n\n@pprochazka72, @laugejepsen\n\n\n\n\n\n\n\n\n\n\n1 Example\n\n\npodio_item(\n  identifying_value: \nYour unique value\n,\n  other_fields: {\n    \nfield1\n =\n \nfieldValue\n,\n    \nfield2\n =\n \nfieldValue2\n\n  }\n)\n\n\n\n\n\n\n\n\nParameters\n\n\n\n\n\n\n\n\nKey\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nclient_id\n\n\nClient ID for Podio API (see https://developers.podio.com/api-key)\n\n\n\n\n\n\nclient_secret\n\n\nClient secret for Podio API (see https://developers.podio.com/api-key)\n\n\n\n\n\n\napp_id\n\n\nApp ID of the app you intend to authenticate with (see https://developers.podio.com/authentication/app_auth)\n\n\n\n\n\n\napp_token\n\n\nApp token of the app you intend to authenticate with (see https://developers.podio.com/authentication/app_auth)\n\n\n\n\n\n\nidentifying_field\n\n\nString specifying the field key used for identification of an item\n\n\n\n\n\n\nidentifying_value\n\n\nString uniquely specifying an item within the app\n\n\n\n\n\n\nother_fields\n\n\nDictionary of your app fields. Podio supports several field types, see https://developers.podio.com/doc/items\n\n\n\n\n\n\n\n\n\n\nPush\n\n\npem\n\n\nMakes sure a valid push profile is active and creates a new one if needed\n\n\n\n\nAdditionally to the available options, you can also specify a block that only gets executed if a new\nprofile was created. You can use it to upload the new profile to your server.\nUse it like this: \npem(\n  new_profile: proc do \n    # your upload code\n  end\n)\n\n\n\n\n\n\n\n\n\n\npem\n\n\n\n\n\n\n\n\n\n\n\n\nSupported platforms\n\n\nios\n\n\n\n\n\n\nAuthor\n\n\n@KrauseFx\n\n\n\n\n\n\n\n\n\n\n2 Examples\n\n\npem\n\n\n\n\npem(\n  force: true, # create a new profile, even if the old one is still valid\n  app_identifier: \nnet.sunapps.9\n, # optional app identifier,\n  save_private_key: true,\n  new_profile: proc do |profile_path| # this block gets called when a new profile was generated\n    puts profile_path # the absolute path to the new PEM file\n    # insert the code to upload the PEM file to the server\n  end\n)\n\n\n\n\n\n\n\n\nParameters\n\n\n\n\n\n\n\n\nKey\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\ndevelopment\n\n\nRenew the development push certificate instead of the production one\n\n\n\n\n\n\ngenerate_p12\n\n\nGenerate a p12 file additionally to a PEM file\n\n\n\n\n\n\nforce\n\n\nCreate a new push certificate, even if the current one is active for 30 more days\n\n\n\n\n\n\nsave_private_key\n\n\nSet to save the private RSA key\n\n\n\n\n\n\napp_identifier\n\n\nThe bundle identifier of your app\n\n\n\n\n\n\nusername\n\n\nYour Apple ID Username\n\n\n\n\n\n\nteam_id\n\n\nThe ID of your team if you're in multiple teams\n\n\n\n\n\n\nteam_name\n\n\nThe name of your team if you're in multiple teams\n\n\n\n\n\n\np12_password\n\n\nThe password that is used for your p12 file\n\n\n\n\n\n\npem_name\n\n\nThe file name of the generated .pem file\n\n\n\n\n\n\noutput_path\n\n\nThe path to a directory in which all certificates and private keys should be stored\n\n\n\n\n\n\nnew_profile\n\n\nBlock that is called if there is a new profile\n\n\n\n\n\n\n\n\n\n\nupdate_urban_airship_configuration\n\n\nSet the Urban Airship plist configuration values\n\n\n\n\nThis action updates the AirshipConfig.plist need to configure the Urban Airship SDK at runtime, allowing keys and secrets to easily be set for Enterprise and Production versions of the application.\n\n\n\n\n\n\n\n\n\n\nupdate_urban_airship_configuration\n\n\n\n\n\n\n\n\n\n\n\n\nSupported platforms\n\n\nios\n\n\n\n\n\n\nAuthor\n\n\n@kcharwood\n\n\n\n\n\n\n\n\n\n\n1 Example\n\n\nupdate_urban_airship_configuration(\n  plist_path: \nAirshipConfig.plist\n,\n  production_app_key: \nPRODKEY\n,\n  production_app_secret: \nPRODSECRET\n\n)\n\n\n\n\n\n\n\n\nParameters\n\n\n\n\n\n\n\n\nKey\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nplist_path\n\n\nPath to Urban Airship configuration Plist\n\n\n\n\n\n\ndevelopment_app_key\n\n\nThe development app key\n\n\n\n\n\n\ndevelopment_app_secret\n\n\nThe development app secret\n\n\n\n\n\n\nproduction_app_key\n\n\nThe production app key\n\n\n\n\n\n\nproduction_app_secret\n\n\nThe production app secret\n\n\n\n\n\n\ndetect_provisioning_mode\n\n\nAutomatically detect provisioning mode\n\n\n\n\n\n\n\n\n\n\nonesignal\n\n\nCreate a new OneSignal application\n\n\n\n\nYou can use this action to automatically create a OneSignal application. You can also upload a .p12 with password, a GCM key, or both\n\n\n\n\n\n\n\n\n\n\nonesignal\n\n\n\n\n\n\n\n\n\n\n\n\nSupported platforms\n\n\nios\n\n\n\n\n\n\nAuthor\n\n\n@timothybarraclough, @smartshowltd\n\n\n\n\n\n\n\n\n\n\n1 Example\n\n\nonesignal(\n  auth_token: \nYour OneSignal Auth Token\n,\n  app_name: \nName for OneSignal App\n,\n  android_token: \nYour Android GCM key (optional)\n,\n  apns_p12: \nPath to Apple .p12 file (optional)\n,\n  apns_p12_password: \nPassword for .p12 file (optional)\n,\n  apns_env: \nproduction/sandbox (defaults to production)\n\n)\n\n\n\n\n\n\n\n\nParameters\n\n\n\n\n\n\n\n\nKey\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nauth_token\n\n\nOneSignal Authorization Key\n\n\n\n\n\n\napp_name\n\n\nOneSignal App Name\n\n\n\n\n\n\nandroid_token\n\n\nANDROID GCM KEY\n\n\n\n\n\n\napns_p12\n\n\nAPNS P12 File (in .p12 format)\n\n\n\n\n\n\napns_p12_password\n\n\nAPNS P12 password\n\n\n\n\n\n\napns_env\n\n\nAPNS environment\n\n\n\n\n\n\n\n\n\n\nReleasing your app\n\n\ndeliver\n\n\nUses deliver to upload new app metadata and builds to iTunes Connect\n\n\n\n\nUsing \ndeliver\n after \ngym\n and \nsnapshot\n will automatically upload the\nlatest ipa and screenshots with no other configuration\nIf you don't want a PDF report for App Store builds, use the \n:force\n option.\nThis is useful when running \nfastlane\n on your Continuous Integration server: \ndeliver(force: true)\n\nIf your account is on multiple teams and you need to tell the \niTMSTransporter\n\nwhich 'provider' to use, you can set the \nitc_provider\n option to pass this info.\n\n\n\n\n\n\n\n\n\n\ndeliver\n\n\n\n\n\n\n\n\n\n\n\n\nSupported platforms\n\n\nios, mac\n\n\n\n\n\n\nAuthor\n\n\n@KrauseFx\n\n\n\n\n\n\n\n\n\n\n1 Example\n\n\ndeliver(\n  force: true, # Set to true to skip PDF verification\n  itc_provider: \nabcde12345\n # pass a specific value to the iTMSTransporter -itc_provider option\n\n)\n\n\n\n\n\n\n\n\nParameters\n\n\n\n\n\n\n\n\nKey\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nusername\n\n\nYour Apple ID Username\n\n\n\n\n\n\napp_identifier\n\n\nThe bundle identifier of your app\n\n\n\n\n\n\napp\n\n\nThe app ID of the app you want to use/modify\n\n\n\n\n\n\nipa\n\n\nPath to your ipa file\n\n\n\n\n\n\npkg\n\n\nPath to your pkg file\n\n\n\n\n\n\nmetadata_path\n\n\nPath to the folder containing the metadata files\n\n\n\n\n\n\nscreenshots_path\n\n\nPath to the folder containing the screenshots\n\n\n\n\n\n\nskip_binary_upload\n\n\nSkip uploading an ipa or pkg to iTunes Connect\n\n\n\n\n\n\nskip_screenshots\n\n\nDon't upload the screenshots\n\n\n\n\n\n\napp_version\n\n\nThe version that should be edited or created\n\n\n\n\n\n\nskip_metadata\n\n\nDon't upload the metadata (e.g. title, description), this will still upload screenshots\n\n\n\n\n\n\nforce\n\n\nSkip the HTML report file verification\n\n\n\n\n\n\nsubmit_for_review\n\n\nSubmit the new version for Review after uploading everything\n\n\n\n\n\n\nautomatic_release\n\n\nShould the app be automatically released once it's approved?\n\n\n\n\n\n\nprice_tier\n\n\nThe price tier of this application\n\n\n\n\n\n\nbuild_number\n\n\nIf set the given build number (already uploaded to iTC) will be used instead of the current built one\n\n\n\n\n\n\napp_rating_config_path\n\n\nPath to the app rating's config\n\n\n\n\n\n\nsubmission_information\n\n\nExtra information for the submission (e.g. third party content)\n\n\n\n\n\n\nteam_id\n\n\nThe ID of your iTunes Connect team if you're in multiple teams\n\n\n\n\n\n\nteam_name\n\n\nThe name of your iTunes Connect team if you're in multiple teams\n\n\n\n\n\n\ndev_portal_team_id\n\n\nThe short ID of your Developer Portal team, if you're in multiple teams. Different from your iTC team ID!\n\n\n\n\n\n\ndev_portal_team_name\n\n\nThe name of your Developer Portal team if you're in multiple teams\n\n\n\n\n\n\nitc_provider\n\n\nThe provider short name to be used with the iTMSTransporter to identify your team\n\n\n\n\n\n\napp_icon\n\n\nMetadata: The path to the app icon\n\n\n\n\n\n\napple_watch_app_icon\n\n\nMetadata: The path to the Apple Watch app icon\n\n\n\n\n\n\ncopyright\n\n\nMetadata: The copyright notice\n\n\n\n\n\n\nprimary_category\n\n\nMetadata: The english name of the primary category(e.g. \nBusiness\n, \nBooks\n)\n\n\n\n\n\n\nsecondary_category\n\n\nMetadata: The english name of the secondary category(e.g. \nBusiness\n, \nBooks\n)\n\n\n\n\n\n\nprimary_first_sub_category\n\n\nMetadata: The english name of the primary first sub category(e.g. \nEducational\n, \nPuzzle\n)\n\n\n\n\n\n\nprimary_second_sub_category\n\n\nMetadata: The english name of the primary second sub category(e.g. \nEducational\n, \nPuzzle\n)\n\n\n\n\n\n\nsecondary_first_sub_category\n\n\nMetadata: The english name of the secondary first sub category(e.g. \nEducational\n, \nPuzzle\n)\n\n\n\n\n\n\nsecondary_second_sub_category\n\n\nMetadata: The english name of the secondary second sub category(e.g. \nEducational\n, \nPuzzle\n)\n\n\n\n\n\n\napp_review_information\n\n\nMetadata: A hash containing the review information\n\n\n\n\n\n\ndescription\n\n\nMetadata: The localised app description\n\n\n\n\n\n\nname\n\n\nMetadata: The localised app name\n\n\n\n\n\n\nkeywords\n\n\nMetadata: An array of localised keywords\n\n\n\n\n\n\nrelease_notes\n\n\nMetadata: Localised release notes for this version\n\n\n\n\n\n\nprivacy_url\n\n\nMetadata: Localised privacy url\n\n\n\n\n\n\nsupport_url\n\n\nMetadata: Localised support url\n\n\n\n\n\n\nmarketing_url\n\n\nMetadata: Localised marketing url\n\n\n\n\n\n\n\n\n\n\nsupply\n\n\nUpload metadata, screenshots and binaries to Google Play\n\n\n\n\nMore information: https://github.com/fastlane/fastlane/tree/master/supply\n\n\n\n\n\n\n\n\n\n\nsupply\n\n\n\n\n\n\n\n\n\n\n\n\nSupported platforms\n\n\nandroid\n\n\n\n\n\n\nAuthor\n\n\n@KrauseFx\n\n\n\n\n\n\n\n\n\n\n1 Example\n\n\nsupply\n\n\n\n\n\n\n\n\nParameters\n\n\n\n\n\n\n\n\nKey\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\npackage_name\n\n\nThe package name of the Application to modify\n\n\n\n\n\n\ntrack\n\n\nThe Track to upload the Application to: production, beta, alpha, rollout\n\n\n\n\n\n\nrollout\n\n\nThe percentage of the rollout\n\n\n\n\n\n\nmetadata_path\n\n\nPath to the directory containing the metadata files\n\n\n\n\n\n\nkey\n\n\n[DEPRECATED!] Use --json_key instead - The p12 File used to authenticate with Google\n\n\n\n\n\n\nissuer\n\n\n[DEPRECATED!] Use --json_key instead - The issuer of the p12 file (email address of the service account)\n\n\n\n\n\n\njson_key\n\n\nThe service account json file used to authenticate with Google\n\n\n\n\n\n\napk\n\n\nPath to the APK file to upload\n\n\n\n\n\n\napk_paths\n\n\nAn array of paths to APK files to upload\n\n\n\n\n\n\nskip_upload_apk\n\n\nWhether to skip uploading APK\n\n\n\n\n\n\nskip_upload_metadata\n\n\nWhether to skip uploading metadata\n\n\n\n\n\n\nskip_upload_images\n\n\nWhether to skip uploading images, screenshots not included\n\n\n\n\n\n\nskip_upload_screenshots\n\n\nWhether to skip uploading SCREENSHOTS\n\n\n\n\n\n\ntrack_promote_to\n\n\nThe Track to promote to: production, beta, alpha, rollout\n\n\n\n\n\n\n\n\n\n\nappstore\n\n\nAlias for the deliver action\n\n\n\n\n\n\n\n\nappstore\n\n\n\n\n\n\n\n\n\n\n\n\nSupported platforms\n\n\nios, mac\n\n\n\n\n\n\nAuthor\n\n\n@KrauseFx\n\n\n\n\n\n\n\n\n\n\n1 Example\n\n\ndeliver(\n  force: true, # Set to true to skip PDF verification\n  itc_provider: \nabcde12345\n # pass a specific value to the iTMSTransporter -itc_provider option\n\n)\n\n\n\n\n\n\n\n\nParameters\n\n\n\n\n\n\n\n\nKey\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nusername\n\n\nYour Apple ID Username\n\n\n\n\n\n\napp_identifier\n\n\nThe bundle identifier of your app\n\n\n\n\n\n\napp\n\n\nThe app ID of the app you want to use/modify\n\n\n\n\n\n\nipa\n\n\nPath to your ipa file\n\n\n\n\n\n\npkg\n\n\nPath to your pkg file\n\n\n\n\n\n\nmetadata_path\n\n\nPath to the folder containing the metadata files\n\n\n\n\n\n\nscreenshots_path\n\n\nPath to the folder containing the screenshots\n\n\n\n\n\n\nskip_binary_upload\n\n\nSkip uploading an ipa or pkg to iTunes Connect\n\n\n\n\n\n\nskip_screenshots\n\n\nDon't upload the screenshots\n\n\n\n\n\n\napp_version\n\n\nThe version that should be edited or created\n\n\n\n\n\n\nskip_metadata\n\n\nDon't upload the metadata (e.g. title, description), this will still upload screenshots\n\n\n\n\n\n\nforce\n\n\nSkip the HTML report file verification\n\n\n\n\n\n\nsubmit_for_review\n\n\nSubmit the new version for Review after uploading everything\n\n\n\n\n\n\nautomatic_release\n\n\nShould the app be automatically released once it's approved?\n\n\n\n\n\n\nprice_tier\n\n\nThe price tier of this application\n\n\n\n\n\n\nbuild_number\n\n\nIf set the given build number (already uploaded to iTC) will be used instead of the current built one\n\n\n\n\n\n\napp_rating_config_path\n\n\nPath to the app rating's config\n\n\n\n\n\n\nsubmission_information\n\n\nExtra information for the submission (e.g. third party content)\n\n\n\n\n\n\nteam_id\n\n\nThe ID of your iTunes Connect team if you're in multiple teams\n\n\n\n\n\n\nteam_name\n\n\nThe name of your iTunes Connect team if you're in multiple teams\n\n\n\n\n\n\ndev_portal_team_id\n\n\nThe short ID of your Developer Portal team, if you're in multiple teams. Different from your iTC team ID!\n\n\n\n\n\n\ndev_portal_team_name\n\n\nThe name of your Developer Portal team if you're in multiple teams\n\n\n\n\n\n\nitc_provider\n\n\nThe provider short name to be used with the iTMSTransporter to identify your team\n\n\n\n\n\n\napp_icon\n\n\nMetadata: The path to the app icon\n\n\n\n\n\n\napple_watch_app_icon\n\n\nMetadata: The path to the Apple Watch app icon\n\n\n\n\n\n\ncopyright\n\n\nMetadata: The copyright notice\n\n\n\n\n\n\nprimary_category\n\n\nMetadata: The english name of the primary category(e.g. \nBusiness\n, \nBooks\n)\n\n\n\n\n\n\nsecondary_category\n\n\nMetadata: The english name of the secondary category(e.g. \nBusiness\n, \nBooks\n)\n\n\n\n\n\n\nprimary_first_sub_category\n\n\nMetadata: The english name of the primary first sub category(e.g. \nEducational\n, \nPuzzle\n)\n\n\n\n\n\n\nprimary_second_sub_category\n\n\nMetadata: The english name of the primary second sub category(e.g. \nEducational\n, \nPuzzle\n)\n\n\n\n\n\n\nsecondary_first_sub_category\n\n\nMetadata: The english name of the secondary first sub category(e.g. \nEducational\n, \nPuzzle\n)\n\n\n\n\n\n\nsecondary_second_sub_category\n\n\nMetadata: The english name of the secondary second sub category(e.g. \nEducational\n, \nPuzzle\n)\n\n\n\n\n\n\napp_review_information\n\n\nMetadata: A hash containing the review information\n\n\n\n\n\n\ndescription\n\n\nMetadata: The localised app description\n\n\n\n\n\n\nname\n\n\nMetadata: The localised app name\n\n\n\n\n\n\nkeywords\n\n\nMetadata: An array of localised keywords\n\n\n\n\n\n\nrelease_notes\n\n\nMetadata: Localised release notes for this version\n\n\n\n\n\n\nprivacy_url\n\n\nMetadata: Localised privacy url\n\n\n\n\n\n\nsupport_url\n\n\nMetadata: Localised support url\n\n\n\n\n\n\nmarketing_url\n\n\nMetadata: Localised marketing url\n\n\n\n\n\n\n\n\n\n\nSource Control\n\n\nensure_git_status_clean\n\n\nRaises an exception if there are uncommited git changes\n\n\n\n\nA sanity check to make sure you are working in a repo that is clean. Especially\nuseful to put at the beginning of your Fastfile in the \nbefore_all\n block, if\nsome of your other actions will touch your filesystem, do things to your git repo,\nor just as a general reminder to save your work. Also needed as a prerequisite for\nsome other actions like \nreset_git_repo\n.\n\n\n\n\n\n\n\n\n\n\nensure_git_status_clean\n\n\n\n\n\n\n\n\n\n\n\n\nSupported platforms\n\n\nios, android, mac\n\n\n\n\n\n\nAuthor\n\n\n@lmirosevic\n\n\n\n\n\n\n\n\n\n\n1 Example\n\n\nensure_git_status_clean\n\n\n\n\n\n\nreset_git_repo\n\n\nResets git repo to a clean state by discarding uncommited changes\n\n\n\n\nThis action will reset your git repo to a clean state, discarding any uncommitted and untracked changes. Useful in case you need to revert the repo back to a clean state, e.g. after the fastlane run. Untracked files like \n.env\n will also be deleted, unless \n:skip_clean\n is true. It's a pretty drastic action so it comes with a sort of safety latch. It will only proceed with the reset if either of these conditions are met: You have called the ensure_git_status_clean action prior to calling this action. This ensures that your repo started off in a clean state, so the only things that will get destroyed by this action are files that are created as a byproduct of the fastlane run.\n\n\n\n\n\n\n\n\n\n\nreset_git_repo\n\n\n\n\n\n\n\n\n\n\n\n\nSupported platforms\n\n\nios, android, mac\n\n\n\n\n\n\nAuthor\n\n\n@lmirosevic\n\n\n\n\n\n\n\n\n\n\n4 Examples\n\n\nreset_git_repo\n\n\n\n\nreset_git_repo(force: true) # If you don't care about warnings and are absolutely sure that you want to discard all changes. This will reset the repo even if you have valuable uncommitted changes, so use with care!\n\n\n\n\nreset_git_repo(skip_clean: true) # If you want \ngit clean\n to be skipped, thus NOT deleting untracked files like \n.env\n. Optional, defaults to false.\n\n\n\n\nreset_git_repo(\n  force: true,\n  files: [\n    \n./file.txt\n\n  ]\n)\n\n\n\n\n\n\n\n\nParameters\n\n\n\n\n\n\n\n\nKey\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nfiles\n\n\nArray of files the changes should be discarded. If not given, all files will be discarded\n\n\n\n\n\n\nforce\n\n\nSkip verifying of previously clean state of repo. Only recommended in combination with \nfiles\n option\n\n\n\n\n\n\nskip_clean\n\n\nSkip 'git clean' to avoid removing untracked files like \n.env\n. Defaults to false\n\n\n\n\n\n\ndisregard_gitignore\n\n\nSetting this to true will clean the whole repository, ignoring anything in your local .gitignore. Set this to true if you want the equivalent of a fresh clone, and for all untracked and ignore files to also be removed\n\n\n\n\n\n\nexclude\n\n\nYou can pass a string, or array of, file pattern(s) here which you want to have survive the cleaning process, and remain on disk. E.g. to leave the \nartifacts\n directory you would specify \nexclude: 'artifacts'\n. Make sure this pattern is also in your gitignore! See the gitignore documentation for info on patterns\n\n\n\n\n\n\n\n\n\n\ngit_branch\n\n\nReturns the name of the current git branch\n\n\n\n\nIf no branch could be found, this action will return nil\n\n\n\n\n\n\n\n\n\n\ngit_branch\n\n\n\n\n\n\n\n\n\n\n\n\nSupported platforms\n\n\nios, android, mac\n\n\n\n\n\n\nAuthor\n\n\n@KrauseFx\n\n\n\n\n\n\n\n\n\n\n1 Example\n\n\ngit_branch\n\n\n\n\n\n\ncommit_version_bump\n\n\nCreates a 'Version Bump' commit. Run after \nincrement_build_number\n\n\n\n\nThis action will create a 'Version Bump' commit in your repo. Useful in conjunction with \nincrement_build_number\n.\nIt checks the repo to make sure that only the relevant files have changed, these are the files that \nincrement_build_number\n (\nagvtool\n) touches:\n- All .plist files\n- The \n.xcodeproj/project.pbxproj\n file\nThen commits those files to the repo.\nCustomise the message with the \n:message\n option, defaults to 'Version Bump'\nIf you have other uncommitted changes in your repo, this action will fail. If you started off in a clean repo, and used the \nipa\n and or \nsigh\n actions, then you can use the \nclean_build_artifacts\n action to clean those temporary files up before running this action.\n\n\n\n\n\n\n\n\n\n\ncommit_version_bump\n\n\n\n\n\n\n\n\n\n\n\n\nSupported platforms\n\n\nios, mac\n\n\n\n\n\n\nAuthor\n\n\n@lmirosevic\n\n\n\n\n\n\n\n\n\n\n2 Examples\n\n\ncommit_version_bump\n\n\n\n\ncommit_version_bump(\n  message: \nVersion Bump\n,# create a commit with a custom message\n  xcodeproj: \n./path/to/MyProject.xcodeproj\n, # optional, if you have multiple Xcode project files, you must specify your main project here\n)\n\n\n\n\n\n\n\n\nParameters\n\n\n\n\n\n\n\n\nKey\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nmessage\n\n\nThe commit message when committing the version bump\n\n\n\n\n\n\nxcodeproj\n\n\nThe path to your project file (Not the workspace). If you have only one, this is optional\n\n\n\n\n\n\nforce\n\n\nForces the commit, even if other files than the ones containing the version number have been modified\n\n\n\n\n\n\nsettings\n\n\nInclude Settings.bundle/Root.plist with version bump\n\n\n\n\n\n\nignore\n\n\nA regular expression used to filter matched plist files to be modified\n\n\n\n\n\n\n\n\n\n\npush_to_git_remote\n\n\nPush local changes to the remote branch\n\n\n\n\nLets you push your local commits to a remote git repo. Useful if you make local changes such as adding a version bump commit (using \ncommit_version_bump\n) or a git tag (using 'add_git_tag') on a CI server, and you want to push those changes back to your canonical/main repo.\n\n\n\n\n\n\n\n\n\n\npush_to_git_remote\n\n\n\n\n\n\n\n\n\n\n\n\nSupported platforms\n\n\nios, android, mac\n\n\n\n\n\n\nAuthor\n\n\n@lmirosevic\n\n\n\n\n\n\n\n\n\n\n2 Examples\n\n\npush_to_git_remote # simple version. pushes \nmaster\n branch to \norigin\n remote\n\n\n\n\npush_to_git_remote(\n  remote: \norigin\n,         # optional, default: \norigin\n\n  local_branch: \ndevelop\n,  # optional, aliased by \nbranch\n, default: \nmaster\n\n  remote_branch: \ndevelop\n, # optional, default is set to local_branch\n  force: true,    # optional, default: false\n  tags: false     # optional, default: true\n)\n\n\n\n\n\n\n\n\nParameters\n\n\n\n\n\n\n\n\nKey\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nlocal_branch\n\n\nThe local branch to push from. Defaults to the current branch\n\n\n\n\n\n\nremote_branch\n\n\nThe remote branch to push to. Defaults to the local branch\n\n\n\n\n\n\nforce\n\n\nForce push to remote. Defaults to false\n\n\n\n\n\n\ntags\n\n\nWether tags are pushed to remote. Defaults to true\n\n\n\n\n\n\nremote\n\n\nThe remote to push to. Defaults to \norigin\n\n\n\n\n\n\n\n\n\n\nnumber_of_commits\n\n\nReturn the total number of all commits in current git repo\n\n\n\n\nYou can use this action to get the number of commits of this repo. This is useful if you want to set the build number to the number of commits.\n\n\n\n\n\n\n\n\n\n\nnumber_of_commits\n\n\n\n\n\n\n\n\n\n\n\n\nSupported platforms\n\n\nios, android, mac\n\n\n\n\n\n\nAuthor\n\n\n@onevcat\n\n\n\n\n\n\nReturns\n\n\nThe total number of all commits in current git repo\n\n\n\n\n\n\n\n\n\n\n1 Example\n\n\nbuild_number = number_of_commits\nincrement_build_number(build_number: build_number)\n\n\n\n\n\n\nadd_git_tag\n\n\nThis will add an annotated git tag to the current branch\n\n\n\n\nThis will automatically tag your build with the following format: \ngrouping\n/\nlane\n/\nprefix\nbuild_number\n, where:\n- \ngrouping\n is just to keep your tags organised under one 'folder', defaults to 'builds'\n- \nlane\n is the name of the current fastlane lane\n- \nprefix\n is anything you want to stick in front of the version number, e.g. 'v'\n- \nbuild_number\n is the build number, which defaults to the value emitted by the \nincrement_build_number\n action\nFor example for build 1234 in the 'appstore' lane it will tag the commit with \nbuilds/appstore/1234\n\n\n\n\n\n\n\n\n\n\nadd_git_tag\n\n\n\n\n\n\n\n\n\n\n\n\nSupported platforms\n\n\nios, android, mac\n\n\n\n\n\n\nAuthor\n\n\n@lmirosevic, @maschall\n\n\n\n\n\n\n\n\n\n\n3 Examples\n\n\nadd_git_tag # simple tag with default values\n\n\n\n\nadd_git_tag(\n  grouping: \nfastlane-builds\n,\n  prefix: \nv\n,\n  build_number: 123\n)\n\n\n\n\n# Alternatively, you can specify your own tag. Note that if you do specify a tag, all other arguments are ignored.\nadd_git_tag(\n  tag: \nmy_custom_tag\n\n)\n\n\n\n\n\n\n\n\nParameters\n\n\n\n\n\n\n\n\nKey\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\ntag\n\n\nDefine your own tag text. This will replace all other parameters\n\n\n\n\n\n\ngrouping\n\n\nIs used to keep your tags organised under one 'folder'. Defaults to 'builds'\n\n\n\n\n\n\nprefix\n\n\nAnything you want to put in front of the version number (e.g. 'v')\n\n\n\n\n\n\nbuild_number\n\n\nThe build number. Defaults to the result of increment_build_number if you're using it\n\n\n\n\n\n\nmessage\n\n\nThe tag message. Defaults to the tag's name\n\n\n\n\n\n\ncommit\n\n\nThe commit or object where the tag will be set. Defaults to the current HEAD\n\n\n\n\n\n\nforce\n\n\nForce adding the tag\n\n\n\n\n\n\n\n\n\n\nensure_git_branch\n\n\nRaises an exception if not on a specific git branch\n\n\n\n\nThis action will check if your git repo is checked out to a specific branch.\nYou may only want to make releases from a specific branch, so \nensure_git_branch\n\nwill stop a lane if it was accidentally executed on an incorrect branch.\n\n\n\n\n\n\n\n\n\n\nensure_git_branch\n\n\n\n\n\n\n\n\n\n\n\n\nSupported platforms\n\n\nios, android, mac\n\n\n\n\n\n\nAuthor\n\n\n@dbachrach, @Liquidsoul\n\n\n\n\n\n\n\n\n\n\n2 Examples\n\n\nensure_git_branch # defaults to `master` branch\n\n\n\n\nensure_git_branch(\n  branch: 'develop'\n)\n\n\n\n\n\n\n\n\nParameters\n\n\n\n\n\n\n\n\nKey\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nbranch\n\n\nThe branch that should be checked for. String that can be either the full name of the branch or a regex to match\n\n\n\n\n\n\n\n\n\n\nlast_git_commit\n\n\nReturn last git commit hash, abbreviated commit hash, commit message and author\n\n\n\n\n\n\n\n\nlast_git_commit\n\n\n\n\n\n\n\n\n\n\n\n\nSupported platforms\n\n\nios, android, mac\n\n\n\n\n\n\nAuthor\n\n\n@ngutman\n\n\n\n\n\n\nReturns\n\n\nReturns the following dict: \n\n\n\n\n\n\n\n\n\n\n1 Example\n\n\ncommit = last_git_commit\ncrashlytics(notes: commit[:message]) # message of commit\nauthor = commit[:author] # author of the commit\nhash = commit[:commit_hash] # long sha of commit\nshort_hash = commit[:abbreviated_commit_hash] # short sha of commit\n\n\n\n\n\n\nchangelog_from_git_commits\n\n\nCollect git commit messages into a changelog\n\n\n\n\nBy default, messages will be collected back to the last tag, but the range can be controlled\n\n\n\n\n\n\n\n\n\n\nchangelog_from_git_commits\n\n\n\n\n\n\n\n\n\n\n\n\nSupported platforms\n\n\nios, android, mac\n\n\n\n\n\n\nAuthor\n\n\n@mfurtak, @asfalcone, @SiarheiFedartsou\n\n\n\n\n\n\nReturns\n\n\nReturns a String containing your formatted git commits\n\n\n\n\n\n\n\n\n\n\n2 Examples\n\n\nchangelog_from_git_commits\n\n\n\n\nchangelog_from_git_commits(\n  between: [\n7b092b3\n, \nHEAD\n], # Optional, lets you specify a revision/tag range between which to collect commit info\n  pretty: \n- (%ae) %s\n, # Optional, lets you provide a custom format to apply to each commit when generating the changelog text\n  match_lightweight_tag: false, # Optional, lets you ignore lightweight (non-annotated) tags when searching for the last tag\n  include_merges: true # Optional, lets you filter out merge commits\n)\n\n\n\n\n\n\n\n\nParameters\n\n\n\n\n\n\n\n\nKey\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nbetween\n\n\nArray containing two Git revision values between which to collect messages, you mustn't use it with :commits_count key at the same time\n\n\n\n\n\n\ncommits_count\n\n\nNumber of commits to include in changelog, you mustn't use it with :between key at the same time\n\n\n\n\n\n\npretty\n\n\nThe format applied to each commit while generating the collected value\n\n\n\n\n\n\ntag_match_pattern\n\n\nA glob(7) pattern to match against when finding the last git tag\n\n\n\n\n\n\nmatch_lightweight_tag\n\n\nWhether or not to match a lightweight tag when searching for the last one\n\n\n\n\n\n\ninclude_merges\n\n\nWhether or not to include any commits that are merges\n\n\n\n\n\n\n\u001b[31m(DEPRECATED - use :merge_commit_filtering)\u001b[0m\n\n\n\n\n\n\n\n\nmerge_commit_filtering\n\n\nControls inclusion of merge commits when collecting the changelog.\n\n\n\n\n\n\nValid values: 'include_merges', 'exclude_merges', 'only_include_merges'\n\n\n\n\n\n\n\n\n\n\n\n\ngit_pull\n\n\nExecutes a simple git pull command\n\n\n\n\n\n\n\n\ngit_pull\n\n\n\n\n\n\n\n\n\n\n\n\nSupported platforms\n\n\nios, android, mac\n\n\n\n\n\n\nAuthor\n\n\n@KrauseFx, @JaviSoto\n\n\n\n\n\n\n\n\n\n\n2 Examples\n\n\ngit_pull\n\n\n\n\ngit_pull(only_tags: true) # only the tags, no commits\n\n\n\n\n\n\n\n\nParameters\n\n\n\n\n\n\n\n\nKey\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nonly_tags\n\n\nSimply pull the tags, and not bring new commits to the current branch from the remote\n\n\n\n\n\n\n\n\n\n\ngit_commit\n\n\nDirectly commit the given file with the given message\n\n\n\n\n\n\n\n\ngit_commit\n\n\n\n\n\n\n\n\n\n\n\n\nSupported platforms\n\n\nios, android, mac\n\n\n\n\n\n\nAuthor\n\n\n@KrauseFx\n\n\n\n\n\n\n\n\n\n\n2 Examples\n\n\ngit_commit(path: \n./version.txt\n,\n  message: \nVersion Bump\n)\n\n\n\n\ngit_commit(path: [\n./version.txt\n, \n./changelog.txt\n],\n  message: \nVersion Bump\n)\n\n\n\n\n\n\n\n\nParameters\n\n\n\n\n\n\n\n\nKey\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\npath\n\n\nThe file you want to commit\n\n\n\n\n\n\nmessage\n\n\nThe commit message that should be used\n\n\n\n\n\n\n\n\n\n\npush_git_tags\n\n\nPush local tags to the remote - this will only push tags\n\n\n\n\nIf you only want to push the tags and nothing else, you can use the \npush_git_tags\n action\n\n\n\n\n\n\n\n\n\n\npush_git_tags\n\n\n\n\n\n\n\n\n\n\n\n\nSupported platforms\n\n\nios, android, mac\n\n\n\n\n\n\nAuthor\n\n\n@vittoriom\n\n\n\n\n\n\n\n\n\n\n1 Example\n\n\npush_git_tags\n\n\n\n\n\n\n\n\nParameters\n\n\n\n\n\n\n\n\nKey\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nforce\n\n\nForce push to remote. Defaults to false\n\n\n\n\n\n\nremote\n\n\nThe remote to push tags to\n\n\n\n\n\n\n\n\n\n\nlast_git_tag\n\n\nGet the most recent git tag\n\n\n\n\nIf you are using this action on a \nshallow clone\n, \nthe default with some CI systems like Bamboo\n, you need to ensure that you have also have pulled all the git tags appropriately.  Assuming your git repo has the correct remote set you can issue \nsh('git fetch --tags')\n\n\n\n\n\n\n\n\n\n\nlast_git_tag\n\n\n\n\n\n\n\n\n\n\n\n\nSupported platforms\n\n\nios, android, mac\n\n\n\n\n\n\nAuthor\n\n\n@KrauseFx\n\n\n\n\n\n\n\n\n\n\n1 Example\n\n\nlast_git_tag\n\n\n\n\n\n\nget_build_number_repository\n\n\nGet the build number from the current repository\n\n\n\n\nThis action will get the \nbuild number\n according to what the SCM HEAD reports.\nCurrently supported SCMs are svn (uses root revision), git-svn (uses svn revision) and git (uses short hash) and mercurial (uses short hash or revision number).\nThere is an option, \n:use_hg_revision_number\n, which allows to use mercurial revision number instead of hash.\n\n\n\n\n\n\n\n\n\n\nget_build_number_repository\n\n\n\n\n\n\n\n\n\n\n\n\nSupported platforms\n\n\nios, mac\n\n\n\n\n\n\nAuthor\n\n\n@bartoszj, @pbrooks, @armadsen\n\n\n\n\n\n\nReturns\n\n\nThe build number from the current repository\n\n\n\n\n\n\n\n\n\n\n1 Example\n\n\nget_build_number_repository\n\n\n\n\n\n\n\n\nParameters\n\n\n\n\n\n\n\n\nKey\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nuse_hg_revision_number\n\n\nUse hg revision number instead of hash (ignored for non-hg repos)\n\n\n\n\n\n\n\n\n\n\ngit_add\n\n\nDirectly add the given file\n\n\n\n\n\n\n\n\ngit_add\n\n\n\n\n\n\n\n\n\n\n\n\nSupported platforms\n\n\nios, android, mac\n\n\n\n\n\n\nAuthor\n\n\n@4brunu\n\n\n\n\n\n\n\n\n\n\n2 Examples\n\n\ngit_add(path: \n./version.txt\n)\n\n\n\n\ngit_add(path: [\n./version.txt\n, \n./changelog.txt\n])\n\n\n\n\n\n\n\n\nParameters\n\n\n\n\n\n\n\n\nKey\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\npath\n\n\nThe file you want to add\n\n\n\n\n\n\n\n\n\n\nget_github_release\n\n\nThis will verify if a given release version is available on GitHub\n\n\n\n\nThis will return all information about a release. For example:\n              {\"url\"=\n\"https://api.github.com/repos/KrauseFx/fastlane/releases/1537713\",\n                 \"assets_url\"=\n\"https://api.github.com/repos/KrauseFx/fastlane/releases/1537713/assets\",\n                 \"upload_url\"=\n\"https://uploads.github.com/repos/KrauseFx/fastlane/releases/1537713/assets{?name}\",\n                 \"html_url\"=\n\"https://github.com/fastlane/fastlane/releases/tag/1.8.0\",\n                 \"id\"=\n1537713,\n                 \"tag_name\"=\n\"1.8.0\",\n                 \"target_commitish\"=\n\"master\",\n                 \"name\"=\n\"1.8.0 Switch Lanes \n Pass Parameters\",\n                 \"draft\"=\nfalse,\n                 \"author\"=\n\n                  {\"login\"=\n\"KrauseFx\",\n                   \"id\"=\n869950,\n                   \"avatar_url\"=\n\"https://avatars.githubusercontent.com/u/869950?v=3\",\n                   \"gravatar_id\"=\n\"\",\n                   \"url\"=\n\"https://api.github.com/users/KrauseFx\",\n                   \"html_url\"=\n\"https://github.com/fastlane\",\n                   \"followers_url\"=\n\"https://api.github.com/users/KrauseFx/followers\",\n                   \"following_url\"=\n\"https://api.github.com/users/KrauseFx/following{/other_user}\",\n                   \"gists_url\"=\n\"https://api.github.com/users/KrauseFx/gists{/gist_id}\",\n                   \"starred_url\"=\n\"https://api.github.com/users/KrauseFx/starred{/owner}{/repo}\",\n                   \"subscriptions_url\"=\n\"https://api.github.com/users/KrauseFx/subscriptions\",\n                   \"organizations_url\"=\n\"https://api.github.com/users/KrauseFx/orgs\",\n                   \"repos_url\"=\n\"https://api.github.com/users/KrauseFx/repos\",\n                   \"events_url\"=\n\"https://api.github.com/users/KrauseFx/events{/privacy}\",\n                   \"received_events_url\"=\n\"https://api.github.com/users/KrauseFx/received_events\",\n                   \"type\"=\n\"User\",\n                   \"site_admin\"=\nfalse},\n                 \"prerelease\"=\nfalse,\n                 \"created_at\"=\n\"2015-07-14T23:33:01Z\",\n                 \"published_at\"=\n\"2015-07-14T23:44:10Z\",\n                 \"assets\"=\n[],\n                 \"tarball_url\"=\n\"https://api.github.com/repos/KrauseFx/fastlane/tarball/1.8.0\",\n                 \"zipball_url\"=\n\"https://api.github.com/repos/KrauseFx/fastlane/zipball/1.8.0\",\n                 \"body\"=\n ...Markdown...\n                \"This is one of the biggest updates of \nfastlane\n yet\"\n              }\n\n\n\n\n\n\n\n\n\n\nget_github_release\n\n\n\n\n\n\n\n\n\n\n\n\nSupported platforms\n\n\nios, android, mac\n\n\n\n\n\n\nAuthor\n\n\n@KrauseFx, @czechboy0, @jaleksynas\n\n\n\n\n\n\n\n\n\n\n1 Example\n\n\nrelease = get_github_release(url: \nfastlane/fastlane\n, version: \n1.0.0\n)\nputs release[\nname\n]\n\n\n\n\n\n\n\n\nParameters\n\n\n\n\n\n\n\n\nKey\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nurl\n\n\nThe path to your repo, e.g. 'KrauseFx/fastlane'\n\n\n\n\n\n\nserver_url\n\n\nThe server url. e.g. 'https://your.github.server/api/v3' (Default: 'https://api.github.com')\n\n\n\n\n\n\nversion\n\n\nThe version tag of the release to check\n\n\n\n\n\n\napi_token\n\n\nGitHub Personal Token (required for private repositories)\n\n\n\n\n\n\n\n\n\n\ngit_tag_exists\n\n\nChecks if the git tag with the given name exists in the current repo\n\n\n\n\n\n\n\n\ngit_tag_exists\n\n\n\n\n\n\n\n\n\n\n\n\nSupported platforms\n\n\nios, android, mac\n\n\n\n\n\n\nAuthor\n\n\n@antondomashnev\n\n\n\n\n\n\nReturns\n\n\nBoolean value whether the tag exists or not\n\n\n\n\n\n\n\n\n\n\n1 Example\n\n\nif git_tag_exists(tag: \n1.1.0\n)\n  UI.message(\nFound it \ud83d\ude80\n)\nend\n\n\n\n\n\n\n\n\nParameters\n\n\n\n\n\n\n\n\nKey\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\ntag\n\n\nThe tag name that should be checked\n\n\n\n\n\n\n\n\n\n\ncreate_pull_request\n\n\nThis will create a new pull request on GitHub\n\n\n\n\n\n\n\n\ncreate_pull_request\n\n\n\n\n\n\n\n\n\n\n\n\nSupported platforms\n\n\nios, android, mac\n\n\n\n\n\n\nAuthor\n\n\n@seei\n\n\n\n\n\n\n\n\n\n\n1 Example\n\n\ncreate_pull_request(\n  api_token: ENV[\nGITHUB_TOKEN\n],\n  repo: \nfastlane/fastlane\n,\n  title: \nAmazing new feature\n,\n  head: \nmy-feature\n,       # optional, defaults to current branch name\n  base: \nmaster\n, # optional, defaults to \nmaster\n\n  body: \nPlease pull this in!\n,       # optional\n  api_url: \nhttp://yourdomain/api/v3\n # optional, for Github Enterprise, defaults to \nhttps://api.github.com\n\n)\n\n\n\n\n\n\n\n\nParameters\n\n\n\n\n\n\n\n\nKey\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\napi_token\n\n\nPersonal API Token for GitHub - generate one at https://github.com/settings/tokens\n\n\n\n\n\n\nrepo\n\n\nThe name of the repository you want to submit the pull request to\n\n\n\n\n\n\ntitle\n\n\nThe title of the pull request\n\n\n\n\n\n\nbody\n\n\nThe contents of the pull request\n\n\n\n\n\n\nhead\n\n\nThe name of the branch where your changes are implemented (defaults to the current branch name)\n\n\n\n\n\n\nbase\n\n\nThe name of the branch you want your changes pulled into (defaults to \nmaster\n)\n\n\n\n\n\n\napi_url\n\n\nThe URL of Github API - used when the Enterprise (default to \nhttps://api.github.com\n)\n\n\n\n\n\n\n\n\n\n\nhg_ensure_clean_status\n\n\nRaises an exception if there are uncommited hg changes\n\n\n\n\nAlong the same lines as the \nensure_git_status_clean\n action, this is a sanity check to ensure the working mercurial repo is clean. Especially useful to put at the beginning of your Fastfile in the \nbefore_all\n block.\n\n\n\n\n\n\n\n\n\n\nhg_ensure_clean_status\n\n\n\n\n\n\n\n\n\n\n\n\nSupported platforms\n\n\nios, android, mac\n\n\n\n\n\n\nAuthor\n\n\n@sjrmanning\n\n\n\n\n\n\n\n\n\n\n1 Example\n\n\nhg_ensure_clean_status\n\n\n\n\n\n\nhg_commit_version_bump\n\n\nThis will commit a version bump to the hg repo\n\n\n\n\nThe mercurial equivalent of the \ncommit_version_bump\n git action. Like the git version, it is useful in conjunction with \nincrement_build_number\n.\nIt checks the repo to make sure that only the relevant files have changed, these are the files that \nincrement_build_number\n (\nagvtool\n) touches:\n- All .plist files\n- The \n.xcodeproj/project.pbxproj\n file\nThen commits those files to the repo.\nCustomise the message with the \n:message\n option, defaults to 'Version Bump'\nIf you have other uncommitted changes in your repo, this action will fail. If you started off in a clean repo, and used the \nipa\n and or \nsigh\n actions, then you can use the \nclean_build_artifacts\n action to clean those temporary files up before running this action.\n\n\n\n\n\n\n\n\n\n\nhg_commit_version_bump\n\n\n\n\n\n\n\n\n\n\n\n\nSupported platforms\n\n\nios, android, mac\n\n\n\n\n\n\nAuthor\n\n\n@sjrmanning\n\n\n\n\n\n\n\n\n\n\n2 Examples\n\n\nhg_commit_version_bump\n\n\n\n\nhg_commit_version_bump(\n  message: \nVersion Bump\n,       # create a commit with a custom message\n  xcodeproj: \n./path/MyProject.xcodeproj\n, # optional, if you have multiple Xcode project files, you must specify your main project here\n)\n\n\n\n\n\n\n\n\nParameters\n\n\n\n\n\n\n\n\nKey\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nmessage\n\n\nThe commit message when committing the version bump\n\n\n\n\n\n\nxcodeproj\n\n\nThe path to your project file (Not the workspace). If you have only one, this is optional\n\n\n\n\n\n\nforce\n\n\nForces the commit, even if other files than the ones containing the version number have been modified\n\n\n\n\n\n\ntest_dirty_files\n\n\nA list of dirty files passed in for testing\n\n\n\n\n\n\ntest_expected_files\n\n\nA list of expected changed files passed in for testin\n\n\n\n\n\n\n\n\n\n\nhg_add_tag\n\n\nThis will add a hg tag to the current branch\n\n\n\n\n\n\n\n\nhg_add_tag\n\n\n\n\n\n\n\n\n\n\n\n\nSupported platforms\n\n\nios, android, mac\n\n\n\n\n\n\nAuthor\n\n\n@sjrmanning\n\n\n\n\n\n\n\n\n\n\n1 Example\n\n\nhg_add_tag(tag: \n1.3\n)\n\n\n\n\n\n\n\n\nParameters\n\n\n\n\n\n\n\n\nKey\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\ntag\n\n\nTag to create\n\n\n\n\n\n\n\n\n\n\nhg_push\n\n\nThis will push changes to the remote hg repository\n\n\n\n\nThe mercurial equivalent of \npush_to_git_remote\n \u2014 pushes your local commits to a remote mercurial repo. Useful when local changes such as adding a version bump commit or adding a tag are part of your lane\u2019s actions.\n\n\n\n\n\n\n\n\n\n\nhg_push\n\n\n\n\n\n\n\n\n\n\n\n\nSupported platforms\n\n\nios, android, mac\n\n\n\n\n\n\nAuthor\n\n\n@sjrmanning\n\n\n\n\n\n\n\n\n\n\n2 Examples\n\n\nhg_push\n\n\n\n\nhg_push(\n  destination: \nssh://hg@repohost.com/owner/repo\n,\n  force: true\n)\n\n\n\n\n\n\n\n\nParameters\n\n\n\n\n\n\n\n\nKey\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nforce\n\n\nForce push to remote. Defaults to false\n\n\n\n\n\n\ndestination\n\n\nThe destination to push to\n\n\n\n\n\n\n\n\n\n\nNotifications\n\n\nslack\n\n\nSend a success/error message to your Slack group\n\n\n\n\nCreate an Incoming WebHook and export this as \nSLACK_URL\n. Can send a message to \n#channel\n (by default), a direct message to \n@username\n or a message to a private group \ngroup\n with success (green) or failure (red) status.\n\n\n\n\n\n\n\n\n\n\nslack\n\n\n\n\n\n\n\n\n\n\n\n\nSupported platforms\n\n\nios, android, mac\n\n\n\n\n\n\nAuthor\n\n\n@KrauseFx\n\n\n\n\n\n\n\n\n\n\n2 Examples\n\n\nslack(message: \nApp successfully released!\n)\n\n\n\n\nslack(\n  message: \nApp successfully released!\n,\n  channel: \n#channel\n,  # Optional, by default will post to the default channel configured for the POST URL.\n  success: true,        # Optional, defaults to true.\n  payload: {  # Optional, lets you specify any number of your own Slack attachments.\n    \nBuild Date\n =\n Time.new.to_s,\n    \nBuilt by\n =\n \nJenkins\n,\n  },\n  default_payloads: [:git_branch, :git_author], # Optional, lets you specify a whitelist of default payloads to include. Pass an empty array to suppress all the default payloads.\n        # Don't add this key, or pass nil, if you want all the default payloads. The available default payloads are: `lane`, `test_result`, `git_branch`, `git_author`, `last_git_commit_message`.\n  attachment_properties: { # Optional, lets you specify any other properties available for attachments in the slack API (see https://api.slack.com/docs/attachments).\n       # This hash is deep merged with the existing properties set using the other properties above. This allows your own fields properties to be appended to the existing fields that were created using the `payload` property for instance.\n    thumb_url: \nhttp://example.com/path/to/thumb.png\n,\n    fields: [{\n      title: \nMy Field\n,\n      value: \nMy Value\n,\n      short: true\n    }]\n  }\n)\n\n\n\n\n\n\n\n\nParameters\n\n\n\n\n\n\n\n\nKey\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nmessage\n\n\nThe message that should be displayed on Slack. This supports the standard Slack markup language\n\n\n\n\n\n\nchannel\n\n\n#channel or @username\n\n\n\n\n\n\nuse_webhook_configured_username_and_icon\n\n\nUse webook's default username and icon settings? (true/false)\n\n\n\n\n\n\nslack_url\n\n\nCreate an Incoming WebHook for your Slack group\n\n\n\n\n\n\nusername\n\n\nOverrides the webook's username property if use_webhook_configured_username_and_icon is false\n\n\n\n\n\n\nicon_url\n\n\nOverrides the webook's image property if use_webhook_configured_username_and_icon is false\n\n\n\n\n\n\npayload\n\n\nAdd additional information to this post. payload must be a hash containg any key with any value\n\n\n\n\n\n\ndefault_payloads\n\n\nRemove some of the default payloads. More information about the available payloads on GitHub\n\n\n\n\n\n\nattachment_properties\n\n\nMerge additional properties in the slack attachment, see https://api.slack.com/docs/attachments\n\n\n\n\n\n\nsuccess\n\n\nWas this build successful? (true/false)\n\n\n\n\n\n\n\n\n\n\nnotification\n\n\nDisplay a macOS notification with custom message and title\n\n\n\n\n\n\n\n\nnotification\n\n\n\n\n\n\n\n\n\n\n\n\nSupported platforms\n\n\nios, android, mac\n\n\n\n\n\n\nAuthor\n\n\n@champo, @cbowns, @KrauseFx, @amarcadet, @dusek\n\n\n\n\n\n\n\n\n\n\n1 Example\n\n\nnotification(subtitle: \nFinished Building\n, message: \nReady to upload...\n)\n\n\n\n\n\n\n\n\nParameters\n\n\n\n\n\n\n\n\nKey\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\ntitle\n\n\nThe title to display in the notification\n\n\n\n\n\n\nsubtitle\n\n\nA subtitle to display in the notification\n\n\n\n\n\n\nmessage\n\n\nThe message to display in the notification\n\n\n\n\n\n\nsound\n\n\nThe name of a sound to play when the notification appears (names are listed in Sound Preferences)\n\n\n\n\n\n\nactivate\n\n\nBundle identifier of application to be opened when the notification is clicked\n\n\n\n\n\n\napp_icon\n\n\nThe URL of an image to display instead of the application icon (Mavericks+ only)\n\n\n\n\n\n\ncontent_image\n\n\nThe URL of an image to display attached to the notification (Mavericks+ only)\n\n\n\n\n\n\nopen\n\n\nURL of the resource to be opened when the notification is clicked\n\n\n\n\n\n\nexecute\n\n\nShell command to run when the notification is clicked\n\n\n\n\n\n\n\n\n\n\nhipchat\n\n\nSend a error/success message to HipChat\n\n\n\n\nSend a message to \nroom\n (by default) or a direct message to \n@username\n with success (green) or failure (red) status.\n\n\n\n\n\n\n\n\n\n\nhipchat\n\n\n\n\n\n\n\n\n\n\n\n\nSupported platforms\n\n\nios, android, mac\n\n\n\n\n\n\nAuthor\n\n\n@jingx23\n\n\n\n\n\n\n\n\n\n\n1 Example\n\n\nhipchat(\n  message: \nApp successfully released!\n,\n  message_format: \nhtml\n, # or \ntext\n, defaults to \nhtml\n\n  channel: \nRoom or @username\n,\n  success: true\n)\n\n\n\n\n\n\n\n\nParameters\n\n\n\n\n\n\n\n\nKey\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nmessage\n\n\nThe message to post on HipChat\n\n\n\n\n\n\nchannel\n\n\nThe room or @username\n\n\n\n\n\n\napi_token\n\n\nHipchat API Token\n\n\n\n\n\n\ncustom_color\n\n\nSpecify a custom color, this overrides the success boolean. Can be one of 'yellow', 'red', 'green', 'purple', 'gray', or 'random'\n\n\n\n\n\n\nsuccess\n\n\nWas this build successful? (true/false)\n\n\n\n\n\n\nversion\n\n\nVersion of the Hipchat API. Must be 1 or 2\n\n\n\n\n\n\nnotify_room\n\n\nShould the people in the room be notified? (true/false)\n\n\n\n\n\n\napi_host\n\n\nThe host of the HipChat-Server API\n\n\n\n\n\n\nmessage_format\n\n\nFormat of the message to post. Must be either 'html' or 'text'\n\n\n\n\n\n\ninclude_html_header\n\n\nShould html formatted messages include a preformatted header? (true/false)\n\n\n\n\n\n\nfrom\n\n\nName the message will appear be sent from\n\n\n\n\n\n\n\n\n\n\nmailgun\n\n\nSend a success/error message to an email group\n\n\n\n\n\n\n\n\nmailgun\n\n\n\n\n\n\n\n\n\n\n\n\nSupported platforms\n\n\nios, android, mac\n\n\n\n\n\n\nAuthor\n\n\n@thiagolioy\n\n\n\n\n\n\n\n\n\n\n2 Examples\n\n\nmailgun(\n  to: \nfastlane@krausefx.com\n,\n  success: true,\n  message: \nThis is the mail's content\n\n)\n\n\n\n\nmailgun(\n  postmaster: \nMY_POSTMASTER\n,\n  apikey: \nMY_API_KEY\n,\n  to: \nDESTINATION_EMAIL\n,\n  from: \nEMAIL_FROM_NAME\n,\n  success: true,\n  message: \nMail Body\n,\n  app_link: \nhttp://www.myapplink.com\n,\n  ci_build_link: \nhttp://www.mycibuildlink.com\n,\n  template_path: \nHTML_TEMPLATE_PATH\n\n)\n\n\n\n\n\n\n\n\nParameters\n\n\n\n\n\n\n\n\nKey\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nmailgun_sandbox_domain\n\n\nMailgun sandbox domain postmaster for your mail. Please use postmaster instead\n\n\n\n\n\n\nmailgun_sandbox_postmaster\n\n\nMailgun sandbox domain postmaster for your mail. Please use postmaster instead\n\n\n\n\n\n\nmailgun_apikey\n\n\nMailgun apikey for your mail. Please use postmaster instead\n\n\n\n\n\n\npostmaster\n\n\nMailgun sandbox domain postmaster for your mail\n\n\n\n\n\n\napikey\n\n\nMailgun apikey for your mail\n\n\n\n\n\n\nto\n\n\nDestination of your mail\n\n\n\n\n\n\nfrom\n\n\nMailgun sender name\n\n\n\n\n\n\nmessage\n\n\nMessage of your mail\n\n\n\n\n\n\nsubject\n\n\nSubject of your mail\n\n\n\n\n\n\nsuccess\n\n\nWas this build successful? (true/false)\n\n\n\n\n\n\napp_link\n\n\nApp Release link\n\n\n\n\n\n\nci_build_link\n\n\nCI Build Link\n\n\n\n\n\n\ntemplate_path\n\n\nMail HTML template\n\n\n\n\n\n\n\n\n\n\nchatwork\n\n\nSend a success/error message to ChatWork\n\n\n\n\nInformation on how to obtain an API token: http://developer.chatwork.com/ja/authenticate.html\n\n\n\n\n\n\n\n\n\n\nchatwork\n\n\n\n\n\n\n\n\n\n\n\n\nSupported platforms\n\n\nios, android, mac\n\n\n\n\n\n\nAuthor\n\n\n@astronaughts\n\n\n\n\n\n\n\n\n\n\n1 Example\n\n\nchatwork(\n  message: \nApp successfully released!\n,\n  roomid: 12345,\n  success: true,\n  api_token: \nYour Token\n\n)\n\n\n\n\n\n\n\n\nParameters\n\n\n\n\n\n\n\n\nKey\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\napi_token\n\n\nChatWork API Token\n\n\n\n\n\n\nmessage\n\n\nThe message to post on ChatWork\n\n\n\n\n\n\nroomid\n\n\nThe room ID\n\n\n\n\n\n\nsuccess\n\n\nWas this build successful? (true/false)\n\n\n\n\n\n\n\n\n\n\nflock\n\n\nSend a message to a Flock group\n\n\n\n\nTo obtain the token, create a new \nincoming message webhook\n\nin your Flock admin panel.\n\n\n\n\n\n\n\n\n\n\nflock\n\n\n\n\n\n\n\n\n\n\n\n\nSupported platforms\n\n\nios, android, mac\n\n\n\n\n\n\nAuthor\n\n\n@Manav\n\n\n\n\n\n\n\n\n\n\n1 Example\n\n\nflock(\n  message: \nHello\n,\n  token: \nxxx\n\n)\n\n\n\n\n\n\n\n\nParameters\n\n\n\n\n\n\n\n\nKey\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nmessage\n\n\nMessage text\n\n\n\n\n\n\ntoken\n\n\nToken for the Flock incoming webhook\n\n\n\n\n\n\nbase_url\n\n\nBase URL of the Flock incoming message webhook\n\n\n\n\n\n\n\n\n\n\nifttt\n\n\nConnect to the IFTTT Maker Channel. https://ifttt.com/maker\n\n\n\n\nConnect to the IFTTT \nMaker Channel\n. An IFTTT Recipe has two components: a Trigger and an Action. In this case, the Trigger will fire every time the Maker Channel receives a web request (made by this \nfastlane\n action) to notify it of an event. The Action can be anything that IFTTT supports: email, SMS, etc.\n\n\n\n\n\n\n\n\n\n\nifttt\n\n\n\n\n\n\n\n\n\n\n\n\nSupported platforms\n\n\nios, android, mac\n\n\n\n\n\n\nAuthor\n\n\n@vpolouchkine\n\n\n\n\n\n\n\n\n\n\n1 Example\n\n\nifttt(\n  api_key: \n...\n,\n  event_name: \n...\n,\n  value1: \nfoo\n,\n  value2: \nbar\n,\n  value3: \nbaz\n\n)\n\n\n\n\n\n\n\n\nParameters\n\n\n\n\n\n\n\n\nKey\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\napi_key\n\n\nAPI key\n\n\n\n\n\n\nevent_name\n\n\nThe name of the event that will be triggered\n\n\n\n\n\n\nvalue1\n\n\nExtra data sent with the event\n\n\n\n\n\n\nvalue2\n\n\nExtra data sent with the event\n\n\n\n\n\n\nvalue3\n\n\nExtra data sent with the event\n\n\n\n\n\n\n\n\n\n\ntwitter\n\n\nPost a tweet on Twitter.com\n\n\n\n\nPost a tweet on twitter. Requires you to setup an app on twitter.com and obtain consumer and access_token.\n\n\n\n\n\n\n\n\n\n\ntwitter\n\n\n\n\n\n\n\n\n\n\n\n\nSupported platforms\n\n\nios, android, mac\n\n\n\n\n\n\nAuthor\n\n\n@hjanuschka\n\n\n\n\n\n\n\n\n\n\n1 Example\n\n\ntwitter(\n  access_token: \nXXXX\n,\n  access_token_secret: \nxxx\n,\n  consumer_key: \nxxx\n,\n  consumer_secret: \nxxx\n,\n  message: \nYou rock!\n\n)\n\n\n\n\n\n\n\n\nParameters\n\n\n\n\n\n\n\n\nKey\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nconsumer_key\n\n\nConsumer Key\n\n\n\n\n\n\nconsumer_secret\n\n\nConsumer Secret\n\n\n\n\n\n\naccess_token\n\n\nAccess Token\n\n\n\n\n\n\naccess_token_secret\n\n\nAccess Token Secret\n\n\n\n\n\n\nmessage\n\n\nThe tweet\n\n\n\n\n\n\n\n\n\n\ntypetalk\n\n\nPost a message to Typetalk\n\n\n\n\n\n\n\n\ntypetalk\n\n\n\n\n\n\n\n\n\n\n\n\nSupported platforms\n\n\nios, android, mac\n\n\n\n\n\n\nAuthor\n\n\n@Nulab Inc.\n\n\n\n\n\n\n\n\n\n\n1 Example\n\n\ntypetalk(\n  message: \nApp successfully released!\n,\n  note_path: \nChangeLog.md\n,\n  topicId: 1,\n  success: true,\n  typetalk_token: \nYour Typetalk Token\n\n)\n\n\n\n\n\n\nDeprecated\n\n\nnotify\n\n\nShows a macOS notification - use \nnotification\n instead\n\n\n\n\n\n\n\n\nnotify\n\n\n\n\n\n\n\n\n\n\n\n\nSupported platforms\n\n\nios, android, mac\n\n\n\n\n\n\nAuthor\n\n\n@champo, @KrauseFx\n\n\n\n\n\n\n\n\n\n\nupdate_project_code_signing\n\n\nUpdated code signing settings from 'Automatic' to a specific profile\n\n\n\n\nDon't use this actoin, check out https://docs.fastlane.tools/codesigning/getting-started/ for more details\n\n\n\n\n\n\n\n\n\n\nupdate_project_code_signing\n\n\n\n\n\n\n\n\n\n\n\n\nSupported platforms\n\n\nios\n\n\n\n\n\n\nAuthor\n\n\n@KrauseFx\n\n\n\n\n\n\n\n\n\n\n\n\nParameters\n\n\n\n\n\n\n\n\nKey\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\npath\n\n\nPath to your Xcode project\n\n\n\n\n\n\nudid\n\n\nThe UDID of the provisioning profile you want to use\n\n\n\n\n\n\n\n\n\n\nMisc\n\n\nputs\n\n\nPrints out the given text\n\n\n\n\n\n\n\n\nputs\n\n\n\n\n\n\n\n\n\n\n\n\nSupported platforms\n\n\nios, android, mac\n\n\n\n\n\n\nAuthor\n\n\n@KrauseFx\n\n\n\n\n\n\n\n\n\n\n1 Example\n\n\nputs \nHi there\n\n\n\n\n\n\n\nfastlane_version\n\n\nVerifies the minimum fastlane version required\n\n\n\n\nAdd this to your \nFastfile\n to require a certain version of \nfastlane\n.\nUse it if you use an action that just recently came out and you need it\n\n\n\n\n\n\n\n\n\n\nfastlane_version\n\n\n\n\n\n\n\n\n\n\n\n\nSupported platforms\n\n\nios, android, mac\n\n\n\n\n\n\nAuthor\n\n\n@KrauseFx\n\n\n\n\n\n\n\n\n\n\n1 Example\n\n\nfastlane_version \n1.50.0\n\n\n\n\n\n\n\ndefault_platform\n\n\nDefines a default platform to not have to specify the platform\n\n\n\n\n\n\n\n\ndefault_platform\n\n\n\n\n\n\n\n\n\n\n\n\nSupported platforms\n\n\nios, android, mac\n\n\n\n\n\n\nAuthor\n\n\n@KrauseFx\n\n\n\n\n\n\n\n\n\n\n1 Example\n\n\ndefault_platform :android\n\n\n\n\n\n\nlane_context\n\n\nAn alias to \nActions.lane_context\n\n\n\n\n\n\n\n\nlane_context\n\n\n\n\n\n\n\n\n\n\n\n\nSupported platforms\n\n\nios, android, mac\n\n\n\n\n\n\nAuthor\n\n\n@KrauseFx\n\n\n\n\n\n\n\n\n\n\nimport\n\n\nImport another Fastfile to use its lanes\n\n\n\n\nThis is useful if you have shared lanes across multiple apps and you want to store a Fastfile\nin a separate folder. The path must be relative to the Fastfile this is called from.\n\n\n\n\n\n\n\n\n\n\nimport\n\n\n\n\n\n\n\n\n\n\n\n\nSupported platforms\n\n\nios, android, mac\n\n\n\n\n\n\nAuthor\n\n\n@KrauseFx\n\n\n\n\n\n\n\n\n\n\n1 Example\n\n\nimport \n./path/to/other/Fastfile\n\n\n\n\n\n\n\nproduce\n\n\nCreates the given application on iTC and the Dev Portal if necessary\n\n\n\n\n\n\n\n\nproduce\n\n\n\n\n\n\n\n\n\n\n\n\nSupported platforms\n\n\nios\n\n\n\n\n\n\nAuthor\n\n\n@KrauseFx\n\n\n\n\n\n\n\n\n\n\n1 Example\n\n\nproduce(\n  username: \nfelix@krausefx.com\n,\n  app_identifier: \ncom.krausefx.app\n,\n  app_name: \nMyApp\n,\n  language: \nEnglish\n,\n  app_version: \n1.0\n,\n  sku: \n123\n,\n  team_name: \nSunApps GmbH\n # Only necessary when in multiple teams.\n)\n\n\n\n\n\n\n\n\nParameters\n\n\n\n\n\n\n\n\nKey\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nusername\n\n\nYour Apple ID Username\n\n\n\n\n\n\napp_identifier\n\n\nApp Identifier (Bundle ID, e.g. com.krausefx.app)\n\n\n\n\n\n\nbundle_identifier_suffix\n\n\nApp Identifier Suffix (Ignored if App Identifier does not ends with .*)\n\n\n\n\n\n\napp_name\n\n\nApp Name\n\n\n\n\n\n\napp_version\n\n\nInitial version number (e.g. '1.0')\n\n\n\n\n\n\nsku\n\n\nSKU Number (e.g. '1234')\n\n\n\n\n\n\nlanguage\n\n\nPrimary Language (e.g. 'English', 'German')\n\n\n\n\n\n\ncompany_name\n\n\nThe name of your company. Only required if it's the first app you create\n\n\n\n\n\n\nskip_itc\n\n\nSkip the creation of the app on iTunes Connect\n\n\n\n\n\n\nskip_devcenter\n\n\nSkip the creation of the app on the Apple Developer Portal\n\n\n\n\n\n\nteam_id\n\n\nThe ID of your Developer Portal team if you're in multiple teams\n\n\n\n\n\n\nteam_name\n\n\nThe name of your Developer Portal team if you're in multiple teams\n\n\n\n\n\n\nitc_team_id\n\n\nThe ID of your iTunes Connect team if you're in multiple teams\n\n\n\n\n\n\nitc_team_name\n\n\nThe name of your iTunes Connect team if you're in multiple teams\n\n\n\n\n\n\n\n\n\n\nclean_build_artifacts\n\n\nDeletes files created as result of running gym, cert, sigh or download_dsyms\n\n\n\n\nThis action deletes the files that get created in your repo as a result of running the \ngym\n and \nsigh\n commands. It doesn't delete the \nfastlane/report.xml\n though, this is probably more suited for the .gitignore.\nUseful if you quickly want to send out a test build by dropping down to the command line and typing something like \nfastlane beta\n, without leaving your repo in a messy state afterwards.\n\n\n\n\n\n\n\n\n\n\nclean_build_artifacts\n\n\n\n\n\n\n\n\n\n\n\n\nSupported platforms\n\n\nios, mac\n\n\n\n\n\n\nAuthor\n\n\n@lmirosevic\n\n\n\n\n\n\n\n\n\n\n1 Example\n\n\nclean_build_artifacts\n\n\n\n\n\n\n\n\nParameters\n\n\n\n\n\n\n\n\nKey\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nexclude_pattern\n\n\nExclude all files from clearing that match the given Regex pattern: e.g. '.*.mobileprovision'\n\n\n\n\n\n\n\n\n\n\nimport_from_git\n\n\nImport another Fastfile from a remote git repository to use its lanes\n\n\n\n\nThis is useful if you have shared lanes across multiple apps and you want to store the Fastfile\nin a remote git repository.\n\n\n\n\n\n\n\n\n\n\nimport_from_git\n\n\n\n\n\n\n\n\n\n\n\n\nSupported platforms\n\n\nios, android, mac\n\n\n\n\n\n\nAuthor\n\n\n@fabiomassimo, @KrauseFx, @Liquidsoul\n\n\n\n\n\n\n\n\n\n\n1 Example\n\n\nimport_from_git(\n  url: \ngit@github.com:fastlane/fastlane.git\n, # The url of the repository to import the Fastfile from.\n  branch: \nHEAD\n, # The branch to checkout on the repository. Defaults to `HEAD`.\n  path: \nfastlane/Fastfile\n # The path of the Fastfile in the repository. Defaults to `fastlane/Fastfile`.\n)\n\n\n\n\n\n\n\n\nParameters\n\n\n\n\n\n\n\n\nKey\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nurl\n\n\nThe url of the repository to import the Fastfile from\n\n\n\n\n\n\nbranch\n\n\nThe branch or tag to check-out on the repository\n\n\n\n\n\n\npath\n\n\nThe path of the Fastfile in the repository\n\n\n\n\n\n\n\n\n\n\nunlock_keychain\n\n\nUnlock a keychain\n\n\n\n\nUnlocks the give keychain file and adds it to the keychain search list\nKeychains can be replaced with \nadd_to_search_list: :replace\n\n\n\n\n\n\n\n\n\n\nunlock_keychain\n\n\n\n\n\n\n\n\n\n\n\n\nSupported platforms\n\n\nios, android, mac\n\n\n\n\n\n\nAuthor\n\n\n@xfreebird\n\n\n\n\n\n\n\n\n\n\n4 Examples\n\n\nunlock_keychain( # Unlock an existing keychain and add it to the keychain search list\n  path: \n/path/to/KeychainName.keychain\n,\n  password: \nmysecret\n\n)\n\n\n\n\nunlock_keychain( # By default the keychain is added to the existing. To replace them with the selected keychain you may use `:replace`\n  path: \n/path/to/KeychainName.keychain\n,\n  password: \nmysecret\n,\n  add_to_search_list: :replace # To only add a keychain use `true` or `:add`.\n)\n\n\n\n\nunlock_keychain( # In addition, the keychain can be selected as a default keychain\n  path: \n/path/to/KeychainName.keychain\n,\n  password: \nmysecret\n,\n  set_default: true\n)\n\n\n\n\nunlock_keychain( # If the keychain file is located in the standard location `~/Library/Keychains`, then it is sufficient to provide the keychain file name, or file name with its suffix.\n  path: \nKeychainName\n,\n  password: \nmysecret\n\n)\n\n\n\n\n\n\n\n\nParameters\n\n\n\n\n\n\n\n\nKey\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\npath\n\n\nPath to the Keychain file\n\n\n\n\n\n\npassword\n\n\nKeychain password\n\n\n\n\n\n\nadd_to_search_list\n\n\nAdd to keychain search list\n\n\n\n\n\n\nset_default\n\n\nSet as default keychain\n\n\n\n\n\n\n\n\n\n\nupdate_fastlane\n\n\nMakes sure fastlane-tools are up-to-date when running fastlane\n\n\n\n\nThis action will look at all installed fastlane tools and update them to the next available minor version - major version updates will not be performed automatically, as they might include breaking changes. If an update was performed, fastlane will be restarted before the run continues.\nIf you are using rbenv or rvm, everything should be good to go. However, if you are using the system's default ruby, some additional setup is needed for this action to work correctly. In short, fastlane needs to be able to access your gem library without running in \nsudo\n mode.\nThe simplest possible fix for this is putting the following lines into your \n~/.bashrc\n or \n~/.zshrc\n file:\n\n\n\n\nexport GEM_HOME=~/.gems\nexport PATH=$PATH:~/.gems/bin\n\n\n\n\nAfter the above changes, restart your terminal, then run \nmkdir $GEM_HOME\n to create the new gem directory. After this, you're good to go!\nRecommended usage of the \nupdate_fastlane\n action is at the top of the \nbefore_all\n block, before running any other action\n\n\n\n\n\n\n\n\nupdate_fastlane\n\n\n\n\n\n\n\n\n\n\n\n\nSupported platforms\n\n\nios, android, mac\n\n\n\n\n\n\nAuthor\n\n\n@milch\n\n\n\n\n\n\n\n\n\n\n1 Example\n\n\nbefore_all do\n  update_fastlane\n  # ...\nend\n\n\n\n\n\n\n\n\nParameters\n\n\n\n\n\n\n\n\nKey\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\ntools\n\n\nComma separated list of fastlane tools to update (e.g. fastlane,deliver,sigh). If not specified, all currently installed fastlane-tools will be updated\n\n\n\n\n\n\nno_update\n\n\nDon't update during this run. Defaults to false\n\n\n\n\n\n\n\n\n\n\nis_ci\n\n\nIs the current run being executed on a CI system, like Jenkins or Travis\n\n\n\n\nThe return value of this method is true if fastlane is currently executed on\nTravis, Jenkins, Circle or a similar CI service\n\n\n\n\n\n\n\n\n\n\nis_ci\n\n\n\n\n\n\n\n\n\n\n\n\nSupported platforms\n\n\nios, android, mac\n\n\n\n\n\n\nAuthor\n\n\n@KrauseFx\n\n\n\n\n\n\n\n\n\n\n1 Example\n\n\nif is_ci?\n  puts \nI'm a computer\n\nelse\n  say \nHi Human!\n\nend\n\n\n\n\n\n\nsay\n\n\nThis action speaks out loud the given text\n\n\n\n\n\n\n\n\nsay\n\n\n\n\n\n\n\n\n\n\n\n\nSupported platforms\n\n\nios, android, mac\n\n\n\n\n\n\nAuthor\n\n\n@KrauseFx\n\n\n\n\n\n\n\n\n\n\n1 Example\n\n\nsay \nI can speak\n\n\n\n\n\n\n\nbundle_install\n\n\nThis action runs \nbundle install\n (if available)\n\n\n\n\n\n\n\n\nbundle_install\n\n\n\n\n\n\n\n\n\n\n\n\nSupported platforms\n\n\nios, android, mac\n\n\n\n\n\n\nAuthor\n\n\n@birmacher, @koglinjg\n\n\n\n\n\n\n\n\n\n\n\n\nParameters\n\n\n\n\n\n\n\n\nKey\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nbinstubs\n\n\nGenerate bin stubs for bundled gems to ./bin\n\n\n\n\n\n\nclean\n\n\nRun bundle clean automatically after install\n\n\n\n\n\n\nfull_index\n\n\nUse the rubygems modern index instead of the API endpoint\n\n\n\n\n\n\ngemfile\n\n\nUse the specified gemfile instead of Gemfile\n\n\n\n\n\n\njobs\n\n\nInstall gems using parallel workers\n\n\n\n\n\n\nlocal\n\n\nDo not attempt to fetch gems remotely and use the gem cache instead\n\n\n\n\n\n\ndeployment\n\n\nInstall using defaults tuned for deployment and CI environments\n\n\n\n\n\n\nno_cache\n\n\nDon't update the existing gem cache\n\n\n\n\n\n\nno_prune\n\n\nDon't remove stale gems from the cache\n\n\n\n\n\n\npath\n\n\nSpecify a different path than the system default ($BUNDLE_PATH or $GEM_HOME). Bundler will remember this value for future installs on this machine\n\n\n\n\n\n\nsystem\n\n\nInstall to the system location ($BUNDLE_PATH or $GEM_HOME) even if the bundle was previously installed somewhere else for this application\n\n\n\n\n\n\nquiet\n\n\nOnly output warnings and errors\n\n\n\n\n\n\nretry\n\n\nRetry network and git requests that have failed\n\n\n\n\n\n\nshebang\n\n\nSpecify a different shebang executable name than the default (usually 'ruby')\n\n\n\n\n\n\nstandalone\n\n\nMake a bundle that can work without the Bundler runtime\n\n\n\n\n\n\ntrust_policy\n\n\nSets level of security when dealing with signed gems. Accepts \nLowSecurity\n, \nMediumSecurity\n and \nHighSecurity\n as values\n\n\n\n\n\n\nwithout\n\n\nExclude gems that are part of the specified named group\n\n\n\n\n\n\nwith\n\n\nInclude gems that are part of the specified named group\n\n\n\n\n\n\n\n\n\n\nsetup_jenkins\n\n\nSetup xcodebuild, gym and scan for easier Jenkins integration\n\n\n\n\n\n\nAdds and unlocks keychains from Jenkins 'Keychains and Provisioning Profiles Plugin'\n\n\nSets code signing identity from Jenkins 'Keychains and Provisioning Profiles Plugin'\n\n\nSets output directory to './output' (gym, scan and backup_xcarchive).\n\n\nSets derived data path to './derivedData' (xcodebuild, gym, scan and clear_derived_data, carthage).\n\n\nProduce result bundle (gym and scan).\nThis action helps with Jenkins integration. Creates own derived data for each job. All build results like IPA files and archives will be stored in the \n./output\n directory.\nThe action also works with \nKeychains and Provisioning Profiles Plugin\n, selected keychain\nwill be automatically unlocked and the selected code signing identity will be used. By default this action will only work when fastlane is executed on a CI system.\n\n\n\n\n\n\n\n\n\n\n\n\nsetup_jenkins\n\n\n\n\n\n\n\n\n\n\n\n\nSupported platforms\n\n\nios, mac\n\n\n\n\n\n\nAuthor\n\n\n@bartoszj\n\n\n\n\n\n\n\n\n\n\n1 Example\n\n\nsetup_jenkins\n\n\n\n\n\n\n\n\nParameters\n\n\n\n\n\n\n\n\nKey\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nforce\n\n\nForce setup, even if not executed by Jenkins\n\n\n\n\n\n\nunlock_keychain\n\n\nUnlocks keychain\n\n\n\n\n\n\nadd_keychain_to_search_list\n\n\nAdd to keychain search list\n\n\n\n\n\n\nset_default_keychain\n\n\nSet keychain as default\n\n\n\n\n\n\nkeychain_path\n\n\nPath to keychain\n\n\n\n\n\n\nkeychain_password\n\n\nKeychain password\n\n\n\n\n\n\nset_code_signing_identity\n\n\nSet code signing identity from CODE_SIGNING_IDENTITY environment\n\n\n\n\n\n\ncode_signing_identity\n\n\nCode signing identity\n\n\n\n\n\n\noutput_directory\n\n\nThe directory in which the ipa file should be stored in\n\n\n\n\n\n\nderived_data_path\n\n\nThe directory where build products and other derived data will go\n\n\n\n\n\n\nresult_bundle\n\n\nProduce the result bundle describing what occurred will be placed\n\n\n\n\n\n\n\n\n\n\nskip_docs\n\n\nSkip the creation of the fastlane/README.md file when running fastlane\n\n\n\n\nTell \nfastlane\n to not automatically create a \nfastlane/README.md\n when running \nfastlane\n. You can always trigger the creation of this file manually by running \nfastlane docs\n\n\n\n\n\n\n\n\n\n\nskip_docs\n\n\n\n\n\n\n\n\n\n\n\n\nSupported platforms\n\n\nios, android, mac\n\n\n\n\n\n\nAuthor\n\n\n@KrauseFx\n\n\n\n\n\n\n\n\n\n\n1 Example\n\n\nskip_docs\n\n\n\n\n\n\nbadge\n\n\nAutomatically add a badge to your app icon\n\n\n\n\nThis action will add a light/dark badge onto your app icon.\nYou can also provide your custom badge/overlay or add an shield for more customization more info:\nhttps://github.com/HazAT/badge\n\nNote\n If you want to reset the badge back to default you can use \nsh 'git checkout -- \npath\n/Assets.xcassets/'\n\n\n\n\n\n\n\n\n\n\nbadge\n\n\n\n\n\n\n\n\n\n\n\n\nSupported platforms\n\n\nios, android, mac\n\n\n\n\n\n\nAuthor\n\n\n@DanielGri\n\n\n\n\n\n\n\n\n\n\n4 Examples\n\n\nbadge(dark: true)\n\n\n\n\nbadge(alpha: true)\n\n\n\n\nbadge(custom: \n/Users/xxx/Desktop/badge.png\n)\n\n\n\n\nbadge(shield: \nVersion-0.0.3-blue\n, no_badge: true)\n\n\n\n\n\n\n\n\nParameters\n\n\n\n\n\n\n\n\nKey\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\ndark\n\n\nAdds a dark flavored badge ontop of your icon\n\n\n\n\n\n\ncustom\n\n\nAdd your custom overlay/badge image\n\n\n\n\n\n\nno_badge\n\n\nHides the beta badge\n\n\n\n\n\n\nshield\n\n\nAdd a shield to your app icon from shield.io\n\n\n\n\n\n\nalpha\n\n\nAdds and alpha badge instead of the default beta one\n\n\n\n\n\n\npath\n\n\nSets the root path to look for AppIcons\n\n\n\n\n\n\nshield_io_timeout\n\n\nSet custom duration for the timeout of the shield.io request in seconds\n\n\n\n\n\n\nglob\n\n\nGlob pattern for finding image files\n\n\n\n\n\n\nalpha_channel\n\n\nKeeps/adds an alpha channel to the icon (useful for android icons)\n\n\n\n\n\n\nshield_gravity\n\n\nPosition of shield on icon. Default: North - Choices include: NorthWest, North, NorthEast, West, Center, East, SouthWest, South, SouthEast\n\n\n\n\n\n\nshield_no_resize\n\n\nShield image will no longer be resized to aspect fill the full icon. Instead it will only be shrinked to not exceed the icon graphic\n\n\n\n\n\n\n\n\n\n\ndownload\n\n\nDownload a file from a remote server (e.g. JSON file)\n\n\n\n\nSpecify the URL to download and get the content as a return value\nFor more advanced networking code, use the Ruby functions instead:\nhttp://docs.ruby-lang.org/en/2.0.0/Net/HTTP.html\n\n\n\n\n\n\n\n\n\n\ndownload\n\n\n\n\n\n\n\n\n\n\n\n\nSupported platforms\n\n\nios, android, mac\n\n\n\n\n\n\nAuthor\n\n\n@KrauseFx\n\n\n\n\n\n\n\n\n\n\n1 Example\n\n\ndata = download(url: \nhttps://host.com/api.json\n)\n\n\n\n\n\n\n\n\nParameters\n\n\n\n\n\n\n\n\nKey\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nurl\n\n\nThe URL that should be downloaded\n\n\n\n\n\n\n\n\n\n\nprompt\n\n\nAsk the user for a value or for confirmation\n\n\n\n\nYou can use \nprompt\n to ask the user for a value or to just let the user confirm the next step\nWhen this is executed on a CI service, the passed \nci_input\n value will be returned\nThis action also supports multi-line inputs using the \nmulti_line_end_keyword\n option.\n\n\n\n\n\n\n\n\n\n\nprompt\n\n\n\n\n\n\n\n\n\n\n\n\nSupported platforms\n\n\nios, android, mac\n\n\n\n\n\n\nAuthor\n\n\n@KrauseFx\n\n\n\n\n\n\n\n\n\n\n2 Examples\n\n\nchangelog = prompt(text: \nChangelog: \n)\n\n\n\n\nchangelog = prompt(\n  text: \nChangelog: \n,\n  multi_line_end_keyword: \nEND\n\n)\n\ncrashlytics(notes: changelog)\n\n\n\n\n\n\n\n\nParameters\n\n\n\n\n\n\n\n\nKey\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\ntext\n\n\nThe text that will be displayed to the user\n\n\n\n\n\n\nci_input\n\n\nThe default text that will be used when being executed on a CI service\n\n\n\n\n\n\nboolean\n\n\nIs that a boolean question (yes/no)? This will add (y/n) at the end\n\n\n\n\n\n\nmulti_line_end_keyword\n\n\nEnable multi-line inputs by providing an end text (e.g. 'END') which will stop the user input\n\n\n\n\n\n\n\n\n\n\ncreate_keychain\n\n\nCreate a new Keychain\n\n\n\n\n\n\n\n\ncreate_keychain\n\n\n\n\n\n\n\n\n\n\n\n\nSupported platforms\n\n\nios, android, mac\n\n\n\n\n\n\nAuthor\n\n\n@gin0606\n\n\n\n\n\n\n\n\n\n\n1 Example\n\n\ncreate_keychain(\n  name: \nKeychainName\n,\n  default_keychain: true,\n  unlock: true,\n  timeout: 3600,\n  lock_when_sleeps: true\n)\n\n\n\n\n\n\n\n\nParameters\n\n\n\n\n\n\n\n\nKey\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nname\n\n\nKeychain name\n\n\n\n\n\n\npassword\n\n\nPassword for the keychain\n\n\n\n\n\n\ndefault_keychain\n\n\nSet the default keychain\n\n\n\n\n\n\nunlock\n\n\nUnlock keychain after create\n\n\n\n\n\n\ntimeout\n\n\ntimeout interval in seconds. Set \nfalse\n if you want to specify \"no time-out\"\n\n\n\n\n\n\nlock_when_sleeps\n\n\nLock keychain when the system sleeps\n\n\n\n\n\n\nlock_after_timeout\n\n\nLock keychain after timeout interval\n\n\n\n\n\n\nadd_to_search_list\n\n\nAdd keychain to search list\n\n\n\n\n\n\n\n\n\n\nreset_simulators\n\n\nShutdown and reset running simulators\n\n\n\n\n\n\n\n\nreset_simulators\n\n\n\n\n\n\n\n\n\n\n\n\nSupported platforms\n\n\nios\n\n\n\n\n\n\nAuthor\n\n\n@danramteke\n\n\n\n\n\n\n\n\n\n\n1 Example\n\n\nreset_simulators\n\n\n\n\n\n\ndelete_keychain\n\n\nDelete keychains and remove them from the search list\n\n\n\n\nKeychains can be deleted after being creating with \ncreate_keychain\n\n\n\n\n\n\n\n\n\n\ndelete_keychain\n\n\n\n\n\n\n\n\n\n\n\n\nSupported platforms\n\n\nios, android, mac\n\n\n\n\n\n\nAuthor\n\n\n@gin0606\n\n\n\n\n\n\n\n\n\n\n1 Example\n\n\ndelete_keychain(name: \nKeychainName\n)\n\n\n\n\n\n\n\n\nParameters\n\n\n\n\n\n\n\n\nKey\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nname\n\n\nKeychain name\n\n\n\n\n\n\n\n\n\n\nlatest_testflight_build_number\n\n\nFetches most recent build number from TestFlight\n\n\n\n\nProvides a way to have increment_build_number be based on the latest build you uploaded to iTC.\nFetches most recent build number from TestFlight based on the version number. Provides a way to have \nincrement_build_number\n be based on the latest build you uploaded to iTC.\n\n\n\n\n\n\n\n\n\n\nlatest_testflight_build_number\n\n\n\n\n\n\n\n\n\n\n\n\nSupported platforms\n\n\nios\n\n\n\n\n\n\nAuthor\n\n\n@daveanderson\n\n\n\n\n\n\nReturns\n\n\nInteger representation of the latest build number uploaded to TestFlight\n\n\n\n\n\n\n\n\n\n\n2 Examples\n\n\nlatest_testflight_build_number(version: \n1.3\n)\n\n\n\n\nincrement_build_number({\n  build_number: latest_testflight_build_number + 1\n})\n\n\n\n\n\n\n\n\nParameters\n\n\n\n\n\n\n\n\nKey\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\napp_identifier\n\n\nThe bundle identifier of your app\n\n\n\n\n\n\nusername\n\n\nYour Apple ID Username\n\n\n\n\n\n\nversion\n\n\nThe version number whose latest build number we want\n\n\n\n\n\n\ninitial_build_number\n\n\nsets the build number to given value if no build is in current train\n\n\n\n\n\n\nteam_id\n\n\nYour team ID if you're in multiple teams\n\n\n\n\n\n\n\n\n\n\ncopy_artifacts\n\n\nSmall action to save your build artifacts. Useful when you use reset_git_repo\n\n\n\n\nThis action copies artifacs to a target directory. It's useful if you have a CI that will pick up these artifacts and attach them to the build. Useful e.g. for storing your \n.ipa\ns, \n.dSYM.zip\ns, \n.mobileprovision\ns, \n.cert\ns\nMake sure your target_path is gitignored, and if you use \nreset_git_repo\n, make sure the artifacts are added to the exclude list\n\n\n\n\n\n\n\n\n\n\ncopy_artifacts\n\n\n\n\n\n\n\n\n\n\n\n\nSupported platforms\n\n\nios, android, mac\n\n\n\n\n\n\nAuthor\n\n\n@lmirosevic\n\n\n\n\n\n\n\n\n\n\n1 Example\n\n\ncopy_artifacts(\n  target_path: \nartifacts\n,\n  artifacts: [\n*.cer\n, \n*.mobileprovision\n, \n*.ipa\n, \n*.dSYM.zip\n]\n)\n\n# Reset the git repo to a clean state, but leave our artifacts in place\nreset_git_repo(\n  exclude: \nartifacts\n\n)\n\n\n\n\n\n\n\n\nParameters\n\n\n\n\n\n\n\n\nKey\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nkeep_original\n\n\nSet this to true if you want copy, rather than move, semantics\n\n\n\n\n\n\ntarget_path\n\n\nThe directory in which you want your artifacts placed\n\n\n\n\n\n\nartifacts\n\n\nAn array of file patterns of the files/folders you want to preserve\n\n\n\n\n\n\nfail_on_missing\n\n\nFail when a source file isn't found\n\n\n\n\n\n\n\n\n\n\nupload_symbols_to_crashlytics\n\n\nUpload dSYM symbolication files to Crashlytics\n\n\n\n\nThis action allows you to upload symbolication files to Crashlytics. It's extra useful if you use it to download the latest dSYM files from Apple when you use Bitcode. This action will not fail the build if one of the uploads failed. The reason for that is that sometimes some of dSYM files are invalid, and we don't want them to fail the complete build.\n\n\n\n\n\n\n\n\n\n\nupload_symbols_to_crashlytics\n\n\n\n\n\n\n\n\n\n\n\n\nSupported platforms\n\n\nios\n\n\n\n\n\n\nAuthor\n\n\n@KrauseFx\n\n\n\n\n\n\n\n\n\n\n1 Example\n\n\nupload_symbols_to_crashlytics(dsym_path: \n./App.dSYM.zip\n)\n\n\n\n\n\n\n\n\nParameters\n\n\n\n\n\n\n\n\nKey\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\ndsym_path\n\n\nPath to the DSYM file or zip to upload\n\n\n\n\n\n\napi_token\n\n\nCrashlytics Beta API Token\n\n\n\n\n\n\nbinary_path\n\n\nThe path to the upload-symbols file of the Fabric app\n\n\n\n\n\n\nplatform\n\n\nThe platform of the app (ios, tvos, mac)\n\n\n\n\n\n\n\n\n\n\nbackup_xcarchive\n\n\nSave your [zipped] xcarchive elsewhere from default path\n\n\n\n\n\n\n\n\nbackup_xcarchive\n\n\n\n\n\n\n\n\n\n\n\n\nSupported platforms\n\n\nios, mac\n\n\n\n\n\n\nAuthor\n\n\n@dral3x\n\n\n\n\n\n\n\n\n\n\n1 Example\n\n\nbackup_xcarchive(\n  xcarchive: \n/path/to/file.xcarchive\n, # Optional if you use the `xcodebuild` action\n  destination: \n/somewhere/else/file.xcarchive\n, # Where the backup should be created\n  zip: false, # Enable compression of the archive. Defaults to `true`.\n  versioned: true # Create a versioned (date and app version) subfolder where to put the archive. Default value `true`\n)\n\n\n\n\n\n\n\n\nParameters\n\n\n\n\n\n\n\n\nKey\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nxcarchive\n\n\nPath to your xcarchive file. Optional if you use the \nxcodebuild\n action\n\n\n\n\n\n\ndestination\n\n\nWhere your archive will be placed\n\n\n\n\n\n\nzip\n\n\nEnable compression of the archive. Default value \ntrue\n\n\n\n\n\n\nversioned\n\n\nCreate a versioned (date and app version) subfolder where to put the archive. Default value \ntrue\n\n\n\n\n\n\n\n\n\n\nteam_id\n\n\nSpecify the Team ID you want to use for the Apple Developer Portal\n\n\n\n\n\n\n\n\nteam_id\n\n\n\n\n\n\n\n\n\n\n\n\nSupported platforms\n\n\nios\n\n\n\n\n\n\nAuthor\n\n\n@KrauseFx\n\n\n\n\n\n\n\n\n\n\n1 Example\n\n\nteam_id \nQ2CBPK58CA\n\n\n\n\n\n\n\nbackup_file\n\n\nThis action backs up your file to \"[path].back\"\n\n\n\n\n\n\n\n\nbackup_file\n\n\n\n\n\n\n\n\n\n\n\n\nSupported platforms\n\n\nios, android, mac\n\n\n\n\n\n\nAuthor\n\n\n@gin0606\n\n\n\n\n\n\n\n\n\n\n1 Example\n\n\nbackup_file(path: \n/path/to/file\n)\n\n\n\n\n\n\n\n\nParameters\n\n\n\n\n\n\n\n\nKey\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\npath\n\n\nPath to the file you want to backup\n\n\n\n\n\n\n\n\n\n\nteam_name\n\n\nSet a team to use by its name\n\n\n\n\n\n\n\n\nteam_name\n\n\n\n\n\n\n\n\n\n\n\n\nSupported platforms\n\n\nios\n\n\n\n\n\n\nAuthor\n\n\n@KrauseFx\n\n\n\n\n\n\n\n\n\n\n1 Example\n\n\nteam_name \nFelix Krause\n\n\n\n\n\n\n\ndsym_zip\n\n\nCreates a zipped dSYM in the project root from the .xcarchive\n\n\n\n\nYou can manually specify the path to the xcarchive (not needed if you use \nxcodebuild\n/\nxcarchive\n to build your archive)\n\n\n\n\n\n\n\n\n\n\ndsym_zip\n\n\n\n\n\n\n\n\n\n\n\n\nSupported platforms\n\n\nios, mac\n\n\n\n\n\n\nAuthor\n\n\n@lmirosevic\n\n\n\n\n\n\n\n\n\n\n2 Examples\n\n\ndsym_zip\n\n\n\n\ndsym_zip(\n  archive_path: \nMyApp.xcarchive\n\n)\n\n\n\n\n\n\n\n\nParameters\n\n\n\n\n\n\n\n\nKey\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\narchive_path\n\n\nPath to your xcarchive file. Optional if you use the \nxcodebuild\n action\n\n\n\n\n\n\ndsym_path\n\n\nPath for generated dsym. Optional, default is your apps root directory\n\n\n\n\n\n\nall\n\n\nWhether or not all dSYM files are to be included. Optional, default is false in which only your app dSYM is included\n\n\n\n\n\n\n\n\n\n\ndebug\n\n\nPrint out an overview of the lane context values\n\n\n\n\n\n\n\n\ndebug\n\n\n\n\n\n\n\n\n\n\n\n\nSupported platforms\n\n\nios, android, mac\n\n\n\n\n\n\nAuthor\n\n\n@KrauseFx\n\n\n\n\n\n\n\n\n\n\n1 Example\n\n\ndebug\n\n\n\n\n\n\nrestore_file\n\n\nThis action restore your file that was backuped with the \nbackup_file\n action\n\n\n\n\n\n\n\n\nrestore_file\n\n\n\n\n\n\n\n\n\n\n\n\nSupported platforms\n\n\nios, android, mac\n\n\n\n\n\n\nAuthor\n\n\n@gin0606\n\n\n\n\n\n\n\n\n\n\n1 Example\n\n\nrestore_file(path: \n/path/to/file\n)\n\n\n\n\n\n\n\n\nParameters\n\n\n\n\n\n\n\n\nKey\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\npath\n\n\nOriginal file name you want to restore\n\n\n\n\n\n\n\n\n\n\nensure_no_debug_code\n\n\nEnsures the given text is nowhere in the code base\n\n\n\n\nYou don't want any debug code to slip into production. This can be used\nto check if there is any debug code still in your code base or if you have\nthings like // TO DO or similar\n\n\n\n\n\n\n\n\n\n\nensure_no_debug_code\n\n\n\n\n\n\n\n\n\n\n\n\nSupported platforms\n\n\nios, android, mac\n\n\n\n\n\n\nAuthor\n\n\n@KrauseFx\n\n\n\n\n\n\n\n\n\n\n5 Examples\n\n\nensure_no_debug_code(text: \n// TODO\n)\n\n\n\n\nensure_no_debug_code(text: \nLog.v\n,\n      extension: \njava\n)\n\n\n\n\nensure_no_debug_code(text: \nNSLog\n,\n path: \n./lib\n,\n      extension: \nm\n)\n\n\n\n\nensure_no_debug_code(text: \n(^#define DEBUG|NSLog)\n,\n path: \n./lib\n,\n      extension: \nm\n)\n\n\n\n\nensure_no_debug_code(text: \n,\n     extensions: [\nm\n, \nswift\n, \njava\n])\n\n\n\n\n\n\n\n\nParameters\n\n\n\n\n\n\n\n\nKey\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\ntext\n\n\nThe text that must not be in the code base\n\n\n\n\n\n\npath\n\n\nThe directory containing all the source files\n\n\n\n\n\n\nextension\n\n\nThe extension that should be searched for\n\n\n\n\n\n\nextensions\n\n\nAn array of file extensions that should be searched for\n\n\n\n\n\n\n\n\n\n\ninstall_xcode_plugin\n\n\nInstall an Xcode plugin for the current user\n\n\n\n\n\n\n\n\ninstall_xcode_plugin\n\n\n\n\n\n\n\n\n\n\n\n\nSupported platforms\n\n\nios, mac\n\n\n\n\n\n\nAuthor\n\n\n@NeoNachoSoto\n\n\n\n\n\n\n\n\n\n\n2 Examples\n\n\ninstall_xcode_plugin(url: \nhttps://example.com/clubmate/plugin.zip\n)\n\n\n\n\ninstall_xcode_plugin(github: \nhttps://github.com/contentful/ContentfulXcodePlugin\n)\n\n\n\n\n\n\n\n\nParameters\n\n\n\n\n\n\n\n\nKey\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nurl\n\n\nURL for Xcode plugin ZIP file\n\n\n\n\n\n\ngithub\n\n\nGitHub repository URL for Xcode plugin\n\n\n\n\n\n\n\n\n\n\nset_github_release\n\n\nThis will create a new release on GitHub and upload assets for it\n\n\n\n\nCreates a new release on GitHub. You must provide your GitHub Personal token\n        (get one from https://github.com/settings/tokens/new), the repository name\n        and tag name. By default that's 'master'. If the tag doesn't exist, one will be created on the commit or branch passed-in as\n        commitish. Out parameters provide the release's id, which can be used for later editing and the\n        release html link to GitHub. You can also specify a list of assets to be uploaded to the release with the upload_assets parameter.\n\n\n\n\n\n\n\n\n\n\nset_github_release\n\n\n\n\n\n\n\n\n\n\n\n\nSupported platforms\n\n\nios, android, mac\n\n\n\n\n\n\nAuthor\n\n\n@czechboy0\n\n\n\n\n\n\nReturns\n\n\nA hash containing all relevant information of this release\n\n\n\n\n\n\nAccess things like 'html_url', 'tag_name', 'name', 'body'\n\n\n\n\n\n\n\n\n\n\n\n\n1 Example\n\n\ngithub_release = set_github_release(\n  repository_name: \nfastlane/fastlane\n,\n  api_token: ENV[\nGITHUB_TOKEN\n],\n  name: \nSuper New actions\n,\n  tag_name: \nv1.22.0\n,\n  description: (File.read(\nchangelog\n) rescue \nNo changelog provided\n),\n  commitish: \nmaster\n,\n  upload_assets: [\nexample_integration.ipa\n, \n./pkg/built.gem\n]\n)\n\n\n\n\n\n\n\n\nParameters\n\n\n\n\n\n\n\n\nKey\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nrepository_name\n\n\nThe path to your repo, e.g. 'fastlane/fastlane'\n\n\n\n\n\n\nserver_url\n\n\nThe server url. e.g. 'https://your.internal.github.host/api/v3' (Default: 'https://api.github.com')\n\n\n\n\n\n\napi_token\n\n\nPersonal API Token for GitHub - generate one at https://github.com/settings/tokens\n\n\n\n\n\n\ntag_name\n\n\nPass in the tag name\n\n\n\n\n\n\nname\n\n\nName of this release\n\n\n\n\n\n\ncommitish\n\n\nSpecifies the commitish value that determines where the Git tag is created from. Can be any branch or commit SHA. Unused if the Git tag already exists. Default: the repository's default branch (usually master)\n\n\n\n\n\n\ndescription\n\n\nDescription of this release\n\n\n\n\n\n\nis_draft\n\n\nWhether the release should be marked as draft\n\n\n\n\n\n\nis_prerelease\n\n\nWhether the release should be marked as prerelease\n\n\n\n\n\n\nupload_assets\n\n\nPath to assets to be uploaded with the release\n\n\n\n\n\n\n\n\n\n\nmake_changelog_from_jenkins\n\n\nGenerate a changelog using the Changes section from the current Jenkins build\n\n\n\n\nThis is useful when deploying automated builds. The changelog from Jenkins lists all the commit messages since the last build.\n\n\n\n\n\n\n\n\n\n\nmake_changelog_from_jenkins\n\n\n\n\n\n\n\n\n\n\n\n\nSupported platforms\n\n\nios, android, mac\n\n\n\n\n\n\nAuthor\n\n\n@mandrizzle\n\n\n\n\n\n\n\n\n\n\n1 Example\n\n\nmake_changelog_from_jenkins(\n  # Optional, lets you set a changelog in the case is not generated on Jenkins or if ran outside of Jenkins\n  fallback_changelog: \nBug fixes and performance enhancements\n\n)\n\n\n\n\n\n\n\n\nParameters\n\n\n\n\n\n\n\n\nKey\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nfallback_changelog\n\n\nFallback changelog if there is not one on Jenkins, or it couldn't be read\n\n\n\n\n\n\ninclude_commit_body\n\n\nInclude the commit body along with the summary\n\n\n\n\n\n\n\n\n\n\nversion_bump_podspec\n\n\nIncrement or set the version in a podspec file\n\n\n\n\nYou can use this action to manipulate any 'version' variable contained in a ruby file.\nFor example, you can use it to bump the version of a cocoapods' podspec file.\n\n\n\n\n\n\n\n\n\n\nversion_bump_podspec\n\n\n\n\n\n\n\n\n\n\n\n\nSupported platforms\n\n\nios, mac\n\n\n\n\n\n\nAuthor\n\n\n@Liquidsoul, @KrauseFx\n\n\n\n\n\n\n\n\n\n\n2 Examples\n\n\nversion = version_bump_podspec(path: \nTSMessages.podspec\n, bump_type: \npatch\n)\n\n\n\n\nversion = version_bump_podspec(path: \nTSMessages.podspec\n, version_number: \n1.4\n)\n\n\n\n\n\n\n\n\nParameters\n\n\n\n\n\n\n\n\nKey\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\npath\n\n\nYou must specify the path to the podspec file to update\n\n\n\n\n\n\nbump_type\n\n\nThe type of this version bump. Available: patch, minor, major\n\n\n\n\n\n\nversion_number\n\n\nChange to a specific version. This will replace the bump type value\n\n\n\n\n\n\n\n\n\n\ndanger\n\n\nRuns \ndanger\n for the project\n\n\n\n\nFormalize your Pull Request etiquette.\nMore information: https://github.com/danger/danger\n\n\n\n\n\n\n\n\n\n\ndanger\n\n\n\n\n\n\n\n\n\n\n\n\nSupported platforms\n\n\nios, android, mac\n\n\n\n\n\n\nAuthor\n\n\n@KrauseFx\n\n\n\n\n\n\n\n\n\n\n2 Examples\n\n\ndanger\n\n\n\n\ndanger(\n  danger_id: \nunit-tests\n,\n  dangerfile: \ntests/MyOtherDangerFile\n,\n  github_api_token: ENV[\nGITHUB_API_TOKEN\n],\n  verbose: true\n)\n\n\n\n\n\n\n\n\nParameters\n\n\n\n\n\n\n\n\nKey\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nuse_bundle_exec\n\n\nUse bundle exec when there is a Gemfile presented\n\n\n\n\n\n\nverbose\n\n\nShow more debugging information\n\n\n\n\n\n\ndanger_id\n\n\nThe identifier of this Danger instance\n\n\n\n\n\n\ndangerfile\n\n\nThe location of your Dangerfile\n\n\n\n\n\n\ngithub_api_token\n\n\nGitHub API token for danger\n\n\n\n\n\n\n\n\n\n\nzip\n\n\nCompress a file or folder to a zip\n\n\n\n\n\n\n\n\nzip\n\n\n\n\n\n\n\n\n\n\n\n\nSupported platforms\n\n\nios, android, mac\n\n\n\n\n\n\nAuthor\n\n\n@KrauseFx\n\n\n\n\n\n\nReturns\n\n\nThe path to the output zip file\n\n\n\n\n\n\n\n\n\n\n2 Examples\n\n\nzip\n\n\n\n\nzip(\n  path: \nMyApp.app\n,\n  output_path: \nLatest.app.zip\n\n)\n\n\n\n\n\n\n\n\nParameters\n\n\n\n\n\n\n\n\nKey\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\npath\n\n\nPath to the directory or file to be zipped\n\n\n\n\n\n\noutput_path\n\n\nThe name of the resulting zip file\n\n\n\n\n\n\n\n\n\n\nverify_build\n\n\nAble to verify various settings in ipa file\n\n\n\n\nVerifies that the built app was built using the expected build resources. This is relevant for people who build on machines that are used to build apps with different profiles, certificates and/or bundle identifiers to guard against configuration mistakes.\n\n\n\n\n\n\n\n\n\n\nverify_build\n\n\n\n\n\n\n\n\n\n\n\n\nSupported platforms\n\n\nios\n\n\n\n\n\n\nAuthor\n\n\n@CodeReaper\n\n\n\n\n\n\n\n\n\n\n1 Example\n\n\nverify_build(\n  provisioning_type: \ndistribution\n,\n  bundle_identifier: \ncom.example.myapp\n\n)\n\n\n\n\n\n\n\n\nParameters\n\n\n\n\n\n\n\n\nKey\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nprovisioning_type\n\n\nRequired type of provisioning\n\n\n\n\n\n\nprovisioning_uuid\n\n\nRequired UUID of provisioning profile\n\n\n\n\n\n\nteam_identifier\n\n\nRequired team identifier\n\n\n\n\n\n\nteam_name\n\n\nRequired team name\n\n\n\n\n\n\napp_name\n\n\nRequired app name\n\n\n\n\n\n\nbundle_identifier\n\n\nRequired bundle identifier\n\n\n\n\n\n\nipa_path\n\n\nExplicitly set the ipa path\n\n\n\n\n\n\n\n\n\n\ninstall_on_device\n\n\nInstalls an .ipa file on a connected iOS-device via usb or wifi\n\n\n\n\nInstalls the ipa on the device, if no id is given, the first found iOS device will be used, works via USB or Wi-Fi. This requires \nios-deploy\n to be installed please have a look at \nios-deploy\n. to quickly install it, use \nnpm -g i ios-deploy\n\n\n\n\n\n\n\n\n\n\ninstall_on_device\n\n\n\n\n\n\n\n\n\n\n\n\nSupported platforms\n\n\nios\n\n\n\n\n\n\nAuthor\n\n\n@hjanuschka\n\n\n\n\n\n\n\n\n\n\n1 Example\n\n\ninstall_on_device(\n  device_id: \na3be6c9ff7e5c3c6028597513243b0f933b876d4\n,\n  ipa: \n./app.ipa\n\n)\n\n\n\n\n\n\n\n\nParameters\n\n\n\n\n\n\n\n\nKey\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nextra\n\n\nExtra Commandline arguments passed to ios-deploy\n\n\n\n\n\n\ndevice_id\n\n\nid of the device / if not set defaults to first found device\n\n\n\n\n\n\nskip_wifi\n\n\nDo not search for devices via WiFi\n\n\n\n\n\n\nipa\n\n\nThe IPA file to put on the device\n\n\n\n\n\n\n\n\n\n\nscp\n\n\nTransfer files via SCP\n\n\n\n\n\n\n\n\nscp\n\n\n\n\n\n\n\n\n\n\n\n\nSupported platforms\n\n\nios, android, mac\n\n\n\n\n\n\nAuthor\n\n\n@hjanuschka\n\n\n\n\n\n\n\n\n\n\n2 Examples\n\n\nscp(\n  host: \ndev.januschka.com\n,\n  username: \nroot\n,\n  upload: {\n    src: \n/root/dir1\n,\n    dst: \n/tmp/new_dir\n\n  }\n)\n\n\n\n\nscp(\n  host: \ndev.januschka.com\n,\n  username: \nroot\n,\n  download: {\n    src: \n/root/dir1\n,\n    dst: \n/tmp/new_dir\n\n  }\n)\n\n\n\n\n\n\n\n\nParameters\n\n\n\n\n\n\n\n\nKey\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nusername\n\n\nUsername\n\n\n\n\n\n\npassword\n\n\nPassword\n\n\n\n\n\n\nhost\n\n\nHostname\n\n\n\n\n\n\nport\n\n\nPort\n\n\n\n\n\n\nupload\n\n\nUpload\n\n\n\n\n\n\ndownload\n\n\nDownload\n\n\n\n\n\n\n\n\n\n\nrocket\n\n\nOutputs ascii-art for a rocket \ud83d\ude80\n\n\n\n\nPrint an ascii Rocket :rocket:. Useful after using \ncrashlytics\n or \npilot\n to indicate that your new build has been shipped to outer-space.\n\n\n\n\n\n\n\n\n\n\nrocket\n\n\n\n\n\n\n\n\n\n\n\n\nSupported platforms\n\n\nios, android, mac\n\n\n\n\n\n\nAuthor\n\n\n@JaviSoto, @radex\n\n\n\n\n\n\n\n\n\n\n1 Example\n\n\nrocket\n\n\n\n\n\n\ndownload_dsyms\n\n\nDownload dSYM files from Apple iTunes Connect for Bitcode apps\n\n\n\n\nThis action downloads dSYM files from Apple iTunes Connect after\nthe ipa got re-compiled by Apple. Useful if you have Bitcode enabled\n\n\n\n\nlane :refresh_dsyms do\n  download_dsyms                  # Download dSYM files from iTC\n  upload_symbols_to_crashlytics   # Upload them to Crashlytics\n  clean_build_artifacts           # Delete the local dSYM files\nend\n\n\n\n\n\n\n\n\n\n\ndownload_dsyms\n\n\n\n\n\n\n\n\n\n\n\n\nSupported platforms\n\n\nios\n\n\n\n\n\n\nAuthor\n\n\n@KrauseFx\n\n\n\n\n\n\n\n\n\n\n2 Examples\n\n\ndownload_dsyms\n\n\n\n\ndownload_dsyms(version: \n1.0.0\n, build_number: \n345\n)\n\n\n\n\n\n\n\n\nParameters\n\n\n\n\n\n\n\n\nKey\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nusername\n\n\nYour Apple ID Username for iTunes Connect\n\n\n\n\n\n\napp_identifier\n\n\nThe bundle identifier of your app\n\n\n\n\n\n\nteam_id\n\n\nThe ID of your team if you're in multiple teams\n\n\n\n\n\n\nteam_name\n\n\nThe name of your team if you're in multiple teams\n\n\n\n\n\n\nplatform\n\n\nThe app platform for dSYMs you wish to download\n\n\n\n\n\n\nversion\n\n\nThe app version for dSYMs you wish to download\n\n\n\n\n\n\nbuild_number\n\n\nThe app build_number for dSYMs you wish to download\n\n\n\n\n\n\n\n\n\n\ncloc\n\n\nGenerates a Code Count that can be read by Jenkins (xml format)\n\n\n\n\nThis action will run cloc to generate a SLOC report that the Jenkins SLOCCount plugin can read.\nSee https://wiki.jenkins-ci.org/display/JENKINS/SLOCCount+Plugin and https://github.com/AlDanial/cloc for more information.\n\n\n\n\n\n\n\n\n\n\ncloc\n\n\n\n\n\n\n\n\n\n\n\n\nSupported platforms\n\n\nios, mac\n\n\n\n\n\n\nAuthor\n\n\n@intere\n\n\n\n\n\n\n\n\n\n\n1 Example\n\n\ncloc(\n   exclude_dir: \nThirdParty,Resources\n,\n   output_directory: \nreports\n,\n   source_directory: \nMyCoolApp\n\n)\n\n\n\n\n\n\n\n\nParameters\n\n\n\n\n\n\n\n\nKey\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nbinary_path\n\n\nWhere the cloc binary lives on your system (full path including 'cloc')\n\n\n\n\n\n\nexclude_dir\n\n\nComma separated list of directories to exclude\n\n\n\n\n\n\noutput_directory\n\n\nWhere to put the generated report file\n\n\n\n\n\n\nsource_directory\n\n\nWhere to look for the source code (relative to the project root folder)\n\n\n\n\n\n\nxml\n\n\nShould we generate an XML File (if false, it will generate a plain text file)?\n\n\n\n\n\n\n\n\n\n\nversion_get_podspec\n\n\nReceive the version number from a podspec file\n\n\n\n\n\n\n\n\nversion_get_podspec\n\n\n\n\n\n\n\n\n\n\n\n\nSupported platforms\n\n\nios, mac\n\n\n\n\n\n\nAuthor\n\n\n@Liquidsoul, @KrauseFx\n\n\n\n\n\n\n\n\n\n\n1 Example\n\n\nversion = version_get_podspec(path: \nTSMessages.podspec\n)\n\n\n\n\n\n\n\n\nParameters\n\n\n\n\n\n\n\n\nKey\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\npath\n\n\nYou must specify the path to the podspec file\n\n\n\n\n\n\n\n\n\n\npod_push\n\n\nPush a Podspec to Trunk or a private repository\n\n\n\n\n\n\n\n\npod_push\n\n\n\n\n\n\n\n\n\n\n\n\nSupported platforms\n\n\nios, mac\n\n\n\n\n\n\nAuthor\n\n\n@squarefrog\n\n\n\n\n\n\n\n\n\n\n4 Examples\n\n\n# If no path is supplied then Trunk will attempt to find the first Podspec in the current directory.\npod_push\n\n\n\n\n# Alternatively, supply the Podspec file path\npod_push(path: \nTSMessages.podspec\n)\n\n\n\n\n# You may also push to a private repo instead of Trunk\npod_push(path: \nTSMessages.podspec\n, repo: \nMyRepo\n)\n\n\n\n\n# If the podspec has a dependency on another private pod, then you will have to supply the sources you want the podspec to lint with for pod_push to succeed. Read more here - https://github.com/CocoaPods/CocoaPods/issues/2543.\npod_push(path: \nTMessages.podspec\n, repo: \nMyRepo\n, sources: [\nhttps://github.com/MyGithubPage/Specs\n, \nhttps://github.com/CocoaPods/Specs\n])\n\n\n\n\n\n\n\n\nParameters\n\n\n\n\n\n\n\n\nKey\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\npath\n\n\nThe Podspec you want to push\n\n\n\n\n\n\nrepo\n\n\nThe repo you want to push. Pushes to Trunk by default\n\n\n\n\n\n\nallow_warnings\n\n\nAllow warnings during pod push\n\n\n\n\n\n\nuse_libraries\n\n\nAllow lint to use static libraries to install the spec\n\n\n\n\n\n\nsources\n\n\nThe sources of repos you want the pod spec to lint with, separated by commas\n\n\n\n\n\n\n\n\n\n\nerb\n\n\nAllows to Generate output files based on ERB templates\n\n\n\n\nRenders an ERB template with \nplaceholders\n given as a hash via parameter,\nif no :destination is set, returns rendered template as string\n\n\n\n\n\n\n\n\n\n\nerb\n\n\n\n\n\n\n\n\n\n\n\n\nSupported platforms\n\n\nios, android, mac\n\n\n\n\n\n\nAuthor\n\n\n@hjanuschka\n\n\n\n\n\n\n\n\n\n\n1 Example\n\n\n# Example `erb` template:\n\n# Variable1 \n%= var1 %\n\n# Variable2 \n%= var2 %\n\n# \n% for item in var3 %\n\n#        \n%= item %\n\n# \n% end %\n\n\nerb(\n  template: \n1.erb\n,\n  destination: \n/tmp/rendered.out\n,\n  placeholders: {\n    :var1 =\n 123,\n    :var2 =\n \nstring\n,\n    :var3 =\n [\nelement1\n, \nelement2\n]\n  }\n)\n\n\n\n\n\n\n\n\nParameters\n\n\n\n\n\n\n\n\nKey\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\ntemplate\n\n\nERB Template File\n\n\n\n\n\n\ndestination\n\n\nDestination file\n\n\n\n\n\n\nplaceholders\n\n\nPlaceholders given as a hash\n\n\n\n\n\n\n\n\n\n\npod_lib_lint\n\n\nPod lib lint\n\n\n\n\nTest the syntax of your Podfile by linting the pod against the files of its directory\n\n\n\n\n\n\n\n\n\n\npod_lib_lint\n\n\n\n\n\n\n\n\n\n\n\n\nSupported platforms\n\n\nios, mac\n\n\n\n\n\n\nAuthor\n\n\n@thierryxing\n\n\n\n\n\n\n\n\n\n\n4 Examples\n\n\npod_lib_lint\n\n\n\n\n# Allow ouput detail in console\npod_lib_lint(verbose: true)\n\n\n\n\n# Allow warnings during pod lint\npod_lib_lint(allow_warnings: true)\n\n\n\n\n# If the podspec has a dependency on another private pod, then you will have to supply the sources\npod_lib_lint(sources: [\nhttps://github.com/MyGithubPage/Specs\n, \nhttps://github.com/CocoaPods/Specs\n])\n\n\n\n\n\n\n\n\nParameters\n\n\n\n\n\n\n\n\nKey\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nuse_bundle_exec\n\n\nUse bundle exec when there is a Gemfile presented\n\n\n\n\n\n\nverbose\n\n\nAllow ouput detail in console\n\n\n\n\n\n\nallow_warnings\n\n\nAllow warnings during pod lint\n\n\n\n\n\n\nsources\n\n\nThe sources of repos you want the pod spec to lint with, separated by commas\n\n\n\n\n\n\nuse_libraries\n\n\nLint uses static libraries to install the spec\n\n\n\n\n\n\nfail_fast\n\n\nLint stops on the first failing platform or subspec\n\n\n\n\n\n\nprivate\n\n\nLint skips checks that apply only to public specs\n\n\n\n\n\n\nquick\n\n\nLint skips checks that would require to download and build the spec\n\n\n\n\n\n\n\n\n\n\nbuild_and_upload_to_appetize\n\n\nGenerate and upload an ipa file to appetize.io\n\n\n\n\nThis should be called from danger\nMore information in the \ndevice_grid guide\n\n\n\n\n\n\n\n\n\n\nbuild_and_upload_to_appetize\n\n\n\n\n\n\n\n\n\n\n\n\nSupported platforms\n\n\nios\n\n\n\n\n\n\nAuthor\n\n\n@KrauseFx\n\n\n\n\n\n\n\n\n\n\n\n\nParameters\n\n\n\n\n\n\n\n\nKey\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nxcodebuild\n\n\nParameters that are passed to the xcodebuild action\n\n\n\n\n\n\nscheme\n\n\nThe scheme to build. Can also be passed using the \nxcodebuild\n parameter\n\n\n\n\n\n\napi_token\n\n\nAppetize.io API Token\n\n\n\n\n\n\n\n\n\n\nadb_devices\n\n\nGet an Array of Connected android device serials\n\n\n\n\nFetches device list via adb, e.g. run an adb command on all connected devices.\n\n\n\n\n\n\n\n\n\n\nadb_devices\n\n\n\n\n\n\n\n\n\n\n\n\nSupported platforms\n\n\nandroid\n\n\n\n\n\n\nAuthor\n\n\n@hjanuschka\n\n\n\n\n\n\nReturns\n\n\nReturns an array of all currently connected android devices\n\n\n\n\n\n\n\n\n\n\n1 Example\n\n\nadb_devices.each do |device|\n  model = adb(command: \nshell getprop ro.product.model\n,\n    serial: device.serial).strip\n\n  puts \nModel #{model} is connected\n\nend\n\n\n\n\n\n\n\n\nParameters\n\n\n\n\n\n\n\n\nKey\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nadb_path\n\n\nThe path to your \nadb\n binary\n\n\n\n\n\n\n\n\n\n\nappetize_viewing_url_generator\n\n\nGenerate an URL for appetize simulator\n\n\n\n\nCheck out the \ndevice_grid guide\n for more information\n\n\n\n\n\n\n\n\n\n\nappetize_viewing_url_generator\n\n\n\n\n\n\n\n\n\n\n\n\nSupported platforms\n\n\nios\n\n\n\n\n\n\nAuthor\n\n\n@KrauseFx\n\n\n\n\n\n\nReturns\n\n\nThe URL to preview the iPhone app\n\n\n\n\n\n\n\n\n\n\n\n\nParameters\n\n\n\n\n\n\n\n\nKey\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\npublic_key\n\n\nPublic key of the app you wish to update\n\n\n\n\n\n\ndevice\n\n\nDevice type: iphone4s, iphone5s, iphone6, iphone6plus, ipadair, iphone6s, iphone6splus, ipadair2, nexus5, nexus7 or nexus9\n\n\n\n\n\n\nscale\n\n\nScale of the simulator\n\n\n\n\n\n\norientation\n\n\nDevice orientation\n\n\n\n\n\n\nlanguage\n\n\nDevice language in ISO 639-1 language code, e.g. 'de'\n\n\n\n\n\n\ncolor\n\n\nColor of the device\n\n\n\n\n\n\nlaunch_url\n\n\nSpecify a deep link to open when your app is launched\n\n\n\n\n\n\n\n\n\n\nclipboard\n\n\nCopies a given string into the clipboard. Works only on macOS\n\n\n\n\n\n\n\n\nclipboard\n\n\n\n\n\n\n\n\n\n\n\n\nSupported platforms\n\n\nios, android, mac\n\n\n\n\n\n\nAuthor\n\n\n@KrauseFx\n\n\n\n\n\n\n\n\n\n\n2 Examples\n\n\nclipboard(value: \nhttps://github.com/fastlane/fastlane/tree/master/fastlane\n)\n\n\n\n\nclipboard(value: lane_context[SharedValues::HOCKEY_DOWNLOAD_LINK] || \n)\n\n\n\n\n\n\n\n\nParameters\n\n\n\n\n\n\n\n\nKey\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nvalue\n\n\nThe string that should be copied into the clipboard\n\n\n\n\n\n\n\n\n\n\nartifactory\n\n\nThis action uploads an artifact to artifactory\n\n\n\n\n\n\n\n\nartifactory\n\n\n\n\n\n\n\n\n\n\n\n\nSupported platforms\n\n\nios, android, mac\n\n\n\n\n\n\nAuthor\n\n\n@koglinjg\n\n\n\n\n\n\n\n\n\n\n1 Example\n\n\nartifactory(\n  username: \nusername\n,\n  password: \npassword\n,\n  endpoint: \nhttps://artifactory.example.com/artifactory/\n,\n  file: \nexample.ipa\n,  # File to upload\n  repo: \nmobile_artifacts\n,       # Artifactory repo\n  repo_path: \n/ios/appname/example-major.minor.ipa\n   # Path to place the artifact including its filename\n)\n\n\n\n\n\n\n\n\nParameters\n\n\n\n\n\n\n\n\nKey\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nfile\n\n\nFile to be uploaded to artifactory\n\n\n\n\n\n\nrepo\n\n\nArtifactory repo to put the file in\n\n\n\n\n\n\nrepo_path\n\n\nPath to deploy within the repo, including filename\n\n\n\n\n\n\nendpoint\n\n\nArtifactory endpoint\n\n\n\n\n\n\nusername\n\n\nArtifactory username\n\n\n\n\n\n\npassword\n\n\nArtifactory password\n\n\n\n\n\n\nproperties\n\n\nArtifact properties hash\n\n\n\n\n\n\nssl_pem_file\n\n\nLocation of pem file to use for ssl verification\n\n\n\n\n\n\nssl_verify\n\n\nVerify SSL\n\n\n\n\n\n\nproxy_username\n\n\nProxy username\n\n\n\n\n\n\nproxy_password\n\n\nProxy password\n\n\n\n\n\n\nproxy_address\n\n\nProxy address\n\n\n\n\n\n\nproxy_port\n\n\nProxy port\n\n\n\n\n\n\n\n\n\n\nssh\n\n\nAllows remote command execution using ssh\n\n\n\n\nLets you execute remote commands via ssh using username/password or ssh-agent. If one of the commands in command-array returns non 0 - it fails.\n\n\n\n\n\n\n\n\n\n\nssh\n\n\n\n\n\n\n\n\n\n\n\n\nSupported platforms\n\n\nios, android, mac\n\n\n\n\n\n\nAuthor\n\n\n@hjanuschka\n\n\n\n\n\n\n\n\n\n\n1 Example\n\n\nssh(\n  host: \ndev.januschka.com\n,\n  username: \nroot\n,\n  commands: [\n    \ndate\n,\n    \necho 1 \n /tmp/file1\n\n  ]\n)\n\n\n\n\n\n\n\n\nParameters\n\n\n\n\n\n\n\n\nKey\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nusername\n\n\nUsername\n\n\n\n\n\n\npassword\n\n\nPassword\n\n\n\n\n\n\nhost\n\n\nHostname\n\n\n\n\n\n\nport\n\n\nPort\n\n\n\n\n\n\ncommands\n\n\nCommands\n\n\n\n\n\n\nlog\n\n\nLog commands and output\n\n\n\n\n\n\n\n\n\n\nupdate_icloud_container_identifiers\n\n\nThis action changes the iCloud container identifiers in the entitlements file\n\n\n\n\nUpdates the iCloud Container Identifiers in the given Entitlements file, so you can use different iCloud containers for different builds like Adhoc, App Store, etc.\n\n\n\n\n\n\n\n\n\n\nupdate_icloud_container_identifiers\n\n\n\n\n\n\n\n\n\n\n\n\nSupported platforms\n\n\nios\n\n\n\n\n\n\nAuthor\n\n\n@JamesKuang\n\n\n\n\n\n\n\n\n\n\n1 Example\n\n\nupdate_icloud_container_identifiers(\n  entitlements_file: \n/path/to/entitlements_file.entitlements\n,\n  icloud_container_identifiers: [\niCloud.com.companyname.appname\n]\n)\n\n\n\n\n\n\n\n\nParameters\n\n\n\n\n\n\n\n\nKey\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nentitlements_file\n\n\nThe path to the entitlement file which contains the iCloud container identifiers\n\n\n\n\n\n\nicloud_container_identifiers\n\n\nAn Array of unique identifiers for the iCloud containers. Eg. ['iCloud.com.test.testapp']\n\n\n\n\n\n\n\n\n\n\njira\n\n\nLeave a comment on JIRA tickets\n\n\n\n\n\n\n\n\njira\n\n\n\n\n\n\n\n\n\n\n\n\nSupported platforms\n\n\nios, android, mac\n\n\n\n\n\n\nAuthor\n\n\n@iAmChrisTruman\n\n\n\n\n\n\n\n\n\n\n1 Example\n\n\njira(\n  url: \nhttps://bugs.yourdomain.com\n,\n  username: \nYour username\n,\n  password: \nYour password\n,\n  ticket_id: \nTicket ID, i.e. IOS-123\n,\n  comment_text: \nText to post as a comment\n\n)\n\n\n\n\n\n\n\n\nParameters\n\n\n\n\n\n\n\n\nKey\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nurl\n\n\nURL for Jira instance\n\n\n\n\n\n\nusername\n\n\nUsername for JIRA instance\n\n\n\n\n\n\npassword\n\n\nPassword for Jira\n\n\n\n\n\n\nticket_id\n\n\nTicket ID for Jira, i.e. IOS-123\n\n\n\n\n\n\ncomment_text\n\n\nText to add to the ticket as a comment\n\n\n\n\n\n\n\n\n\n\nrsync\n\n\nRsync files from :source to :destination\n\n\n\n\nA wrapper around rsync, rsync is a tool that lets you synchronize files, including permissions and so on for a more detailed information about rsync please see rsync(1) manpage.\n\n\n\n\n\n\n\n\n\n\nrsync\n\n\n\n\n\n\n\n\n\n\n\n\nSupported platforms\n\n\nios, android, mac\n\n\n\n\n\n\nAuthor\n\n\n@hjanuschka\n\n\n\n\n\n\n\n\n\n\n1 Example\n\n\nrsync(\n  source: \nroot@host:/tmp/1.txt\n,\n  destination: \n/tmp/local_file.txt\n\n)\n\n\n\n\n\n\n\n\nParameters\n\n\n\n\n\n\n\n\nKey\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nextra\n\n\nPort\n\n\n\n\n\n\nsource\n\n\nsource file/folder\n\n\n\n\n\n\ndestination\n\n\ndestination file/folder\n\n\n\n\n\n\n\n\n\n\nread_podspec\n\n\nLoads a CocoaPods spec as JSON\n\n\n\n\nThis can be used for only specifying a version string in your podspec\n- and during your release process you'd read it from the podspec by running\n\nversion = read_podspec['version']\n at the beginning of your lane\nLoads the specified (or the first found) podspec in the folder as JSON, so that you can inspect its \nversion\n, \nfiles\n etc. \nThis can be useful when basing your release process on the version string only stored in one place - in the podspec. As one of \nthe first steps you'd read the podspec and its version and the rest of the workflow can use that version string (when e.g. creating a new git tag or a GitHub Release).\n\n\n\n\n\n\n\n\n\n\nread_podspec\n\n\n\n\n\n\n\n\n\n\n\n\nSupported platforms\n\n\nios, mac\n\n\n\n\n\n\nAuthor\n\n\n@czechboy0\n\n\n\n\n\n\n\n\n\n\n2 Examples\n\n\nspec = read_podspec\nversion = spec[\nversion\n]\nputs \nUsing Version #{version}\n\n\n\n\n\nspec = read_podspec(path: \n./XcodeServerSDK.podspec\n)\n\n\n\n\n\n\n\n\nParameters\n\n\n\n\n\n\n\n\nKey\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\npath\n\n\nPath to the podspec to be read\n\n\n\n\n\n\n\n\n\n\nupload_symbols_to_sentry\n\n\nUpload dSYM symbolication files to Sentry\n\n\n\n\nThis action allows you to upload symbolication files to Sentry. It's extra useful if you use it to download the latest dSYM files from Apple when you use Bitcode\n\n\n\n\n\n\n\n\n\n\nupload_symbols_to_sentry\n\n\n\n\n\n\n\n\n\n\n\n\nSupported platforms\n\n\nios\n\n\n\n\n\n\nAuthor\n\n\n@joshdholtz\n\n\n\n\n\n\nReturns\n\n\nThe uploaded dSYM path(s)\n\n\n\n\n\n\n\n\n\n\n1 Example\n\n\nupload_symbols_to_sentry(\n  auth_token: \n...\n,\n  org_slug: \n...\n,\n  project_slug: \n...\n,\n  dsym_path: \n./App.dSYM.zip\n\n)\n\n\n\n\n\n\n\n\nParameters\n\n\n\n\n\n\n\n\nKey\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\napi_host\n\n\nAPI host url for Sentry\n\n\n\n\n\n\napi_key\n\n\nAPI key for Sentry\n\n\n\n\n\n\nauth_token\n\n\nAuthentication token for Sentry\n\n\n\n\n\n\norg_slug\n\n\nOrganization slug for Sentry project\n\n\n\n\n\n\nproject_slug\n\n\nPrgoject slug for Sentry\n\n\n\n\n\n\ndsym_path\n\n\nPath to your symbols file. For iOS and Mac provide path to app.dSYM.zip\n\n\n\n\n\n\ndsym_paths\n\n\nPath to an array of your symbols file. For iOS and Mac provide path to app.dSYM.zip\n\n\n\n\n\n\n\n\n\n\ntryouts\n\n\nUpload a new build to Tryouts\n\n\n\n\nMore information http://tryouts.readthedocs.org/en/latest/releases.html#create-release\n\n\n\n\n\n\n\n\n\n\ntryouts\n\n\n\n\n\n\n\n\n\n\n\n\nSupported platforms\n\n\nios, android\n\n\n\n\n\n\nAuthor\n\n\n@alicertel\n\n\n\n\n\n\n\n\n\n\n1 Example\n\n\ntryouts(\n  api_token: \n...\n,\n  app_id: \napplication-id\n,\n  build_file: \ntest.ipa\n,\n)\n\n\n\n\n\n\n\n\nParameters\n\n\n\n\n\n\n\n\nKey\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\napp_id\n\n\nTryouts application hash\n\n\n\n\n\n\napi_token\n\n\nAPI Token for Tryouts Access\n\n\n\n\n\n\nbuild_file\n\n\nPath to your IPA or APK file. Optional if you use the \ngym\n or \nxcodebuild\n action\n\n\n\n\n\n\nnotes\n\n\nRelease notes\n\n\n\n\n\n\nnotes_path\n\n\nRelease notes text file path. Overrides the :notes paramether\n\n\n\n\n\n\nnotify\n\n\nNotify testers? 0 for no\n\n\n\n\n\n\nstatus\n\n\n2 to make your release public. Release will be distributed to available testers. 1 to make your release private. Release won't be distributed to testers. This also prevents release from showing up for SDK update\n\n\n\n\n\n\n\n\n\n\ndotgpg_environment\n\n\nReads in production secrets set in a dotgpg file and puts them in ENV\n\n\n\n\nMore information about dotgpg can be found at https://github.com/ConradIrwin/dotgpg\n\n\n\n\n\n\n\n\n\n\ndotgpg_environment\n\n\n\n\n\n\n\n\n\n\n\n\nSupported platforms\n\n\nios, android, mac\n\n\n\n\n\n\nAuthor\n\n\n@simonlevy5\n\n\n\n\n\n\n\n\n\n\n1 Example\n\n\ndotgpg_environment(dotgpg_file: './path/to/gpgfile')\n\n\n\n\n\n\n\n\nParameters\n\n\n\n\n\n\n\n\nKey\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\ndotgpg_file\n\n\nPath to your gpg file\n\n\n\n\n\n\n\n\n\n\nopt_out_usage\n\n\nThis will stop uploading the information which actions were run\n\n\n\n\nBy default, fastlane will share the used actions. No personal information is shard. More information available on https://github.com/fastlane/enhancer\nUsing this action you can opt out\n\n\n\n\n\n\n\n\n\n\nopt_out_usage\n\n\n\n\n\n\n\n\n\n\n\n\nSupported platforms\n\n\nios, android, mac\n\n\n\n\n\n\nAuthor\n\n\n@KrauseFx\n\n\n\n\n\n\n\n\n\n\n1 Example\n\n\nopt_out_usage\n\n\n\n\n\n\nPlugins\n\n\n\n\n\n\n\n\nAction\n\n\nPlugin\n\n\nDescription\n\n\nUsage Number\n\n\n\n\n\n\n\n\n\n\nsynx\n\n\nsynx\n\n\nOrganise your Xcode project folder to match your Xcode groups.\n\n\n6702\n\n\n\n\n\n\nascii_art\n\n\nascii_art\n\n\nAdd some fun to your fastlane output.\n\n\n4119\n\n\n\n\n\n\ntrainer\n\n\ntrainer\n\n\nConvert xcodebuild plist files to JUnit reports\n\n\n2463\n\n\n\n\n\n\nget_info_plist_path\n\n\nversioning\n\n\nAllows to set/get app version and build number directly to/from Info.plist\n\n\n1812\n\n\n\n\n\n\npixie\n\n\npixie\n\n\nShow your build status on PIXIE!\n\n\n1741\n\n\n\n\n\n\nincrement_build_number_in_plist\n\n\nversioning\n\n\nAllows to set/get app version and build number directly to/from Info.plist\n\n\n1248\n\n\n\n\n\n\nxamarin_build\n\n\nxamarin_build\n\n\nBuild xamarin android\\ios projects\n\n\n1010\n\n\n\n\n\n\nread_changelog\n\n\nchangelog\n\n\nAutomate changes to your project CHANGELOG.md\n\n\n877\n\n\n\n\n\n\nextract_app_icon\n\n\npolidea\n\n\nPolidea's fastlane action\n\n\n864\n\n\n\n\n\n\nget_version_number_from_plist\n\n\nversioning\n\n\nAllows to set/get app version and build number directly to/from Info.plist\n\n\n852\n\n\n\n\n\n\nget_binary_size\n\n\npolidea\n\n\nPolidea's fastlane action\n\n\n812\n\n\n\n\n\n\nftp\n\n\nftp\n\n\nSimple ftp upload and download for Fastlane\n\n\n789\n\n\n\n\n\n\nextract_app_name\n\n\npolidea\n\n\nPolidea's fastlane action\n\n\n748\n\n\n\n\n\n\nextract_version\n\n\npolidea\n\n\nPolidea's fastlane action\n\n\n739\n\n\n\n\n\n\ncarthage_cache_exist\n\n\ncarthage_cache\n\n\nA Fastlane plugin that allows to cache Carthage/Build folder in Amazon S3.\n\n\n730\n\n\n\n\n\n\nappicon\n\n\nappicon\n\n\nGenerate required icon sizes and iconset from a master application icon.\n\n\n726\n\n\n\n\n\n\npolidea_store\n\n\npolidea\n\n\nPolidea's fastlane action\n\n\n693\n\n\n\n\n\n\nget_version_name\n\n\nget_version_name\n\n\nGet the version name of an Android project.\n\n\n684\n\n\n\n\n\n\ncarthage_cache_install\n\n\ncarthage_cache\n\n\nA Fastlane plugin that allows to cache Carthage/Build folder in Amazon S3.\n\n\n653\n\n\n\n\n\n\nincrement_version_code\n\n\nincrement_version_code\n\n\nIncrement the version code of your android project.\n\n\n593\n\n\n\n\n\n\nextract_certificate\n\n\nxamarin_build\n\n\nBuild xamarin android\\ios projects\n\n\n548\n\n\n\n\n\n\nadd_prefix_schema\n\n\npolidea\n\n\nPolidea's fastlane action\n\n\n527\n\n\n\n\n\n\npoeditor_export\n\n\npoeditor_export\n\n\nExports translations from POEditor.com\n\n\n515\n\n\n\n\n\n\nxamarin_update_configuration\n\n\nxamarin_build\n\n\nBuild xamarin android\\ios projects\n\n\n511\n\n\n\n\n\n\nupload_to_onesky\n\n\nupload_to_onesky\n\n\nUpload a strings file to OneSky\n\n\n511\n\n\n\n\n\n\nincrement_version_number_in_plist\n\n\nversioning\n\n\nAllows to set/get app version and build number directly to/from Info.plist\n\n\n499\n\n\n\n\n\n\nrelease_notes\n\n\npolidea\n\n\nPolidea's fastlane action\n\n\n465\n\n\n\n\n\n\nbranding\n\n\nbranding\n\n\nAdd some branding to your fastlane output\n\n\n424\n\n\n\n\n\n\nstamp_changelog\n\n\nchangelog\n\n\nAutomate changes to your project CHANGELOG.md\n\n\n381\n\n\n\n\n\n\nautomated_test_emulator_run\n\n\nautomated_test_emulator_run\n\n\nAllows to wrap gradle task or shell command that runs integrated tests that prepare and starts single AVD before test run. After tests are finished, emulator is killed and deleted.\n\n\n380\n\n\n\n\n\n\nxcake\n\n\nxcake\n\n\nCreate your Xcode projects automatically using a stupid simple DSL.\n\n\n376\n\n\n\n\n\n\nget_version_code\n\n\nget_version_code\n\n\nGet the version code of anAndroid project. This action will return the version code of your project according to the one set in your build.gradle file\n\n\n347\n\n\n\n\n\n\ndeploy_file_provider\n\n\ndeploy_file_provider\n\n\nPrepares metadata files with structure ready for AppStore, PlayStore deploy\n\n\n333\n\n\n\n\n\n\ninstrumented_tests\n\n\ninstrumented_tests\n\n\nNew action to run instrumented tests for android. This basically creates and boots an emulator before running an gradle commands so that you can run instrumented tests against that emulator. After the gradle command is executed, the avd gets shut down and deleted. This is really helpful on CI services, keeping them clean and always having a fresh avd for testing.\n\n\n326\n\n\n\n\n\n\nremove_provisioning_profile\n\n\nremove_provisioning_profile\n\n\nRemove provision profile from your local machine\n\n\n314\n\n\n\n\n\n\ngoodify_info_plist\n\n\ngoodify_info_plist\n\n\nThis plugin will update the plist so that the built application can be deployed and managed within BlackBerry's Good Dynamics Control Center for Enterprise Mobility Management.\n\n\n308\n\n\n\n\n\n\napplivery\n\n\napplivery\n\n\nUpload new build to Applivery\n\n\n295\n\n\n\n\n\n\nact\n\n\nact\n\n\nApplies changes to plists and app icons inside a compiled IPA\n\n\n273\n\n\n\n\n\n\ndroidicon\n\n\ndroidicon\n\n\nGenerate required icon sizes and iconset from a master application icon\n\n\n261\n\n\n\n\n\n\ngiffy_random_gif_url\n\n\ngiffy\n\n\nFastlane plugin for Giffy.com API\n\n\n259\n\n\n\n\n\n\ntunes\n\n\ntunes\n\n\nPlay music using fastlane, because you can.\n\n\n214\n\n\n\n\n\n\njira_transition\n\n\njira_transition\n\n\nApply a JIRA transition to issues mentioned in the changelog\n\n\n193\n\n\n\n\n\n\ncommit_android_version_bump\n\n\ncommit_android_version_bump\n\n\nThis Android plugins allow you to commit every modification done in your build.gradle file during the execution of a lane. In fast, it do the same as the commit_version_bump action, but for Android\n\n\n179\n\n\n\n\n\n\nsentry_upload_dsym\n\n\nsentry\n\n\nUpload symbols to Sentry\n\n\n163\n\n\n\n\n\n\nunzip\n\n\nunzip\n\n\nExtract compressed files in a ZIP\n\n\n147\n\n\n\n\n\n\nversion_from_last_tag\n\n\nversion_from_last_tag\n\n\nPerform a regex on last (latest) git tag and perform a regex to extract a version number such as Release 1.2.3\n\n\n120\n\n\n\n\n\n\nupdate_provisioning_profile_specifier\n\n\nupdate_provisioning_profile_specifier\n\n\nUpdate the provisioning profile in the Xcode Project file for a specified target\n\n\n113\n\n\n\n\n\n\nsharethemeal\n\n\nsharethemeal\n\n\nShareTheMeal\n\n\n109\n\n\n\n\n\n\nget_app_store_version_number\n\n\nversioning\n\n\nAllows to set/get app version and build number directly to/from Info.plist\n\n\n105\n\n\n\n\n\n\ndownload_file\n\n\ndownload_file\n\n\nThis action downloads a file from an HTTP/HTTPS url (e.g. ZIP file) and puts it in a destination path\n\n\n102\n\n\n\n\n\n\nupdate_changelog\n\n\nchangelog\n\n\nAutomate changes to your project CHANGELOG.md\n\n\n100\n\n\n\n\n\n\ncoreos_deploy\n\n\ncoreos\n\n\nDeploy docker services to CoreOS hosts\n\n\n97\n\n\n\n\n\n\nfacelift\n\n\nfacelift\n\n\nDeprecated in favor of 'fastlane-plugin-act'\n\n\n96\n\n\n\n\n\n\ncarthage_cache_publish\n\n\ncarthage_cache\n\n\nA Fastlane plugin that allows to cache Carthage/Build folder in Amazon S3.\n\n\n68\n\n\n\n\n\n\ncreate_jira_version\n\n\njira_versions\n\n\nManage your JIRA project's releases/versions with this plugin.\n\n\n65\n\n\n\n\n\n\ntpa\n\n\ntpa\n\n\nTPA gives you advanced user behaviour analytics, app distribution, crash analytics and more\n\n\n64\n\n\n\n\n\n\nget_build_number_from_plist\n\n\nversioning\n\n\nAllows to set/get app version and build number directly to/from Info.plist\n\n\n61\n\n\n\n\n\n\nexport_localizations\n\n\nlocalization\n\n\nExport/import app localizations with help of xcodebuild -exportLocalizations/-importLocalizations tool\n\n\n61\n\n\n\n\n\n\nupload_folder_to_s3\n\n\nupload_folder_to_s3\n\n\nUpload a folder to S3\n\n\n57\n\n\n\n\n\n\nimport_localizations\n\n\nlocalization\n\n\nExport/import app localizations with help of xcodebuild -exportLocalizations/-importLocalizations tool\n\n\n51\n\n\n\n\n\n\ninstabug\n\n\ninstabug\n\n\nUploads dSYM to Instabug\n\n\n49\n\n\n\n\n\n\nupload_symbols_to_hockey\n\n\nupload_symbols_to_hockey\n\n\nUpload dSYM symbolication files to Hockey\n\n\n46\n\n\n\n\n\n\nframer\n\n\nframer\n\n\nCreate images combining app screenshots with templates to make nice pictures for the App Store\n\n\n44\n\n\n\n\n\n\nrelease_jira_version\n\n\njira_versions\n\n\nManage your JIRA project's releases/versions with this plugin.\n\n\n44\n\n\n\n\n\n\nensure_xcode_build_version\n\n\nensure_xcode_build_version\n\n\nEnsure Xcode Build Version for working with Beta, GM and Release\n\n\n41\n\n\n\n\n\n\nclang_analyzer\n\n\nclang_analyzer\n\n\nRuns Clang Static Analyzer(http://clang-analyzer.llvm.org/) and generates report\n\n\n38\n\n\n\n\n\n\nlatest_hockeyapp_version_number\n\n\nlatest_hockeyapp_version_number\n\n\nEasily fetch the most recent HockeyApp version number for your app\n\n\n37\n\n\n\n\n\n\nintentconfirmation\n\n\nintentconfirmation\n\n\nHalts the lane invocation, asks user to confirm if he wants to continue, may require password or key.\n\n\n33\n\n\n\n\n\n\ngithub_status\n\n\ngithub_status\n\n\nProvides the ability to display and act upon GitHub server status as part of your build\n\n\n31\n\n\n\n\n\n\ncoreos\n\n\ncoreos\n\n\nDeploy docker services to CoreOS hosts\n\n\n27\n\n\n\n\n\n\nprepare_build_resources\n\n\nprepare_build_resources\n\n\nPrepares certificates and provisioning profiles for building and removes them afterwards.\n\n\n26\n\n\n\n\n\n\nupdate_xcodeproj\n\n\nupdate_xcodeproj\n\n\nUpdate Xcode projects\n\n\n21\n\n\n\n\n\n\ncheck_good_version\n\n\ncheck_good_version\n\n\nChecks the version of the installed Good framework\n\n\n19\n\n\n\n\n\n\nupdate_project_codesigning\n\n\nupdate_project_codesigning\n\n\nUpdates the Xcode 8 Automatic Codesigning Flag\n\n\n17\n\n\n\n\n\n\nrubocop\n\n\nruby\n\n\nUseful fastlane actions for Ruby projects\n\n\n16\n\n\n\n\n\n\nwait_xcrun\n\n\nwait_xcrun\n\n\nWait for Xcode toolchain to come back online after switching Xcode versions.\n\n\n14\n\n\n\n\n\n\ngiffy_random_sticker_url\n\n\ngiffy\n\n\nFastlane plugin for Giffy.com API\n\n\n11\n\n\n\n\n\n\nya_tu_sabes\n\n\nya_tu_sabes\n\n\nYa tu sabes.\n\n\n10\n\n\n\n\n\n\nandroid_appicon\n\n\nappicon\n\n\nGenerate required icon sizes and iconset from a master application icon.\n\n\n10\n\n\n\n\n\n\nget_unprovisioned_devices_from_hockey\n\n\nget_unprovisioned_devices_from_hockey\n\n\nRetrieves a list of unprovisioned devices from Hockey which can be passed directly into register_devices.\n\n\n9\n\n\n\n\n\n\ncertificate_expirydate\n\n\ncertificate_expirydate\n\n\nRetrieves the expiry date of the given p12 certificate file\n\n\n9\n\n\n\n\n\n\nrspec\n\n\nruby\n\n\nUseful fastlane actions for Ruby projects\n\n\n6\n\n\n\n\n\n\napp_icon\n\n\npolidea\n\n\nPolidea's fastlane action\n\n\n6\n\n\n\n\n\n\nshuttle\n\n\npolidea\n\n\nPolidea's fastlane action\n\n\n5\n\n\n\n\n\n\nget_version_number_from_git_branch\n\n\nversioning\n\n\nAllows to set/get app version and build number directly to/from Info.plist\n\n\n5\n\n\n\n\n\n\nfiglet\n\n\nfiglet\n\n\nWrapper around figlet which makes large ascii text words\n\n\n5\n\n\n\n\n\n\nno_u\n\n\nno_u\n\n\nno u\n\n\n3\n\n\n\n\n\n\nclubmate\n\n\nclubmate\n\n\nPrint the Club Mate logo in your build output\n\n\n3\n\n\n\n\n\n\nimport_provisioning\n\n\npolidea\n\n\nPolidea's fastlane action\n\n\n2\n\n\n\n\n\n\npretty_junit\n\n\npretty_junit\n\n\nPretty JUnit test results for your Android projects.\n\n\n2\n\n\n\n\n\n\nmessagesicon\n\n\nappicon\n\n\nGenerate required icon sizes and iconset from a master application icon.\n\n\n2\n\n\n\n\n\n\ndelete_files\n\n\ndelete_files\n\n\nDeletes a file, folder or multiple files using shell glob pattern.\n\n\n1\n\n\n\n\n\n\naws_device_farm\n\n\naws_device_farm\n\n\nRun UI Tests on AWS Devicefarm\n\n\n1", 
            "title": "Actions"
        }, 
        {
            "location": "/actions/#fastlane-actions", 
            "text": "This page contains a list of all built-in fastlane actions and their available options.  To get the most up-to-date information from the command line on your current version you can also run  fastlane actions # list all available fastlane actions\nfastlane action [action_name] # more information for a specific action  You can import another  Fastfile  by using the  import  action. This is useful if you have shared lanes across multiple apps and you want to store a  Fastfile  in a separate folder. The path must be relative to the  Fastfile  this is called from.  import './path/to/other/Fastfile'   Testing  Building  Screenshots  Project  Code Signing  Documentation  Beta  Push  Releasing your app  Source Control  Notifications  Deprecated  Misc  Plugins", 
            "title": "fastlane actions"
        }, 
        {
            "location": "/actions/#testing", 
            "text": "", 
            "title": "Testing"
        }, 
        {
            "location": "/actions/#scan", 
            "text": "Easily run tests of your iOS app using  scan   More information: https://github.com/fastlane/fastlane/tree/master/scan      scan       Supported platforms  ios, mac    Author  @KrauseFx      2 Examples  scan  scan(\n  workspace:  App.xcworkspace ,\n  scheme:  MyTests ,\n  clean: false\n)    Parameters     Key  Description      workspace  Path the workspace file    project  Path the project file    device  The name of the simulator type you want to run tests on (e.g. 'iPhone 6')    devices  Array of devices to run the tests on (e.g. ['iPhone 6', 'iPad Air'])    scheme  The project's scheme. Make sure it's marked as  Shared    clean  Should the project be cleaned before building it?    code_coverage  Should generate code coverage (Xcode 7 only)?    address_sanitizer  Should turn on the address sanitizer?    skip_build  Should skip debug build before test build?    output_directory  The directory in which all reports will be stored    output_style  Define how the output should look like (standard, basic, rspec or raw)    output_types  Comma separated list of the output types (e.g. html, junit)    buildlog_path  The directory were to store the raw log    formatter  A custom xcpretty formatter to use    derived_data_path  The directory where build products and other derived data will go    result_bundle  Produce the result bundle describing what occurred will be placed    sdk  The SDK that should be used for building the application    open_report  Should the HTML report be opened when tests are completed    configuration  The configuration to use when building the app. Defaults to 'Release'    destination  Use only if you're a pro, use the other options instead    xcargs  Pass additional arguments to xcodebuild. Be sure to quote the setting names and values e.g. OTHER_LDFLAGS=\"-ObjC -lstdc++\"    xcconfig  Use an extra XCCONFIG file to build your app    slack_url  Create an Incoming WebHook for your Slack group to post results there    slack_channel  #channel or @username    slack_message  The message included with each message posted to slack    skip_slack  Don't publish to slack, even when an URL is given    slack_only_on_failure  Only post on Slack if the tests fail    use_clang_report_name  Generate the json compilation database with clang naming convention (compile_commands.json)    custom_report_file_name  Sets custom full report file name    fail_build  Should this step stop the build if the tests fail? Set this to false if you're using trainer", 
            "title": "scan"
        }, 
        {
            "location": "/actions/#xctool", 
            "text": "Run tests using xctool   You can run any  xctool  action. This will require having  xctool  installed through  homebrew . It is recommended to store the build configuration in the  .xctool-args  file. More information available on GitHub: https://github.com/fastlane/fastlane/blob/master/fastlane/docs/Actions.md#xctool      xctool       Supported platforms  ios, mac    Author  @KrauseFx      2 Examples  xctool :test  # If you prefer to have the build configuration stored in the `Fastfile`:\nxctool :test, [\n   --workspace ,  'AwesomeApp.xcworkspace' ,\n   --scheme ,  'Schema Name' ,\n   --configuration ,  Debug ,\n   --sdk ,  iphonesimulator ,\n   --arch ,  i386 \n].join(   )", 
            "title": "xctool"
        }, 
        {
            "location": "/actions/#slather", 
            "text": "Use slather to generate a code coverage report   Slather works with multiple code coverage formats including Xcode7 code coverage.\nSlather is available at https://github.com/SlatherOrg/slather      slather       Supported platforms  ios, mac    Author  @mattdelves      1 Example  slather(\n  build_directory:  foo ,\n  input_format:  bah ,\n  scheme:  MyScheme ,\n  proj:  MyProject.xcodeproj \n)    Parameters     Key  Description      build_directory  The location of the build output    proj  The project file that slather looks at    workspace  The workspace that slather looks at    scheme  Scheme to use when calling slather    input_format  The input format that slather should look for    buildkite  Tell slather that it is running on Buildkite    teamcity  Tell slather that it is running on TeamCity    jenkins  Tell slather that it is running on Jenkins    travis  Tell slather that it is running on TravisCI    circleci  Tell slather that it is running on CircleCI    coveralls  Tell slather that it should post data to Coveralls    simple_output  Tell slather that it should output results to the terminal    gutter_json  Tell slather that it should output results as Gutter JSON format    cobertura_xml  Tell slather that it should output results as Cobertura XML format    html  Tell slather that it should output results as static HTML pages    show  Tell slather that it should open static html pages automatically    source_directory  Tell slather the location of your source files    output_directory  Tell slather the location of for your output files    ignore  Tell slather to ignore files matching a path or any path from an array of paths    verbose  Tell slather to enable verbose mode    use_bundle_exec  Use bundle exec to execute slather. Make sure it is in the Gemfile    binary_basename  Basename of the binary file, this should match the name of your bundle excluding its extension (i.e. YourApp [for YourApp.app bundle])    binary_file  Binary file name to be used for code coverage    source_files  A Dir.glob compatible pattern used to limit the lookup to specific source files. Ignored in gcov mode    decimals  The amount of decimals to use for % coverage reporting", 
            "title": "slather"
        }, 
        {
            "location": "/actions/#swiftlint", 
            "text": "Run swift code validation using SwiftLint     swiftlint       Supported platforms  ios, mac    Author  @KrauseFx      1 Example  swiftlint(\n  mode: :lint,      # SwiftLint mode: :lint (default) or :autocorrect\n  output_file:  swiftlint.result.json , # The path of the output file (optional)\n  config_file:  .swiftlint-ci.yml ,     # The path of the configuration file (optional)\n  files: [# List of files to process (optional)\n     AppDelegate.swift ,\n     path/to/project/Model.swift \n  ],\n  ignore_exit_status: true    # Allow fastlane to continue even if SwiftLint returns a non-zero exit status\n)    Parameters     Key  Description      mode  SwiftLint mode: :lint (default) or :autocorrect; default is :lint    output_file  Path to output SwiftLint result    config_file  Custom configuration file of SwiftLint    strict  Fail on warnings? (true/false)    files  List of files to process    ignore_exit_status  Ignore the exit status of the SwiftLint command, so that serious violations                                                     don't fail the build (true/false)", 
            "title": "swiftlint"
        }, 
        {
            "location": "/actions/#oclint", 
            "text": "Lints implementation files with OCLint   Run the static analyzer tool  OCLint  for your project. You need to have a  compile_commands.json  file in your  fastlane  directory or pass a path to your file      oclint       Supported platforms  ios, android, mac    Author  @HeEAaD      1 Example  oclint(\n  compile_commands:  commands.json ,    # The JSON compilation database, use xctool reporter  json-compilation-database \n  select_regex: /ViewController.m/,     # Select all files matching this regex\n  exclude_regex: /Test.m/,    # Exclude all files matching this regex\n  report_type:  pmd ,         # The type of the report (default: html)\n  max_priority_1: 10,         # The max allowed number of priority 1 violations\n  max_priority_2: 100,        # The max allowed number of priority 2 violations\n  max_priority_3: 1000,       # The max allowed number of priority 3 violations\n  thresholds: [     # Override the default behavior of rules\n     LONG_LINE=200 ,\n     LONG_METHOD=200 \n  ],\n  enable_rules: [   # List of rules to pick explicitly\n     DoubleNegative ,\n     SwitchStatementsDon'TNeedDefaultWhenFullyCovered \n  ],\n  disable_rules: [ GotoStatement ],     # List of rules to disable\n  list_enabled_rules: true,   # List enabled rules\n  enable_clang_static_analyzer: true,   # Enable Clang Static Analyzer, and integrate results into OCLint report\n  enable_global_analysis: true,         # Compile every source, and analyze across global contexts (depends on number of source files, could results in high memory load)\n  allow_duplicated_violations: true     # Allow duplicated violations in the OCLint report\n)    Parameters     Key  Description      oclint_path  The path to oclint binary    compile_commands  The json compilation database, use xctool reporter 'json-compilation-database'    select_reqex  Select all files matching this reqex    select_regex  Select all files matching this regex    exclude_regex  Exclude all files matching this regex    report_type  The type of the report (default: html)    report_path  The reports file path    list_enabled_rules  List enabled rules    rc  Override the default behavior of rules    thresholds  List of rule thresholds to override the default behavior of rules    enable_rules  List of rules to pick explicitly    disable_rules  List of rules to disable    max_priority_1  The max allowed number of priority 1 violations    max_priority_2  The max allowed number of priority 2 violations    max_priority_3  The max allowed number of priority 3 violations    enable_clang_static_analyzer  Enable Clang Static Analyzer, and integrate results into OCLint report    enable_global_analysis  Compile every source, and analyze across global contexts (depends on number of source files, could results in high memory load)    allow_duplicated_violations  Allow duplicated violations in the OCLint report", 
            "title": "oclint"
        }, 
        {
            "location": "/actions/#xcov", 
            "text": "Nice code coverage reports without hassle   Create nice code coverage reports and post coverage summaries on Slack  (xcov gem is required) .\nMore information: https://github.com/nakiostudio/xcov      xcov       Supported platforms  ios, mac    Author  @nakiostudio      1 Example  xcov(\n  workspace:  YourWorkspace.xcworkspace ,\n  scheme:  YourScheme ,\n  output_directory:  xcov_output \n)", 
            "title": "xcov"
        }, 
        {
            "location": "/actions/#gcovr", 
            "text": "Runs test coverage reports for your Xcode project   Generate summarized code coverage reports using  gcovr      gcovr       Supported platforms  ios    Author  @dtrenz      1 Example  gcovr(\n  html: true,\n  html_details: true,\n  output:  ./code-coverage/report.html \n)", 
            "title": "gcovr"
        }, 
        {
            "location": "/actions/#sonar", 
            "text": "Invokes sonar-scanner to programmatically run SonarQube analysis   See http://docs.sonarqube.org/display/SCAN/Analyzing+with+SonarQube+Scanner for details.\nIt can process unit test results if formatted as junit report as shown in  xctest  action. It can also integrate coverage reports in Cobertura format, which can be transformed into by  slather  action.      sonar       Supported platforms  ios, android, mac    Author  @c_gretzki    Returns  The exit code of the sonar-scanner binary      1 Example  sonar(\n  project_key:  name.gretzki.awesomeApp ,\n  project_version:  1.0 ,\n  project_name:  iOS - AwesomeApp ,\n  sources_path: File.expand_path( ../AwesomeApp )\n)    Parameters     Key  Description      project_configuration_path  The path to your sonar project configuration file; defaults to  sonar-project.properties    project_key  The key sonar uses to identify the project, e.g.  name.gretzki.awesomeApp . Must either be specified here or inside the sonar project configuration file    project_name  The name of the project that gets displayed on the sonar report page. Must either be specified here or inside the sonar project configuration file    project_version  The project's version that gets displayed on the sonar report page. Must either be specified here or inside the sonar project configuration file    sources_path  Comma-separated paths to directories containing source files. Must either be specified here or inside the sonar project configuration file    project_language  Language key, e.g. objc    source_encoding  Used encoding of source files, e.g., UTF-8    sonar_runner_args  Pass additional arguments to sonar-scanner. Be sure to provide the arguments with a leading  -D  e.g. FL_SONAR_RUNNER_ARGS=\"-Dsonar.verbose=true\"", 
            "title": "sonar"
        }, 
        {
            "location": "/actions/#lcov", 
            "text": "Generates coverage data using lcov     lcov       Supported platforms  ios, mac    Author  @thiagolioy      1 Example  lcov(\n  project_name:  ProjectName ,\n  scheme:  yourScheme ,\n  output_dir:  cov_reports  # This value is optional. Default is coverage_reports\n)    Parameters     Key  Description      project_name  Name of the project    scheme  Scheme of the project    arch  The build arch where will search .gcda files    output_dir  The output directory that coverage data will be stored. If not passed will use coverage_reports as default value", 
            "title": "lcov"
        }, 
        {
            "location": "/actions/#appium", 
            "text": "Run UI test by Appium with RSpec     appium       Supported platforms  ios    Author  @yonekawa      1 Example  appium(\n  app_path:   appium/apps/TargetApp.app ,\n  spec_path:  appium/spec ,\n  platform:   iOS ,\n  caps: {\n    versionNumber:  9.1 ,\n    deviceName:     iPhone 6 \n  }\n)    Parameters     Key  Description      platform  Appium platform name    spec_path  Path to Appium spec directory    app_path  Path to Appium target app file    invoke_appium_server  Use local Appium server with invoke automatically    host  Hostname of Appium server    port  HTTP port of Appium server    appium_path  Path to Appium executable    caps  Hash of caps for Appium::Driver", 
            "title": "appium"
        }, 
        {
            "location": "/actions/#xcode_server_get_assets", 
            "text": "Downloads Xcode Bot assets like the  .xcarchive  and logs   This action downloads assets from your Xcode Server Bot (works with Xcode Server\n          using Xcode 6 and 7. By default this action downloads all assets, unzips them and\n          deletes everything except for the  .xcarchive . If you'd like to keep all downloaded\n          assets, pass  :keep_all_assets: true . This action returns the path to the downloaded\n          assets folder and puts into shared values the paths to the asset folder and to the  .xcarchive  inside it      xcode_server_get_assets       Supported platforms  ios, mac    Author  @czechboy0      1 Example  xcode_server_get_assets(\n  host:  10.99.0.59 , # Specify Xcode Server's Host or IP Address\n  bot_name:  release-1.3.4  # Specify the particular Bot\n)    Parameters     Key  Description      host  IP Address/Hostname of Xcode Server    bot_name  Name of the Bot to pull assets from    integration_number  Optionally you can override which integration's assets should be downloaded. If not provided, the latest integration is used    username  Username for your Xcode Server    password  Password for your Xcode Server    target_folder  Relative path to a folder into which to download assets    keep_all_assets  Whether to keep all assets or let the script delete everything except for the .xcarchive    trust_self_signed_certs  Whether to trust self-signed certs on your Xcode Server", 
            "title": "xcode_server_get_assets"
        }, 
        {
            "location": "/actions/#building", 
            "text": "", 
            "title": "Building"
        }, 
        {
            "location": "/actions/#gym", 
            "text": "Easily build and sign your app using  gym   More information: https://fastlane.tools/gym      gym       Supported platforms  ios, mac    Author  @KrauseFx    Returns  The absolute path to the generated ipa file      2 Examples  gym(scheme:  MyApp , workspace:  MyApp.xcworkspace )  gym(\n  workspace:  MyApp.xcworkspace ,\n  configuration:  Debug ,\n  scheme:  MyApp ,\n  silent: true,\n  clean: true,\n  output_directory:  path/to/dir , # Destination directory. Defaults to current directory.\n  output_name:  my-app.ipa ,       # specify the name of the .ipa file to generate (including file extension)\n  sdk:  10.0   # use SDK as the name or path of the base SDK when building the project.\n)    Parameters     Key  Description      workspace  Path the workspace file    project  Path the project file    scheme  The project's scheme. Make sure it's marked as  Shared    clean  Should the project be cleaned before building it?    output_directory  The directory in which the ipa file should be stored in    output_name  The name of the resulting ipa file    configuration  The configuration to use when building the app. Defaults to 'Release'    silent  Hide all information that's not necessary while building    codesigning_identity  The name of the code signing identity to use. It has to match the name exactly. e.g. 'iPhone Distribution: SunApps GmbH'    include_symbols  Should the ipa file include symbols?    include_bitcode  Should the ipa include bitcode?    use_legacy_build_api  Don't use the new API because of https://openradar.appspot.com/radar?id=4952000420642816    export_method  How should gym export the archive?    export_options  Specifies path to export options plist. User xcodebuild -help to print the full set of available options    skip_build_archive  Export ipa from previously build xarchive. Uses archive_path as source    build_path  The directory in which the archive should be stored in    archive_path  The path to the created archive    derived_data_path  The directory where build products and other derived data will go    result_bundle  Produce the result bundle describing what occurred will be placed    buildlog_path  The directory where to store the build log    sdk  The SDK that should be used for building the application    toolchain  The toolchain that should be used for building the application (e.g. com.apple.dt.toolchain.Swift_2_3, org.swift.30p620160816a)    provisioning_profile_path  [DEPRECATED!] Use target specific provisioning profiles instead - The path to the provisioning profile (optional)    destination  Use a custom destination for building the app    export_team_id  Optional: Sometimes you need to specify a team id when exporting the ipa file    xcargs  Pass additional arguments to xcodebuild. Be sure to quote the setting names and values e.g. OTHER_LDFLAGS=\"-ObjC -lstdc++\"    xcconfig  Use an extra XCCONFIG file to build your app    suppress_xcode_output  Suppress the output of xcodebuild to stdout. Output is still saved in buildlog_path    disable_xcpretty  Disable xcpretty formatting of build output    xcpretty_test_format  Use the test (RSpec style) format for build output    xcpretty_formatter  A custom xcpretty formatter to use    xcpretty_report_junit  Have xcpretty create a JUnit-style XML report at the provided path    xcpretty_report_html  Have xcpretty create a simple HTML report at the provided path    xcpretty_report_json  Have xcpretty create a JSON compilation database at the provided path", 
            "title": "gym"
        }, 
        {
            "location": "/actions/#cocoapods", 
            "text": "Runs  pod install  for the project   If you use  CocoaPods  you can use the  cocoapods  integration to run  pod install  before building your app.      cocoapods       Supported platforms  ios, mac    Author  @KrauseFx, @tadpol, @birmacher, @Liquidsoul      2 Examples  cocoapods  cocoapods(\n  clean: true,\n  podfile:  ./CustomPodfile \n)    Parameters     Key  Description      clean  Remove SCM directories    integrate  Integrate the Pods libraries into the Xcode project(s)    repo_update  Run  pod repo update  before install    silent  Execute command without logging output    verbose  Show more debugging information    ansi  Show output with ANSI codes    use_bundle_exec  Use bundle exec when there is a Gemfile presented    podfile  Explicitly specify the path to the Cocoapods' Podfile. You can either set it to the Podfile's path or to the folder containing the Podfile file", 
            "title": "cocoapods"
        }, 
        {
            "location": "/actions/#clear_derived_data", 
            "text": "Deletes the Xcode Derived Data   Deletes the Derived Data from '~/Library/Developer/Xcode/DerivedData' or a supplied path      clear_derived_data       Supported platforms  ios, mac    Author  @KrauseFx      2 Examples  clear_derived_data  clear_derived_data(derived_data_path:  /custom/ )    Parameters     Key  Description      derived_data_path  Custom path for derivedData", 
            "title": "clear_derived_data"
        }, 
        {
            "location": "/actions/#carthage", 
            "text": "Runs  carthage  for your project     carthage       Supported platforms  ios, mac    Author  @bassrock, @petester42, @jschmid, @JaviSoto, @uny, @phatblat, @bfcrampton      2 Examples  carthage  carthage(\n  command:  bootstrap ,       # One of: build, bootstrap, update, archive. (default: bootstrap)\n  dependencies: [ Alamofire ,  Notice ],# Specify which dependencies to update (only for the update command)\n  use_ssh: false,   # Use SSH for downloading GitHub repositories.\n  use_submodules: false,      # Add dependencies as Git submodules.\n  use_binaries: true,         # Check out dependency repositories even when prebuilt frameworks exist\n  no_build: false,  # When bootstrapping Carthage do not build\n  no_skip_current: false,     # Don't skip building the current project (only for frameworks)\n  verbose: false,   # Print xcodebuild output inline\n  platform:  all ,  # Define which platform to build for (one of \u2018all\u2019, \u2018Mac\u2019, \u2018iOS\u2019, \u2018watchOS\u2019, \u2018tvOS\u2018, or comma-separated values of the formers except for \u2018all\u2019)\n  configuration:  Release ,   # Build configuration to use when building\n  toolchain:  com.apple.dt.toolchain.Swift_2_3    # Specify the xcodebuild toolchain\n)    Parameters     Key  Description      command  Carthage command (one of: build, bootstrap, update, archive)    dependencies  Carthage dependencies to update    use_ssh  Use SSH for downloading GitHub repositories    use_submodules  Add dependencies as Git submodules    use_binaries  Check out dependency repositories even when prebuilt frameworks exist    no_build  When bootstrapping Carthage do not build    no_skip_current  Don't skip building the Carthage project (in addition to its dependencies)    derived_data  Use derived data folder at path    verbose  Print xcodebuild output inline    platform  Define which platform to build for    configuration  Define which build configuration to use when building    toolchain  Define which xcodebuild toolchain to use when building    project_directory  Define the directory containing the Carthage project", 
            "title": "carthage"
        }, 
        {
            "location": "/actions/#gradle", 
            "text": "All gradle related actions, including building and testing your Android app   Run  ./gradlew tasks  to get a list of all available gradle tasks for your project      gradle       Supported platforms  ios, android    Author  @KrauseFx, @lmirosevic    Returns  The output of running the gradle task      3 Examples  gradle(\n  task:  assemble ,\n  flavor:  WorldDomination ,\n  build_type:  Release \n)  gradle(\n  # ...\n\n  properties: {\n     versionCode  =  100,\n     versionName  =   1.0.0 ,\n    # ...\n  }\n)  # If you need to pass sensitive information through the `gradle` action, and don t want the generated command to be printed before it is run, you can suppress that:\ngradle(\n  # ...\n  print_command: false\n)  You can also suppress printing the output generated by running the generated Gradle command:  gradle(\n  # ...\n  print_command_output: false\n)  To pass any other CLI flags to gradle use:  gradle(\n  # ...\n\n  flags:  --exitcode --xml file.xml \n)    Parameters     Key  Description      task  The gradle task you want to execute, e.g.  assemble  or  test . For tasks such as  assembleMyFlavorRelease  you should use gradle(task: 'assemble', flavor: 'Myflavor', build_type: 'Release')    flavor  The flavor that you want the task for, e.g.  MyFlavor . If you are running the  assemble  task in a multi-flavor project, and you rely on Actions.lane_context[Actions.SharedValues::GRADLE_APK_OUTPUT_PATH] then you must specify a flavor here or else this value will be undefined    build_type  The build type that you want the task for, e.g.  Release . Useful for some tasks such as  assemble    flags  All parameter flags you want to pass to the gradle command, e.g.  --exitcode --xml file.xml    project_dir  The root directory of the gradle project. Defaults to  .    gradle_path  The path to your  gradlew . If you specify a relative path, it is assumed to be relative to the  project_dir    properties  Gradle properties to be exposed to the gradle script    serial  Android serial, wich device should be used for this command    print_command  Control whether the generated Gradle command is printed as output before running it (true/false)    print_command_output  Control whether the output produced by given Gradle command is printed while running (true/false)", 
            "title": "gradle"
        }, 
        {
            "location": "/actions/#xcode_select", 
            "text": "Change the xcode-path to use. Useful for beta versions of Xcode   Select and build with the Xcode installed at the provided path. Use the  xcversion  action if you want to select an Xcode based on a version specifier or you don't have known, stable paths as may happen in a CI environment.      xcode_select       Supported platforms  ios, mac    Author  @dtrenz      1 Example  xcode_select  /Applications/Xcode6.1.app", 
            "title": "xcode_select"
        }, 
        {
            "location": "/actions/#xcodebuild", 
            "text": "Use the  xcodebuild  command to build and sign your app   Note :  xcodebuild  is a complex command, so it is recommended to use  gym  for building your ipa file and  scan  for testing your app instead.      xcodebuild       Supported platforms  ios, mac    Author  @dtrenz      1 Example  xcodebuild(\n  archive: true,\n  archive_path:  ./build-dir/MyApp.xcarchive ,\n  scheme:  MyApp ,\n  workspace:  MyApp.xcworkspace \n)", 
            "title": "xcodebuild"
        }, 
        {
            "location": "/actions/#ipa", 
            "text": "Easily build and sign your app using shenzhen   Note : This action is deprecated, use  gym  instead More information on the shenzhen project page: https://github.com/nomad/shenzhen To make code signing work, follow https://docs.fastlane.tools/codesigning/xcode-project/#      ipa       Supported platforms  ios    Author  @joshdholtz      1 Example  ipa(\n  workspace:  MyApp.xcworkspace ,\n  configuration:  Debug ,\n  scheme:  MyApp ,\n  # (optionals)\n  clean: true, # This means  Do Clean . Cleans project before building (the default if not specified).\n  destination:  path/to/dir ,      # Destination directory. Defaults to current directory.\n  ipa:  my-app.ipa ,     # specify the name of the .ipa file to generate (including file extension)\n  xcargs:  MY_ADHOC=0 ,  # pass additional arguments to xcodebuild when building the app.\n  embed:  my.mobileprovision ,     # Sign .ipa file with .mobileprovision\n  identity:  MyIdentity ,# Identity to be used along with --embed\n  sdk:  10.0 , # use SDK as the name or path of the base SDK when building the project.\n  archive: true# this means  Do Archive . Archive project after building (the default if not specified).\n)    Parameters     Key  Description      workspace  WORKSPACE Workspace (.xcworkspace) file to use to build app (automatically detected in current directory)    project  Project (.xcodeproj) file to use to build app (automatically detected in current directory, overridden by --workspace option, if passed)    configuration  Configuration used to build    scheme  Scheme used to build app    clean  Clean project before building    archive  Archive project after building    destination  Build destination. Defaults to current directory    embed  Sign .ipa file with .mobileprovision    identity  Identity to be used along with --embed    sdk  Use SDK as the name or path of the base SDK when building the project    ipa  Specify the name of the .ipa file to generate (including file extension)    xcconfig  Use an extra XCCONFIG file to build the app    xcargs  Pass additional arguments to xcodebuild when building the app. Be sure to quote multiple args", 
            "title": "ipa"
        }, 
        {
            "location": "/actions/#xcode_install", 
            "text": "Make sure a certain version of Xcode is installed   Makes sure a specific version of Xcode is installed. If that's not the case, it will automatically be downloaded by the  xcode_install  gem. This will make sure to use the correct Xcode for later actions.      xcode_install       Supported platforms  ios, mac    Author  @Krausefx    Returns  The path to the newly installed Xcode version      1 Example  xcode_install(version:  7.1 )    Parameters     Key  Description      version  The version number of the version of Xcode to install    username  Your Apple ID Username    team_id  The ID of your team if you're in multiple teams", 
            "title": "xcode_install"
        }, 
        {
            "location": "/actions/#adb", 
            "text": "Run ADB Actions   see adb --help for more details      adb       Supported platforms  android    Author  @hjanuschka    Returns  The output of the adb command      1 Example  adb(\n  command:  shell ls \n)    Parameters     Key  Description      serial  Android serial, which device should be used for this command    command  All commands you want to pass to the adb command, e.g.  kill-server    adb_path  The path to your  adb  binary", 
            "title": "adb"
        }, 
        {
            "location": "/actions/#ensure_xcode_version", 
            "text": "Ensure the selected Xcode version with xcode-select matches a value   If building your app requires a specific version of Xcode, you can invoke this command before using gym.\n        For example, to ensure that a beta version is not accidentally selected to build, which would make uploading to TestFlight fail.      ensure_xcode_version       Supported platforms  ios, mac    Author  @JaviSoto      1 Example  ensure_xcode_version(version:  7.2 )    Parameters     Key  Description      version  Xcode version to verify that is selected", 
            "title": "ensure_xcode_version"
        }, 
        {
            "location": "/actions/#xcversion", 
            "text": "Select an Xcode to use by version specifier   Finds and selects a version of an installed Xcode that best matches the provided  Gem::Version  requirement specifier      xcversion       Supported platforms  ios, mac    Author  @oysta      2 Examples  xcversion version:  7.1  # Selects Xcode 7.1.0  xcversion version:  ~  7.1.0  # Selects the latest installed version from the 7.1.x set    Parameters     Key  Description      version  The version of Xcode to select specified as a Gem::Version requirement string (e.g. '~  7.1.0')", 
            "title": "xcversion"
        }, 
        {
            "location": "/actions/#clean_cocoapods_cache", 
            "text": "Remove the cache for pods     clean_cocoapods_cache       Supported platforms  ios, mac    Author  @alexmx      2 Examples  clean_cocoapods_cache  clean_cocoapods_cache(name:  CACHED_POD )    Parameters     Key  Description      name  Pod name to be removed from cache", 
            "title": "clean_cocoapods_cache"
        }, 
        {
            "location": "/actions/#verify_xcode", 
            "text": "Verifies that the Xcode installation is properly signed by Apple   This action was implemented after the recent Xcode attack to make sure\nyou're not using a hacked Xcode installation.\nhttp://researchcenter.paloaltonetworks.com/2015/09/novel-malware-xcodeghost-modifies-xcode-infects-apple-ios-apps-and-hits-app-store/      verify_xcode       Supported platforms  ios, mac    Author  @KrauseFx      2 Examples  verify_xcode  verify_xcode(xcode_path:  /Applications/Xcode.app )    Parameters     Key  Description      xcode_path  The path to the Xcode installation to test", 
            "title": "verify_xcode"
        }, 
        {
            "location": "/actions/#verify_pod_keys", 
            "text": "Verifies all keys referenced from the Podfile are non-empty   Runs a check against all keys specified in your Podfile to make sure they're more than a single character long. This is to ensure you don't deploy with stubbed keys.      verify_pod_keys       Supported platforms  ios, mac    Author  @ashfurrow      1 Example  verify_pod_keys", 
            "title": "verify_pod_keys"
        }, 
        {
            "location": "/actions/#xctest", 
            "text": "Runs tests on the given simulator     xctest       Supported platforms  ios, mac    Author  @dtrenz      1 Example  xctest(\n  destination:  name=iPhone 7s,OS=10.0 \n)", 
            "title": "xctest"
        }, 
        {
            "location": "/actions/#xcclean", 
            "text": "Cleans the project using  xcodebuild     xcclean       Supported platforms  ios, mac    Author  @dtrenz      1 Example  xcclean", 
            "title": "xcclean"
        }, 
        {
            "location": "/actions/#xcexport", 
            "text": "Exports the project using  xcodebuild     xcexport       Supported platforms  ios, mac    Author  @dtrenz      1 Example  xcexport", 
            "title": "xcexport"
        }, 
        {
            "location": "/actions/#xcarchive", 
            "text": "Archives the project using  xcodebuild     xcarchive       Supported platforms  ios, mac    Author  @dtrenz      1 Example  xcarchive", 
            "title": "xcarchive"
        }, 
        {
            "location": "/actions/#xcbuild", 
            "text": "Builds the project using  xcodebuild     xcbuild       Supported platforms  ios, mac    Author  @dtrenz      1 Example  xcbuild", 
            "title": "xcbuild"
        }, 
        {
            "location": "/actions/#screenshots", 
            "text": "", 
            "title": "Screenshots"
        }, 
        {
            "location": "/actions/#snapshot", 
            "text": "Generate new localised screenshots on multiple devices     snapshot       Supported platforms  ios    Author  @KrauseFx      2 Examples  snapshot  snapshot(\n  skip_open_summary: true,\n  clean: true\n)    Parameters     Key  Description      workspace  Path the workspace file    project  Path the project file    devices  A list of devices you want to take the screenshots from    languages  A list of languages which should be used    launch_arguments  A list of launch arguments which should be used    output_directory  The directory where to store the screenshots    ios_version  By default, the latest version should be used automatically. If you want to change it, do it here    skip_open_summary  Don't open the HTML summary after running  snapshot    clear_previous_screenshots  Enabling this option will automatically clear previously generated screenshots before running snapshot    reinstall_app  Enabling this option will automatically uninstall the application before running it    erase_simulator  Enabling this option will automatically erase the simulator before running the application    localize_simulator  Enabling this option will configure the Simulator's system language    app_identifier  The bundle identifier of the app to uninstall (only needed when enabling reinstall_app)    add_photos  A list of photos that should be added to the simulator before running the application    add_videos  A list of videos that should be added to the simulator before running the application    buildlog_path  The directory where to store the build log    clean  Should the project be cleaned before building it?    configuration  The configuration to use when building the app. Defaults to 'Release'    xcpretty_args  Additional xcpretty arguments    sdk  The SDK that should be used for building the application    scheme  The scheme you want to use, this must be the scheme for the UI Tests    number_of_retries  The number of times a test can fail before snapshot should stop retrying    stop_after_first_error  Should snapshot stop immediately after the tests completely failed on one device?    derived_data_path  The directory where build products and other derived data will go", 
            "title": "snapshot"
        }, 
        {
            "location": "/actions/#frameit", 
            "text": "Adds device frames around the screenshots using frameit   Use  frameit  to prepare perfect screenshots for the App Store, your website, QA\nor emails. You can add background and titles to the framed screenshots as well.      frameit       Supported platforms  ios, mac    Author  @KrauseFx      2 Examples  frameit  frameit :silver    Parameters     Key  Description      white  Use white device frames    silver  Use white device frames. Alias for :white    force_device_type  Forces a given device type, useful for Mac screenshots, as their sizes vary    use_legacy_iphone5s  use iPhone 5s instead of iPhone SE frames    path  The path to the directory containing the screenshots", 
            "title": "frameit"
        }, 
        {
            "location": "/actions/#screengrab", 
            "text": "Automated localized screenshots of your Android app on every device     screengrab       Supported platforms  android    Author  @asfalcone, @i2amsam, @mfurtak      2 Examples  screengrab  screengrab(\n  locales: [ en-US ,  fr-FR ,  ja-JP ],\n  clear_previous_screenshots: true,\n  app_apk_path:  build/outputs/apk/example-debug.apk ,\n  tests_apk_path:  build/outputs/apk/example-debug-androidTest-unaligned.apk \n)    Parameters     Key  Description      android_home  Path to the root of your Android SDK installation, e.g. ~/tools/android-sdk-macosx    build_tools_version  The Android build tools version to use, e.g. '23.0.2'    locales  A list of locales which should be used    clear_previous_screenshots  Enabling this option will automatically clear previously generated screenshots before running screengrab    output_directory  The directory where to store the screenshots    skip_open_summary  Don't open the summary after running  screengrab    app_package_name  The package name of the app under test (e.g. com.yourcompany.yourapp)    tests_package_name  The package name of the tests bundle (e.g. com.yourcompany.yourapp.test)    use_tests_in_packages  Only run tests in these Java packages    use_tests_in_classes  Only run tests in these Java classes    test_instrumentation_runner  The fully qualified class name of your test instrumentation runner    ending_locale  Return the device to this locale after running tests    app_apk_path  The path to the APK for the app under test    tests_apk_path  The path to the APK for the the tests bundle    specific_device  Use the device or emulator with the given serial number or qualifier    device_type  Type of device used for screenshots. Matches Google Play Types (phone, sevenInch, tenInch, tv, wear)", 
            "title": "screengrab"
        }, 
        {
            "location": "/actions/#project", 
            "text": "", 
            "title": "Project"
        }, 
        {
            "location": "/actions/#increment_build_number", 
            "text": "Increment the build number of your project     increment_build_number       Supported platforms  ios, mac    Author  @KrauseFx    Returns  The new build number      4 Examples  increment_build_number # automatically increment by one  increment_build_number(\n  build_number:  75  # set a specific number\n)  increment_build_number(\n  build_number: 75, # specify specific build number (optional, omitting it increments by one)\n  xcodeproj:  ./path/to/MyApp.xcodeproj  # (optional, you must specify the path to your main Xcode project if it is not in the project root directory)\n)  build_number = increment_build_number    Parameters     Key  Description      build_number  Change to a specific version    xcodeproj  optional, you must specify the path to your main Xcode project if it is not in the project root directory", 
            "title": "increment_build_number"
        }, 
        {
            "location": "/actions/#set_info_plist_value", 
            "text": "Sets value to Info.plist of your project as native Ruby data structures     set_info_plist_value       Supported platforms  ios, mac    Author  @kohtenko      1 Example  set_info_plist_value(path:  ./Info.plist , key:  CFBundleIdentifier , value:  com.krausefx.app.beta )    Parameters     Key  Description      key  Name of key in plist    value  Value to setup    path  Path to plist file you want to update", 
            "title": "set_info_plist_value"
        }, 
        {
            "location": "/actions/#get_version_number", 
            "text": "Get the version number of your project   This action will return the current version number set on your project. You first have to set up your Xcode project, if you haven't done it already: https://developer.apple.com/library/ios/qa/qa1827/_index.html      get_version_number       Supported platforms  ios, mac    Author  @Liquidsoul      1 Example  version = get_version_number(xcodeproj:  Project.xcodeproj )    Parameters     Key  Description      xcodeproj  optional, you must specify the path to your main Xcode project if it is not in the project root directory    scheme  [DEPRECATED!] true - Specify a specific scheme if you have multiple per project, optional.    This parameter is deprecated and will be removed in a future release.     Please use the 'target' parameter instead. The behavior of this parameter     is currently undefined if your scheme name doesn't match your target name     target  Specify a specific target if you have multiple per project, optional", 
            "title": "get_version_number"
        }, 
        {
            "location": "/actions/#update_info_plist", 
            "text": "Update a Info.plist file with bundle identifier and display name   This action allows you to modify your  Info.plist  file before building. This may be useful if you want a separate build for alpha, beta or nightly builds, but don't want a separate target.      update_info_plist       Supported platforms  ios    Author  @tobiasstrebitzer      5 Examples  update_info_plist( # update app identifier string\n  plist_path:  path/to/Info.plist ,\n  app_identifier:  com.example.newappidentifier \n)  update_info_plist( # Change the Display Name of your app\n  plist_path:  path/to/Info.plist ,\n  display_name:  MyApp-Beta \n)  update_info_plist( # Target a specific `xcodeproj` rather than finding the first available one\n  xcodeproj:  path/to/Example.proj ,\n  plist_path:  path/to/Info.plist ,\n  display_name:  MyApp-Beta \n)  update_info_plist( # Advanced processing: find URL scheme for particular key and replace value\n  xcodeproj:  path/to/Example.proj ,\n  plist_path:  path/to/Info.plist ,\n  block: lambda { |plist|\n    urlScheme = plist[ CFBundleURLTypes ].find{|scheme| scheme[ CFBundleURLName ] ==  com.acme.default-url-handler }\n    urlScheme[:CFBundleURLSchemes] = [ acme-production ]\n  }\n)  zip(\n  path:  MyApp.app ,\n  output_path:  Latest.app.zip \n)    Parameters     Key  Description      xcodeproj  Path to your Xcode project    plist_path  Path to info plist    scheme  Scheme of info plist    app_identifier  The App Identifier of your app    display_name  The Display Name of your app    block  A block to process plist with custom logic", 
            "title": "update_info_plist"
        }, 
        {
            "location": "/actions/#increment_version_number", 
            "text": "Increment the version number of your project   This action will increment the version number. \nYou first have to set up your Xcode project, if you haven't done it already:\nhttps://developer.apple.com/library/ios/qa/qa1827/_index.html      increment_version_number       Supported platforms  ios, mac    Author  @serluca    Returns  The new version number      7 Examples  increment_version_number # Automatically increment patch version number  increment_version_number(\n  bump_type:  patch  # Automatically increment patch version number\n)  increment_version_number(\n  bump_type:  minor  # Automatically increment minor version number\n)  increment_version_number(\n  bump_type:  major  # Automatically increment major version number\n)  increment_version_number(\n  version_number:  2.1.1  # Set a specific version number\n)  increment_version_number(\n  version_number:  2.1.1 ,      # specify specific version number (optional, omitting it increments patch version number)\n  xcodeproj:  ./path/to/MyApp.xcodeproj   # (optional, you must specify the path to your main Xcode project if it is not in the project root directory)\n)  version = increment_version_number    Parameters     Key  Description      bump_type  The type of this version bump. Available: patch, minor, major    version_number  Change to a specific version. This will replace the bump type value    xcodeproj  optional, you must specify the path to your main Xcode project if it is not in the project root directory", 
            "title": "increment_version_number"
        }, 
        {
            "location": "/actions/#get_build_number", 
            "text": "Get the build number of your project   This action will return the current build number set on your project. You first have to set up your Xcode project, if you haven't done it already: https://developer.apple.com/library/ios/qa/qa1827/_index.html      get_build_number       Supported platforms  ios, mac    Author  @Liquidsoul      1 Example  build_number = get_build_number(xcodeproj:  Project.xcodeproj )    Parameters     Key  Description      xcodeproj  optional, you must specify the path to your main Xcode project if it is not in the project root directory", 
            "title": "get_build_number"
        }, 
        {
            "location": "/actions/#get_info_plist_value", 
            "text": "Returns value from Info.plist of your project as native Ruby data structures   Get a value from a plist file, which can be used to fetch the app identifier and more information about your app      get_info_plist_value       Supported platforms  ios, mac    Author  @kohtenko      1 Example  identifier = get_info_plist_value(path:  ./Info.plist , key:  CFBundleIdentifier )    Parameters     Key  Description      key  Name of parameter    path  Path to plist file you want to read", 
            "title": "get_info_plist_value"
        }, 
        {
            "location": "/actions/#update_app_identifier", 
            "text": "Update the project's bundle identifier   Update an app identifier by either setting  CFBundleIdentifier  or  PRODUCT_BUNDLE_IDENTIFIER , depending on which is already in use.      update_app_identifier       Supported platforms  ios    Author  @squarefrog, @tobiasstrebitzer      1 Example  update_app_identifier(\n  xcodeproj:  Example.xcodeproj , # Optional path to xcodeproj, will use the first .xcodeproj if not set\n  plist_path:  Example/Info.plist , # Path to info plist file, relative to xcodeproj\n  app_identifier:  com.test.example  # The App Identifier\n)    Parameters     Key  Description      xcodeproj  Path to your Xcode project    plist_path  Path to info plist, relative to your Xcode project    app_identifier  The app Identifier you want to set", 
            "title": "update_app_identifier"
        }, 
        {
            "location": "/actions/#update_project_team", 
            "text": "Update Xcode Development Team ID   This action update the Developer Team ID of your Xcode Project.      update_project_team       Supported platforms  ios, mac    Author  @lgaches      1 Example  update_project_team(\n  path:  Example.xcodeproj ,\n  teamid:  A3ZZVJ7CNY \n)    Parameters     Key  Description      path  Path to your Xcode project    teamid  The Team ID  you want to use", 
            "title": "update_project_team"
        }, 
        {
            "location": "/actions/#update_app_group_identifiers", 
            "text": "This action changes the app group identifiers in the entitlements file   Updates the App Group Identifiers in the given Entitlements file, so you can have app groups for the app store build and app groups for an enterprise build.      update_app_group_identifiers       Supported platforms  ios    Author  @mathiasAichinger      1 Example  update_app_group_identifiers(\n  entitlements_file:  /path/to/entitlements_file.entitlements ,\n  app_group_identifiers: [ group.your.app.group.identifier ]\n)    Parameters     Key  Description      entitlements_file  The path to the entitlement file which contains the app group identifiers    app_group_identifiers  An Array of unique identifiers for the app groups. Eg. ['group.com.test.testapp']", 
            "title": "update_app_group_identifiers"
        }, 
        {
            "location": "/actions/#recreate_schemes", 
            "text": "Recreate not shared Xcode project schemes     recreate_schemes       Supported platforms  ios, mac    Author  @jerolimov      1 Example  recreate_schemes(project:  ./path/to/MyApp.xcodeproj )    Parameters     Key  Description      project  The Xcode project", 
            "title": "recreate_schemes"
        }, 
        {
            "location": "/actions/#get_ipa_info_plist_value", 
            "text": "Returns a value from Info.plist inside a .ipa file   This is useful for introspecting Info.plist files for .ipa files that have already been built.      get_ipa_info_plist_value       Supported platforms  ios, mac    Author  @johnboiles    Returns  Returns the value in the .ipa's Info.plist corresponding to the passed in Key      1 Example  get_ipa_info_plist_value(ipa:  path.ipa , key:  KEY_YOU_READ )    Parameters     Key  Description      key  Name of parameter    ipa  Path to IPA", 
            "title": "get_ipa_info_plist_value"
        }, 
        {
            "location": "/actions/#set_build_number_repository", 
            "text": "Set the build number from the current repository   This action will set the  build number  according to what the SCM HEAD reports.\nCurrently supported SCMs are svn (uses root revision), git-svn (uses svn revision) and git (uses short hash) and mercurial (uses short hash or revision number).\nThere is an option,  :use_hg_revision_number , which allows to use mercurial revision number instead of hash      set_build_number_repository       Supported platforms  ios, mac    Author  @pbrooks, @armadsen      1 Example  set_build_number_repository    Parameters     Key  Description      use_hg_revision_number  Use hg revision number instead of hash (ignored for non-hg repos)", 
            "title": "set_build_number_repository"
        }, 
        {
            "location": "/actions/#update_url_schemes", 
            "text": "Updates the URL schemes in the given Info.plist   This action allows you to update the URL schemes of the app before building it.\nFor example, you can use this to set a different url scheme for the alpha\nor beta version of the app.      update_url_schemes       Supported platforms  ios, mac    Author  @kmikael      1 Example  update_url_schemes(\n  path:  path/to/Info.plist ,\n  url_schemes: [ com.myapp ]\n)    Parameters     Key  Description      path  The Plist file's path    url_schemes  The new URL schemes", 
            "title": "update_url_schemes"
        }, 
        {
            "location": "/actions/#set_pod_key", 
            "text": "Sets a value for a key with cocoapods-keys   Adds a key to  cocoapods-keys      set_pod_key       Supported platforms  ios, mac    Author  @marcelofabri      1 Example  set_pod_key(\n  key:  APIToken ,\n  value:  1234 ,\n  project:  MyProject \n)    Parameters     Key  Description      use_bundle_exec  Use bundle exec when there is a Gemfile presented    key  The key to be saved with cocoapods-keys    value  The value to be saved with cocoapods-keys    project  The project name", 
            "title": "set_pod_key"
        }, 
        {
            "location": "/actions/#code-signing", 
            "text": "", 
            "title": "Code Signing"
        }, 
        {
            "location": "/actions/#sigh", 
            "text": "Generates a provisioning profile. Stores the profile in the current folder   Note : It is recommended to use  match  according to the  codesigning.guide  for generating and maintaining your provisioning profiles. Use  sigh  directly only if you want full control over what's going on and know more about codesigning.      sigh       Supported platforms  ios    Author  @KrauseFx    Returns  The UDID of the profile sigh just fetched/generated      2 Examples  sigh  sigh(\n  adhoc: true,\n  force: true,\n  filename:  myFile.mobileprovision \n)    Parameters     Key  Description      adhoc  Setting this flag will generate AdHoc profiles instead of App Store Profiles    development  Renew the development certificate instead of the production one    skip_install  By default, the certificate will be added on your local machine. Setting this flag will skip this action    force  Renew provisioning profiles regardless of its state - to automatically add all devices for ad hoc profiles    app_identifier  The bundle identifier of your app    username  Your Apple ID Username    team_id  The ID of your team if you're in multiple teams    team_name  The name of your team if you're in multiple teams    provisioning_name  The name of the profile that is used on the Apple Developer Portal    ignore_profiles_with_different_name  Use in combination with :provisioning_name - when true only profiles matching this exact name will be downloaded    output_path  Directory in which the profile should be stored    cert_id  The ID of the code signing certificate to use (e.g. 78ADL6LVAA)    cert_owner_name  The certificate name to use for new profiles, or to renew with. (e.g. \"Felix Krause\")    filename  Filename to use for the generated provisioning profile (must include .mobileprovision)    skip_fetch_profiles  Skips the verification of existing profiles which is useful if you have thousands of profiles    skip_certificate_verification  Skips the verification of the certificates for every existing profiles. This will make sure the provisioning profile can be used on the local machine", 
            "title": "sigh"
        }, 
        {
            "location": "/actions/#match", 
            "text": "Easily sync your certificates and profiles across your team using git   More details https://github.com/fastlane/fastlane/tree/master/match      match       Supported platforms  ios    Author  @KrauseFx      2 Examples  match(type:  appstore , app_identifier:  tools.fastlane.app )  match(type:  development , readonly: true)    Parameters     Key  Description      git_url  URL to the git repo containing all the certificates    git_branch  Specific git branch to use    type  Create a development certificate instead of a distribution one    app_identifier  The bundle identifier of your app    username  Your Apple ID Username    keychain_name  Keychain the items should be imported to    readonly  Only fetch existing certificates and profiles, don't generate new ones    team_id  The ID of your team if you're in multiple teams    team_name  The name of your team if you're in multiple teams    verbose  Print out extra information and all commands    force  Renew the provisioning profiles every time you run match    shallow_clone  Make a shallow clone of the repository (truncate the history to 1 revision)    workspace     force_for_new_devices  Renew the provisioning profiles if the device count on the developer portal has changed    skip_docs  Skip generation of a README.md for the created git repository", 
            "title": "match"
        }, 
        {
            "location": "/actions/#cert", 
            "text": "Fetch or generate the latest available code signing identity   Important : It is recommended to use  match  according to the  codesigning.guide  for generating and maintaining your certificates. Use  cert  directly only if you want full control over what's going on and know more about codesigning.\nUse this action to download the latest code signing identity      cert       Supported platforms  ios    Author  @KrauseFx      2 Examples  cert  cert(\n  development: true,\n  username:  user@email.com \n)    Parameters     Key  Description      development  Create a development certificate instead of a distribution one    force  Create a certificate even if an existing certificate exists    username  Your Apple ID Username    team_id  The ID of your team if you're in multiple teams    team_name  The name of your team if you're in multiple teams    output_path  The path to a directory in which all certificates and private keys should be stored    keychain_path  Path to a custom keychain", 
            "title": "cert"
        }, 
        {
            "location": "/actions/#update_project_provisioning", 
            "text": "Update projects code signing settings from your provisioning profile   You should check out the code signing gide before using this action: https://github.com/fastlane/fastlane/tree/master/fastlane/docs/Codesigning\nThis action retrieves a provisioning profile UUID from a provisioning profile (.mobileprovision) to set\nup the xcode projects' code signing settings in  .xcodeproj/project.pbxproj\nThe  target_filter  value can be used to only update code signing for specified targets\nThe  build_configuration  value can be used to only update code signing for specified build configurations of the targets passing through the  target_filter \nExample Usage is the WatchKit Extension or WatchKit App, where you need separate provisioning profiles\nExample: `update_project_provisioning(xcodeproj: \"..\", target_filter: \". WatchKit App.*\")      update_project_provisioning       Supported platforms  ios, mac    Author  @tobiasstrebitzer, @czechboy0      1 Example  update_project_provisioning(\n  xcodeproj:  Project.xcodeproj ,\n  profile:  ./watch_app_store.mobileprovision , # optional if you use sigh\n  target_filter:  .*WatchKit Extension.* , # matches name or type of a target\n  build_configuration:  Release \n)    Parameters     Key  Description      xcodeproj  Path to your Xcode project    profile  Path to provisioning profile (.mobileprovision)    target_filter  A filter for the target name. Use a standard regex    build_configuration_filter  Legacy option, use 'target_filter' instead    build_configuration  A filter for the build configuration name. Use a standard regex. Applied to all configurations if not specified    certificate  Path to apple root certificate", 
            "title": "update_project_provisioning"
        }, 
        {
            "location": "/actions/#import_certificate", 
            "text": "Import certificate from inputfile into a keychain   Import certificates into the current default keychain. Use  create_keychain  to create a new keychain.      import_certificate       Supported platforms  ios, android, mac    Author  @gin0606      2 Examples  import_certificate(certificate_path:  certs/AppleWWDRCA.cer )  import_certificate(\n  certificate_path:  certs/dist.p12 ,\n  certificate_password: ENV[ CERTIFICATE_PASSWORD ] ||  default \n)    Parameters     Key  Description      keychain_name  Keychain the items should be imported to    certificate_path  Path to certificate    certificate_password  Certificate password    log_output  If output should be logged to the console", 
            "title": "import_certificate"
        }, 
        {
            "location": "/actions/#resign", 
            "text": "Codesign an existing ipa file   You may provide multiple provisioning profiles if the application contains\nnested applications or app extensions, which need their own provisioning\nprofile. You can do so by passing an array of provisiong profile strings or a\nhash that associates provisioning profile values to bundle identifier keys.\nresign(ipa: \"path\", signing_identity: \"identity\", provisioning_profile: {\n  \"com.example.awesome-app\" =  \"App.mobileprovision\",\n  \"com.example.awesome-app.app-extension\" =  \"Extension.mobileprovision\"\n})      resign       Supported platforms  ios    Author  @lmirosevic      2 Examples  resign(\n  ipa:  path/to/ipa , # can omit if using the `ipa` action\n  signing_identity:  iPhone Distribution: Luka Mirosevic (0123456789) ,\n  provisioning_profile:  path/to/profile , # can omit if using the _sigh_ action\n)  resign(\n  ipa:  path/to/ipa , # can omit if using the `ipa` action\n  signing_identity:  iPhone Distribution: Luka Mirosevic (0123456789) ,\n  provisioning_profile: {\n     com.example.awesome-app  =   path/to/profile ,\n     com.example.awesome-app.app-extension  =   path/to/app-extension/profile \n  }\n)    Parameters     Key  Description      ipa  Path to the ipa file to resign. Optional if you use the  gym  or  xcodebuild  action    signing_identity  Code signing identity to use. e.g. \"iPhone Distribution: Luka Mirosevic (0123456789)\"    entitlements  Path to the entitlement file to use, e.g. \"myApp/MyApp.entitlements\"    provisioning_profile  Path to your provisioning_profile. Optional if you use  sigh    version  Version number to force resigned ipa to use.    Updates both CFBundleShortVersionString and CFBundleVersion values in Info.plist.     Applies for main app and all nested apps or extensions     display_name  Display name to force resigned ipa to use    short_version  Short version string to force resigned ipa to use (CFBundleShortVersionString)    bundle_version  Bundle version to force resigned ipa to use (CFBundleVersion)    bundle_id  Set new bundle ID during resign (CFBundleIdentifier)    use_app_entitlements  Extract app bundle codesigning entitlements    and combine with entitlements from new provisionin profile     keychain_path  Provide a path to a keychain file that should be used by /usr/bin/codesign", 
            "title": "resign"
        }, 
        {
            "location": "/actions/#register_devices", 
            "text": "Registers new devices to the Apple Dev Portal   This will register iOS devices with the Developer Portal so that you can include them in your provisioning profiles.\nThis is an optimistic action, in that it will only ever add new devices to the member center, and never remove devices. If a device which has already been registered within the member center is not passed to this action, it will be left alone in the member center and continue to work.\nThe action will connect to the Apple Developer Portal using the username you specified in your  Appfile  with  apple_id , but you can override it using the  username  option, or by setting the env variable  ENV['DELIVER_USER'] .      register_devices       Supported platforms  ios    Author  @lmirosevic      3 Examples  register_devices(\n  devices: {\n     Luka iPhone 6  =   1234567890123456789012345678901234567890 ,\n     Felix iPad Air 2  =   abcdefghijklmnopqrstvuwxyzabcdefghijklmn \n  }\n) # Simply provide a list of devices as a Hash  register_devices(\n  devices_file:  ./devices.txt \n) # Alternatively provide a standard UDID export .txt file, see the Apple Sample (https://devimages.apple.com.edgekey.net/downloads/devices/Multiple-Upload-Samples.zip)  register_devices(\n  devices_file:  ./devices.txt , # You must pass in either `devices_file` or `devices`.\n  team_id:  XXXXXXXXXX ,         # Optional, if you re a member of multiple teams, then you need to pass the team ID here.\n  username:  luka@goonbee.com    # Optional, lets you override the Apple Member Center username.\n)    Parameters     Key  Description      devices  A hash of devices, with the name as key and the UDID as value    devices_file  Provide a path to the devices to register    team_id  optional: Your team ID    username  Optional: Your Apple ID", 
            "title": "register_devices"
        }, 
        {
            "location": "/actions/#documentation", 
            "text": "", 
            "title": "Documentation"
        }, 
        {
            "location": "/actions/#jazzy", 
            "text": "Generate docs using Jazzy     jazzy       Supported platforms  ios, mac    Author  @KrauseFx      1 Example  jazzy    Parameters     Key  Description      config  Path to jazzy config file", 
            "title": "jazzy"
        }, 
        {
            "location": "/actions/#appledoc", 
            "text": "Generate Apple-like source code documentation from the source code   Runs  appledoc [OPTIONS]  paths to source dirs or files  for the project      appledoc       Supported platforms  ios, mac    Author  @alexmx      1 Example  appledoc(\n  project_name:  MyProjectName ,\n  project_company:  Company Name ,\n  input:  MyProjectSources ,\n  ignore: [\n     ignore/path/1 ,\n     ingore/path/2 \n  ],\n  options:  --keep-intermediate-files --search-undocumented-doc ,\n  warnings:  --warn-missing-output-path --warn-missing-company-id \n)    Parameters     Key  Description      input  Path to source files    output  Output path    templates  Template files path    docset_install_path  DocSet installation path    include  Include static doc(s) at path    ignore  Ignore given path    exclude_output  Exclude given path from output    index_desc  File including main index description    project_name  Project name    project_version  Project version    project_company  Project company    company_id  Company UTI (i.e. reverse DNS name)    create_html  Create HTML    create_docset  Create documentation set    install_docset  Install documentation set to Xcode    publish_docset  Prepare DocSet for publishing    html_anchors  The html anchor format to use in DocSet HTML    clean_output  Remove contents of output path before starting    docset_bundle_id  DocSet bundle identifier    docset_bundle_name  DocSet bundle name    docset_desc  DocSet description    docset_copyright  DocSet copyright message    docset_feed_name  DocSet feed name    docset_feed_url  DocSet feed URL    docset_feed_formats  DocSet feed formats. Separated by a comma [atom,xml]    docset_package_url  DocSet package (.xar) URL    docset_fallback_url  DocSet fallback URL    docset_publisher_id  DocSet publisher identifier    docset_publisher_name  DocSet publisher name    docset_min_xcode_version  DocSet min. Xcode version    docset_platform_family  DocSet platform familiy    docset_cert_issuer  DocSet certificate issuer    docset_cert_signer  DocSet certificate signer    docset_bundle_filename  DocSet bundle filename    docset_atom_filename  DocSet atom feed filename    docset_xml_filename  DocSet xml feed filename    docset_package_filename  DocSet package (.xar,.tgz) filename    options  Documentation generation options    crossref_format  Cross reference template regex    exit_threshold  Exit code threshold below which 0 is returned    docs_section_title  Title of the documentation section (defaults to \"Programming Guides\"    warnings  Documentation generation warnings    logformat  Log format [0-3]    verbose  Log verbosity level [0-6,xcode]", 
            "title": "appledoc"
        }, 
        {
            "location": "/actions/#beta", 
            "text": "", 
            "title": "Beta"
        }, 
        {
            "location": "/actions/#pilot", 
            "text": "Upload a new binary to iTunes Connect for TestFlight beta testing   More details can be found on https://github.com/fastlane/fastlane/tree/master/pilot\nThis integration will only do the TestFlight upload      pilot       Supported platforms  ios    Author  @KrauseFx      4 Examples  testflight  pilot # alias for  testflight   testflight(skip_submission: true) # to only upload the build  testflight(\n  username:  felix@krausefx.com ,\n  app_identifier:  com.krausefx.app ,\n  itc_provider:  abcde12345  # pass a specific value to the iTMSTransporter -itc_provider option\n)    Parameters     Key  Description      username  Your Apple ID Username    app_identifier  The bundle identifier of the app to upload or manage testers (optional)    ipa  Path to the ipa file to upload    changelog  Provide the what's new text when uploading a new build    skip_submission  Skip the distributing action of pilot and only upload the ipa file    skip_waiting_for_build_processing  Don't wait for the build to process. If set to true, the changelog won't be set    apple_id  The unique App ID provided by iTunes Connect    distribute_external  Should the build be distributed to external testers?    first_name  The tester's first name    last_name  The tester's last name    email  The tester's email    testers_file_path  Path to a CSV file of testers    wait_processing_interval  Interval in seconds to wait for iTunes Connect processing    team_id  The ID of your team if you're in multiple teams    team_name  The name of your team if you're in multiple teams    dev_portal_team_id  The short ID of your team in the developer portal, if you're in multiple teams. Different from your iTC team ID!    itc_provider  The provider short name to be used with the iTMSTransporter to identify your team", 
            "title": "pilot"
        }, 
        {
            "location": "/actions/#crashlytics", 
            "text": "Upload a new build to Crashlytics Beta   Additionally you can specify  notes ,  emails ,  groups  and  notifications .\nDistributing to Groups: When using the  groups  parameter, it's important to use the group  alias  names for each group you'd like to distribute to. A group's alias can be found in the web UI. If you're viewing the Beta page, you can open the groups dialog here:      crashlytics       Supported platforms  ios, android, mac    Author  @KrauseFx, @pedrogimenez      2 Examples  crashlytics  crashlytics(\n  crashlytics_path:  ./Pods/Crashlytics/ , # path to your Crashlytics submit binary.\n  api_token:  ... ,\n  build_secret:  ... ,\n  ipa_path:  ./app.ipa \n)    Parameters     Key  Description      ipa_path  Path to your IPA file. Optional if you use the  gym  or  xcodebuild  action    apk_path  Path to your APK file    crashlytics_path  Path to the submit binary in the Crashlytics bundle (iOS) or  crashlytics-devtools.jar  file (Android)    api_token  Crashlytics Beta API Token    build_secret  Crashlytics Build Secret    notes_path  Path to the release notes    notes  The release notes as string - uses :notes_path under the hood    groups  The groups used for distribution, separated by commas    emails  Pass email addresses of testers, separated by commas    notifications  Crashlytics notification option (true/false)    debug  Crashlytics debug option (true/false)", 
            "title": "crashlytics"
        }, 
        {
            "location": "/actions/#hockey", 
            "text": "Upload a new build to HockeyApp   Symbols will also be uploaded automatically if a  app.dSYM.zip  file is found next to  app.ipa . In case it is located in a different place you can specify the path explicitly in  :dsym  parameter.\nMore information about the available options can be found in the  HockeyApp Docs .      hockey       Supported platforms  ios, android, mac    Author  @KrauseFx, @modzelewski      1 Example  hockey(\n  api_token:  ... ,\n  ipa:  ./app.ipa ,\n  notes:  Changelog \n)    Parameters     Key  Description      apk  Path to your APK file    api_token  API Token for Hockey Access    ipa  Path to your IPA file. Optional if you use the  gym  or  xcodebuild  action. For Mac zip the .app. For Android provide path to .apk file    dsym  Path to your symbols file. For iOS and Mac provide path to app.dSYM.zip. For Android provide path to mappings.txt file    notes  Beta Notes    notify  Notify testers? \"1\" for yes    status  Download status: \"1\" = No user can download; \"2\" = Available for download    notes_type  Notes type for your :notes, \"0\" = Textile, \"1\" = Markdown (default)    release_type  Release type of the app: \"0\" = Beta (default), \"1\" = Store, \"2\" = Alpha, \"3\" = Enterprise    mandatory  Set to \"1\" to make this update mandatory    teams  Comma separated list of team ID numbers to which this build will be restricted    users  Comma separated list of user ID numbers to which this build will be restricted    tags  Comma separated list of tags which will receive access to the build    public_identifier  Public identifier of the app you are targeting, usually you won't need this value    commit_sha  The Git commit SHA for this build    repository_url  The URL of your source repository    build_server_url  The URL of the build job on your build server    upload_dsym_only  Flag to upload only the dSYM file to hockey app    owner_id  ID for the owner of the app    strategy  Strategy: 'add' = to add the build as a new build even if it has the same build number (default); 'replace' = to replace a build with the same build number", 
            "title": "hockey"
        }, 
        {
            "location": "/actions/#s3", 
            "text": "Generates a plist file and uploads all to AWS S3   Upload a new build to Amazon S3 to distribute the build to beta testers.  Works for both Ad Hoc and Enterprise signed applications. This step will generate the necessary HTML, plist, and version files for you. It is recommended to  not  store the AWS access keys in the  Fastfile . The uploaded  version.json  file provides an easy way for apps to poll if a new update is available.      s3       Supported platforms  ios    Author  @joshdholtz      2 Examples  s3  s3(\n  # All of these are used to make Shenzhen's `ipa distribute:s3` command\n  access_key: ENV[ S3_ACCESS_KEY ],     # Required from user.\n  secret_access_key: ENV[ S3_SECRET_ACCESS_KEY ], # Required from user.\n  bucket: ENV[ S3_BUCKET ],   # Required from user.\n  ipa:  AppName.ipa ,         # Optional is you use `ipa` to build\n  dsym:  AppName.app.dSYM.zip ,         # Optional is you use `ipa` to build\n  path:  v{CFBundleShortVersionString}_b{CFBundleVersion}/ , # This is actually the default.\n  upload_metadata: true,      # Upload version.json, plist and HTML. Set to false to skip uploading of these files.\n  version_file_name:  app_version.json ,# Name of the file to upload to S3. Defaults to  version.json \n  version_template_path:  path/to/erb   # Path to an ERB to configure the structure of the version JSON file\n)    Parameters     Key  Description      ipa  .ipa file for the build    dsym  zipped .dsym package for the build    upload_metadata  Upload relevant metadata for this build    plist_template_path  plist template path    plist_file_name  uploaded plist filename    html_template_path  html erb template path    html_file_name  uploaded html filename    version_template_path  version erb template path    version_file_name  uploaded version filename    access_key  AWS Access Key ID    secret_access_key  AWS Secret Access Key    bucket  AWS bucket name    region  AWS region (for bucket creation)    path  S3 'path'. Values from Info.plist will be substituded for keys wrapped in     source  Optional source directory e.g. ./build    acl  Uploaded object permissions e.g public_read (default), private, public_read_write, authenticated_read", 
            "title": "s3"
        }, 
        {
            "location": "/actions/#deploygate", 
            "text": "Upload a new build to  DeployGate   You can retrieve your username and API token on  your settings page \nMore information about the available options can be found in the  DeployGate Push API document .      deploygate       Supported platforms  ios    Author  @tnj      1 Example  deploygate(\n  api_token:  ... ,\n  user:  target username or organization name ,\n  ipa:  ./ipa_file.ipa ,\n  message:  Build #{lane_context[SharedValues::BUILD_NUMBER]} ,\n  distribution_key:  (Optional) Target Distribution Key \n)    Parameters     Key  Description      api_token  Deploygate API Token    user  Target username or organization name    ipa  Path to your IPA file. Optional if you use the  gym  or  xcodebuild  action    message  Release Notes    distribution_key  Target Distribution Key    release_note  Release note for distribution page", 
            "title": "deploygate"
        }, 
        {
            "location": "/actions/#testflight", 
            "text": "Alias for the pilot action     testflight       Supported platforms  ios    Author  @KrauseFx      4 Examples  testflight  pilot # alias for  testflight   testflight(skip_submission: true) # to only upload the build  testflight(\n  username:  felix@krausefx.com ,\n  app_identifier:  com.krausefx.app ,\n  itc_provider:  abcde12345  # pass a specific value to the iTMSTransporter -itc_provider option\n)    Parameters     Key  Description      username  Your Apple ID Username    app_identifier  The bundle identifier of the app to upload or manage testers (optional)    ipa  Path to the ipa file to upload    changelog  Provide the what's new text when uploading a new build    skip_submission  Skip the distributing action of pilot and only upload the ipa file    skip_waiting_for_build_processing  Don't wait for the build to process. If set to true, the changelog won't be set    apple_id  The unique App ID provided by iTunes Connect    distribute_external  Should the build be distributed to external testers?    first_name  The tester's first name    last_name  The tester's last name    email  The tester's email    testers_file_path  Path to a CSV file of testers    wait_processing_interval  Interval in seconds to wait for iTunes Connect processing    team_id  The ID of your team if you're in multiple teams    team_name  The name of your team if you're in multiple teams    dev_portal_team_id  The short ID of your team in the developer portal, if you're in multiple teams. Different from your iTC team ID!    itc_provider  The provider short name to be used with the iTMSTransporter to identify your team", 
            "title": "testflight"
        }, 
        {
            "location": "/actions/#testfairy", 
            "text": "Upload a new build to TestFairy   You can retrieve your API key on  your settings page      testfairy       Supported platforms  ios    Author  @taka0125, @tcurdt      1 Example  testfairy(\n  api_key:  ... ,\n  ipa:  ./ipa_file.ipa ,\n  comment:  Build #{lane_context[SharedValues::BUILD_NUMBER]} ,\n)    Parameters     Key  Description      api_key  API Key for TestFairy    ipa  Path to your IPA file. Optional if you use the  gym  or  xcodebuild  action    symbols_file  Symbols mapping file    testers_groups  Array of tester groups to be notified    metrics  Array of metrics to record (cpu,memory,network,phone_signal,gps,battery,mic,wifi)    icon_watermark  Add a small watermark to app icon    comment  Additional release notes for this upload. This text will be added to email notifications    auto_update  Allows easy upgrade of all users to current version    notify  Send email to testers    options  Array of options (shake,video_only_wifi,anonymous)", 
            "title": "testfairy"
        }, 
        {
            "location": "/actions/#nexus_upload", 
            "text": "Upload a file to Sonatype Nexus platform     nexus_upload       Supported platforms  ios, android, mac    Author  @xfreebird      1 Example  nexus_upload(\n  file:  /path/to/file.ipa ,\n  repo_id:  artefacts ,\n  repo_group_id:  com.fastlane ,\n  repo_project_name:  ipa ,\n  repo_project_version:  1.13 ,\n  repo_classifier:  dSYM , # Optional\n  endpoint:  http://localhost:8081 ,\n  username:  admin ,\n  password:  admin123 \n)    Parameters     Key  Description      file  File to be uploaded to Nexus    repo_id  Nexus repository id e.g. artefacts    repo_group_id  Nexus repository group id e.g. com.company    repo_project_name  Nexus repository commandect name. Only letters, digits, underscores(_), hyphens(-), and dots(.) are allowed    repo_project_version  Nexus repository commandect version    repo_classifier  Nexus repository artifact classifier (optional)    endpoint  Nexus endpoint e.g. http://nexus:8081    mount_path  Nexus mount path. Defaults to /nexus    username  Nexus username    password  Nexus password    ssl_verify  Verify SSL    verbose  Make detailed output    proxy_username  Proxy username    proxy_password  Proxy password    proxy_address  Proxy address    proxy_port  Proxy port", 
            "title": "nexus_upload"
        }, 
        {
            "location": "/actions/#appetize", 
            "text": "Upload your app to Appetize.io to stream it in the browser   If you provide a  public_key , this will overwrite an existing application. If you want to have this build as a new app version, you shouldn't provide this value.\nTo integrate appetize into your GitHub workflow check out the  device_grid guide      appetize       Supported platforms  ios, android    Author  @klundberg, @giginet      1 Example  appetize(\n  path:  ./MyApp.zip ,\n  api_token:  yourapitoken , # get it from https://appetize.io/docs#request-api-token\n  public_key:  your_public_key  # get it from https://appetize.io/dashboard\n)    Parameters     Key  Description      api_token  Appetize.io API Token    url  URL from which the ipa file can be fetched. Alternative to :path    platform  Platform. Either  ios  or  android . Default is  ios    path  Path to zipped build on the local filesystem. Either this or  url  must be specified    public_key  If not provided, a new app will be created. If provided, the existing build will be overwritten    note  Notes you wish to add to the uploaded app", 
            "title": "appetize"
        }, 
        {
            "location": "/actions/#splunkmint", 
            "text": "Upload dSYM file to Splunk MINT     splunkmint       Supported platforms  ios    Author  @xfreebird      1 Example  splunkmint(\n  dsym:  My.app.dSYM.zip ,\n  api_key:  43564d3a ,\n  api_token:  e05456234c4869fb7e0b61 \n)    Parameters     Key  Description      dsym  dSYM.zip file to upload to Splunk MINT    api_key  Splunk MINT App API key e.g. f57a57ca    api_token  Splunk MINT API token e.g. e05ba40754c4869fb7e0b61    verbose  Make detailed output    upload_progress  Show upload progress    proxy_username  Proxy username    proxy_password  Proxy password    proxy_address  Proxy address    proxy_port  Proxy port", 
            "title": "splunkmint"
        }, 
        {
            "location": "/actions/#set_changelog", 
            "text": "Set the changelog for all languages on iTunes Connect   This is useful if you have only one changelog for all languages.\nYou can store the changelog in  ./fastlane/changelog.txt  and it will automatically get loaded from there. This integration is useful if you support e.g. 10 languages and want to use the same \"What's new\"-text for all languages.      set_changelog       Supported platforms  ios, mac    Author  @KrauseFx      1 Example  set_changelog(app_identifier:  com.krausefx.app , version:  1.0 , changelog:  All Languages )    Parameters     Key  Description      app_identifier  The bundle identifier of your app    username  Your Apple ID Username    version  The version number to create/update    changelog  Changelog text that should be uploaded to iTunes Connect", 
            "title": "set_changelog"
        }, 
        {
            "location": "/actions/#appaloosa", 
            "text": "Upload your app to Appaloosa Store   Appaloosa is a private mobile application store. This action \noffers a quick deployment on the platform. You can create an \naccount, push to your existing account, or manage your user \ngroups. We accept iOS and Android applications.      appaloosa       Supported platforms  ios, android, mac    Author  @Appaloosa      1 Example  appaloosa(\n  # Path tor your IPA or APK\n  binary: '/path/to/binary.ipa',\n  # You can find your store\u2019s id at the bottom of the \u201cSettings\u201d page of your store\n  store_id: 'your_store_id',\n  # You can find your api_token at the bottom of the \u201cSettings\u201d page of your store\n  api_token: 'your_api_key',\n  # User group_ids visibility, if it's not specified we'll publish the app for all users in your store'\n  group_ids: '112, 232, 387',\n  # You can use fastlane/snapshot or specify your own screenshots folder.\n  # If you use snapshot please specify a local and a device to upload your screenshots from.\n  # When multiple values are specified in the Snapfile, we default to 'en-US'\n  locale: 'en-US',\n  # By default, the screenshots from the last device will be used\n  device: 'iPhone6',\n  # Screenshots' filenames should start with device's name like 'iphone6-s1.png' if device specified\n  screenshots: '/path/to_your/screenshots'\n)    Parameters     Key  Description      binary  Binary path. Optional for ipa if you use the  ipa  or  xcodebuild  action    api_token  Your API token    store_id  Your Store id    group_ids  Your app is limited to special users? Give us the group ids    screenshots  Add some screenshots application to your store or hit [enter]    locale  Select the folder locale for yours screenshots    device  Select the device format for yours screenshots    description  Your app description", 
            "title": "appaloosa"
        }, 
        {
            "location": "/actions/#apteligent", 
            "text": "Upload dSYM file to Apteligent (Crittercism)     apteligent       Supported platforms  ios    Author  @Mo7amedFouad      1 Example  apteligent(\n  app_id:  ... ,\n  api_key:  ... \n)    Parameters     Key  Description      dsym  dSYM.zip file to upload to Apteligent    app_id  Apteligent App ID key e.g. 569f5c87cb99e10e00c7xxxx    api_key  Apteligent App API key e.g. IXPQIi8yCbHaLliqzRoo065tH0lxxxxx", 
            "title": "apteligent"
        }, 
        {
            "location": "/actions/#installr", 
            "text": "Upload a new build to Installr     installr       Supported platforms  ios    Author  @scottrhoyt      1 Example  installr(\n  api_token:  ... ,\n  ipa:  test.ipa ,\n  notes:  The next great version of the app! ,\n  notify:  dev,qa ,\n  add:  exec,ops \n)    Parameters     Key  Description      api_token  API Token for Installr Access    ipa  Path to your IPA file. Optional if you use the  gym  or  xcodebuild  action    notes  Release notes    notify  Groups to notify (e.g. 'dev,qa')    add  Groups to add (e.g. 'exec,ops')", 
            "title": "installr"
        }, 
        {
            "location": "/actions/#podio_item", 
            "text": "Creates or updates an item within your Podio app   Use this action to create or update an item within your Podio app\n        (see https://help.podio.com/hc/en-us/articles/201019278-Creating-apps-).\n        Pass in dictionary with field keys and their values.\n        Field key is located under Modify app -  Advanced -  Developer -  External ID\n        (see https://developers.podio.com/examples/items)      podio_item       Supported platforms  ios, android, mac    Author  @pprochazka72, @laugejepsen      1 Example  podio_item(\n  identifying_value:  Your unique value ,\n  other_fields: {\n     field1  =   fieldValue ,\n     field2  =   fieldValue2 \n  }\n)    Parameters     Key  Description      client_id  Client ID for Podio API (see https://developers.podio.com/api-key)    client_secret  Client secret for Podio API (see https://developers.podio.com/api-key)    app_id  App ID of the app you intend to authenticate with (see https://developers.podio.com/authentication/app_auth)    app_token  App token of the app you intend to authenticate with (see https://developers.podio.com/authentication/app_auth)    identifying_field  String specifying the field key used for identification of an item    identifying_value  String uniquely specifying an item within the app    other_fields  Dictionary of your app fields. Podio supports several field types, see https://developers.podio.com/doc/items", 
            "title": "podio_item"
        }, 
        {
            "location": "/actions/#push", 
            "text": "", 
            "title": "Push"
        }, 
        {
            "location": "/actions/#pem", 
            "text": "Makes sure a valid push profile is active and creates a new one if needed   Additionally to the available options, you can also specify a block that only gets executed if a new\nprofile was created. You can use it to upload the new profile to your server.\nUse it like this: \npem(\n  new_profile: proc do \n    # your upload code\n  end\n)      pem       Supported platforms  ios    Author  @KrauseFx      2 Examples  pem  pem(\n  force: true, # create a new profile, even if the old one is still valid\n  app_identifier:  net.sunapps.9 , # optional app identifier,\n  save_private_key: true,\n  new_profile: proc do |profile_path| # this block gets called when a new profile was generated\n    puts profile_path # the absolute path to the new PEM file\n    # insert the code to upload the PEM file to the server\n  end\n)    Parameters     Key  Description      development  Renew the development push certificate instead of the production one    generate_p12  Generate a p12 file additionally to a PEM file    force  Create a new push certificate, even if the current one is active for 30 more days    save_private_key  Set to save the private RSA key    app_identifier  The bundle identifier of your app    username  Your Apple ID Username    team_id  The ID of your team if you're in multiple teams    team_name  The name of your team if you're in multiple teams    p12_password  The password that is used for your p12 file    pem_name  The file name of the generated .pem file    output_path  The path to a directory in which all certificates and private keys should be stored    new_profile  Block that is called if there is a new profile", 
            "title": "pem"
        }, 
        {
            "location": "/actions/#update_urban_airship_configuration", 
            "text": "Set the Urban Airship plist configuration values   This action updates the AirshipConfig.plist need to configure the Urban Airship SDK at runtime, allowing keys and secrets to easily be set for Enterprise and Production versions of the application.      update_urban_airship_configuration       Supported platforms  ios    Author  @kcharwood      1 Example  update_urban_airship_configuration(\n  plist_path:  AirshipConfig.plist ,\n  production_app_key:  PRODKEY ,\n  production_app_secret:  PRODSECRET \n)    Parameters     Key  Description      plist_path  Path to Urban Airship configuration Plist    development_app_key  The development app key    development_app_secret  The development app secret    production_app_key  The production app key    production_app_secret  The production app secret    detect_provisioning_mode  Automatically detect provisioning mode", 
            "title": "update_urban_airship_configuration"
        }, 
        {
            "location": "/actions/#onesignal", 
            "text": "Create a new OneSignal application   You can use this action to automatically create a OneSignal application. You can also upload a .p12 with password, a GCM key, or both      onesignal       Supported platforms  ios    Author  @timothybarraclough, @smartshowltd      1 Example  onesignal(\n  auth_token:  Your OneSignal Auth Token ,\n  app_name:  Name for OneSignal App ,\n  android_token:  Your Android GCM key (optional) ,\n  apns_p12:  Path to Apple .p12 file (optional) ,\n  apns_p12_password:  Password for .p12 file (optional) ,\n  apns_env:  production/sandbox (defaults to production) \n)    Parameters     Key  Description      auth_token  OneSignal Authorization Key    app_name  OneSignal App Name    android_token  ANDROID GCM KEY    apns_p12  APNS P12 File (in .p12 format)    apns_p12_password  APNS P12 password    apns_env  APNS environment", 
            "title": "onesignal"
        }, 
        {
            "location": "/actions/#releasing-your-app", 
            "text": "", 
            "title": "Releasing your app"
        }, 
        {
            "location": "/actions/#deliver", 
            "text": "Uses deliver to upload new app metadata and builds to iTunes Connect   Using  deliver  after  gym  and  snapshot  will automatically upload the\nlatest ipa and screenshots with no other configuration\nIf you don't want a PDF report for App Store builds, use the  :force  option.\nThis is useful when running  fastlane  on your Continuous Integration server:  deliver(force: true) \nIf your account is on multiple teams and you need to tell the  iTMSTransporter \nwhich 'provider' to use, you can set the  itc_provider  option to pass this info.      deliver       Supported platforms  ios, mac    Author  @KrauseFx      1 Example  deliver(\n  force: true, # Set to true to skip PDF verification\n  itc_provider:  abcde12345  # pass a specific value to the iTMSTransporter -itc_provider option\n\n)    Parameters     Key  Description      username  Your Apple ID Username    app_identifier  The bundle identifier of your app    app  The app ID of the app you want to use/modify    ipa  Path to your ipa file    pkg  Path to your pkg file    metadata_path  Path to the folder containing the metadata files    screenshots_path  Path to the folder containing the screenshots    skip_binary_upload  Skip uploading an ipa or pkg to iTunes Connect    skip_screenshots  Don't upload the screenshots    app_version  The version that should be edited or created    skip_metadata  Don't upload the metadata (e.g. title, description), this will still upload screenshots    force  Skip the HTML report file verification    submit_for_review  Submit the new version for Review after uploading everything    automatic_release  Should the app be automatically released once it's approved?    price_tier  The price tier of this application    build_number  If set the given build number (already uploaded to iTC) will be used instead of the current built one    app_rating_config_path  Path to the app rating's config    submission_information  Extra information for the submission (e.g. third party content)    team_id  The ID of your iTunes Connect team if you're in multiple teams    team_name  The name of your iTunes Connect team if you're in multiple teams    dev_portal_team_id  The short ID of your Developer Portal team, if you're in multiple teams. Different from your iTC team ID!    dev_portal_team_name  The name of your Developer Portal team if you're in multiple teams    itc_provider  The provider short name to be used with the iTMSTransporter to identify your team    app_icon  Metadata: The path to the app icon    apple_watch_app_icon  Metadata: The path to the Apple Watch app icon    copyright  Metadata: The copyright notice    primary_category  Metadata: The english name of the primary category(e.g.  Business ,  Books )    secondary_category  Metadata: The english name of the secondary category(e.g.  Business ,  Books )    primary_first_sub_category  Metadata: The english name of the primary first sub category(e.g.  Educational ,  Puzzle )    primary_second_sub_category  Metadata: The english name of the primary second sub category(e.g.  Educational ,  Puzzle )    secondary_first_sub_category  Metadata: The english name of the secondary first sub category(e.g.  Educational ,  Puzzle )    secondary_second_sub_category  Metadata: The english name of the secondary second sub category(e.g.  Educational ,  Puzzle )    app_review_information  Metadata: A hash containing the review information    description  Metadata: The localised app description    name  Metadata: The localised app name    keywords  Metadata: An array of localised keywords    release_notes  Metadata: Localised release notes for this version    privacy_url  Metadata: Localised privacy url    support_url  Metadata: Localised support url    marketing_url  Metadata: Localised marketing url", 
            "title": "deliver"
        }, 
        {
            "location": "/actions/#supply", 
            "text": "Upload metadata, screenshots and binaries to Google Play   More information: https://github.com/fastlane/fastlane/tree/master/supply      supply       Supported platforms  android    Author  @KrauseFx      1 Example  supply    Parameters     Key  Description      package_name  The package name of the Application to modify    track  The Track to upload the Application to: production, beta, alpha, rollout    rollout  The percentage of the rollout    metadata_path  Path to the directory containing the metadata files    key  [DEPRECATED!] Use --json_key instead - The p12 File used to authenticate with Google    issuer  [DEPRECATED!] Use --json_key instead - The issuer of the p12 file (email address of the service account)    json_key  The service account json file used to authenticate with Google    apk  Path to the APK file to upload    apk_paths  An array of paths to APK files to upload    skip_upload_apk  Whether to skip uploading APK    skip_upload_metadata  Whether to skip uploading metadata    skip_upload_images  Whether to skip uploading images, screenshots not included    skip_upload_screenshots  Whether to skip uploading SCREENSHOTS    track_promote_to  The Track to promote to: production, beta, alpha, rollout", 
            "title": "supply"
        }, 
        {
            "location": "/actions/#appstore", 
            "text": "Alias for the deliver action     appstore       Supported platforms  ios, mac    Author  @KrauseFx      1 Example  deliver(\n  force: true, # Set to true to skip PDF verification\n  itc_provider:  abcde12345  # pass a specific value to the iTMSTransporter -itc_provider option\n\n)    Parameters     Key  Description      username  Your Apple ID Username    app_identifier  The bundle identifier of your app    app  The app ID of the app you want to use/modify    ipa  Path to your ipa file    pkg  Path to your pkg file    metadata_path  Path to the folder containing the metadata files    screenshots_path  Path to the folder containing the screenshots    skip_binary_upload  Skip uploading an ipa or pkg to iTunes Connect    skip_screenshots  Don't upload the screenshots    app_version  The version that should be edited or created    skip_metadata  Don't upload the metadata (e.g. title, description), this will still upload screenshots    force  Skip the HTML report file verification    submit_for_review  Submit the new version for Review after uploading everything    automatic_release  Should the app be automatically released once it's approved?    price_tier  The price tier of this application    build_number  If set the given build number (already uploaded to iTC) will be used instead of the current built one    app_rating_config_path  Path to the app rating's config    submission_information  Extra information for the submission (e.g. third party content)    team_id  The ID of your iTunes Connect team if you're in multiple teams    team_name  The name of your iTunes Connect team if you're in multiple teams    dev_portal_team_id  The short ID of your Developer Portal team, if you're in multiple teams. Different from your iTC team ID!    dev_portal_team_name  The name of your Developer Portal team if you're in multiple teams    itc_provider  The provider short name to be used with the iTMSTransporter to identify your team    app_icon  Metadata: The path to the app icon    apple_watch_app_icon  Metadata: The path to the Apple Watch app icon    copyright  Metadata: The copyright notice    primary_category  Metadata: The english name of the primary category(e.g.  Business ,  Books )    secondary_category  Metadata: The english name of the secondary category(e.g.  Business ,  Books )    primary_first_sub_category  Metadata: The english name of the primary first sub category(e.g.  Educational ,  Puzzle )    primary_second_sub_category  Metadata: The english name of the primary second sub category(e.g.  Educational ,  Puzzle )    secondary_first_sub_category  Metadata: The english name of the secondary first sub category(e.g.  Educational ,  Puzzle )    secondary_second_sub_category  Metadata: The english name of the secondary second sub category(e.g.  Educational ,  Puzzle )    app_review_information  Metadata: A hash containing the review information    description  Metadata: The localised app description    name  Metadata: The localised app name    keywords  Metadata: An array of localised keywords    release_notes  Metadata: Localised release notes for this version    privacy_url  Metadata: Localised privacy url    support_url  Metadata: Localised support url    marketing_url  Metadata: Localised marketing url", 
            "title": "appstore"
        }, 
        {
            "location": "/actions/#source-control", 
            "text": "", 
            "title": "Source Control"
        }, 
        {
            "location": "/actions/#ensure_git_status_clean", 
            "text": "Raises an exception if there are uncommited git changes   A sanity check to make sure you are working in a repo that is clean. Especially\nuseful to put at the beginning of your Fastfile in the  before_all  block, if\nsome of your other actions will touch your filesystem, do things to your git repo,\nor just as a general reminder to save your work. Also needed as a prerequisite for\nsome other actions like  reset_git_repo .      ensure_git_status_clean       Supported platforms  ios, android, mac    Author  @lmirosevic      1 Example  ensure_git_status_clean", 
            "title": "ensure_git_status_clean"
        }, 
        {
            "location": "/actions/#reset_git_repo", 
            "text": "Resets git repo to a clean state by discarding uncommited changes   This action will reset your git repo to a clean state, discarding any uncommitted and untracked changes. Useful in case you need to revert the repo back to a clean state, e.g. after the fastlane run. Untracked files like  .env  will also be deleted, unless  :skip_clean  is true. It's a pretty drastic action so it comes with a sort of safety latch. It will only proceed with the reset if either of these conditions are met: You have called the ensure_git_status_clean action prior to calling this action. This ensures that your repo started off in a clean state, so the only things that will get destroyed by this action are files that are created as a byproduct of the fastlane run.      reset_git_repo       Supported platforms  ios, android, mac    Author  @lmirosevic      4 Examples  reset_git_repo  reset_git_repo(force: true) # If you don't care about warnings and are absolutely sure that you want to discard all changes. This will reset the repo even if you have valuable uncommitted changes, so use with care!  reset_git_repo(skip_clean: true) # If you want  git clean  to be skipped, thus NOT deleting untracked files like  .env . Optional, defaults to false.  reset_git_repo(\n  force: true,\n  files: [\n     ./file.txt \n  ]\n)    Parameters     Key  Description      files  Array of files the changes should be discarded. If not given, all files will be discarded    force  Skip verifying of previously clean state of repo. Only recommended in combination with  files  option    skip_clean  Skip 'git clean' to avoid removing untracked files like  .env . Defaults to false    disregard_gitignore  Setting this to true will clean the whole repository, ignoring anything in your local .gitignore. Set this to true if you want the equivalent of a fresh clone, and for all untracked and ignore files to also be removed    exclude  You can pass a string, or array of, file pattern(s) here which you want to have survive the cleaning process, and remain on disk. E.g. to leave the  artifacts  directory you would specify  exclude: 'artifacts' . Make sure this pattern is also in your gitignore! See the gitignore documentation for info on patterns", 
            "title": "reset_git_repo"
        }, 
        {
            "location": "/actions/#git_branch", 
            "text": "Returns the name of the current git branch   If no branch could be found, this action will return nil      git_branch       Supported platforms  ios, android, mac    Author  @KrauseFx      1 Example  git_branch", 
            "title": "git_branch"
        }, 
        {
            "location": "/actions/#commit_version_bump", 
            "text": "Creates a 'Version Bump' commit. Run after  increment_build_number   This action will create a 'Version Bump' commit in your repo. Useful in conjunction with  increment_build_number .\nIt checks the repo to make sure that only the relevant files have changed, these are the files that  increment_build_number  ( agvtool ) touches:\n- All .plist files\n- The  .xcodeproj/project.pbxproj  file\nThen commits those files to the repo.\nCustomise the message with the  :message  option, defaults to 'Version Bump'\nIf you have other uncommitted changes in your repo, this action will fail. If you started off in a clean repo, and used the  ipa  and or  sigh  actions, then you can use the  clean_build_artifacts  action to clean those temporary files up before running this action.      commit_version_bump       Supported platforms  ios, mac    Author  @lmirosevic      2 Examples  commit_version_bump  commit_version_bump(\n  message:  Version Bump ,# create a commit with a custom message\n  xcodeproj:  ./path/to/MyProject.xcodeproj , # optional, if you have multiple Xcode project files, you must specify your main project here\n)    Parameters     Key  Description      message  The commit message when committing the version bump    xcodeproj  The path to your project file (Not the workspace). If you have only one, this is optional    force  Forces the commit, even if other files than the ones containing the version number have been modified    settings  Include Settings.bundle/Root.plist with version bump    ignore  A regular expression used to filter matched plist files to be modified", 
            "title": "commit_version_bump"
        }, 
        {
            "location": "/actions/#push_to_git_remote", 
            "text": "Push local changes to the remote branch   Lets you push your local commits to a remote git repo. Useful if you make local changes such as adding a version bump commit (using  commit_version_bump ) or a git tag (using 'add_git_tag') on a CI server, and you want to push those changes back to your canonical/main repo.      push_to_git_remote       Supported platforms  ios, android, mac    Author  @lmirosevic      2 Examples  push_to_git_remote # simple version. pushes  master  branch to  origin  remote  push_to_git_remote(\n  remote:  origin ,         # optional, default:  origin \n  local_branch:  develop ,  # optional, aliased by  branch , default:  master \n  remote_branch:  develop , # optional, default is set to local_branch\n  force: true,    # optional, default: false\n  tags: false     # optional, default: true\n)    Parameters     Key  Description      local_branch  The local branch to push from. Defaults to the current branch    remote_branch  The remote branch to push to. Defaults to the local branch    force  Force push to remote. Defaults to false    tags  Wether tags are pushed to remote. Defaults to true    remote  The remote to push to. Defaults to  origin", 
            "title": "push_to_git_remote"
        }, 
        {
            "location": "/actions/#number_of_commits", 
            "text": "Return the total number of all commits in current git repo   You can use this action to get the number of commits of this repo. This is useful if you want to set the build number to the number of commits.      number_of_commits       Supported platforms  ios, android, mac    Author  @onevcat    Returns  The total number of all commits in current git repo      1 Example  build_number = number_of_commits\nincrement_build_number(build_number: build_number)", 
            "title": "number_of_commits"
        }, 
        {
            "location": "/actions/#add_git_tag", 
            "text": "This will add an annotated git tag to the current branch   This will automatically tag your build with the following format:  grouping / lane / prefix build_number , where:\n-  grouping  is just to keep your tags organised under one 'folder', defaults to 'builds'\n-  lane  is the name of the current fastlane lane\n-  prefix  is anything you want to stick in front of the version number, e.g. 'v'\n-  build_number  is the build number, which defaults to the value emitted by the  increment_build_number  action\nFor example for build 1234 in the 'appstore' lane it will tag the commit with  builds/appstore/1234      add_git_tag       Supported platforms  ios, android, mac    Author  @lmirosevic, @maschall      3 Examples  add_git_tag # simple tag with default values  add_git_tag(\n  grouping:  fastlane-builds ,\n  prefix:  v ,\n  build_number: 123\n)  # Alternatively, you can specify your own tag. Note that if you do specify a tag, all other arguments are ignored.\nadd_git_tag(\n  tag:  my_custom_tag \n)    Parameters     Key  Description      tag  Define your own tag text. This will replace all other parameters    grouping  Is used to keep your tags organised under one 'folder'. Defaults to 'builds'    prefix  Anything you want to put in front of the version number (e.g. 'v')    build_number  The build number. Defaults to the result of increment_build_number if you're using it    message  The tag message. Defaults to the tag's name    commit  The commit or object where the tag will be set. Defaults to the current HEAD    force  Force adding the tag", 
            "title": "add_git_tag"
        }, 
        {
            "location": "/actions/#ensure_git_branch", 
            "text": "Raises an exception if not on a specific git branch   This action will check if your git repo is checked out to a specific branch.\nYou may only want to make releases from a specific branch, so  ensure_git_branch \nwill stop a lane if it was accidentally executed on an incorrect branch.      ensure_git_branch       Supported platforms  ios, android, mac    Author  @dbachrach, @Liquidsoul      2 Examples  ensure_git_branch # defaults to `master` branch  ensure_git_branch(\n  branch: 'develop'\n)    Parameters     Key  Description      branch  The branch that should be checked for. String that can be either the full name of the branch or a regex to match", 
            "title": "ensure_git_branch"
        }, 
        {
            "location": "/actions/#last_git_commit", 
            "text": "Return last git commit hash, abbreviated commit hash, commit message and author     last_git_commit       Supported platforms  ios, android, mac    Author  @ngutman    Returns  Returns the following dict:       1 Example  commit = last_git_commit\ncrashlytics(notes: commit[:message]) # message of commit\nauthor = commit[:author] # author of the commit\nhash = commit[:commit_hash] # long sha of commit\nshort_hash = commit[:abbreviated_commit_hash] # short sha of commit", 
            "title": "last_git_commit"
        }, 
        {
            "location": "/actions/#changelog_from_git_commits", 
            "text": "Collect git commit messages into a changelog   By default, messages will be collected back to the last tag, but the range can be controlled      changelog_from_git_commits       Supported platforms  ios, android, mac    Author  @mfurtak, @asfalcone, @SiarheiFedartsou    Returns  Returns a String containing your formatted git commits      2 Examples  changelog_from_git_commits  changelog_from_git_commits(\n  between: [ 7b092b3 ,  HEAD ], # Optional, lets you specify a revision/tag range between which to collect commit info\n  pretty:  - (%ae) %s , # Optional, lets you provide a custom format to apply to each commit when generating the changelog text\n  match_lightweight_tag: false, # Optional, lets you ignore lightweight (non-annotated) tags when searching for the last tag\n  include_merges: true # Optional, lets you filter out merge commits\n)    Parameters     Key  Description      between  Array containing two Git revision values between which to collect messages, you mustn't use it with :commits_count key at the same time    commits_count  Number of commits to include in changelog, you mustn't use it with :between key at the same time    pretty  The format applied to each commit while generating the collected value    tag_match_pattern  A glob(7) pattern to match against when finding the last git tag    match_lightweight_tag  Whether or not to match a lightweight tag when searching for the last one    include_merges  Whether or not to include any commits that are merges    \u001b[31m(DEPRECATED - use :merge_commit_filtering)\u001b[0m     merge_commit_filtering  Controls inclusion of merge commits when collecting the changelog.    Valid values: 'include_merges', 'exclude_merges', 'only_include_merges'", 
            "title": "changelog_from_git_commits"
        }, 
        {
            "location": "/actions/#git_pull", 
            "text": "Executes a simple git pull command     git_pull       Supported platforms  ios, android, mac    Author  @KrauseFx, @JaviSoto      2 Examples  git_pull  git_pull(only_tags: true) # only the tags, no commits    Parameters     Key  Description      only_tags  Simply pull the tags, and not bring new commits to the current branch from the remote", 
            "title": "git_pull"
        }, 
        {
            "location": "/actions/#git_commit", 
            "text": "Directly commit the given file with the given message     git_commit       Supported platforms  ios, android, mac    Author  @KrauseFx      2 Examples  git_commit(path:  ./version.txt ,\n  message:  Version Bump )  git_commit(path: [ ./version.txt ,  ./changelog.txt ],\n  message:  Version Bump )    Parameters     Key  Description      path  The file you want to commit    message  The commit message that should be used", 
            "title": "git_commit"
        }, 
        {
            "location": "/actions/#push_git_tags", 
            "text": "Push local tags to the remote - this will only push tags   If you only want to push the tags and nothing else, you can use the  push_git_tags  action      push_git_tags       Supported platforms  ios, android, mac    Author  @vittoriom      1 Example  push_git_tags    Parameters     Key  Description      force  Force push to remote. Defaults to false    remote  The remote to push tags to", 
            "title": "push_git_tags"
        }, 
        {
            "location": "/actions/#last_git_tag", 
            "text": "Get the most recent git tag   If you are using this action on a  shallow clone ,  the default with some CI systems like Bamboo , you need to ensure that you have also have pulled all the git tags appropriately.  Assuming your git repo has the correct remote set you can issue  sh('git fetch --tags')      last_git_tag       Supported platforms  ios, android, mac    Author  @KrauseFx      1 Example  last_git_tag", 
            "title": "last_git_tag"
        }, 
        {
            "location": "/actions/#get_build_number_repository", 
            "text": "Get the build number from the current repository   This action will get the  build number  according to what the SCM HEAD reports.\nCurrently supported SCMs are svn (uses root revision), git-svn (uses svn revision) and git (uses short hash) and mercurial (uses short hash or revision number).\nThere is an option,  :use_hg_revision_number , which allows to use mercurial revision number instead of hash.      get_build_number_repository       Supported platforms  ios, mac    Author  @bartoszj, @pbrooks, @armadsen    Returns  The build number from the current repository      1 Example  get_build_number_repository    Parameters     Key  Description      use_hg_revision_number  Use hg revision number instead of hash (ignored for non-hg repos)", 
            "title": "get_build_number_repository"
        }, 
        {
            "location": "/actions/#git_add", 
            "text": "Directly add the given file     git_add       Supported platforms  ios, android, mac    Author  @4brunu      2 Examples  git_add(path:  ./version.txt )  git_add(path: [ ./version.txt ,  ./changelog.txt ])    Parameters     Key  Description      path  The file you want to add", 
            "title": "git_add"
        }, 
        {
            "location": "/actions/#get_github_release", 
            "text": "This will verify if a given release version is available on GitHub   This will return all information about a release. For example:\n              {\"url\"= \"https://api.github.com/repos/KrauseFx/fastlane/releases/1537713\",\n                 \"assets_url\"= \"https://api.github.com/repos/KrauseFx/fastlane/releases/1537713/assets\",\n                 \"upload_url\"= \"https://uploads.github.com/repos/KrauseFx/fastlane/releases/1537713/assets{?name}\",\n                 \"html_url\"= \"https://github.com/fastlane/fastlane/releases/tag/1.8.0\",\n                 \"id\"= 1537713,\n                 \"tag_name\"= \"1.8.0\",\n                 \"target_commitish\"= \"master\",\n                 \"name\"= \"1.8.0 Switch Lanes   Pass Parameters\",\n                 \"draft\"= false,\n                 \"author\"= \n                  {\"login\"= \"KrauseFx\",\n                   \"id\"= 869950,\n                   \"avatar_url\"= \"https://avatars.githubusercontent.com/u/869950?v=3\",\n                   \"gravatar_id\"= \"\",\n                   \"url\"= \"https://api.github.com/users/KrauseFx\",\n                   \"html_url\"= \"https://github.com/fastlane\",\n                   \"followers_url\"= \"https://api.github.com/users/KrauseFx/followers\",\n                   \"following_url\"= \"https://api.github.com/users/KrauseFx/following{/other_user}\",\n                   \"gists_url\"= \"https://api.github.com/users/KrauseFx/gists{/gist_id}\",\n                   \"starred_url\"= \"https://api.github.com/users/KrauseFx/starred{/owner}{/repo}\",\n                   \"subscriptions_url\"= \"https://api.github.com/users/KrauseFx/subscriptions\",\n                   \"organizations_url\"= \"https://api.github.com/users/KrauseFx/orgs\",\n                   \"repos_url\"= \"https://api.github.com/users/KrauseFx/repos\",\n                   \"events_url\"= \"https://api.github.com/users/KrauseFx/events{/privacy}\",\n                   \"received_events_url\"= \"https://api.github.com/users/KrauseFx/received_events\",\n                   \"type\"= \"User\",\n                   \"site_admin\"= false},\n                 \"prerelease\"= false,\n                 \"created_at\"= \"2015-07-14T23:33:01Z\",\n                 \"published_at\"= \"2015-07-14T23:44:10Z\",\n                 \"assets\"= [],\n                 \"tarball_url\"= \"https://api.github.com/repos/KrauseFx/fastlane/tarball/1.8.0\",\n                 \"zipball_url\"= \"https://api.github.com/repos/KrauseFx/fastlane/zipball/1.8.0\",\n                 \"body\"=  ...Markdown...\n                \"This is one of the biggest updates of  fastlane  yet\"\n              }      get_github_release       Supported platforms  ios, android, mac    Author  @KrauseFx, @czechboy0, @jaleksynas      1 Example  release = get_github_release(url:  fastlane/fastlane , version:  1.0.0 )\nputs release[ name ]    Parameters     Key  Description      url  The path to your repo, e.g. 'KrauseFx/fastlane'    server_url  The server url. e.g. 'https://your.github.server/api/v3' (Default: 'https://api.github.com')    version  The version tag of the release to check    api_token  GitHub Personal Token (required for private repositories)", 
            "title": "get_github_release"
        }, 
        {
            "location": "/actions/#git_tag_exists", 
            "text": "Checks if the git tag with the given name exists in the current repo     git_tag_exists       Supported platforms  ios, android, mac    Author  @antondomashnev    Returns  Boolean value whether the tag exists or not      1 Example  if git_tag_exists(tag:  1.1.0 )\n  UI.message( Found it \ud83d\ude80 )\nend    Parameters     Key  Description      tag  The tag name that should be checked", 
            "title": "git_tag_exists"
        }, 
        {
            "location": "/actions/#create_pull_request", 
            "text": "This will create a new pull request on GitHub     create_pull_request       Supported platforms  ios, android, mac    Author  @seei      1 Example  create_pull_request(\n  api_token: ENV[ GITHUB_TOKEN ],\n  repo:  fastlane/fastlane ,\n  title:  Amazing new feature ,\n  head:  my-feature ,       # optional, defaults to current branch name\n  base:  master , # optional, defaults to  master \n  body:  Please pull this in! ,       # optional\n  api_url:  http://yourdomain/api/v3  # optional, for Github Enterprise, defaults to  https://api.github.com \n)    Parameters     Key  Description      api_token  Personal API Token for GitHub - generate one at https://github.com/settings/tokens    repo  The name of the repository you want to submit the pull request to    title  The title of the pull request    body  The contents of the pull request    head  The name of the branch where your changes are implemented (defaults to the current branch name)    base  The name of the branch you want your changes pulled into (defaults to  master )    api_url  The URL of Github API - used when the Enterprise (default to  https://api.github.com )", 
            "title": "create_pull_request"
        }, 
        {
            "location": "/actions/#hg_ensure_clean_status", 
            "text": "Raises an exception if there are uncommited hg changes   Along the same lines as the  ensure_git_status_clean  action, this is a sanity check to ensure the working mercurial repo is clean. Especially useful to put at the beginning of your Fastfile in the  before_all  block.      hg_ensure_clean_status       Supported platforms  ios, android, mac    Author  @sjrmanning      1 Example  hg_ensure_clean_status", 
            "title": "hg_ensure_clean_status"
        }, 
        {
            "location": "/actions/#hg_commit_version_bump", 
            "text": "This will commit a version bump to the hg repo   The mercurial equivalent of the  commit_version_bump  git action. Like the git version, it is useful in conjunction with  increment_build_number .\nIt checks the repo to make sure that only the relevant files have changed, these are the files that  increment_build_number  ( agvtool ) touches:\n- All .plist files\n- The  .xcodeproj/project.pbxproj  file\nThen commits those files to the repo.\nCustomise the message with the  :message  option, defaults to 'Version Bump'\nIf you have other uncommitted changes in your repo, this action will fail. If you started off in a clean repo, and used the  ipa  and or  sigh  actions, then you can use the  clean_build_artifacts  action to clean those temporary files up before running this action.      hg_commit_version_bump       Supported platforms  ios, android, mac    Author  @sjrmanning      2 Examples  hg_commit_version_bump  hg_commit_version_bump(\n  message:  Version Bump ,       # create a commit with a custom message\n  xcodeproj:  ./path/MyProject.xcodeproj , # optional, if you have multiple Xcode project files, you must specify your main project here\n)    Parameters     Key  Description      message  The commit message when committing the version bump    xcodeproj  The path to your project file (Not the workspace). If you have only one, this is optional    force  Forces the commit, even if other files than the ones containing the version number have been modified    test_dirty_files  A list of dirty files passed in for testing    test_expected_files  A list of expected changed files passed in for testin", 
            "title": "hg_commit_version_bump"
        }, 
        {
            "location": "/actions/#hg_add_tag", 
            "text": "This will add a hg tag to the current branch     hg_add_tag       Supported platforms  ios, android, mac    Author  @sjrmanning      1 Example  hg_add_tag(tag:  1.3 )    Parameters     Key  Description      tag  Tag to create", 
            "title": "hg_add_tag"
        }, 
        {
            "location": "/actions/#hg_push", 
            "text": "This will push changes to the remote hg repository   The mercurial equivalent of  push_to_git_remote  \u2014 pushes your local commits to a remote mercurial repo. Useful when local changes such as adding a version bump commit or adding a tag are part of your lane\u2019s actions.      hg_push       Supported platforms  ios, android, mac    Author  @sjrmanning      2 Examples  hg_push  hg_push(\n  destination:  ssh://hg@repohost.com/owner/repo ,\n  force: true\n)    Parameters     Key  Description      force  Force push to remote. Defaults to false    destination  The destination to push to", 
            "title": "hg_push"
        }, 
        {
            "location": "/actions/#notifications", 
            "text": "", 
            "title": "Notifications"
        }, 
        {
            "location": "/actions/#slack", 
            "text": "Send a success/error message to your Slack group   Create an Incoming WebHook and export this as  SLACK_URL . Can send a message to  #channel  (by default), a direct message to  @username  or a message to a private group  group  with success (green) or failure (red) status.      slack       Supported platforms  ios, android, mac    Author  @KrauseFx      2 Examples  slack(message:  App successfully released! )  slack(\n  message:  App successfully released! ,\n  channel:  #channel ,  # Optional, by default will post to the default channel configured for the POST URL.\n  success: true,        # Optional, defaults to true.\n  payload: {  # Optional, lets you specify any number of your own Slack attachments.\n     Build Date  =  Time.new.to_s,\n     Built by  =   Jenkins ,\n  },\n  default_payloads: [:git_branch, :git_author], # Optional, lets you specify a whitelist of default payloads to include. Pass an empty array to suppress all the default payloads.\n        # Don't add this key, or pass nil, if you want all the default payloads. The available default payloads are: `lane`, `test_result`, `git_branch`, `git_author`, `last_git_commit_message`.\n  attachment_properties: { # Optional, lets you specify any other properties available for attachments in the slack API (see https://api.slack.com/docs/attachments).\n       # This hash is deep merged with the existing properties set using the other properties above. This allows your own fields properties to be appended to the existing fields that were created using the `payload` property for instance.\n    thumb_url:  http://example.com/path/to/thumb.png ,\n    fields: [{\n      title:  My Field ,\n      value:  My Value ,\n      short: true\n    }]\n  }\n)    Parameters     Key  Description      message  The message that should be displayed on Slack. This supports the standard Slack markup language    channel  #channel or @username    use_webhook_configured_username_and_icon  Use webook's default username and icon settings? (true/false)    slack_url  Create an Incoming WebHook for your Slack group    username  Overrides the webook's username property if use_webhook_configured_username_and_icon is false    icon_url  Overrides the webook's image property if use_webhook_configured_username_and_icon is false    payload  Add additional information to this post. payload must be a hash containg any key with any value    default_payloads  Remove some of the default payloads. More information about the available payloads on GitHub    attachment_properties  Merge additional properties in the slack attachment, see https://api.slack.com/docs/attachments    success  Was this build successful? (true/false)", 
            "title": "slack"
        }, 
        {
            "location": "/actions/#notification", 
            "text": "Display a macOS notification with custom message and title     notification       Supported platforms  ios, android, mac    Author  @champo, @cbowns, @KrauseFx, @amarcadet, @dusek      1 Example  notification(subtitle:  Finished Building , message:  Ready to upload... )    Parameters     Key  Description      title  The title to display in the notification    subtitle  A subtitle to display in the notification    message  The message to display in the notification    sound  The name of a sound to play when the notification appears (names are listed in Sound Preferences)    activate  Bundle identifier of application to be opened when the notification is clicked    app_icon  The URL of an image to display instead of the application icon (Mavericks+ only)    content_image  The URL of an image to display attached to the notification (Mavericks+ only)    open  URL of the resource to be opened when the notification is clicked    execute  Shell command to run when the notification is clicked", 
            "title": "notification"
        }, 
        {
            "location": "/actions/#hipchat", 
            "text": "Send a error/success message to HipChat   Send a message to  room  (by default) or a direct message to  @username  with success (green) or failure (red) status.      hipchat       Supported platforms  ios, android, mac    Author  @jingx23      1 Example  hipchat(\n  message:  App successfully released! ,\n  message_format:  html , # or  text , defaults to  html \n  channel:  Room or @username ,\n  success: true\n)    Parameters     Key  Description      message  The message to post on HipChat    channel  The room or @username    api_token  Hipchat API Token    custom_color  Specify a custom color, this overrides the success boolean. Can be one of 'yellow', 'red', 'green', 'purple', 'gray', or 'random'    success  Was this build successful? (true/false)    version  Version of the Hipchat API. Must be 1 or 2    notify_room  Should the people in the room be notified? (true/false)    api_host  The host of the HipChat-Server API    message_format  Format of the message to post. Must be either 'html' or 'text'    include_html_header  Should html formatted messages include a preformatted header? (true/false)    from  Name the message will appear be sent from", 
            "title": "hipchat"
        }, 
        {
            "location": "/actions/#mailgun", 
            "text": "Send a success/error message to an email group     mailgun       Supported platforms  ios, android, mac    Author  @thiagolioy      2 Examples  mailgun(\n  to:  fastlane@krausefx.com ,\n  success: true,\n  message:  This is the mail's content \n)  mailgun(\n  postmaster:  MY_POSTMASTER ,\n  apikey:  MY_API_KEY ,\n  to:  DESTINATION_EMAIL ,\n  from:  EMAIL_FROM_NAME ,\n  success: true,\n  message:  Mail Body ,\n  app_link:  http://www.myapplink.com ,\n  ci_build_link:  http://www.mycibuildlink.com ,\n  template_path:  HTML_TEMPLATE_PATH \n)    Parameters     Key  Description      mailgun_sandbox_domain  Mailgun sandbox domain postmaster for your mail. Please use postmaster instead    mailgun_sandbox_postmaster  Mailgun sandbox domain postmaster for your mail. Please use postmaster instead    mailgun_apikey  Mailgun apikey for your mail. Please use postmaster instead    postmaster  Mailgun sandbox domain postmaster for your mail    apikey  Mailgun apikey for your mail    to  Destination of your mail    from  Mailgun sender name    message  Message of your mail    subject  Subject of your mail    success  Was this build successful? (true/false)    app_link  App Release link    ci_build_link  CI Build Link    template_path  Mail HTML template", 
            "title": "mailgun"
        }, 
        {
            "location": "/actions/#chatwork", 
            "text": "Send a success/error message to ChatWork   Information on how to obtain an API token: http://developer.chatwork.com/ja/authenticate.html      chatwork       Supported platforms  ios, android, mac    Author  @astronaughts      1 Example  chatwork(\n  message:  App successfully released! ,\n  roomid: 12345,\n  success: true,\n  api_token:  Your Token \n)    Parameters     Key  Description      api_token  ChatWork API Token    message  The message to post on ChatWork    roomid  The room ID    success  Was this build successful? (true/false)", 
            "title": "chatwork"
        }, 
        {
            "location": "/actions/#flock", 
            "text": "Send a message to a Flock group   To obtain the token, create a new  incoming message webhook \nin your Flock admin panel.      flock       Supported platforms  ios, android, mac    Author  @Manav      1 Example  flock(\n  message:  Hello ,\n  token:  xxx \n)    Parameters     Key  Description      message  Message text    token  Token for the Flock incoming webhook    base_url  Base URL of the Flock incoming message webhook", 
            "title": "flock"
        }, 
        {
            "location": "/actions/#ifttt", 
            "text": "Connect to the IFTTT Maker Channel. https://ifttt.com/maker   Connect to the IFTTT  Maker Channel . An IFTTT Recipe has two components: a Trigger and an Action. In this case, the Trigger will fire every time the Maker Channel receives a web request (made by this  fastlane  action) to notify it of an event. The Action can be anything that IFTTT supports: email, SMS, etc.      ifttt       Supported platforms  ios, android, mac    Author  @vpolouchkine      1 Example  ifttt(\n  api_key:  ... ,\n  event_name:  ... ,\n  value1:  foo ,\n  value2:  bar ,\n  value3:  baz \n)    Parameters     Key  Description      api_key  API key    event_name  The name of the event that will be triggered    value1  Extra data sent with the event    value2  Extra data sent with the event    value3  Extra data sent with the event", 
            "title": "ifttt"
        }, 
        {
            "location": "/actions/#twitter", 
            "text": "Post a tweet on Twitter.com   Post a tweet on twitter. Requires you to setup an app on twitter.com and obtain consumer and access_token.      twitter       Supported platforms  ios, android, mac    Author  @hjanuschka      1 Example  twitter(\n  access_token:  XXXX ,\n  access_token_secret:  xxx ,\n  consumer_key:  xxx ,\n  consumer_secret:  xxx ,\n  message:  You rock! \n)    Parameters     Key  Description      consumer_key  Consumer Key    consumer_secret  Consumer Secret    access_token  Access Token    access_token_secret  Access Token Secret    message  The tweet", 
            "title": "twitter"
        }, 
        {
            "location": "/actions/#typetalk", 
            "text": "Post a message to Typetalk     typetalk       Supported platforms  ios, android, mac    Author  @Nulab Inc.      1 Example  typetalk(\n  message:  App successfully released! ,\n  note_path:  ChangeLog.md ,\n  topicId: 1,\n  success: true,\n  typetalk_token:  Your Typetalk Token \n)", 
            "title": "typetalk"
        }, 
        {
            "location": "/actions/#deprecated", 
            "text": "", 
            "title": "Deprecated"
        }, 
        {
            "location": "/actions/#notify", 
            "text": "Shows a macOS notification - use  notification  instead     notify       Supported platforms  ios, android, mac    Author  @champo, @KrauseFx", 
            "title": "notify"
        }, 
        {
            "location": "/actions/#update_project_code_signing", 
            "text": "Updated code signing settings from 'Automatic' to a specific profile   Don't use this actoin, check out https://docs.fastlane.tools/codesigning/getting-started/ for more details      update_project_code_signing       Supported platforms  ios    Author  @KrauseFx       Parameters     Key  Description      path  Path to your Xcode project    udid  The UDID of the provisioning profile you want to use", 
            "title": "update_project_code_signing"
        }, 
        {
            "location": "/actions/#misc", 
            "text": "", 
            "title": "Misc"
        }, 
        {
            "location": "/actions/#puts", 
            "text": "Prints out the given text     puts       Supported platforms  ios, android, mac    Author  @KrauseFx      1 Example  puts  Hi there", 
            "title": "puts"
        }, 
        {
            "location": "/actions/#fastlane_version", 
            "text": "Verifies the minimum fastlane version required   Add this to your  Fastfile  to require a certain version of  fastlane .\nUse it if you use an action that just recently came out and you need it      fastlane_version       Supported platforms  ios, android, mac    Author  @KrauseFx      1 Example  fastlane_version  1.50.0", 
            "title": "fastlane_version"
        }, 
        {
            "location": "/actions/#default_platform", 
            "text": "Defines a default platform to not have to specify the platform     default_platform       Supported platforms  ios, android, mac    Author  @KrauseFx      1 Example  default_platform :android", 
            "title": "default_platform"
        }, 
        {
            "location": "/actions/#lane_context", 
            "text": "An alias to  Actions.lane_context     lane_context       Supported platforms  ios, android, mac    Author  @KrauseFx", 
            "title": "lane_context"
        }, 
        {
            "location": "/actions/#import", 
            "text": "Import another Fastfile to use its lanes   This is useful if you have shared lanes across multiple apps and you want to store a Fastfile\nin a separate folder. The path must be relative to the Fastfile this is called from.      import       Supported platforms  ios, android, mac    Author  @KrauseFx      1 Example  import  ./path/to/other/Fastfile", 
            "title": "import"
        }, 
        {
            "location": "/actions/#produce", 
            "text": "Creates the given application on iTC and the Dev Portal if necessary     produce       Supported platforms  ios    Author  @KrauseFx      1 Example  produce(\n  username:  felix@krausefx.com ,\n  app_identifier:  com.krausefx.app ,\n  app_name:  MyApp ,\n  language:  English ,\n  app_version:  1.0 ,\n  sku:  123 ,\n  team_name:  SunApps GmbH  # Only necessary when in multiple teams.\n)    Parameters     Key  Description      username  Your Apple ID Username    app_identifier  App Identifier (Bundle ID, e.g. com.krausefx.app)    bundle_identifier_suffix  App Identifier Suffix (Ignored if App Identifier does not ends with .*)    app_name  App Name    app_version  Initial version number (e.g. '1.0')    sku  SKU Number (e.g. '1234')    language  Primary Language (e.g. 'English', 'German')    company_name  The name of your company. Only required if it's the first app you create    skip_itc  Skip the creation of the app on iTunes Connect    skip_devcenter  Skip the creation of the app on the Apple Developer Portal    team_id  The ID of your Developer Portal team if you're in multiple teams    team_name  The name of your Developer Portal team if you're in multiple teams    itc_team_id  The ID of your iTunes Connect team if you're in multiple teams    itc_team_name  The name of your iTunes Connect team if you're in multiple teams", 
            "title": "produce"
        }, 
        {
            "location": "/actions/#clean_build_artifacts", 
            "text": "Deletes files created as result of running gym, cert, sigh or download_dsyms   This action deletes the files that get created in your repo as a result of running the  gym  and  sigh  commands. It doesn't delete the  fastlane/report.xml  though, this is probably more suited for the .gitignore.\nUseful if you quickly want to send out a test build by dropping down to the command line and typing something like  fastlane beta , without leaving your repo in a messy state afterwards.      clean_build_artifacts       Supported platforms  ios, mac    Author  @lmirosevic      1 Example  clean_build_artifacts    Parameters     Key  Description      exclude_pattern  Exclude all files from clearing that match the given Regex pattern: e.g. '.*.mobileprovision'", 
            "title": "clean_build_artifacts"
        }, 
        {
            "location": "/actions/#import_from_git", 
            "text": "Import another Fastfile from a remote git repository to use its lanes   This is useful if you have shared lanes across multiple apps and you want to store the Fastfile\nin a remote git repository.      import_from_git       Supported platforms  ios, android, mac    Author  @fabiomassimo, @KrauseFx, @Liquidsoul      1 Example  import_from_git(\n  url:  git@github.com:fastlane/fastlane.git , # The url of the repository to import the Fastfile from.\n  branch:  HEAD , # The branch to checkout on the repository. Defaults to `HEAD`.\n  path:  fastlane/Fastfile  # The path of the Fastfile in the repository. Defaults to `fastlane/Fastfile`.\n)    Parameters     Key  Description      url  The url of the repository to import the Fastfile from    branch  The branch or tag to check-out on the repository    path  The path of the Fastfile in the repository", 
            "title": "import_from_git"
        }, 
        {
            "location": "/actions/#unlock_keychain", 
            "text": "Unlock a keychain   Unlocks the give keychain file and adds it to the keychain search list\nKeychains can be replaced with  add_to_search_list: :replace      unlock_keychain       Supported platforms  ios, android, mac    Author  @xfreebird      4 Examples  unlock_keychain( # Unlock an existing keychain and add it to the keychain search list\n  path:  /path/to/KeychainName.keychain ,\n  password:  mysecret \n)  unlock_keychain( # By default the keychain is added to the existing. To replace them with the selected keychain you may use `:replace`\n  path:  /path/to/KeychainName.keychain ,\n  password:  mysecret ,\n  add_to_search_list: :replace # To only add a keychain use `true` or `:add`.\n)  unlock_keychain( # In addition, the keychain can be selected as a default keychain\n  path:  /path/to/KeychainName.keychain ,\n  password:  mysecret ,\n  set_default: true\n)  unlock_keychain( # If the keychain file is located in the standard location `~/Library/Keychains`, then it is sufficient to provide the keychain file name, or file name with its suffix.\n  path:  KeychainName ,\n  password:  mysecret \n)    Parameters     Key  Description      path  Path to the Keychain file    password  Keychain password    add_to_search_list  Add to keychain search list    set_default  Set as default keychain", 
            "title": "unlock_keychain"
        }, 
        {
            "location": "/actions/#update_fastlane", 
            "text": "Makes sure fastlane-tools are up-to-date when running fastlane   This action will look at all installed fastlane tools and update them to the next available minor version - major version updates will not be performed automatically, as they might include breaking changes. If an update was performed, fastlane will be restarted before the run continues.\nIf you are using rbenv or rvm, everything should be good to go. However, if you are using the system's default ruby, some additional setup is needed for this action to work correctly. In short, fastlane needs to be able to access your gem library without running in  sudo  mode.\nThe simplest possible fix for this is putting the following lines into your  ~/.bashrc  or  ~/.zshrc  file:   export GEM_HOME=~/.gems\nexport PATH=$PATH:~/.gems/bin  After the above changes, restart your terminal, then run  mkdir $GEM_HOME  to create the new gem directory. After this, you're good to go!\nRecommended usage of the  update_fastlane  action is at the top of the  before_all  block, before running any other action     update_fastlane       Supported platforms  ios, android, mac    Author  @milch      1 Example  before_all do\n  update_fastlane\n  # ...\nend    Parameters     Key  Description      tools  Comma separated list of fastlane tools to update (e.g. fastlane,deliver,sigh). If not specified, all currently installed fastlane-tools will be updated    no_update  Don't update during this run. Defaults to false", 
            "title": "update_fastlane"
        }, 
        {
            "location": "/actions/#is_ci", 
            "text": "Is the current run being executed on a CI system, like Jenkins or Travis   The return value of this method is true if fastlane is currently executed on\nTravis, Jenkins, Circle or a similar CI service      is_ci       Supported platforms  ios, android, mac    Author  @KrauseFx      1 Example  if is_ci?\n  puts  I'm a computer \nelse\n  say  Hi Human! \nend", 
            "title": "is_ci"
        }, 
        {
            "location": "/actions/#say", 
            "text": "This action speaks out loud the given text     say       Supported platforms  ios, android, mac    Author  @KrauseFx      1 Example  say  I can speak", 
            "title": "say"
        }, 
        {
            "location": "/actions/#bundle_install", 
            "text": "This action runs  bundle install  (if available)     bundle_install       Supported platforms  ios, android, mac    Author  @birmacher, @koglinjg       Parameters     Key  Description      binstubs  Generate bin stubs for bundled gems to ./bin    clean  Run bundle clean automatically after install    full_index  Use the rubygems modern index instead of the API endpoint    gemfile  Use the specified gemfile instead of Gemfile    jobs  Install gems using parallel workers    local  Do not attempt to fetch gems remotely and use the gem cache instead    deployment  Install using defaults tuned for deployment and CI environments    no_cache  Don't update the existing gem cache    no_prune  Don't remove stale gems from the cache    path  Specify a different path than the system default ($BUNDLE_PATH or $GEM_HOME). Bundler will remember this value for future installs on this machine    system  Install to the system location ($BUNDLE_PATH or $GEM_HOME) even if the bundle was previously installed somewhere else for this application    quiet  Only output warnings and errors    retry  Retry network and git requests that have failed    shebang  Specify a different shebang executable name than the default (usually 'ruby')    standalone  Make a bundle that can work without the Bundler runtime    trust_policy  Sets level of security when dealing with signed gems. Accepts  LowSecurity ,  MediumSecurity  and  HighSecurity  as values    without  Exclude gems that are part of the specified named group    with  Include gems that are part of the specified named group", 
            "title": "bundle_install"
        }, 
        {
            "location": "/actions/#setup_jenkins", 
            "text": "Setup xcodebuild, gym and scan for easier Jenkins integration    Adds and unlocks keychains from Jenkins 'Keychains and Provisioning Profiles Plugin'  Sets code signing identity from Jenkins 'Keychains and Provisioning Profiles Plugin'  Sets output directory to './output' (gym, scan and backup_xcarchive).  Sets derived data path to './derivedData' (xcodebuild, gym, scan and clear_derived_data, carthage).  Produce result bundle (gym and scan).\nThis action helps with Jenkins integration. Creates own derived data for each job. All build results like IPA files and archives will be stored in the  ./output  directory.\nThe action also works with  Keychains and Provisioning Profiles Plugin , selected keychain\nwill be automatically unlocked and the selected code signing identity will be used. By default this action will only work when fastlane is executed on a CI system.       setup_jenkins       Supported platforms  ios, mac    Author  @bartoszj      1 Example  setup_jenkins    Parameters     Key  Description      force  Force setup, even if not executed by Jenkins    unlock_keychain  Unlocks keychain    add_keychain_to_search_list  Add to keychain search list    set_default_keychain  Set keychain as default    keychain_path  Path to keychain    keychain_password  Keychain password    set_code_signing_identity  Set code signing identity from CODE_SIGNING_IDENTITY environment    code_signing_identity  Code signing identity    output_directory  The directory in which the ipa file should be stored in    derived_data_path  The directory where build products and other derived data will go    result_bundle  Produce the result bundle describing what occurred will be placed", 
            "title": "setup_jenkins"
        }, 
        {
            "location": "/actions/#skip_docs", 
            "text": "Skip the creation of the fastlane/README.md file when running fastlane   Tell  fastlane  to not automatically create a  fastlane/README.md  when running  fastlane . You can always trigger the creation of this file manually by running  fastlane docs      skip_docs       Supported platforms  ios, android, mac    Author  @KrauseFx      1 Example  skip_docs", 
            "title": "skip_docs"
        }, 
        {
            "location": "/actions/#badge", 
            "text": "Automatically add a badge to your app icon   This action will add a light/dark badge onto your app icon.\nYou can also provide your custom badge/overlay or add an shield for more customization more info:\nhttps://github.com/HazAT/badge Note  If you want to reset the badge back to default you can use  sh 'git checkout --  path /Assets.xcassets/'      badge       Supported platforms  ios, android, mac    Author  @DanielGri      4 Examples  badge(dark: true)  badge(alpha: true)  badge(custom:  /Users/xxx/Desktop/badge.png )  badge(shield:  Version-0.0.3-blue , no_badge: true)    Parameters     Key  Description      dark  Adds a dark flavored badge ontop of your icon    custom  Add your custom overlay/badge image    no_badge  Hides the beta badge    shield  Add a shield to your app icon from shield.io    alpha  Adds and alpha badge instead of the default beta one    path  Sets the root path to look for AppIcons    shield_io_timeout  Set custom duration for the timeout of the shield.io request in seconds    glob  Glob pattern for finding image files    alpha_channel  Keeps/adds an alpha channel to the icon (useful for android icons)    shield_gravity  Position of shield on icon. Default: North - Choices include: NorthWest, North, NorthEast, West, Center, East, SouthWest, South, SouthEast    shield_no_resize  Shield image will no longer be resized to aspect fill the full icon. Instead it will only be shrinked to not exceed the icon graphic", 
            "title": "badge"
        }, 
        {
            "location": "/actions/#download", 
            "text": "Download a file from a remote server (e.g. JSON file)   Specify the URL to download and get the content as a return value\nFor more advanced networking code, use the Ruby functions instead:\nhttp://docs.ruby-lang.org/en/2.0.0/Net/HTTP.html      download       Supported platforms  ios, android, mac    Author  @KrauseFx      1 Example  data = download(url:  https://host.com/api.json )    Parameters     Key  Description      url  The URL that should be downloaded", 
            "title": "download"
        }, 
        {
            "location": "/actions/#prompt", 
            "text": "Ask the user for a value or for confirmation   You can use  prompt  to ask the user for a value or to just let the user confirm the next step\nWhen this is executed on a CI service, the passed  ci_input  value will be returned\nThis action also supports multi-line inputs using the  multi_line_end_keyword  option.      prompt       Supported platforms  ios, android, mac    Author  @KrauseFx      2 Examples  changelog = prompt(text:  Changelog:  )  changelog = prompt(\n  text:  Changelog:  ,\n  multi_line_end_keyword:  END \n)\n\ncrashlytics(notes: changelog)    Parameters     Key  Description      text  The text that will be displayed to the user    ci_input  The default text that will be used when being executed on a CI service    boolean  Is that a boolean question (yes/no)? This will add (y/n) at the end    multi_line_end_keyword  Enable multi-line inputs by providing an end text (e.g. 'END') which will stop the user input", 
            "title": "prompt"
        }, 
        {
            "location": "/actions/#create_keychain", 
            "text": "Create a new Keychain     create_keychain       Supported platforms  ios, android, mac    Author  @gin0606      1 Example  create_keychain(\n  name:  KeychainName ,\n  default_keychain: true,\n  unlock: true,\n  timeout: 3600,\n  lock_when_sleeps: true\n)    Parameters     Key  Description      name  Keychain name    password  Password for the keychain    default_keychain  Set the default keychain    unlock  Unlock keychain after create    timeout  timeout interval in seconds. Set  false  if you want to specify \"no time-out\"    lock_when_sleeps  Lock keychain when the system sleeps    lock_after_timeout  Lock keychain after timeout interval    add_to_search_list  Add keychain to search list", 
            "title": "create_keychain"
        }, 
        {
            "location": "/actions/#reset_simulators", 
            "text": "Shutdown and reset running simulators     reset_simulators       Supported platforms  ios    Author  @danramteke      1 Example  reset_simulators", 
            "title": "reset_simulators"
        }, 
        {
            "location": "/actions/#delete_keychain", 
            "text": "Delete keychains and remove them from the search list   Keychains can be deleted after being creating with  create_keychain      delete_keychain       Supported platforms  ios, android, mac    Author  @gin0606      1 Example  delete_keychain(name:  KeychainName )    Parameters     Key  Description      name  Keychain name", 
            "title": "delete_keychain"
        }, 
        {
            "location": "/actions/#latest_testflight_build_number", 
            "text": "Fetches most recent build number from TestFlight   Provides a way to have increment_build_number be based on the latest build you uploaded to iTC.\nFetches most recent build number from TestFlight based on the version number. Provides a way to have  increment_build_number  be based on the latest build you uploaded to iTC.      latest_testflight_build_number       Supported platforms  ios    Author  @daveanderson    Returns  Integer representation of the latest build number uploaded to TestFlight      2 Examples  latest_testflight_build_number(version:  1.3 )  increment_build_number({\n  build_number: latest_testflight_build_number + 1\n})    Parameters     Key  Description      app_identifier  The bundle identifier of your app    username  Your Apple ID Username    version  The version number whose latest build number we want    initial_build_number  sets the build number to given value if no build is in current train    team_id  Your team ID if you're in multiple teams", 
            "title": "latest_testflight_build_number"
        }, 
        {
            "location": "/actions/#copy_artifacts", 
            "text": "Small action to save your build artifacts. Useful when you use reset_git_repo   This action copies artifacs to a target directory. It's useful if you have a CI that will pick up these artifacts and attach them to the build. Useful e.g. for storing your  .ipa s,  .dSYM.zip s,  .mobileprovision s,  .cert s\nMake sure your target_path is gitignored, and if you use  reset_git_repo , make sure the artifacts are added to the exclude list      copy_artifacts       Supported platforms  ios, android, mac    Author  @lmirosevic      1 Example  copy_artifacts(\n  target_path:  artifacts ,\n  artifacts: [ *.cer ,  *.mobileprovision ,  *.ipa ,  *.dSYM.zip ]\n)\n\n# Reset the git repo to a clean state, but leave our artifacts in place\nreset_git_repo(\n  exclude:  artifacts \n)    Parameters     Key  Description      keep_original  Set this to true if you want copy, rather than move, semantics    target_path  The directory in which you want your artifacts placed    artifacts  An array of file patterns of the files/folders you want to preserve    fail_on_missing  Fail when a source file isn't found", 
            "title": "copy_artifacts"
        }, 
        {
            "location": "/actions/#upload_symbols_to_crashlytics", 
            "text": "Upload dSYM symbolication files to Crashlytics   This action allows you to upload symbolication files to Crashlytics. It's extra useful if you use it to download the latest dSYM files from Apple when you use Bitcode. This action will not fail the build if one of the uploads failed. The reason for that is that sometimes some of dSYM files are invalid, and we don't want them to fail the complete build.      upload_symbols_to_crashlytics       Supported platforms  ios    Author  @KrauseFx      1 Example  upload_symbols_to_crashlytics(dsym_path:  ./App.dSYM.zip )    Parameters     Key  Description      dsym_path  Path to the DSYM file or zip to upload    api_token  Crashlytics Beta API Token    binary_path  The path to the upload-symbols file of the Fabric app    platform  The platform of the app (ios, tvos, mac)", 
            "title": "upload_symbols_to_crashlytics"
        }, 
        {
            "location": "/actions/#backup_xcarchive", 
            "text": "Save your [zipped] xcarchive elsewhere from default path     backup_xcarchive       Supported platforms  ios, mac    Author  @dral3x      1 Example  backup_xcarchive(\n  xcarchive:  /path/to/file.xcarchive , # Optional if you use the `xcodebuild` action\n  destination:  /somewhere/else/file.xcarchive , # Where the backup should be created\n  zip: false, # Enable compression of the archive. Defaults to `true`.\n  versioned: true # Create a versioned (date and app version) subfolder where to put the archive. Default value `true`\n)    Parameters     Key  Description      xcarchive  Path to your xcarchive file. Optional if you use the  xcodebuild  action    destination  Where your archive will be placed    zip  Enable compression of the archive. Default value  true    versioned  Create a versioned (date and app version) subfolder where to put the archive. Default value  true", 
            "title": "backup_xcarchive"
        }, 
        {
            "location": "/actions/#team_id", 
            "text": "Specify the Team ID you want to use for the Apple Developer Portal     team_id       Supported platforms  ios    Author  @KrauseFx      1 Example  team_id  Q2CBPK58CA", 
            "title": "team_id"
        }, 
        {
            "location": "/actions/#backup_file", 
            "text": "This action backs up your file to \"[path].back\"     backup_file       Supported platforms  ios, android, mac    Author  @gin0606      1 Example  backup_file(path:  /path/to/file )    Parameters     Key  Description      path  Path to the file you want to backup", 
            "title": "backup_file"
        }, 
        {
            "location": "/actions/#team_name", 
            "text": "Set a team to use by its name     team_name       Supported platforms  ios    Author  @KrauseFx      1 Example  team_name  Felix Krause", 
            "title": "team_name"
        }, 
        {
            "location": "/actions/#dsym_zip", 
            "text": "Creates a zipped dSYM in the project root from the .xcarchive   You can manually specify the path to the xcarchive (not needed if you use  xcodebuild / xcarchive  to build your archive)      dsym_zip       Supported platforms  ios, mac    Author  @lmirosevic      2 Examples  dsym_zip  dsym_zip(\n  archive_path:  MyApp.xcarchive \n)    Parameters     Key  Description      archive_path  Path to your xcarchive file. Optional if you use the  xcodebuild  action    dsym_path  Path for generated dsym. Optional, default is your apps root directory    all  Whether or not all dSYM files are to be included. Optional, default is false in which only your app dSYM is included", 
            "title": "dsym_zip"
        }, 
        {
            "location": "/actions/#debug", 
            "text": "Print out an overview of the lane context values     debug       Supported platforms  ios, android, mac    Author  @KrauseFx      1 Example  debug", 
            "title": "debug"
        }, 
        {
            "location": "/actions/#restore_file", 
            "text": "This action restore your file that was backuped with the  backup_file  action     restore_file       Supported platforms  ios, android, mac    Author  @gin0606      1 Example  restore_file(path:  /path/to/file )    Parameters     Key  Description      path  Original file name you want to restore", 
            "title": "restore_file"
        }, 
        {
            "location": "/actions/#ensure_no_debug_code", 
            "text": "Ensures the given text is nowhere in the code base   You don't want any debug code to slip into production. This can be used\nto check if there is any debug code still in your code base or if you have\nthings like // TO DO or similar      ensure_no_debug_code       Supported platforms  ios, android, mac    Author  @KrauseFx      5 Examples  ensure_no_debug_code(text:  // TODO )  ensure_no_debug_code(text:  Log.v ,\n      extension:  java )  ensure_no_debug_code(text:  NSLog ,\n path:  ./lib ,\n      extension:  m )  ensure_no_debug_code(text:  (^#define DEBUG|NSLog) ,\n path:  ./lib ,\n      extension:  m )  ensure_no_debug_code(text:  ,\n     extensions: [ m ,  swift ,  java ])    Parameters     Key  Description      text  The text that must not be in the code base    path  The directory containing all the source files    extension  The extension that should be searched for    extensions  An array of file extensions that should be searched for", 
            "title": "ensure_no_debug_code"
        }, 
        {
            "location": "/actions/#install_xcode_plugin", 
            "text": "Install an Xcode plugin for the current user     install_xcode_plugin       Supported platforms  ios, mac    Author  @NeoNachoSoto      2 Examples  install_xcode_plugin(url:  https://example.com/clubmate/plugin.zip )  install_xcode_plugin(github:  https://github.com/contentful/ContentfulXcodePlugin )    Parameters     Key  Description      url  URL for Xcode plugin ZIP file    github  GitHub repository URL for Xcode plugin", 
            "title": "install_xcode_plugin"
        }, 
        {
            "location": "/actions/#set_github_release", 
            "text": "This will create a new release on GitHub and upload assets for it   Creates a new release on GitHub. You must provide your GitHub Personal token\n        (get one from https://github.com/settings/tokens/new), the repository name\n        and tag name. By default that's 'master'. If the tag doesn't exist, one will be created on the commit or branch passed-in as\n        commitish. Out parameters provide the release's id, which can be used for later editing and the\n        release html link to GitHub. You can also specify a list of assets to be uploaded to the release with the upload_assets parameter.      set_github_release       Supported platforms  ios, android, mac    Author  @czechboy0    Returns  A hash containing all relevant information of this release    Access things like 'html_url', 'tag_name', 'name', 'body'       1 Example  github_release = set_github_release(\n  repository_name:  fastlane/fastlane ,\n  api_token: ENV[ GITHUB_TOKEN ],\n  name:  Super New actions ,\n  tag_name:  v1.22.0 ,\n  description: (File.read( changelog ) rescue  No changelog provided ),\n  commitish:  master ,\n  upload_assets: [ example_integration.ipa ,  ./pkg/built.gem ]\n)    Parameters     Key  Description      repository_name  The path to your repo, e.g. 'fastlane/fastlane'    server_url  The server url. e.g. 'https://your.internal.github.host/api/v3' (Default: 'https://api.github.com')    api_token  Personal API Token for GitHub - generate one at https://github.com/settings/tokens    tag_name  Pass in the tag name    name  Name of this release    commitish  Specifies the commitish value that determines where the Git tag is created from. Can be any branch or commit SHA. Unused if the Git tag already exists. Default: the repository's default branch (usually master)    description  Description of this release    is_draft  Whether the release should be marked as draft    is_prerelease  Whether the release should be marked as prerelease    upload_assets  Path to assets to be uploaded with the release", 
            "title": "set_github_release"
        }, 
        {
            "location": "/actions/#make_changelog_from_jenkins", 
            "text": "Generate a changelog using the Changes section from the current Jenkins build   This is useful when deploying automated builds. The changelog from Jenkins lists all the commit messages since the last build.      make_changelog_from_jenkins       Supported platforms  ios, android, mac    Author  @mandrizzle      1 Example  make_changelog_from_jenkins(\n  # Optional, lets you set a changelog in the case is not generated on Jenkins or if ran outside of Jenkins\n  fallback_changelog:  Bug fixes and performance enhancements \n)    Parameters     Key  Description      fallback_changelog  Fallback changelog if there is not one on Jenkins, or it couldn't be read    include_commit_body  Include the commit body along with the summary", 
            "title": "make_changelog_from_jenkins"
        }, 
        {
            "location": "/actions/#version_bump_podspec", 
            "text": "Increment or set the version in a podspec file   You can use this action to manipulate any 'version' variable contained in a ruby file.\nFor example, you can use it to bump the version of a cocoapods' podspec file.      version_bump_podspec       Supported platforms  ios, mac    Author  @Liquidsoul, @KrauseFx      2 Examples  version = version_bump_podspec(path:  TSMessages.podspec , bump_type:  patch )  version = version_bump_podspec(path:  TSMessages.podspec , version_number:  1.4 )    Parameters     Key  Description      path  You must specify the path to the podspec file to update    bump_type  The type of this version bump. Available: patch, minor, major    version_number  Change to a specific version. This will replace the bump type value", 
            "title": "version_bump_podspec"
        }, 
        {
            "location": "/actions/#danger", 
            "text": "Runs  danger  for the project   Formalize your Pull Request etiquette.\nMore information: https://github.com/danger/danger      danger       Supported platforms  ios, android, mac    Author  @KrauseFx      2 Examples  danger  danger(\n  danger_id:  unit-tests ,\n  dangerfile:  tests/MyOtherDangerFile ,\n  github_api_token: ENV[ GITHUB_API_TOKEN ],\n  verbose: true\n)    Parameters     Key  Description      use_bundle_exec  Use bundle exec when there is a Gemfile presented    verbose  Show more debugging information    danger_id  The identifier of this Danger instance    dangerfile  The location of your Dangerfile    github_api_token  GitHub API token for danger", 
            "title": "danger"
        }, 
        {
            "location": "/actions/#zip", 
            "text": "Compress a file or folder to a zip     zip       Supported platforms  ios, android, mac    Author  @KrauseFx    Returns  The path to the output zip file      2 Examples  zip  zip(\n  path:  MyApp.app ,\n  output_path:  Latest.app.zip \n)    Parameters     Key  Description      path  Path to the directory or file to be zipped    output_path  The name of the resulting zip file", 
            "title": "zip"
        }, 
        {
            "location": "/actions/#verify_build", 
            "text": "Able to verify various settings in ipa file   Verifies that the built app was built using the expected build resources. This is relevant for people who build on machines that are used to build apps with different profiles, certificates and/or bundle identifiers to guard against configuration mistakes.      verify_build       Supported platforms  ios    Author  @CodeReaper      1 Example  verify_build(\n  provisioning_type:  distribution ,\n  bundle_identifier:  com.example.myapp \n)    Parameters     Key  Description      provisioning_type  Required type of provisioning    provisioning_uuid  Required UUID of provisioning profile    team_identifier  Required team identifier    team_name  Required team name    app_name  Required app name    bundle_identifier  Required bundle identifier    ipa_path  Explicitly set the ipa path", 
            "title": "verify_build"
        }, 
        {
            "location": "/actions/#install_on_device", 
            "text": "Installs an .ipa file on a connected iOS-device via usb or wifi   Installs the ipa on the device, if no id is given, the first found iOS device will be used, works via USB or Wi-Fi. This requires  ios-deploy  to be installed please have a look at  ios-deploy . to quickly install it, use  npm -g i ios-deploy      install_on_device       Supported platforms  ios    Author  @hjanuschka      1 Example  install_on_device(\n  device_id:  a3be6c9ff7e5c3c6028597513243b0f933b876d4 ,\n  ipa:  ./app.ipa \n)    Parameters     Key  Description      extra  Extra Commandline arguments passed to ios-deploy    device_id  id of the device / if not set defaults to first found device    skip_wifi  Do not search for devices via WiFi    ipa  The IPA file to put on the device", 
            "title": "install_on_device"
        }, 
        {
            "location": "/actions/#scp", 
            "text": "Transfer files via SCP     scp       Supported platforms  ios, android, mac    Author  @hjanuschka      2 Examples  scp(\n  host:  dev.januschka.com ,\n  username:  root ,\n  upload: {\n    src:  /root/dir1 ,\n    dst:  /tmp/new_dir \n  }\n)  scp(\n  host:  dev.januschka.com ,\n  username:  root ,\n  download: {\n    src:  /root/dir1 ,\n    dst:  /tmp/new_dir \n  }\n)    Parameters     Key  Description      username  Username    password  Password    host  Hostname    port  Port    upload  Upload    download  Download", 
            "title": "scp"
        }, 
        {
            "location": "/actions/#rocket", 
            "text": "Outputs ascii-art for a rocket \ud83d\ude80   Print an ascii Rocket :rocket:. Useful after using  crashlytics  or  pilot  to indicate that your new build has been shipped to outer-space.      rocket       Supported platforms  ios, android, mac    Author  @JaviSoto, @radex      1 Example  rocket", 
            "title": "rocket"
        }, 
        {
            "location": "/actions/#download_dsyms", 
            "text": "Download dSYM files from Apple iTunes Connect for Bitcode apps   This action downloads dSYM files from Apple iTunes Connect after\nthe ipa got re-compiled by Apple. Useful if you have Bitcode enabled   lane :refresh_dsyms do\n  download_dsyms                  # Download dSYM files from iTC\n  upload_symbols_to_crashlytics   # Upload them to Crashlytics\n  clean_build_artifacts           # Delete the local dSYM files\nend     download_dsyms       Supported platforms  ios    Author  @KrauseFx      2 Examples  download_dsyms  download_dsyms(version:  1.0.0 , build_number:  345 )    Parameters     Key  Description      username  Your Apple ID Username for iTunes Connect    app_identifier  The bundle identifier of your app    team_id  The ID of your team if you're in multiple teams    team_name  The name of your team if you're in multiple teams    platform  The app platform for dSYMs you wish to download    version  The app version for dSYMs you wish to download    build_number  The app build_number for dSYMs you wish to download", 
            "title": "download_dsyms"
        }, 
        {
            "location": "/actions/#cloc", 
            "text": "Generates a Code Count that can be read by Jenkins (xml format)   This action will run cloc to generate a SLOC report that the Jenkins SLOCCount plugin can read.\nSee https://wiki.jenkins-ci.org/display/JENKINS/SLOCCount+Plugin and https://github.com/AlDanial/cloc for more information.      cloc       Supported platforms  ios, mac    Author  @intere      1 Example  cloc(\n   exclude_dir:  ThirdParty,Resources ,\n   output_directory:  reports ,\n   source_directory:  MyCoolApp \n)    Parameters     Key  Description      binary_path  Where the cloc binary lives on your system (full path including 'cloc')    exclude_dir  Comma separated list of directories to exclude    output_directory  Where to put the generated report file    source_directory  Where to look for the source code (relative to the project root folder)    xml  Should we generate an XML File (if false, it will generate a plain text file)?", 
            "title": "cloc"
        }, 
        {
            "location": "/actions/#version_get_podspec", 
            "text": "Receive the version number from a podspec file     version_get_podspec       Supported platforms  ios, mac    Author  @Liquidsoul, @KrauseFx      1 Example  version = version_get_podspec(path:  TSMessages.podspec )    Parameters     Key  Description      path  You must specify the path to the podspec file", 
            "title": "version_get_podspec"
        }, 
        {
            "location": "/actions/#pod_push", 
            "text": "Push a Podspec to Trunk or a private repository     pod_push       Supported platforms  ios, mac    Author  @squarefrog      4 Examples  # If no path is supplied then Trunk will attempt to find the first Podspec in the current directory.\npod_push  # Alternatively, supply the Podspec file path\npod_push(path:  TSMessages.podspec )  # You may also push to a private repo instead of Trunk\npod_push(path:  TSMessages.podspec , repo:  MyRepo )  # If the podspec has a dependency on another private pod, then you will have to supply the sources you want the podspec to lint with for pod_push to succeed. Read more here - https://github.com/CocoaPods/CocoaPods/issues/2543.\npod_push(path:  TMessages.podspec , repo:  MyRepo , sources: [ https://github.com/MyGithubPage/Specs ,  https://github.com/CocoaPods/Specs ])    Parameters     Key  Description      path  The Podspec you want to push    repo  The repo you want to push. Pushes to Trunk by default    allow_warnings  Allow warnings during pod push    use_libraries  Allow lint to use static libraries to install the spec    sources  The sources of repos you want the pod spec to lint with, separated by commas", 
            "title": "pod_push"
        }, 
        {
            "location": "/actions/#erb", 
            "text": "Allows to Generate output files based on ERB templates   Renders an ERB template with  placeholders  given as a hash via parameter,\nif no :destination is set, returns rendered template as string      erb       Supported platforms  ios, android, mac    Author  @hjanuschka      1 Example  # Example `erb` template:\n\n# Variable1  %= var1 % \n# Variable2  %= var2 % \n#  % for item in var3 % \n#         %= item % \n#  % end % \n\nerb(\n  template:  1.erb ,\n  destination:  /tmp/rendered.out ,\n  placeholders: {\n    :var1 =  123,\n    :var2 =   string ,\n    :var3 =  [ element1 ,  element2 ]\n  }\n)    Parameters     Key  Description      template  ERB Template File    destination  Destination file    placeholders  Placeholders given as a hash", 
            "title": "erb"
        }, 
        {
            "location": "/actions/#pod_lib_lint", 
            "text": "Pod lib lint   Test the syntax of your Podfile by linting the pod against the files of its directory      pod_lib_lint       Supported platforms  ios, mac    Author  @thierryxing      4 Examples  pod_lib_lint  # Allow ouput detail in console\npod_lib_lint(verbose: true)  # Allow warnings during pod lint\npod_lib_lint(allow_warnings: true)  # If the podspec has a dependency on another private pod, then you will have to supply the sources\npod_lib_lint(sources: [ https://github.com/MyGithubPage/Specs ,  https://github.com/CocoaPods/Specs ])    Parameters     Key  Description      use_bundle_exec  Use bundle exec when there is a Gemfile presented    verbose  Allow ouput detail in console    allow_warnings  Allow warnings during pod lint    sources  The sources of repos you want the pod spec to lint with, separated by commas    use_libraries  Lint uses static libraries to install the spec    fail_fast  Lint stops on the first failing platform or subspec    private  Lint skips checks that apply only to public specs    quick  Lint skips checks that would require to download and build the spec", 
            "title": "pod_lib_lint"
        }, 
        {
            "location": "/actions/#build_and_upload_to_appetize", 
            "text": "Generate and upload an ipa file to appetize.io   This should be called from danger\nMore information in the  device_grid guide      build_and_upload_to_appetize       Supported platforms  ios    Author  @KrauseFx       Parameters     Key  Description      xcodebuild  Parameters that are passed to the xcodebuild action    scheme  The scheme to build. Can also be passed using the  xcodebuild  parameter    api_token  Appetize.io API Token", 
            "title": "build_and_upload_to_appetize"
        }, 
        {
            "location": "/actions/#adb_devices", 
            "text": "Get an Array of Connected android device serials   Fetches device list via adb, e.g. run an adb command on all connected devices.      adb_devices       Supported platforms  android    Author  @hjanuschka    Returns  Returns an array of all currently connected android devices      1 Example  adb_devices.each do |device|\n  model = adb(command:  shell getprop ro.product.model ,\n    serial: device.serial).strip\n\n  puts  Model #{model} is connected \nend    Parameters     Key  Description      adb_path  The path to your  adb  binary", 
            "title": "adb_devices"
        }, 
        {
            "location": "/actions/#appetize_viewing_url_generator", 
            "text": "Generate an URL for appetize simulator   Check out the  device_grid guide  for more information      appetize_viewing_url_generator       Supported platforms  ios    Author  @KrauseFx    Returns  The URL to preview the iPhone app       Parameters     Key  Description      public_key  Public key of the app you wish to update    device  Device type: iphone4s, iphone5s, iphone6, iphone6plus, ipadair, iphone6s, iphone6splus, ipadair2, nexus5, nexus7 or nexus9    scale  Scale of the simulator    orientation  Device orientation    language  Device language in ISO 639-1 language code, e.g. 'de'    color  Color of the device    launch_url  Specify a deep link to open when your app is launched", 
            "title": "appetize_viewing_url_generator"
        }, 
        {
            "location": "/actions/#clipboard", 
            "text": "Copies a given string into the clipboard. Works only on macOS     clipboard       Supported platforms  ios, android, mac    Author  @KrauseFx      2 Examples  clipboard(value:  https://github.com/fastlane/fastlane/tree/master/fastlane )  clipboard(value: lane_context[SharedValues::HOCKEY_DOWNLOAD_LINK] ||  )    Parameters     Key  Description      value  The string that should be copied into the clipboard", 
            "title": "clipboard"
        }, 
        {
            "location": "/actions/#artifactory", 
            "text": "This action uploads an artifact to artifactory     artifactory       Supported platforms  ios, android, mac    Author  @koglinjg      1 Example  artifactory(\n  username:  username ,\n  password:  password ,\n  endpoint:  https://artifactory.example.com/artifactory/ ,\n  file:  example.ipa ,  # File to upload\n  repo:  mobile_artifacts ,       # Artifactory repo\n  repo_path:  /ios/appname/example-major.minor.ipa    # Path to place the artifact including its filename\n)    Parameters     Key  Description      file  File to be uploaded to artifactory    repo  Artifactory repo to put the file in    repo_path  Path to deploy within the repo, including filename    endpoint  Artifactory endpoint    username  Artifactory username    password  Artifactory password    properties  Artifact properties hash    ssl_pem_file  Location of pem file to use for ssl verification    ssl_verify  Verify SSL    proxy_username  Proxy username    proxy_password  Proxy password    proxy_address  Proxy address    proxy_port  Proxy port", 
            "title": "artifactory"
        }, 
        {
            "location": "/actions/#ssh", 
            "text": "Allows remote command execution using ssh   Lets you execute remote commands via ssh using username/password or ssh-agent. If one of the commands in command-array returns non 0 - it fails.      ssh       Supported platforms  ios, android, mac    Author  @hjanuschka      1 Example  ssh(\n  host:  dev.januschka.com ,\n  username:  root ,\n  commands: [\n     date ,\n     echo 1   /tmp/file1 \n  ]\n)    Parameters     Key  Description      username  Username    password  Password    host  Hostname    port  Port    commands  Commands    log  Log commands and output", 
            "title": "ssh"
        }, 
        {
            "location": "/actions/#update_icloud_container_identifiers", 
            "text": "This action changes the iCloud container identifiers in the entitlements file   Updates the iCloud Container Identifiers in the given Entitlements file, so you can use different iCloud containers for different builds like Adhoc, App Store, etc.      update_icloud_container_identifiers       Supported platforms  ios    Author  @JamesKuang      1 Example  update_icloud_container_identifiers(\n  entitlements_file:  /path/to/entitlements_file.entitlements ,\n  icloud_container_identifiers: [ iCloud.com.companyname.appname ]\n)    Parameters     Key  Description      entitlements_file  The path to the entitlement file which contains the iCloud container identifiers    icloud_container_identifiers  An Array of unique identifiers for the iCloud containers. Eg. ['iCloud.com.test.testapp']", 
            "title": "update_icloud_container_identifiers"
        }, 
        {
            "location": "/actions/#jira", 
            "text": "Leave a comment on JIRA tickets     jira       Supported platforms  ios, android, mac    Author  @iAmChrisTruman      1 Example  jira(\n  url:  https://bugs.yourdomain.com ,\n  username:  Your username ,\n  password:  Your password ,\n  ticket_id:  Ticket ID, i.e. IOS-123 ,\n  comment_text:  Text to post as a comment \n)    Parameters     Key  Description      url  URL for Jira instance    username  Username for JIRA instance    password  Password for Jira    ticket_id  Ticket ID for Jira, i.e. IOS-123    comment_text  Text to add to the ticket as a comment", 
            "title": "jira"
        }, 
        {
            "location": "/actions/#rsync", 
            "text": "Rsync files from :source to :destination   A wrapper around rsync, rsync is a tool that lets you synchronize files, including permissions and so on for a more detailed information about rsync please see rsync(1) manpage.      rsync       Supported platforms  ios, android, mac    Author  @hjanuschka      1 Example  rsync(\n  source:  root@host:/tmp/1.txt ,\n  destination:  /tmp/local_file.txt \n)    Parameters     Key  Description      extra  Port    source  source file/folder    destination  destination file/folder", 
            "title": "rsync"
        }, 
        {
            "location": "/actions/#read_podspec", 
            "text": "Loads a CocoaPods spec as JSON   This can be used for only specifying a version string in your podspec\n- and during your release process you'd read it from the podspec by running version = read_podspec['version']  at the beginning of your lane\nLoads the specified (or the first found) podspec in the folder as JSON, so that you can inspect its  version ,  files  etc. \nThis can be useful when basing your release process on the version string only stored in one place - in the podspec. As one of \nthe first steps you'd read the podspec and its version and the rest of the workflow can use that version string (when e.g. creating a new git tag or a GitHub Release).      read_podspec       Supported platforms  ios, mac    Author  @czechboy0      2 Examples  spec = read_podspec\nversion = spec[ version ]\nputs  Using Version #{version}   spec = read_podspec(path:  ./XcodeServerSDK.podspec )    Parameters     Key  Description      path  Path to the podspec to be read", 
            "title": "read_podspec"
        }, 
        {
            "location": "/actions/#upload_symbols_to_sentry", 
            "text": "Upload dSYM symbolication files to Sentry   This action allows you to upload symbolication files to Sentry. It's extra useful if you use it to download the latest dSYM files from Apple when you use Bitcode      upload_symbols_to_sentry       Supported platforms  ios    Author  @joshdholtz    Returns  The uploaded dSYM path(s)      1 Example  upload_symbols_to_sentry(\n  auth_token:  ... ,\n  org_slug:  ... ,\n  project_slug:  ... ,\n  dsym_path:  ./App.dSYM.zip \n)    Parameters     Key  Description      api_host  API host url for Sentry    api_key  API key for Sentry    auth_token  Authentication token for Sentry    org_slug  Organization slug for Sentry project    project_slug  Prgoject slug for Sentry    dsym_path  Path to your symbols file. For iOS and Mac provide path to app.dSYM.zip    dsym_paths  Path to an array of your symbols file. For iOS and Mac provide path to app.dSYM.zip", 
            "title": "upload_symbols_to_sentry"
        }, 
        {
            "location": "/actions/#tryouts", 
            "text": "Upload a new build to Tryouts   More information http://tryouts.readthedocs.org/en/latest/releases.html#create-release      tryouts       Supported platforms  ios, android    Author  @alicertel      1 Example  tryouts(\n  api_token:  ... ,\n  app_id:  application-id ,\n  build_file:  test.ipa ,\n)    Parameters     Key  Description      app_id  Tryouts application hash    api_token  API Token for Tryouts Access    build_file  Path to your IPA or APK file. Optional if you use the  gym  or  xcodebuild  action    notes  Release notes    notes_path  Release notes text file path. Overrides the :notes paramether    notify  Notify testers? 0 for no    status  2 to make your release public. Release will be distributed to available testers. 1 to make your release private. Release won't be distributed to testers. This also prevents release from showing up for SDK update", 
            "title": "tryouts"
        }, 
        {
            "location": "/actions/#dotgpg_environment", 
            "text": "Reads in production secrets set in a dotgpg file and puts them in ENV   More information about dotgpg can be found at https://github.com/ConradIrwin/dotgpg      dotgpg_environment       Supported platforms  ios, android, mac    Author  @simonlevy5      1 Example  dotgpg_environment(dotgpg_file: './path/to/gpgfile')    Parameters     Key  Description      dotgpg_file  Path to your gpg file", 
            "title": "dotgpg_environment"
        }, 
        {
            "location": "/actions/#opt_out_usage", 
            "text": "This will stop uploading the information which actions were run   By default, fastlane will share the used actions. No personal information is shard. More information available on https://github.com/fastlane/enhancer\nUsing this action you can opt out      opt_out_usage       Supported platforms  ios, android, mac    Author  @KrauseFx      1 Example  opt_out_usage", 
            "title": "opt_out_usage"
        }, 
        {
            "location": "/actions/#plugins", 
            "text": "Action  Plugin  Description  Usage Number      synx  synx  Organise your Xcode project folder to match your Xcode groups.  6702    ascii_art  ascii_art  Add some fun to your fastlane output.  4119    trainer  trainer  Convert xcodebuild plist files to JUnit reports  2463    get_info_plist_path  versioning  Allows to set/get app version and build number directly to/from Info.plist  1812    pixie  pixie  Show your build status on PIXIE!  1741    increment_build_number_in_plist  versioning  Allows to set/get app version and build number directly to/from Info.plist  1248    xamarin_build  xamarin_build  Build xamarin android\\ios projects  1010    read_changelog  changelog  Automate changes to your project CHANGELOG.md  877    extract_app_icon  polidea  Polidea's fastlane action  864    get_version_number_from_plist  versioning  Allows to set/get app version and build number directly to/from Info.plist  852    get_binary_size  polidea  Polidea's fastlane action  812    ftp  ftp  Simple ftp upload and download for Fastlane  789    extract_app_name  polidea  Polidea's fastlane action  748    extract_version  polidea  Polidea's fastlane action  739    carthage_cache_exist  carthage_cache  A Fastlane plugin that allows to cache Carthage/Build folder in Amazon S3.  730    appicon  appicon  Generate required icon sizes and iconset from a master application icon.  726    polidea_store  polidea  Polidea's fastlane action  693    get_version_name  get_version_name  Get the version name of an Android project.  684    carthage_cache_install  carthage_cache  A Fastlane plugin that allows to cache Carthage/Build folder in Amazon S3.  653    increment_version_code  increment_version_code  Increment the version code of your android project.  593    extract_certificate  xamarin_build  Build xamarin android\\ios projects  548    add_prefix_schema  polidea  Polidea's fastlane action  527    poeditor_export  poeditor_export  Exports translations from POEditor.com  515    xamarin_update_configuration  xamarin_build  Build xamarin android\\ios projects  511    upload_to_onesky  upload_to_onesky  Upload a strings file to OneSky  511    increment_version_number_in_plist  versioning  Allows to set/get app version and build number directly to/from Info.plist  499    release_notes  polidea  Polidea's fastlane action  465    branding  branding  Add some branding to your fastlane output  424    stamp_changelog  changelog  Automate changes to your project CHANGELOG.md  381    automated_test_emulator_run  automated_test_emulator_run  Allows to wrap gradle task or shell command that runs integrated tests that prepare and starts single AVD before test run. After tests are finished, emulator is killed and deleted.  380    xcake  xcake  Create your Xcode projects automatically using a stupid simple DSL.  376    get_version_code  get_version_code  Get the version code of anAndroid project. This action will return the version code of your project according to the one set in your build.gradle file  347    deploy_file_provider  deploy_file_provider  Prepares metadata files with structure ready for AppStore, PlayStore deploy  333    instrumented_tests  instrumented_tests  New action to run instrumented tests for android. This basically creates and boots an emulator before running an gradle commands so that you can run instrumented tests against that emulator. After the gradle command is executed, the avd gets shut down and deleted. This is really helpful on CI services, keeping them clean and always having a fresh avd for testing.  326    remove_provisioning_profile  remove_provisioning_profile  Remove provision profile from your local machine  314    goodify_info_plist  goodify_info_plist  This plugin will update the plist so that the built application can be deployed and managed within BlackBerry's Good Dynamics Control Center for Enterprise Mobility Management.  308    applivery  applivery  Upload new build to Applivery  295    act  act  Applies changes to plists and app icons inside a compiled IPA  273    droidicon  droidicon  Generate required icon sizes and iconset from a master application icon  261    giffy_random_gif_url  giffy  Fastlane plugin for Giffy.com API  259    tunes  tunes  Play music using fastlane, because you can.  214    jira_transition  jira_transition  Apply a JIRA transition to issues mentioned in the changelog  193    commit_android_version_bump  commit_android_version_bump  This Android plugins allow you to commit every modification done in your build.gradle file during the execution of a lane. In fast, it do the same as the commit_version_bump action, but for Android  179    sentry_upload_dsym  sentry  Upload symbols to Sentry  163    unzip  unzip  Extract compressed files in a ZIP  147    version_from_last_tag  version_from_last_tag  Perform a regex on last (latest) git tag and perform a regex to extract a version number such as Release 1.2.3  120    update_provisioning_profile_specifier  update_provisioning_profile_specifier  Update the provisioning profile in the Xcode Project file for a specified target  113    sharethemeal  sharethemeal  ShareTheMeal  109    get_app_store_version_number  versioning  Allows to set/get app version and build number directly to/from Info.plist  105    download_file  download_file  This action downloads a file from an HTTP/HTTPS url (e.g. ZIP file) and puts it in a destination path  102    update_changelog  changelog  Automate changes to your project CHANGELOG.md  100    coreos_deploy  coreos  Deploy docker services to CoreOS hosts  97    facelift  facelift  Deprecated in favor of 'fastlane-plugin-act'  96    carthage_cache_publish  carthage_cache  A Fastlane plugin that allows to cache Carthage/Build folder in Amazon S3.  68    create_jira_version  jira_versions  Manage your JIRA project's releases/versions with this plugin.  65    tpa  tpa  TPA gives you advanced user behaviour analytics, app distribution, crash analytics and more  64    get_build_number_from_plist  versioning  Allows to set/get app version and build number directly to/from Info.plist  61    export_localizations  localization  Export/import app localizations with help of xcodebuild -exportLocalizations/-importLocalizations tool  61    upload_folder_to_s3  upload_folder_to_s3  Upload a folder to S3  57    import_localizations  localization  Export/import app localizations with help of xcodebuild -exportLocalizations/-importLocalizations tool  51    instabug  instabug  Uploads dSYM to Instabug  49    upload_symbols_to_hockey  upload_symbols_to_hockey  Upload dSYM symbolication files to Hockey  46    framer  framer  Create images combining app screenshots with templates to make nice pictures for the App Store  44    release_jira_version  jira_versions  Manage your JIRA project's releases/versions with this plugin.  44    ensure_xcode_build_version  ensure_xcode_build_version  Ensure Xcode Build Version for working with Beta, GM and Release  41    clang_analyzer  clang_analyzer  Runs Clang Static Analyzer(http://clang-analyzer.llvm.org/) and generates report  38    latest_hockeyapp_version_number  latest_hockeyapp_version_number  Easily fetch the most recent HockeyApp version number for your app  37    intentconfirmation  intentconfirmation  Halts the lane invocation, asks user to confirm if he wants to continue, may require password or key.  33    github_status  github_status  Provides the ability to display and act upon GitHub server status as part of your build  31    coreos  coreos  Deploy docker services to CoreOS hosts  27    prepare_build_resources  prepare_build_resources  Prepares certificates and provisioning profiles for building and removes them afterwards.  26    update_xcodeproj  update_xcodeproj  Update Xcode projects  21    check_good_version  check_good_version  Checks the version of the installed Good framework  19    update_project_codesigning  update_project_codesigning  Updates the Xcode 8 Automatic Codesigning Flag  17    rubocop  ruby  Useful fastlane actions for Ruby projects  16    wait_xcrun  wait_xcrun  Wait for Xcode toolchain to come back online after switching Xcode versions.  14    giffy_random_sticker_url  giffy  Fastlane plugin for Giffy.com API  11    ya_tu_sabes  ya_tu_sabes  Ya tu sabes.  10    android_appicon  appicon  Generate required icon sizes and iconset from a master application icon.  10    get_unprovisioned_devices_from_hockey  get_unprovisioned_devices_from_hockey  Retrieves a list of unprovisioned devices from Hockey which can be passed directly into register_devices.  9    certificate_expirydate  certificate_expirydate  Retrieves the expiry date of the given p12 certificate file  9    rspec  ruby  Useful fastlane actions for Ruby projects  6    app_icon  polidea  Polidea's fastlane action  6    shuttle  polidea  Polidea's fastlane action  5    get_version_number_from_git_branch  versioning  Allows to set/get app version and build number directly to/from Info.plist  5    figlet  figlet  Wrapper around figlet which makes large ascii text words  5    no_u  no_u  no u  3    clubmate  clubmate  Print the Club Mate logo in your build output  3    import_provisioning  polidea  Polidea's fastlane action  2    pretty_junit  pretty_junit  Pretty JUnit test results for your Android projects.  2    messagesicon  appicon  Generate required icon sizes and iconset from a master application icon.  2    delete_files  delete_files  Deletes a file, folder or multiple files using shell glob pattern.  1    aws_device_farm  aws_device_farm  Run UI Tests on AWS Devicefarm  1", 
            "title": "Plugins"
        }, 
        {
            "location": "/faqs/", 
            "text": "FAQs\n\n\nI'm getting an SSL error\n\n\nIf your output contains something like\n\n\nSSL_connect returned=1 errno=0 state=SSLv3 read server certificate B: certificate verify failed\n\n\n\n\nthat usually means you are using an outdated version of OpenSSL. Make sure to install the latest one using \nhomebrew\n.\n\n\nbrew update \n brew upgrade openssl\n\n\n\n\nIf you use \nrvm\n, try the following\n\n\nrvm osx-ssl-certs update all\n\n\n\n\nfastlane is slow (to start)\n\n\nIf you experience slow launch times of \nfastlane\n, there are 2 solutions to solve this problem:\n\n\nUninstall unused gems\n\n\n[sudo] gem cleanup\n\n\n\n\nError when running \nfastlane\n with Jenkins\n\n\nThis is usually caused when running Jenkins as its own user. While this is possible, you'll have to take care of creating a temporary Keychain, filling it and then using it when building your application. \n\n\nFor more information about the recommended setup with Jenkins open the \nJenkins Guide\n.\n\n\nCode signing issues\n\n\nCheck out the \ncodesigning.guide\n website for more information on how to properly setup code-signing in your team using \nmatch\n.\n\n\nMultiple targets of the same underlying app\n\n\nIf you have one code base, but multiple branded applications\n\n\nCreate different \n.env\n files for each environment and reference those environment variables in the \nDeliverfile\n, \nFastfile\n, etc. \n\n\nExample: Create a \n.env.app1\n, \n.env.app2\n, and \n.env.app3\n. Define each of these like the following...\n\n\nDLV_FIRST_NAME=Josh\nDLV_LAST_NAME=Holtz\nDLV_PRIM_CATG=Business\nDLV_SCND_CATG=Games\n\n\n\n\nNow your Deliver file should look something like this:\n\n\napp_review_information(\n  first_name: ENV['DLV_FIRST_NAME'],\n  last_name: ENV['DLV_LAST_NAME']\n)\n\nprimary_category ENV['DLV_PRIM_CATG']\nsecondary_category ENV['DLV_SCND_CATG']\n\n\n\n\nNow to run this, all you need to do is specify the environment argument when running \nfastlane\n and it will pull from the \n.env\n file that matches the same name...\nEx: \nfastlane build --env app1\n will use \n.env.app1\n\nEx: \nfastlane build --env app2\n will use \n.env.app2\n\n\nYou can also references these environment variables almost anywhere in \nfastlane\n. \n\n\nYou can even define a lane to perform actions on multiple targets:\n\n\ndesc \nDeploy both versions\n\nlane :deploy_all do\n    sh \nfastlane deploy --env paid\n\n    sh \nfastlane deploy --env free\n\nend\n\n\n\n\nMore on the \n.env\n file can be found \nhere\n.\n\n\nDisable colored output\n\n\nSet the \nFASTLANE_DISABLE_COLORS\n environment variable to disable ANSI colors (e.g. for CI machines)\n\n\nexport FASTLANE_DISABLE_COLORS=1\n\n\n\n\nEnable \nbash\n/\nzsh\n tab completion for fastlane lane names\n\n\nfastlane enable_auto_complete\n\n\n\n\nFollow the on screen prompt to add a line to your \nbash\n/\nzsh\n profile.\n\n\n\"User interaction is not allowed\" when using \nfastlane\n via SSH\n\n\nThis error can occur when you run \nfastlane\n via SSH. To fix it check out \nthis reply on StackOverflow\n.", 
            "title": "FAQs"
        }, 
        {
            "location": "/faqs/#faqs", 
            "text": "", 
            "title": "FAQs"
        }, 
        {
            "location": "/faqs/#im-getting-an-ssl-error", 
            "text": "If your output contains something like  SSL_connect returned=1 errno=0 state=SSLv3 read server certificate B: certificate verify failed  that usually means you are using an outdated version of OpenSSL. Make sure to install the latest one using  homebrew .  brew update   brew upgrade openssl  If you use  rvm , try the following  rvm osx-ssl-certs update all", 
            "title": "I'm getting an SSL error"
        }, 
        {
            "location": "/faqs/#fastlane-is-slow-to-start", 
            "text": "If you experience slow launch times of  fastlane , there are 2 solutions to solve this problem:", 
            "title": "fastlane is slow (to start)"
        }, 
        {
            "location": "/faqs/#uninstall-unused-gems", 
            "text": "[sudo] gem cleanup", 
            "title": "Uninstall unused gems"
        }, 
        {
            "location": "/faqs/#error-when-running-fastlane-with-jenkins", 
            "text": "This is usually caused when running Jenkins as its own user. While this is possible, you'll have to take care of creating a temporary Keychain, filling it and then using it when building your application.   For more information about the recommended setup with Jenkins open the  Jenkins Guide .", 
            "title": "Error when running fastlane with Jenkins"
        }, 
        {
            "location": "/faqs/#code-signing-issues", 
            "text": "Check out the  codesigning.guide  website for more information on how to properly setup code-signing in your team using  match .", 
            "title": "Code signing issues"
        }, 
        {
            "location": "/faqs/#multiple-targets-of-the-same-underlying-app", 
            "text": "If you have one code base, but multiple branded applications  Create different  .env  files for each environment and reference those environment variables in the  Deliverfile ,  Fastfile , etc.   Example: Create a  .env.app1 ,  .env.app2 , and  .env.app3 . Define each of these like the following...  DLV_FIRST_NAME=Josh\nDLV_LAST_NAME=Holtz\nDLV_PRIM_CATG=Business\nDLV_SCND_CATG=Games  Now your Deliver file should look something like this:  app_review_information(\n  first_name: ENV['DLV_FIRST_NAME'],\n  last_name: ENV['DLV_LAST_NAME']\n)\n\nprimary_category ENV['DLV_PRIM_CATG']\nsecondary_category ENV['DLV_SCND_CATG']  Now to run this, all you need to do is specify the environment argument when running  fastlane  and it will pull from the  .env  file that matches the same name...\nEx:  fastlane build --env app1  will use  .env.app1 \nEx:  fastlane build --env app2  will use  .env.app2  You can also references these environment variables almost anywhere in  fastlane .   You can even define a lane to perform actions on multiple targets:  desc  Deploy both versions \nlane :deploy_all do\n    sh  fastlane deploy --env paid \n    sh  fastlane deploy --env free \nend  More on the  .env  file can be found  here .", 
            "title": "Multiple targets of the same underlying app"
        }, 
        {
            "location": "/faqs/#disable-colored-output", 
            "text": "Set the  FASTLANE_DISABLE_COLORS  environment variable to disable ANSI colors (e.g. for CI machines)  export FASTLANE_DISABLE_COLORS=1", 
            "title": "Disable colored output"
        }, 
        {
            "location": "/faqs/#enable-bashzsh-tab-completion-for-fastlane-lane-names", 
            "text": "fastlane enable_auto_complete  Follow the on screen prompt to add a line to your  bash / zsh  profile.", 
            "title": "Enable bash/zsh tab completion for fastlane lane names"
        }, 
        {
            "location": "/faqs/#user-interaction-is-not-allowed-when-using-fastlane-via-ssh", 
            "text": "This error can occur when you run  fastlane  via SSH. To fix it check out  this reply on StackOverflow .", 
            "title": "\"User interaction is not allowed\" when using fastlane via SSH"
        }, 
        {
            "location": "/codesigning/getting-started/", 
            "text": "Codesigning concepts\n\n\nIf you are just starting a new project, it's important to think about how you want to handle code signing. This guide will help you choose the best approach for you.\n\n\nFor existing projects it might make sense to switch from a manual process to the \nmatch approach\n to make it easier for new team-members to onboard.\n\n\nIf you are new to code signing, check out the \nWWDC session\n that describes the fundamentals of code signing in Xcode.\n\n\n\n\nUsing match\n\n\nUsing cert and sigh\n\n\nUsing Xcode's code signing feature\n\n\nManually\n\n\n\n\nUsing \nmatch\n\n\nThe concept of \nmatch\n is described in the \ncodesigning guide\n. \n\n\nWith \nmatch\n you store your private keys and certificates in a git repo to sync them across machines. This makes it easy to onboard new team-members and set up new Mac machines. This approach \nis secure\n and uses technology you already use.\n\n\nGetting started with \nmatch\n requires you to revoke your existing certificates.\n\n\nMake sure to follow \nxcode-project.md\n to set up your project properly.\n\n\nUsing \ncert\n and \nsigh\n\n\nIf you don't want to revoke your existing certificates, but still want an automated setup, \ncert\n and \nsigh\n are for you. \n\n\n\n\ncert\n will make sure you have a valid certificate and its private key installed on the local machine\n\n\nsigh\n will make sure you have a valid provisioning profile installed locally, that matches the installed certificate\n\n\n\n\nAdd the following lines to your \nFastfile\n\n\nlane :beta do\n  cert\n  sigh\n  gym\nend\n\n\n\n\nMake sure to follow \nxcode-project.md\n to set up your project properly.\n\n\nUsing Xcode's code signing feature\n\n\nOccasionally the \nAutomatic\n setting as the provisioning profile doesn't work reliably as it will just select the most recently updated provisioning profile, no matter if the certificate is installed. \n\n\nThat's why it is recommended to specify a specific provisioning profile somehow:\n\n\nXcode 7 and lower\n\n\nYou should avoid clicking the \nFix Issue\n button (There is an \nXcode plugin\n that disables the button), as it sometimes revokes existing certificates, and with it the provisioning profiles.\n\n\nUnfortunately you can't specify the name of the provisioning profile in Xcode 7. Instead you can specify the UUID of the profile, which changes every time the profile gets re-generated (e.g. when you add a new device).\n\n\nTo work around this issue, check out \nxcode-project.md\n on how to pass a provisioning profile to Xcode when building your app.\n\n\nXcode 8 and up\n\n\nApple improved code signing a lot with the release of Xcode 8, the following has changed:\n\n\n\n\nNo more \nFix Issue\n button, instead all code signing processes run in the background and show the log right in Xcode\n\n\nYou can now specify the provisioning profile by name, instead of the UUID (Check out \nxcode-project.md\n for more information)\n\n\nImproved error messages when something goes wrong. If you run into code signing errors you should always try building and signing with Xcode to get more detailed error information. (Check out \ntroubleshooting.md\n for more information)\n\n\n\n\nManually\n\n\nYou can always manually create and manage your certificates and provisioning profiles using the Apple Developer Portal. Make sure to store the private key (\n.p12\n) of your certificates in a safe place, as they can't be restored if you lose them. \n\n\nYou can always download the certificate (\n.cer\n) and provisioning profile (\n.mobileprovision\n) from the Apple Developer Portal.\n\n\nWhere to go from here\n\n\n\n\nSetting up your Xcode Project\n\n\nTroubleshooting code signing errors\n\n\nCommon Issues\n\n\nUpgrading to Xcode 8", 
            "title": "Getting Started"
        }, 
        {
            "location": "/codesigning/getting-started/#codesigning-concepts", 
            "text": "If you are just starting a new project, it's important to think about how you want to handle code signing. This guide will help you choose the best approach for you.  For existing projects it might make sense to switch from a manual process to the  match approach  to make it easier for new team-members to onboard.  If you are new to code signing, check out the  WWDC session  that describes the fundamentals of code signing in Xcode.   Using match  Using cert and sigh  Using Xcode's code signing feature  Manually", 
            "title": "Codesigning concepts"
        }, 
        {
            "location": "/codesigning/getting-started/#using-match", 
            "text": "The concept of  match  is described in the  codesigning guide .   With  match  you store your private keys and certificates in a git repo to sync them across machines. This makes it easy to onboard new team-members and set up new Mac machines. This approach  is secure  and uses technology you already use.  Getting started with  match  requires you to revoke your existing certificates.  Make sure to follow  xcode-project.md  to set up your project properly.", 
            "title": "Using match"
        }, 
        {
            "location": "/codesigning/getting-started/#using-cert-and-sigh", 
            "text": "If you don't want to revoke your existing certificates, but still want an automated setup,  cert  and  sigh  are for you.    cert  will make sure you have a valid certificate and its private key installed on the local machine  sigh  will make sure you have a valid provisioning profile installed locally, that matches the installed certificate   Add the following lines to your  Fastfile  lane :beta do\n  cert\n  sigh\n  gym\nend  Make sure to follow  xcode-project.md  to set up your project properly.", 
            "title": "Using cert and sigh"
        }, 
        {
            "location": "/codesigning/getting-started/#using-xcodes-code-signing-feature", 
            "text": "Occasionally the  Automatic  setting as the provisioning profile doesn't work reliably as it will just select the most recently updated provisioning profile, no matter if the certificate is installed.   That's why it is recommended to specify a specific provisioning profile somehow:", 
            "title": "Using Xcode's code signing feature"
        }, 
        {
            "location": "/codesigning/getting-started/#xcode-7-and-lower", 
            "text": "You should avoid clicking the  Fix Issue  button (There is an  Xcode plugin  that disables the button), as it sometimes revokes existing certificates, and with it the provisioning profiles.  Unfortunately you can't specify the name of the provisioning profile in Xcode 7. Instead you can specify the UUID of the profile, which changes every time the profile gets re-generated (e.g. when you add a new device).  To work around this issue, check out  xcode-project.md  on how to pass a provisioning profile to Xcode when building your app.", 
            "title": "Xcode 7 and lower"
        }, 
        {
            "location": "/codesigning/getting-started/#xcode-8-and-up", 
            "text": "Apple improved code signing a lot with the release of Xcode 8, the following has changed:   No more  Fix Issue  button, instead all code signing processes run in the background and show the log right in Xcode  You can now specify the provisioning profile by name, instead of the UUID (Check out  xcode-project.md  for more information)  Improved error messages when something goes wrong. If you run into code signing errors you should always try building and signing with Xcode to get more detailed error information. (Check out  troubleshooting.md  for more information)", 
            "title": "Xcode 8 and up"
        }, 
        {
            "location": "/codesigning/getting-started/#manually", 
            "text": "You can always manually create and manage your certificates and provisioning profiles using the Apple Developer Portal. Make sure to store the private key ( .p12 ) of your certificates in a safe place, as they can't be restored if you lose them.   You can always download the certificate ( .cer ) and provisioning profile ( .mobileprovision ) from the Apple Developer Portal.", 
            "title": "Manually"
        }, 
        {
            "location": "/codesigning/getting-started/#where-to-go-from-here", 
            "text": "Setting up your Xcode Project  Troubleshooting code signing errors  Common Issues  Upgrading to Xcode 8", 
            "title": "Where to go from here"
        }, 
        {
            "location": "/codesigning/xcode-project/", 
            "text": "Setting up your Xcode Project\n\n\nXcode 8 and up\n\n\nWith Xcode 8 you can set a provisioning profile name for each of your targets instead of a provisioning profile UUID. By doing so, Xcode automatically selects the latest provisioning profile matching its name. This way you don't have to update your Xcode project, every time you re-generate your provisioning profile (e.g. when adding a new device)\n\n\nYou can now specify which provisioning profile to use in the \nGeneral\n tab after disabling \nAutomatically manage signing\n.\n\n\n\n\nAlternatively you can also specify the provisioning profile in the \nBuild Settings\n tab.\n\n\n\n\nIf your provisioning profile is not listed in the drop down, there might be a few reasons:\n\n\n\n\nIt doesn't match the bundle identifier of the target\n\n\nThe associated certificate or its private key is not installed on the local machine\n\n\nThe provisioning profile is not installed on the local machine\n\n\n\n\nCheck out \ntroubleshooting.md\n for more information on how to debug signing issues.\n\n\nBuild settings\n\n\nPreviously you could specify the UUID of the provisioning profile using the \nPROVISIONING_PROFILE\n Xcode settings property, with Xcode 8 you specify it using the \nPROVISIONING_PROFILE_SPECIFIER\n instead:\n\n\nDEVELOPMENT_TEAM = N8XAAASEU2;\nPROVISIONING_PROFILE_SPECIFIER = \nmatch AppStore me.themoji.app.release\n;\n\n\n\n\nIt is recommended to select the provisioning profile in the \nGeneral\n tab in your Xcode project, so Xcode will automatically set the values mentioned above for you.\n\n\nSet using environment variable\n\n\nYou could pass the profile specifier via environment variables too (See Xcode 7 approach below), however in most cases it's enough to define it statically in your project, per target, since usually neither your Team ID, nor the provisioning profile change.\n\n\nIf you're using \nmatch\n the following environment variables are being set for you:\n\n\n+---------------------+------------------------------------------------+--------------------------------------+\n|                                       Installed Provisioning Profile                                        |\n+---------------------+------------------------------------------------+--------------------------------------+\n| Parameter           | Environment Variable                           | Value                                |\n+---------------------+------------------------------------------------+--------------------------------------+\n| App Identifier      |                                                | me.themoji.release                   |\n| Type                |                                                | appstore                             |\n| Profile UUID        | sigh_me.themoji.beta_appstore                  | 22a19b3a-7cf6-4997-95f2-9cbb4d33fe7e |\n| Profile Name        | sigh_me.themoji.beta_appstore_profile-name     | match AppStore me.themoji.release    |\n| Development Team ID | sigh_me.themoji.beta_appstore_team-id          | N8XAAASEU2                           |\n+---------------------+------------------------------------------------+--------------------------------------+\n\n\n\n\nCheck out the Xcode 7 section on how to update build settings using environment variables.\n\n\nXcode 7 and lower\n\n\nNote\n: This approach is deprecated with Xcode 8\n\n\nIf you use \nAutomatic\n value for your provisioning profile, Xcode sometimes selects the wrong profile, resulting in code signing errors at a later point.\n\n\nInstead it is recommended to specify a specific provisioning profile, which can only be done using the UUID (in Xcode 7).\n\n\nSince it is not recommended to update the project file, every time you update your provisioning profile, you can pass the UUID via environment variables.\n\n\nTo do so, open your target settings, open the dropdown for \nProvisioning Profile\n and select \nOther\n:\n\n\n\n\nUsing the \n$(...)\n notation, Xcode will use the provisioning profile matching the UUID, and fallback to \nAutomatic\n if it's not provided. \n\n\nIf you use \nfastlane\n you don't have to do any extra work, since the environment variable for the latest profile are automatically set by \nmatch\n\n\nlane :beta do\n  match(type: \nadhoc\n)\n  gym\nend\n\n\n\n\nYou can also manually set the environment variable using\n\n\nlane :beta do\n  ENV[\nPROVISIONING_PROFILE_TARGET1\n] = \nb01c39c9-1b4a-412e-9ae2-3087ee9ea9d3\n\n  gym\nend", 
            "title": "Xcode Project"
        }, 
        {
            "location": "/codesigning/xcode-project/#setting-up-your-xcode-project", 
            "text": "", 
            "title": "Setting up your Xcode Project"
        }, 
        {
            "location": "/codesigning/xcode-project/#xcode-8-and-up", 
            "text": "With Xcode 8 you can set a provisioning profile name for each of your targets instead of a provisioning profile UUID. By doing so, Xcode automatically selects the latest provisioning profile matching its name. This way you don't have to update your Xcode project, every time you re-generate your provisioning profile (e.g. when adding a new device)  You can now specify which provisioning profile to use in the  General  tab after disabling  Automatically manage signing .   Alternatively you can also specify the provisioning profile in the  Build Settings  tab.   If your provisioning profile is not listed in the drop down, there might be a few reasons:   It doesn't match the bundle identifier of the target  The associated certificate or its private key is not installed on the local machine  The provisioning profile is not installed on the local machine   Check out  troubleshooting.md  for more information on how to debug signing issues.", 
            "title": "Xcode 8 and up"
        }, 
        {
            "location": "/codesigning/xcode-project/#build-settings", 
            "text": "Previously you could specify the UUID of the provisioning profile using the  PROVISIONING_PROFILE  Xcode settings property, with Xcode 8 you specify it using the  PROVISIONING_PROFILE_SPECIFIER  instead:  DEVELOPMENT_TEAM = N8XAAASEU2;\nPROVISIONING_PROFILE_SPECIFIER =  match AppStore me.themoji.app.release ;  It is recommended to select the provisioning profile in the  General  tab in your Xcode project, so Xcode will automatically set the values mentioned above for you.", 
            "title": "Build settings"
        }, 
        {
            "location": "/codesigning/xcode-project/#set-using-environment-variable", 
            "text": "You could pass the profile specifier via environment variables too (See Xcode 7 approach below), however in most cases it's enough to define it statically in your project, per target, since usually neither your Team ID, nor the provisioning profile change.  If you're using  match  the following environment variables are being set for you:  +---------------------+------------------------------------------------+--------------------------------------+\n|                                       Installed Provisioning Profile                                        |\n+---------------------+------------------------------------------------+--------------------------------------+\n| Parameter           | Environment Variable                           | Value                                |\n+---------------------+------------------------------------------------+--------------------------------------+\n| App Identifier      |                                                | me.themoji.release                   |\n| Type                |                                                | appstore                             |\n| Profile UUID        | sigh_me.themoji.beta_appstore                  | 22a19b3a-7cf6-4997-95f2-9cbb4d33fe7e |\n| Profile Name        | sigh_me.themoji.beta_appstore_profile-name     | match AppStore me.themoji.release    |\n| Development Team ID | sigh_me.themoji.beta_appstore_team-id          | N8XAAASEU2                           |\n+---------------------+------------------------------------------------+--------------------------------------+  Check out the Xcode 7 section on how to update build settings using environment variables.", 
            "title": "Set using environment variable"
        }, 
        {
            "location": "/codesigning/xcode-project/#xcode-7-and-lower", 
            "text": "Note : This approach is deprecated with Xcode 8  If you use  Automatic  value for your provisioning profile, Xcode sometimes selects the wrong profile, resulting in code signing errors at a later point.  Instead it is recommended to specify a specific provisioning profile, which can only be done using the UUID (in Xcode 7).  Since it is not recommended to update the project file, every time you update your provisioning profile, you can pass the UUID via environment variables.  To do so, open your target settings, open the dropdown for  Provisioning Profile  and select  Other :   Using the  $(...)  notation, Xcode will use the provisioning profile matching the UUID, and fallback to  Automatic  if it's not provided.   If you use  fastlane  you don't have to do any extra work, since the environment variable for the latest profile are automatically set by  match  lane :beta do\n  match(type:  adhoc )\n  gym\nend  You can also manually set the environment variable using  lane :beta do\n  ENV[ PROVISIONING_PROFILE_TARGET1 ] =  b01c39c9-1b4a-412e-9ae2-3087ee9ea9d3 \n  gym\nend", 
            "title": "Xcode 7 and lower"
        }, 
        {
            "location": "/codesigning/troubleshooting/", 
            "text": "Debugging codesigning issues\n\n\nThis guide will help you resolve the most common code signing errors.\n\n\nError message\n\n\nMake sure to find the exact error message in your build output. Many times the error message actually tells you how to resolve the issue. \n\n\nTo get even more details, try archiving using Xcode 8. \n\n\nDifferent machine\n\n\nDoes code signing work on a different Mac, but not on yours? If so, chances are high you don't have the latest private key, the certificate or the provisioning profile. Also follow the \nKeychain\n part of this document to make sure you don't have any expired certificates installed.\n\n\nXcode project\n\n\nMake sure to follow \nxcode-project.md\n on how to properly set up your project.\n\n\nA check list on what you should verify on your Xcode project\n\n\n\n\nMake sure to have consistent code signing settings across your targets\n\n\nDon't set any code signing settings on your project level, just on the target level\n\n\nMake sure the bundle identifier matches the one of your provisioning profile\n\n\nMake sure the code signing identity is set to \niOS Distribution\n for \nRelease\n builds\n\n\nMake sure to set a provisioning profile for all your targets, e.g. Watch, Today widget, ...\n\n\nCheck your working copy in git - did you make any changes by mistake?\n\n\n\n\nDeveloper Portal\n\n\nIf a certificate gets revoked, all connected provisioning profiles get invalidated. This however might not immediately show up in your local keychain.\n\n\n\n\nOpen the \nDeveloper Portal\n\n\nVerify your certificates are valid, and didn't expire or get revoked\n\n\nSwitch to the Provisioning Profiles and make sure the profiles you want to use are all still valid\n\n\nIf your profile is invalid or expired, you can easily fix it:\n\n\nIf you're using \nmatch\n, run \nmatch\n with \nforce\n enabled\n\n\nIf you're using \nsigh\n, run \nsigh\n with \nforce\n enabled\n\n\nIf you're doing manual code signing, edit the provisioning profile, and click on \nGenerate\n on the bottom of the screen. Make sure to select the correct certificate, then download and open the new provisioning profile\n\n\n\n\n\n\nIf your profile is valid, but you still have issues make sure\n\n\nthat the certificate matches the certificate you have installed locally. You can view the used certificate by editing the profile (Don't click \nGenerate\n, unless you want to re-generate the provisioning profile)\n\n\nthat all devices you need are included (Development and Ad-Hoc only)\n\n\nthat you are actually looking at the correct provisioning profile, that matches the bundle identifier of your app. You might have multiple provisioning profiles for the same app / certificate combination. By default Xcode will use the last modified one.\n\n\n\n\n\n\n\n\nKeychain\n\n\n\n\nRun \nsecurity find-identity -v -p codesigning\n to get a list of locally installed code signing identities. Does yours show up?\n\n\nOpen the \nKeychain Access\n app, switch to \nCertificates\n and find your \niOS Developer\n or \niOS Distribution\n entry and unfold the entry to verify the private key is locally installed: \n\n\n  \n\n\n\n\nMake sure to have deleted all expired WWDR certificates, more information \nhere\n. There might be 2 expired WWDR certificates, one in the \nlogin\n, and one in the \nsystem\n keychain\n\n\n\n\nHave you tried turning it off and on again?\n\n\nAs funny as it sounds, sometimes restarting your Mac helps.\n\n\nfastlane\n\n\nRun \nfastlane\n in verbose mode to get even more debug information:\n\n\nfastlane [lane] --verbose\n\n\n\n\nCommon Issues\n\n\nCheck out \ncommon-issues.md\n for the most common code signing issues and how you can solve them.", 
            "title": "Troubleshooting"
        }, 
        {
            "location": "/codesigning/troubleshooting/#debugging-codesigning-issues", 
            "text": "This guide will help you resolve the most common code signing errors.", 
            "title": "Debugging codesigning issues"
        }, 
        {
            "location": "/codesigning/troubleshooting/#error-message", 
            "text": "Make sure to find the exact error message in your build output. Many times the error message actually tells you how to resolve the issue.   To get even more details, try archiving using Xcode 8.", 
            "title": "Error message"
        }, 
        {
            "location": "/codesigning/troubleshooting/#different-machine", 
            "text": "Does code signing work on a different Mac, but not on yours? If so, chances are high you don't have the latest private key, the certificate or the provisioning profile. Also follow the  Keychain  part of this document to make sure you don't have any expired certificates installed.", 
            "title": "Different machine"
        }, 
        {
            "location": "/codesigning/troubleshooting/#xcode-project", 
            "text": "Make sure to follow  xcode-project.md  on how to properly set up your project.  A check list on what you should verify on your Xcode project   Make sure to have consistent code signing settings across your targets  Don't set any code signing settings on your project level, just on the target level  Make sure the bundle identifier matches the one of your provisioning profile  Make sure the code signing identity is set to  iOS Distribution  for  Release  builds  Make sure to set a provisioning profile for all your targets, e.g. Watch, Today widget, ...  Check your working copy in git - did you make any changes by mistake?", 
            "title": "Xcode project"
        }, 
        {
            "location": "/codesigning/troubleshooting/#developer-portal", 
            "text": "If a certificate gets revoked, all connected provisioning profiles get invalidated. This however might not immediately show up in your local keychain.   Open the  Developer Portal  Verify your certificates are valid, and didn't expire or get revoked  Switch to the Provisioning Profiles and make sure the profiles you want to use are all still valid  If your profile is invalid or expired, you can easily fix it:  If you're using  match , run  match  with  force  enabled  If you're using  sigh , run  sigh  with  force  enabled  If you're doing manual code signing, edit the provisioning profile, and click on  Generate  on the bottom of the screen. Make sure to select the correct certificate, then download and open the new provisioning profile    If your profile is valid, but you still have issues make sure  that the certificate matches the certificate you have installed locally. You can view the used certificate by editing the profile (Don't click  Generate , unless you want to re-generate the provisioning profile)  that all devices you need are included (Development and Ad-Hoc only)  that you are actually looking at the correct provisioning profile, that matches the bundle identifier of your app. You might have multiple provisioning profiles for the same app / certificate combination. By default Xcode will use the last modified one.", 
            "title": "Developer Portal"
        }, 
        {
            "location": "/codesigning/troubleshooting/#keychain", 
            "text": "Run  security find-identity -v -p codesigning  to get a list of locally installed code signing identities. Does yours show up?  Open the  Keychain Access  app, switch to  Certificates  and find your  iOS Developer  or  iOS Distribution  entry and unfold the entry to verify the private key is locally installed:  \n     Make sure to have deleted all expired WWDR certificates, more information  here . There might be 2 expired WWDR certificates, one in the  login , and one in the  system  keychain", 
            "title": "Keychain"
        }, 
        {
            "location": "/codesigning/troubleshooting/#have-you-tried-turning-it-off-and-on-again", 
            "text": "As funny as it sounds, sometimes restarting your Mac helps.", 
            "title": "Have you tried turning it off and on again?"
        }, 
        {
            "location": "/codesigning/troubleshooting/#fastlane", 
            "text": "Run  fastlane  in verbose mode to get even more debug information:  fastlane [lane] --verbose", 
            "title": "fastlane"
        }, 
        {
            "location": "/codesigning/troubleshooting/#common-issues", 
            "text": "Check out  common-issues.md  for the most common code signing issues and how you can solve them.", 
            "title": "Common Issues"
        }, 
        {
            "location": "/codesigning/common-issues/", 
            "text": "Common code signing issues\n\n\nXcode errors\n\n\n\n\nCode Sign error: No matching provisioning profiles found: No provisioning profiles with a valid signing identity (i.e. certificate and private key pair) matching the bundle identifier \"X\" were found.\n\n\n\n\nThe provisioning profile for the given app identifier \"X\" is not available on the local machine. Make sure you have a valid provisioning profile for the correct distribution type (App Store, Development or Ad Hoc) on the Apple Developer Portal, download and install it, and select the profile in the Xcode settings (See \nxcode-project.md\n).\n\n\nYou might have the provisioning profile installed locally, but miss the private key or certificate for it. \n\n\n\n\nNo matching codesigning identity found: No codesigning identities (i.e. certificate and private key pairs) matching \"iPhone Distribution: X\" were found\n\n\n\n\nThe code signing identity you specified in the Xcode project can't be found in your local keychain. Make sure to transfer the certificate and private key from another Mac (or wherever you store the private key), or to update the project file to use the correct code signing identity.\n\n\n\n\nError Domain=IDEDistributionErrorDomain Code=1 \"The operation couldn\u2019t be completed. (IDEDistributionErrorDomain error 1.)\"\n\n\n\n\nThis error can have a lot of reasons, some things you should try:\n\n\n\n\nVerify your Keychain is valid and you don't have an expired WWDR certificate using \nthis guide\n\n\nVerify both your certificate and provisioning profile are valid in both your Keychain and on the Apple Developer Portal (Check out \ntroubleshooting.md\n for more information)\n\n\nIf you're using \ngym\n, try using the \nuse_legacy_build_api\n flag to fallback to the Xcode 6 build API\n\n\nFollow the other steps of \ntroubleshooting.md\n\n\n\n\n\n\nProvisioning profile does not match bundle identifier: The provisioning profile specified in your build settings (\"X\") has an AppID of \"Y\" which does not match your bundle identifier \"Z\"\n\n\n\n\nYour project defines a provisioning profile that doesn't match the bundle identifier of your app. There is mismatch between the bundle identifiers, this might happen if you specify the wrong provisioning profile in your target.\n\n\n\n\nYour build settings specify a provisioning profile with the UUID \"X\", however, no such provisioning profile was found.\n\n\n\n\nYour project defines a provisioning profile which doesn't exist on your local machine. Check out \nxcode-project.md\n for more information how to properly specify a provisioning profile to avoid hard coded UUIDs in your project.\n\n\n\n\nCodeSign Error: code signing is required for product type 'Application'...\n\n\n\n\nMake sure to have a valid code signing identity defined in your project targets. This might happen when you select \nDon't Code Sign\n as Code Signing Identity.\n\n\nfastlane errors\n\n\n\n\nCould not find a matching code signing identity for type 'X'\n\n\n\n\nThere are no certificates available on the Apple Developer Portal. This could either mean someone revoked a certificate, or you don't have access to it.", 
            "title": "Common Issues"
        }, 
        {
            "location": "/codesigning/common-issues/#common-code-signing-issues", 
            "text": "", 
            "title": "Common code signing issues"
        }, 
        {
            "location": "/codesigning/common-issues/#xcode-errors", 
            "text": "Code Sign error: No matching provisioning profiles found: No provisioning profiles with a valid signing identity (i.e. certificate and private key pair) matching the bundle identifier \"X\" were found.   The provisioning profile for the given app identifier \"X\" is not available on the local machine. Make sure you have a valid provisioning profile for the correct distribution type (App Store, Development or Ad Hoc) on the Apple Developer Portal, download and install it, and select the profile in the Xcode settings (See  xcode-project.md ).  You might have the provisioning profile installed locally, but miss the private key or certificate for it.    No matching codesigning identity found: No codesigning identities (i.e. certificate and private key pairs) matching \"iPhone Distribution: X\" were found   The code signing identity you specified in the Xcode project can't be found in your local keychain. Make sure to transfer the certificate and private key from another Mac (or wherever you store the private key), or to update the project file to use the correct code signing identity.   Error Domain=IDEDistributionErrorDomain Code=1 \"The operation couldn\u2019t be completed. (IDEDistributionErrorDomain error 1.)\"   This error can have a lot of reasons, some things you should try:   Verify your Keychain is valid and you don't have an expired WWDR certificate using  this guide  Verify both your certificate and provisioning profile are valid in both your Keychain and on the Apple Developer Portal (Check out  troubleshooting.md  for more information)  If you're using  gym , try using the  use_legacy_build_api  flag to fallback to the Xcode 6 build API  Follow the other steps of  troubleshooting.md    Provisioning profile does not match bundle identifier: The provisioning profile specified in your build settings (\"X\") has an AppID of \"Y\" which does not match your bundle identifier \"Z\"   Your project defines a provisioning profile that doesn't match the bundle identifier of your app. There is mismatch between the bundle identifiers, this might happen if you specify the wrong provisioning profile in your target.   Your build settings specify a provisioning profile with the UUID \"X\", however, no such provisioning profile was found.   Your project defines a provisioning profile which doesn't exist on your local machine. Check out  xcode-project.md  for more information how to properly specify a provisioning profile to avoid hard coded UUIDs in your project.   CodeSign Error: code signing is required for product type 'Application'...   Make sure to have a valid code signing identity defined in your project targets. This might happen when you select  Don't Code Sign  as Code Signing Identity.", 
            "title": "Xcode errors"
        }, 
        {
            "location": "/codesigning/common-issues/#fastlane-errors", 
            "text": "Could not find a matching code signing identity for type 'X'   There are no certificates available on the Apple Developer Portal. This could either mean someone revoked a certificate, or you don't have access to it.", 
            "title": "fastlane errors"
        }, 
        {
            "location": "/plugins/available-plugins/", 
            "text": "Available Plugins\n\n\nTo get an up to date list of all available plugins run\n\n\nfastlane search_plugins\n\n\n\n\nTo search for a specific plugin\n\n\nfastlane search_plugins [search_query]\n\n\n\n\nYou can find more information about how to start using plugins in \nPlugins.md\n.\n\n\nList of plugins\n\n\n\n\n\n\n\n\nPlugin Name\n\n\nDescription\n\n\nDownloads\n\n\n\n\n\n\n\n\n\n\n\n\nchangelog\n\n\nAutomate changes to your project CHANGELOG.md\n\n\n1711\n\n\n\n\n\n\n\n\npolidea\n\n\nPolidea's fastlane action\n\n\n1573\n\n\n\n\n\n\n\n\nautomated_test_emulator_run\n\n\nAllows to wrap gradle task or shell command that runs integrated tests that prepare and starts single AVD before test run. After tests are finished, emulator is killed and deleted.\n\n\n1239\n\n\n\n\n\n\n\n\nxcake\n\n\nCreate your Xcode projects automatically using a stupid simple DSL.\n\n\n1117\n\n\n\n\n\n\n\n\ninstrumented_tests\n\n\nNew action to run instrumented tests for android. This basically creates and boots an emulator before running an gradle commands so that you can run instrumented tests against that emulator. After the gradle command is executed, the avd gets shut down and deleted. This is really helpful on CI services, keeping them clean and always having a fresh avd for testing.\n\n\n1072\n\n\n\n\n\n\n\n\nbranding\n\n\nAdd some branding to your fastlane output\n\n\n1019\n\n\n\n\n\n\n\n\nruby\n\n\nUseful fastlane actions for Ruby projects\n\n\n999\n\n\n\n\n\n\n\n\nversioning\n\n\nAllows to work set/get app version directly to/from Info.plist\n\n\n996\n\n\n\n\n\n\n\n\nincrement_version_code\n\n\nIncrement the version code of your android project.\n\n\n856\n\n\n\n\n\n\n\n\ntpa\n\n\nTPA gives you advanced user behaviour analytics, app distribution, crash analytics and more\n\n\n850\n\n\n\n\n\n\n\n\nxamarin_build\n\n\nBuild xamarin android\\ios projects\n\n\n819\n\n\n\n\n\n\n\n\nappicon\n\n\nGenerate required icon sizes and iconset from a master application icon.\n\n\n765\n\n\n\n\n\n\n\n\napplivery\n\n\nUpload new build to Applivery\n\n\n751\n\n\n\n\n\n\n\n\ncarthage_cache\n\n\nA Fastlane plugin that allows to cache Carthage/Build folder in Amazon S3.\n\n\n742\n\n\n\n\n\n\n\n\ncommit_android_version_bump\n\n\nThis Android plugins allow you to commit every modification done in your build.gradle file during the execution of a lane. In fast, it do the same as the commit_version_bump action, but for Android\n\n\n695\n\n\n\n\n\n\n\n\ntrainer\n\n\nConvert xcodebuild plist files to JUnit reports\n\n\n689\n\n\n\n\n\n\n\n\nupload_folder_to_s3\n\n\nUpload a folder to S3\n\n\n653\n\n\n\n\n\n\n\n\ngoodify_info_plist\n\n\nThis plugin will update the plist so that the built application can be deployed and managed within BlackBerry's Good Dynamics Control Center for Enterprise Mobility Management.\n\n\n647\n\n\n\n\n\n\n\n\nsynx\n\n\nOrganise your Xcode project folder to match your Xcode groups.\n\n\n620\n\n\n\n\n\n\n\n\ninstabug\n\n\nUploads dSYM to Instabug\n\n\n613\n\n\n\n\n\n\n\n\nno_u\n\n\nno u\n\n\n585\n\n\n\n\n\n\n\n\nget_version_code\n\n\nGet the version code of anAndroid project. This action will return the version code of your project according to the one set in your build.gradle file\n\n\n561\n\n\n\n\n\n\n\n\napprepo\n\n\nexperimental fastlane plugin based on https://github.com/suculent/apprepo SFTP uploader\n\n\n558\n\n\n\n\n\n\n\n\nemoji_fetcher\n\n\nFetch the emoji font file and copy it to a local directory\n\n\n548\n\n\n\n\n\n\n\n\nupload_symbols_to_hockey\n\n\nUpload dSYM symbolication files to Hockey\n\n\n547\n\n\n\n\n\n\n\n\nclubmate\n\n\nPrint the Club Mate logo in your build output\n\n\n527\n\n\n\n\n\n\n\n\nftp\n\n\nSimple ftp upload and download for Fastlane\n\n\n525\n\n\n\n\n\n\n\n\ngithub_status\n\n\nProvides the ability to display and act upon GitHub server status as part of your build\n\n\n524\n\n\n\n\n\n\n\n\npoeditor_export\n\n\nExports translations from POEditor.com\n\n\n503\n\n\n\n\n\n\n\n\nversion_from_last_tag\n\n\nPerform a regex on last (latest) git tag and perform a regex to extract a version number such as Release 1.2.3\n\n\n474", 
            "title": "Available Plugins"
        }, 
        {
            "location": "/plugins/available-plugins/#available-plugins", 
            "text": "To get an up to date list of all available plugins run  fastlane search_plugins  To search for a specific plugin  fastlane search_plugins [search_query]  You can find more information about how to start using plugins in  Plugins.md .", 
            "title": "Available Plugins"
        }, 
        {
            "location": "/plugins/available-plugins/#list-of-plugins", 
            "text": "Plugin Name  Description  Downloads       changelog  Automate changes to your project CHANGELOG.md  1711     polidea  Polidea's fastlane action  1573     automated_test_emulator_run  Allows to wrap gradle task or shell command that runs integrated tests that prepare and starts single AVD before test run. After tests are finished, emulator is killed and deleted.  1239     xcake  Create your Xcode projects automatically using a stupid simple DSL.  1117     instrumented_tests  New action to run instrumented tests for android. This basically creates and boots an emulator before running an gradle commands so that you can run instrumented tests against that emulator. After the gradle command is executed, the avd gets shut down and deleted. This is really helpful on CI services, keeping them clean and always having a fresh avd for testing.  1072     branding  Add some branding to your fastlane output  1019     ruby  Useful fastlane actions for Ruby projects  999     versioning  Allows to work set/get app version directly to/from Info.plist  996     increment_version_code  Increment the version code of your android project.  856     tpa  TPA gives you advanced user behaviour analytics, app distribution, crash analytics and more  850     xamarin_build  Build xamarin android\\ios projects  819     appicon  Generate required icon sizes and iconset from a master application icon.  765     applivery  Upload new build to Applivery  751     carthage_cache  A Fastlane plugin that allows to cache Carthage/Build folder in Amazon S3.  742     commit_android_version_bump  This Android plugins allow you to commit every modification done in your build.gradle file during the execution of a lane. In fast, it do the same as the commit_version_bump action, but for Android  695     trainer  Convert xcodebuild plist files to JUnit reports  689     upload_folder_to_s3  Upload a folder to S3  653     goodify_info_plist  This plugin will update the plist so that the built application can be deployed and managed within BlackBerry's Good Dynamics Control Center for Enterprise Mobility Management.  647     synx  Organise your Xcode project folder to match your Xcode groups.  620     instabug  Uploads dSYM to Instabug  613     no_u  no u  585     get_version_code  Get the version code of anAndroid project. This action will return the version code of your project according to the one set in your build.gradle file  561     apprepo  experimental fastlane plugin based on https://github.com/suculent/apprepo SFTP uploader  558     emoji_fetcher  Fetch the emoji font file and copy it to a local directory  548     upload_symbols_to_hockey  Upload dSYM symbolication files to Hockey  547     clubmate  Print the Club Mate logo in your build output  527     ftp  Simple ftp upload and download for Fastlane  525     github_status  Provides the ability to display and act upon GitHub server status as part of your build  524     poeditor_export  Exports translations from POEditor.com  503     version_from_last_tag  Perform a regex on last (latest) git tag and perform a regex to extract a version number such as Release 1.2.3  474", 
            "title": "List of plugins"
        }, 
        {
            "location": "/plugins/create-plugin/", 
            "text": "fastlane Plugins\n\n\nThe instructions below require \nfastlane\n 1.93.0 or higher\n\n\nLocal actions\n\n\nYou can create your own actions to extend the functionality of fastlane for your project. The action you create will behave exactly like the built in actions.\n\n\nJust run \nfastlane new_action\n, enter the name of the action and edit the generated Ruby file in \nfastlane/actions/[action_name].rb\n. After you finished writing your action, add it to your version control, so it is available for your whole team.\n\n\nFrom then on, you can just use your action in your \nFastfile\n, just like any other action.\n\n\nSubmitting the action to the fastlane main repo\n\n\nPlease be aware we may not accept all actions submitted to be bundled with \nfastlane\n. Before you submit a pull request adding the action to the \nfastlane\n code base, submit an issue proposing the new action and why it should be built-in.\n\n\nIn general we tend to accept actions that\n\n\n\n\nGenerally usable for a big majority of developers (e.g. basic interactions with git)\n\n\nSolve pain points for mobile app developers (iOS and Android)\n\n\nhave an easy to read documentation and great test coverage\n\n\n\n\nIn general, we might not accept actions that\n\n\n\n\nSolve specific use-cases for only a small subset of developers\n\n\nAccess the API of a third party service, the third party service should own and maintain the action\n\n\nComplex actions, that will require a lot of work to maintain in the future\n\n\nEverything that isn't mobile developer related\n\n\n\n\nPlugins\n\n\nfastlane\n is an open platform and we enable every developer to extend it to fit their needs. That's why we built a plugin system that allows you and your company to provide \nfastlane\n plugins to other \nfastlane\n users. You have the full power and responsibility of maintaining your plugin and keeping it up to date. This is useful if you maintain your own library or web service, and want to make sure the \nfastlane\n plugin is always up to date.\n\n\nFind a plugin\n\n\nHead over the \nAvailablePlugins.md\n for a list of plugins you can use.\n\n\nList all available plugins using\n\n\nfastlane search_plugins\n\n\n\n\nTo search for something specific \n\n\nfastlane search_plugins [query]\n\n\n\n\nAdd a plugin to your project\n\n\nfastlane add_plugin [name]\n\n\n\n\nfastlane\n will assist you on setting up your project to start using plugins.\n\n\nThis will:\n\n\n\n\nAdd the plugin to \nfastlane/Pluginfile\n\n\nMake sure your \nfastlane/Pluginfile\n is properly referenced from your \n./Gemfile\n\n\nRun \nfastlane install_plugins\n to make sure all required dependencies are installed on your local machine (this step might ask for your admin password to install Ruby gems)\n\n\nYou'll have 3 new files, that should all be checked into version control: \nGemfile\n, \nGemfile.lock\n and \nfastlane/Pluginfile\n\n\n\n\nPlugin Source\n\n\nYour \nfastlane/Pluginfile\n contains the list of all \nfastlane\n plugins your project uses. The \nPluginfile\n is a \nGemfile\n that gets imported from your main \nGemfile\n.\nYou specificy all dependencies, including the required version numbers:\n\n\n# Fetched from RubyGems.org\ngem \nfastlane-plugin-xcversion\n\n\n# Fetched from GitHub\ngem \nfastlane-plugin-xcversion\n, git: \nhttps://github.com/fastlane/fastlane-plugin-xcversion\n\n\n# Fetched from a local directory\ngem \nfastlane-plugin-xcversion\n, path: \n../fastlane-plugin-xcversion\n\n\n# Specify a version requirements\ngem \nfastlane-plugin-xcversion\n, \n1.1.0\n\ngem \nfastlane-plugin-xcversion\n, \n= 1.0\n\n\n\n\n\nMore information about a Gemfile\n\n\nInstall plugins on another machine\n\n\nTo make sure all plugins are installed on the local machine, run\n\n\nfastlane install_plugins\n\n\n\n\nRemove a plugin\n\n\nOpen your \nfastlane/Pluginfile\n and remove the line that looks like this\n\n\ngem \nfastlane-plugin-[plugin_name]\n\n\n\n\n\nCreate your own plugin\n\n\ncd ~/new/folder/\n\nfastlane new_plugin [plugin_name]\n\n\n\n\n\n\nfastlane\n creates the directory structure that's needed to be a valid Ruby gem\n\n\nEdit the \nlib/fastlane/plugin/[plugin_name]/actions/[plugin_name].rb\n and implement your action\n\n\nEasily test the plugin locally by running \nfastlane add_plugin\n in your project's directory and specifying the local path when asked for it\n\n\n\n\nNew plugin for existing gem\n\n\nIf you already have an exiting gem you want to provide a \nfastlane\n plugin for, you'll still have to create a new Ruby gem. The reason for that is the way plugins are imported.\n\n\nThe example project \nxcake\n contains a folder named \nfastlane-plugin-xcake\n.\n\n\nAll you have to do if you have an exiting gem:\n\n\n\n\nNavigate to your gem\n\n\nfastlane new_plugin [plugin_name]\n\n\nInside the newly created folder, edit the \nfastlane-plugin-[plugin_name].gemspec\n and add your gem as a dependency. It is recommended to also specify a version number requirement\n\n\n\n\nPublishing your plugin\n\n\nRubyGems\n\n\nThe recommended way to publish your plugin is to publish it on \nRubyGems.org\n. Follow the steps below to publish your plugin.\n\n\n\n\nCreate an account at \nRubyGems.org\n\n\nPublish your plugin to a \nGitHub\n repo\n\n\nUpdate the \nfastlane-plugin-[plugin_name].gemspec\n file so that the \nspec.homepage\n points to your github repo.\n\n\nPublish the first release of your plugin:\n\n\n\n\nbundle install\nrake install\nrake release\n\n\n\n\nNow all your users can run \nfastlane add_plugin [plugin_name]\n to install and use your plugin.\n\n\nGitHub\n\n\nIf for some reason you don't want to use RubyGems, you can also make your plugin available on GitHub. Your users then need to add the following to the \nPluginfile\n\n\ngem \nfastlane-plugin-[plugin_name]\n, git: \nhttps://github.com/[user]/[plugin_name]\n\n\n\n\n\nAdvanced\n\n\nMultiple actions in one plugin\n\n\nLet's assume you work on a \nfastlane\n plugin for project management software. You could call it \nfastlane-plugin-pm\n and it may contain any number of actions and helpers, just add them to your \nactions\n folder. Make sure to mention the available actions in your plugin's \nREADME.md\n.", 
            "title": "Create Your Own Plugin"
        }, 
        {
            "location": "/plugins/create-plugin/#fastlane-plugins", 
            "text": "The instructions below require  fastlane  1.93.0 or higher", 
            "title": "fastlane Plugins"
        }, 
        {
            "location": "/plugins/create-plugin/#local-actions", 
            "text": "You can create your own actions to extend the functionality of fastlane for your project. The action you create will behave exactly like the built in actions.  Just run  fastlane new_action , enter the name of the action and edit the generated Ruby file in  fastlane/actions/[action_name].rb . After you finished writing your action, add it to your version control, so it is available for your whole team.  From then on, you can just use your action in your  Fastfile , just like any other action.", 
            "title": "Local actions"
        }, 
        {
            "location": "/plugins/create-plugin/#submitting-the-action-to-the-fastlane-main-repo", 
            "text": "Please be aware we may not accept all actions submitted to be bundled with  fastlane . Before you submit a pull request adding the action to the  fastlane  code base, submit an issue proposing the new action and why it should be built-in.  In general we tend to accept actions that   Generally usable for a big majority of developers (e.g. basic interactions with git)  Solve pain points for mobile app developers (iOS and Android)  have an easy to read documentation and great test coverage   In general, we might not accept actions that   Solve specific use-cases for only a small subset of developers  Access the API of a third party service, the third party service should own and maintain the action  Complex actions, that will require a lot of work to maintain in the future  Everything that isn't mobile developer related", 
            "title": "Submitting the action to the fastlane main repo"
        }, 
        {
            "location": "/plugins/create-plugin/#plugins", 
            "text": "fastlane  is an open platform and we enable every developer to extend it to fit their needs. That's why we built a plugin system that allows you and your company to provide  fastlane  plugins to other  fastlane  users. You have the full power and responsibility of maintaining your plugin and keeping it up to date. This is useful if you maintain your own library or web service, and want to make sure the  fastlane  plugin is always up to date.", 
            "title": "Plugins"
        }, 
        {
            "location": "/plugins/create-plugin/#find-a-plugin", 
            "text": "Head over the  AvailablePlugins.md  for a list of plugins you can use.  List all available plugins using  fastlane search_plugins  To search for something specific   fastlane search_plugins [query]", 
            "title": "Find a plugin"
        }, 
        {
            "location": "/plugins/create-plugin/#add-a-plugin-to-your-project", 
            "text": "fastlane add_plugin [name]  fastlane  will assist you on setting up your project to start using plugins.  This will:   Add the plugin to  fastlane/Pluginfile  Make sure your  fastlane/Pluginfile  is properly referenced from your  ./Gemfile  Run  fastlane install_plugins  to make sure all required dependencies are installed on your local machine (this step might ask for your admin password to install Ruby gems)  You'll have 3 new files, that should all be checked into version control:  Gemfile ,  Gemfile.lock  and  fastlane/Pluginfile", 
            "title": "Add a plugin to your project"
        }, 
        {
            "location": "/plugins/create-plugin/#plugin-source", 
            "text": "Your  fastlane/Pluginfile  contains the list of all  fastlane  plugins your project uses. The  Pluginfile  is a  Gemfile  that gets imported from your main  Gemfile .\nYou specificy all dependencies, including the required version numbers:  # Fetched from RubyGems.org\ngem  fastlane-plugin-xcversion \n\n# Fetched from GitHub\ngem  fastlane-plugin-xcversion , git:  https://github.com/fastlane/fastlane-plugin-xcversion \n\n# Fetched from a local directory\ngem  fastlane-plugin-xcversion , path:  ../fastlane-plugin-xcversion \n\n# Specify a version requirements\ngem  fastlane-plugin-xcversion ,  1.1.0 \ngem  fastlane-plugin-xcversion ,  = 1.0   More information about a Gemfile", 
            "title": "Plugin Source"
        }, 
        {
            "location": "/plugins/create-plugin/#install-plugins-on-another-machine", 
            "text": "To make sure all plugins are installed on the local machine, run  fastlane install_plugins", 
            "title": "Install plugins on another machine"
        }, 
        {
            "location": "/plugins/create-plugin/#remove-a-plugin", 
            "text": "Open your  fastlane/Pluginfile  and remove the line that looks like this  gem  fastlane-plugin-[plugin_name]", 
            "title": "Remove a plugin"
        }, 
        {
            "location": "/plugins/create-plugin/#create-your-own-plugin", 
            "text": "cd ~/new/folder/\n\nfastlane new_plugin [plugin_name]   fastlane  creates the directory structure that's needed to be a valid Ruby gem  Edit the  lib/fastlane/plugin/[plugin_name]/actions/[plugin_name].rb  and implement your action  Easily test the plugin locally by running  fastlane add_plugin  in your project's directory and specifying the local path when asked for it", 
            "title": "Create your own plugin"
        }, 
        {
            "location": "/plugins/create-plugin/#new-plugin-for-existing-gem", 
            "text": "If you already have an exiting gem you want to provide a  fastlane  plugin for, you'll still have to create a new Ruby gem. The reason for that is the way plugins are imported.  The example project  xcake  contains a folder named  fastlane-plugin-xcake .  All you have to do if you have an exiting gem:   Navigate to your gem  fastlane new_plugin [plugin_name]  Inside the newly created folder, edit the  fastlane-plugin-[plugin_name].gemspec  and add your gem as a dependency. It is recommended to also specify a version number requirement", 
            "title": "New plugin for existing gem"
        }, 
        {
            "location": "/plugins/create-plugin/#publishing-your-plugin", 
            "text": "", 
            "title": "Publishing your plugin"
        }, 
        {
            "location": "/plugins/create-plugin/#rubygems", 
            "text": "The recommended way to publish your plugin is to publish it on  RubyGems.org . Follow the steps below to publish your plugin.   Create an account at  RubyGems.org  Publish your plugin to a  GitHub  repo  Update the  fastlane-plugin-[plugin_name].gemspec  file so that the  spec.homepage  points to your github repo.  Publish the first release of your plugin:   bundle install\nrake install\nrake release  Now all your users can run  fastlane add_plugin [plugin_name]  to install and use your plugin.", 
            "title": "RubyGems"
        }, 
        {
            "location": "/plugins/create-plugin/#github", 
            "text": "If for some reason you don't want to use RubyGems, you can also make your plugin available on GitHub. Your users then need to add the following to the  Pluginfile  gem  fastlane-plugin-[plugin_name] , git:  https://github.com/[user]/[plugin_name]", 
            "title": "GitHub"
        }, 
        {
            "location": "/plugins/create-plugin/#advanced", 
            "text": "", 
            "title": "Advanced"
        }, 
        {
            "location": "/plugins/create-plugin/#multiple-actions-in-one-plugin", 
            "text": "Let's assume you work on a  fastlane  plugin for project management software. You could call it  fastlane-plugin-pm  and it may contain any number of actions and helpers, just add them to your  actions  folder. Make sure to mention the available actions in your plugin's  README.md .", 
            "title": "Multiple actions in one plugin"
        }, 
        {
            "location": "/plugins/plugins-troubleshooting/", 
            "text": "fastlane plugins troubleshooting\n\n\nIf you're having trouble calling a plugin action, here is a simple guide on how to resolve the issue:\n\n\nMake sure fastlane is up to date\n\n\nRun \nfastlane -v\n and \nbundle exec fastlane -v\n and make sure it's at least version 1.93.0.\n\n\nUpdate your plugins\n\n\nRun \nfastlane update_plugins\n to make sure to have all the latest plugins and their dependencies installed.\n\n\nUse \nbundle exec\n\n\nRun \nfastlane\n using \nbundle exec fastlane [lane]\n to make sure your plugins are properly loaded.\n\n\nThis is required when you use plugins from a local path or a git remote.\n\n\nUse the \n--verbose\n mode\n\n\nRunning \nfastlane [lane] --verbose\n will show a lot more information that might be useful to resolve the issue.\n\n\nMake sure the action name is correct\n\n\nA plugin can contain any number of actions. Make sure to read the docs for the plugin itself!\n\n\nAdditionally check out the source code of the plugin:\n\n\nlib/fastlane/plugin/[plugin_name]/actions/[action_name].rb\n\n\n\n\nOpen the \n[action_name].rb\n file and make sure the name of the class on line 3 looks like this:\n\n\nclass [ActionName]Action \n Action\n\n\n\n\nNote how the name of the class should be capitalised and have \nAction\n appended in the name. Additionally this class must be a subclass of \nAction\n.\n\n\nGemfile and Pluginfile\n\n\nYour \nGemfile\n should look something like this:\n\n\ngem \nfastlane\n\n\nplugins_path = File.join(File.dirname(__FILE__), 'fastlane', 'Pluginfile')\neval(File.read(plugins_path), binding) if File.exist?(plugins_path)\n\n\n\n\nYour \nPluginfile\n should look something like this\n\n\n# Autogenerated by fastlane\n\ngem 'fastlane-plugin-ruby'\n\n\n\n\nBuilding your own plugin\n\n\nIf you have issues with running your local plugins during plugin development, make sure to run\n\n\nbundle install --with development\n\n\n\n\nto install all required development dependencies\n\n\nMore help\n\n\nIf it's still not working for you, please \nsubmit a new GitHub issue\n with your \nGemfile\n, \nGemfile.lock\n, \nPluginfile\n, \nFastfile\n and terminal output when running \nfastlane\n using the \n--verbose\n flag.", 
            "title": "Plugins Troubleshooting"
        }, 
        {
            "location": "/plugins/plugins-troubleshooting/#fastlane-plugins-troubleshooting", 
            "text": "If you're having trouble calling a plugin action, here is a simple guide on how to resolve the issue:", 
            "title": "fastlane plugins troubleshooting"
        }, 
        {
            "location": "/plugins/plugins-troubleshooting/#make-sure-fastlane-is-up-to-date", 
            "text": "Run  fastlane -v  and  bundle exec fastlane -v  and make sure it's at least version 1.93.0.", 
            "title": "Make sure fastlane is up to date"
        }, 
        {
            "location": "/plugins/plugins-troubleshooting/#update-your-plugins", 
            "text": "Run  fastlane update_plugins  to make sure to have all the latest plugins and their dependencies installed.", 
            "title": "Update your plugins"
        }, 
        {
            "location": "/plugins/plugins-troubleshooting/#use-bundle-exec", 
            "text": "Run  fastlane  using  bundle exec fastlane [lane]  to make sure your plugins are properly loaded.  This is required when you use plugins from a local path or a git remote.", 
            "title": "Use bundle exec"
        }, 
        {
            "location": "/plugins/plugins-troubleshooting/#use-the-verbose-mode", 
            "text": "Running  fastlane [lane] --verbose  will show a lot more information that might be useful to resolve the issue.", 
            "title": "Use the --verbose mode"
        }, 
        {
            "location": "/plugins/plugins-troubleshooting/#make-sure-the-action-name-is-correct", 
            "text": "A plugin can contain any number of actions. Make sure to read the docs for the plugin itself!  Additionally check out the source code of the plugin:  lib/fastlane/plugin/[plugin_name]/actions/[action_name].rb  Open the  [action_name].rb  file and make sure the name of the class on line 3 looks like this:  class [ActionName]Action   Action  Note how the name of the class should be capitalised and have  Action  appended in the name. Additionally this class must be a subclass of  Action .", 
            "title": "Make sure the action name is correct"
        }, 
        {
            "location": "/plugins/plugins-troubleshooting/#gemfile-and-pluginfile", 
            "text": "Your  Gemfile  should look something like this:  gem  fastlane \n\nplugins_path = File.join(File.dirname(__FILE__), 'fastlane', 'Pluginfile')\neval(File.read(plugins_path), binding) if File.exist?(plugins_path)  Your  Pluginfile  should look something like this  # Autogenerated by fastlane\n\ngem 'fastlane-plugin-ruby'", 
            "title": "Gemfile and Pluginfile"
        }, 
        {
            "location": "/plugins/plugins-troubleshooting/#building-your-own-plugin", 
            "text": "If you have issues with running your local plugins during plugin development, make sure to run  bundle install --with development  to install all required development dependencies", 
            "title": "Building your own plugin"
        }, 
        {
            "location": "/plugins/plugins-troubleshooting/#more-help", 
            "text": "If it's still not working for you, please  submit a new GitHub issue  with your  Gemfile ,  Gemfile.lock ,  Pluginfile ,  Fastfile  and terminal output when running  fastlane  using the  --verbose  flag.", 
            "title": "More help"
        }, 
        {
            "location": "/best-practices/source-control/", 
            "text": "Source Control\n\n\nIt is recommended that you keep \nfastlane\n configuration files in the repository. You may want to add the following lines to the repository's \n.gitignore\n (Git) or \n.hgignore\n (Mercurial) file to exclude generated and temporary files:\n\n\n# fastlane specific\nfastlane/report.xml\n\n# deliver temporary files\nfastlane/Preview.html\n\n# snapshot generated screenshots\nfastlane/screenshots\n\n# scan temporary files\nfastlane/test_output\n\n\n\n\nIt is also recommended that you avoid storing screenshots or other delivery artifacts in the repository. Instead, use \nfastlane\n to re-generate whenever needed.", 
            "title": "Source Control"
        }, 
        {
            "location": "/best-practices/source-control/#source-control", 
            "text": "It is recommended that you keep  fastlane  configuration files in the repository. You may want to add the following lines to the repository's  .gitignore  (Git) or  .hgignore  (Mercurial) file to exclude generated and temporary files:  # fastlane specific\nfastlane/report.xml\n\n# deliver temporary files\nfastlane/Preview.html\n\n# snapshot generated screenshots\nfastlane/screenshots\n\n# scan temporary files\nfastlane/test_output  It is also recommended that you avoid storing screenshots or other delivery artifacts in the repository. Instead, use  fastlane  to re-generate whenever needed.", 
            "title": "Source Control"
        }, 
        {
            "location": "/best-practices/continuous-integration/", 
            "text": "Continuous Integration\n\n\nBest Practices\n\n\n2 factor auth\n\n\nIf your account is protected using 2 step verification, you can get a login token by running\n\n\nspaceauth -u user@email.com\n\n\n\n\nThis will generate a token you can set using the \nFASTLANE_SESSION\n environment variable on your CI system.\n\n\nDeploy Strategy\n\n\nYou should \nnot\n deploy a new App Store update after every commit, since you still have to wait 1-2 days for the review. Instead it is recommended that you use Git Tags, or custom triggers to deploy a new update.\n\n\nYou can set up your own \nRelease\n job, which is only triggered manually.\n\n\nJenkins Integration\n\n\nDeploying from your own computer isn't cool. You know what's cool? Letting a remote server publish app updates for you.\n\n\nfastlane\n automatically generates a JUnit report for you. This allows Continuous Integration systems, like \nJenkins\n, access the results of your deployment.\n\n\nInstallation\n\n\nThe recommended way to install \nJenkins\n is through \nhomebrew\n:\n\n\nbrew update \n brew install jenkins\n\n\n\n\nFrom now on start \nJenkins\n by running:\n\n\njenkins\n\n\n\n\nTo store the password in the Keychain of your remote machine, it is recommended that you run \nmatch\n or \ndeliver\n using ssh or remote desktop at least once.\n\n\nPlugins\n\n\nYou'll find the following Jenkins plugins to be useful:\n\n\n\n\nHTML Publisher Plugin\n:\n Can be used to show the generated screenshots right inside Jenkins.\n\n\nAnsiColor Plugin\n:\n Used to show the coloured output of the fastlane tools. Don\u2019t forget to enable \nColor ANSI Console Output\n in the \nBuild Environment\n or your project.\n\n\nRebuild Plugin\n:\n This plugin will save you a lot of time.\n\n\nKeychains and Provisioning Profiles Plugin\n:\n Manages keychains across Jenkins installations.\n\n\n\n\nBuild Step\n\n\nUse the following as your build step:\n\n\nfastlane appstore\n\n\n\n\nReplace \nappstore\n with the lane you want to use.\n\n\nsetup_jenkins\n\n\nYou can use \nsetup_jenkins\n action which integrates well with the \nKeychains and Provisioning Profiles Plugin\n. Selected keychain will automatically unlocked and the selected code signing identity will be used. Also all build results, like IPA files, archives, dSYMs and result bundles will be stored in the \n./output\n folder in the job workspace. In additions \nsetup_jenkins\n will create separate derived data folder for each job (in the \n./derivedData\n).\n\n\nUnder the hood \nsetup_jenkins\n configures other actions like: \ngym\n, \nscan\n, \nxcodebuild\n, \nbackup_xcarchive\n and \nclear_derived_data\n.\n\n\nTest Results and Screenshots\n\n\nTo show the \ndeployment result\n right in \nJenkins\n\n\n\n\nAdd post-build action\n\n\nPublish JUnit test result report\n\n\nTest report XMLs\n: \nfastlane/report.xml\n\n\n\n\nTo show the \ngenerated screenshots\n right in \nJenkins\n\n\n\n\nAdd post-build action\n\n\nPublish HTML reports\n\n\nHTML directory to archive\n: \nfastlane/screenshots\n\n\nIndex page\n: \nscreenshots.html\n\n\n\n\nSave and run. The result should look like this:\n\n\n\n\nCircle Integration\n\n\nTo run fastlane on Circle as your CI, first create a \nGemfile\n in the root of your project with the following content\n\n\nsource \nhttps://rubygems.org\n\n\ngem \nfastlane\n\n\n\n\n\nand run\n\n\ngem install bundler \n bundle update\n\n\n\n\nThis will create a \nGemfile.lock\n, that defines all Ruby dependencies. Make sure to commit both files to version control.\n\n\nNext, use the following \ncircle.yml\n file\n\n\nmachine:\n  xcode:\n    version: \n7.3\n\ndependencies:\n  override:\n    - bundle check --path=vendor/bundle || bundle install --path=vendor/bundle --jobs=4 --retry=3 --without development\n  cache_directories:\n    - vendor/bundle\ntest:\n  override:\n    - bundle exec fastlane test\n\n\n\n\nThis will automatically cache the installed gems on Circle, making your CI builds much faster!\n\n\nBamboo Integration\n\n\nRepository setup\n\n\nIn bamboo under \nLinked Repositories\n (where you configure your git repo) under \nAdvanced Settings\n is an option called \nExclude changesets\n\n\nThis dialog will allow you to enter a regular expression that if a commit matches, a build will not be triggered.  \n\n\nFor example, if your \nFastfile\n is configured to make a commit message in the style of \n\n\nBuild Version bump by fastlane to Version [0.3] Build [8]\n\n\n\n\nThen you could use the following regex to ignore these commits\n\n\n^.*Build Version bump by fastlane.*$\n\n\n\n\nSetting repository remote\n\n\nBy default bamboo will do an anonymous shallow clone of the repo.  This will not preserve the  \ngit remote\n information nor the list of tags.  If you are using bamboo to create commits you may want to use a code block similar to the following:\n\n\n# In prep for eventually committing a version/build bump - set the git params\nsh('git config user.name \nCOMMITTER USERNAME\n')\nsh('git config user.email \nCOMITTER EMAIL\n')   \n\n# Bamboo does an anonymous checkout so in order to update the build versions must set the git repo URL\ngit_remote_cmd = 'git remote set-url origin ' + ENV['bamboo_repository_git_repositoryUrl']\nsh(git_remote_cmd) \n\n\n\n\nSpeeding up build times with carthage\n\n\nCarthage is a wonderful dependency manager but once you are start using a large number of frameworks, things can start to slow down, especially if your CI server has to run \ncarthage\n EVERY time you check in a small line of code.\n\n\nOne way to make build times faster is to break your work up into two separate build plans (\nthis can get even more funky if you start having multiple branches\n)\n\n\nThe general idea is to make a build plan: \nProject - Artifacts\n that builds the \nCarthage\n directory and stores it as a shared artifact.  Then you create a second build plan \nProject - Fastlane\n that pulls down the \nCarthage\n directory and runs \nfastlane\n.  \n\n\nArtifact Plan\n\n\nUse a simple setup to create this build plan. First off you want to make sure this plan is manually triggered only - because you only need to run it whenever the \nCartfile\n changes as opposed to after ever single commit.  It could also be on a nightly build perhaps if you desire.\n\n\nStages / Jobs / Tasks\n\n\nThis plan consists of 1 Job, 1 Stage and 2 Tasks\n\n\n\n\nTask 1: \nSource Code Checkout\n\n\nTask 2: \nScript\n (\ncarthage update\n)\n\n\n\n\nArtifact definitions\n\n\nCreate a shared artifact with the following info:\n\n\n\n\nName:\n CarthageFolder\n\n\nLocation:\n (leave blank) \n\n\nCopy Pattern:\n Carthage/Build/** \n\n\n\n\nOptional\n: You may want to automatically make the \nfastlane plan\n trigger whenever this plan is built\n\n\nfastlane\n plan\n\n\nWhen configuring \nfastlane\n to run in this setup you need to make sure that you are not calling either:\n\n\nreset_git_repo(force: true)\n\n\n\n\nor\n\n\nensure_git_status_clean\n\n\n\n\nas these calls will either fail the build or delete the \nCarthage\n directory.  Additionally you want to remove any \ncarthage\n tasks from inside your \nFastfile\n as \ncarthage\n is now happening externally to the build.\n\n\nBuild plan setup\n\n\nWhat this build plan does is it checks out the source code, then it downloads the entire \nCarthage/Build/\n directory into your local project - which is exactly what would be created from \ncarthage bootstrap\n and then it runs \nfastlane\n\n\n\n\nTask 1: \nSource Code Checkout\n\n\nTask 2: \nArtifact Download\n\n\nTask 3: \nfastlane\n\n\n\n\nGitlab-CI Integration\n\n\nUse \nGitlab-CI Runner\n running on an MacOS machine\nto build using fastlane.\n\n\nSetting up Repository\n\n\nAdd a \n.gitlab-ci.yml\n file, to trigger \nfastlane\n.\n\n\nstages:\n  - unit_tests\n  - testflight\nvariables:\n  LC_ALL: \nen_US.UTF-8\n\n  LANG: \nen_US.UTF-8\n\nTestflight Build:\n  dependencies: []\n  stage: testflight\n  artifacts:\n    paths:\n      - fastlane/screenshots\n      - fastlane/logs\n  script:\n    - fastlane beta\n  tags: \n    - ios\n  only: \n     - /^release-.*$/\n     - master\nUnit Tests:\n  dependencies: []\n  stage: unit_tests\n  artifacts:\n    paths:\n      - fastlane/screenshots\n      - fastlane/logs\n  script:\n    - fastlane tests\n  tags:\n    - ios\n\n\n\n\nSetting up the lanes\n\n\nYou should have a lane, in this example called \nbeta\n - wich should do the usual, \nmatch\n, \ngym\n, \npilot\n, to distribute an updated Test Flight version, and one lane \ntests\n wich calls \nscan\n to run UI Tests.\n\n\nAuto Incemented Build Number.\n\n\nTo get an auto incremented Build-Number you can use something like the following lane:\nthen the gitlab build-id (wich is counting up each build) will be used.\n\n\nlane :increment_build_number do\n  increment_build_number(build_number: ENV['CI_BUILD_ID'])\nend", 
            "title": "Continuous Integration"
        }, 
        {
            "location": "/best-practices/continuous-integration/#continuous-integration", 
            "text": "", 
            "title": "Continuous Integration"
        }, 
        {
            "location": "/best-practices/continuous-integration/#best-practices", 
            "text": "", 
            "title": "Best Practices"
        }, 
        {
            "location": "/best-practices/continuous-integration/#2-factor-auth", 
            "text": "If your account is protected using 2 step verification, you can get a login token by running  spaceauth -u user@email.com  This will generate a token you can set using the  FASTLANE_SESSION  environment variable on your CI system.", 
            "title": "2 factor auth"
        }, 
        {
            "location": "/best-practices/continuous-integration/#deploy-strategy", 
            "text": "You should  not  deploy a new App Store update after every commit, since you still have to wait 1-2 days for the review. Instead it is recommended that you use Git Tags, or custom triggers to deploy a new update.  You can set up your own  Release  job, which is only triggered manually.", 
            "title": "Deploy Strategy"
        }, 
        {
            "location": "/best-practices/continuous-integration/#jenkins-integration", 
            "text": "Deploying from your own computer isn't cool. You know what's cool? Letting a remote server publish app updates for you.  fastlane  automatically generates a JUnit report for you. This allows Continuous Integration systems, like  Jenkins , access the results of your deployment.", 
            "title": "Jenkins Integration"
        }, 
        {
            "location": "/best-practices/continuous-integration/#installation", 
            "text": "The recommended way to install  Jenkins  is through  homebrew :  brew update   brew install jenkins  From now on start  Jenkins  by running:  jenkins  To store the password in the Keychain of your remote machine, it is recommended that you run  match  or  deliver  using ssh or remote desktop at least once.", 
            "title": "Installation"
        }, 
        {
            "location": "/best-practices/continuous-integration/#plugins", 
            "text": "You'll find the following Jenkins plugins to be useful:   HTML Publisher Plugin :  Can be used to show the generated screenshots right inside Jenkins.  AnsiColor Plugin :  Used to show the coloured output of the fastlane tools. Don\u2019t forget to enable  Color ANSI Console Output  in the  Build Environment  or your project.  Rebuild Plugin :  This plugin will save you a lot of time.  Keychains and Provisioning Profiles Plugin :  Manages keychains across Jenkins installations.", 
            "title": "Plugins"
        }, 
        {
            "location": "/best-practices/continuous-integration/#build-step", 
            "text": "Use the following as your build step:  fastlane appstore  Replace  appstore  with the lane you want to use.", 
            "title": "Build Step"
        }, 
        {
            "location": "/best-practices/continuous-integration/#setup_jenkins", 
            "text": "You can use  setup_jenkins  action which integrates well with the  Keychains and Provisioning Profiles Plugin . Selected keychain will automatically unlocked and the selected code signing identity will be used. Also all build results, like IPA files, archives, dSYMs and result bundles will be stored in the  ./output  folder in the job workspace. In additions  setup_jenkins  will create separate derived data folder for each job (in the  ./derivedData ).  Under the hood  setup_jenkins  configures other actions like:  gym ,  scan ,  xcodebuild ,  backup_xcarchive  and  clear_derived_data .", 
            "title": "setup_jenkins"
        }, 
        {
            "location": "/best-practices/continuous-integration/#test-results-and-screenshots", 
            "text": "To show the  deployment result  right in  Jenkins   Add post-build action  Publish JUnit test result report  Test report XMLs :  fastlane/report.xml   To show the  generated screenshots  right in  Jenkins   Add post-build action  Publish HTML reports  HTML directory to archive :  fastlane/screenshots  Index page :  screenshots.html   Save and run. The result should look like this:", 
            "title": "Test Results and Screenshots"
        }, 
        {
            "location": "/best-practices/continuous-integration/#circle-integration", 
            "text": "To run fastlane on Circle as your CI, first create a  Gemfile  in the root of your project with the following content  source  https://rubygems.org \n\ngem  fastlane   and run  gem install bundler   bundle update  This will create a  Gemfile.lock , that defines all Ruby dependencies. Make sure to commit both files to version control.  Next, use the following  circle.yml  file  machine:\n  xcode:\n    version:  7.3 \ndependencies:\n  override:\n    - bundle check --path=vendor/bundle || bundle install --path=vendor/bundle --jobs=4 --retry=3 --without development\n  cache_directories:\n    - vendor/bundle\ntest:\n  override:\n    - bundle exec fastlane test  This will automatically cache the installed gems on Circle, making your CI builds much faster!", 
            "title": "Circle Integration"
        }, 
        {
            "location": "/best-practices/continuous-integration/#bamboo-integration", 
            "text": "", 
            "title": "Bamboo Integration"
        }, 
        {
            "location": "/best-practices/continuous-integration/#repository-setup", 
            "text": "In bamboo under  Linked Repositories  (where you configure your git repo) under  Advanced Settings  is an option called  Exclude changesets  This dialog will allow you to enter a regular expression that if a commit matches, a build will not be triggered.    For example, if your  Fastfile  is configured to make a commit message in the style of   Build Version bump by fastlane to Version [0.3] Build [8]  Then you could use the following regex to ignore these commits  ^.*Build Version bump by fastlane.*$", 
            "title": "Repository setup"
        }, 
        {
            "location": "/best-practices/continuous-integration/#setting-repository-remote", 
            "text": "By default bamboo will do an anonymous shallow clone of the repo.  This will not preserve the   git remote  information nor the list of tags.  If you are using bamboo to create commits you may want to use a code block similar to the following:  # In prep for eventually committing a version/build bump - set the git params\nsh('git config user.name  COMMITTER USERNAME ')\nsh('git config user.email  COMITTER EMAIL ')   \n\n# Bamboo does an anonymous checkout so in order to update the build versions must set the git repo URL\ngit_remote_cmd = 'git remote set-url origin ' + ENV['bamboo_repository_git_repositoryUrl']\nsh(git_remote_cmd)", 
            "title": "Setting repository remote"
        }, 
        {
            "location": "/best-practices/continuous-integration/#speeding-up-build-times-with-carthage", 
            "text": "Carthage is a wonderful dependency manager but once you are start using a large number of frameworks, things can start to slow down, especially if your CI server has to run  carthage  EVERY time you check in a small line of code.  One way to make build times faster is to break your work up into two separate build plans ( this can get even more funky if you start having multiple branches )  The general idea is to make a build plan:  Project - Artifacts  that builds the  Carthage  directory and stores it as a shared artifact.  Then you create a second build plan  Project - Fastlane  that pulls down the  Carthage  directory and runs  fastlane .", 
            "title": "Speeding up build times with carthage"
        }, 
        {
            "location": "/best-practices/continuous-integration/#artifact-plan", 
            "text": "Use a simple setup to create this build plan. First off you want to make sure this plan is manually triggered only - because you only need to run it whenever the  Cartfile  changes as opposed to after ever single commit.  It could also be on a nightly build perhaps if you desire.", 
            "title": "Artifact Plan"
        }, 
        {
            "location": "/best-practices/continuous-integration/#stages-jobs-tasks", 
            "text": "This plan consists of 1 Job, 1 Stage and 2 Tasks   Task 1:  Source Code Checkout  Task 2:  Script  ( carthage update )", 
            "title": "Stages / Jobs / Tasks"
        }, 
        {
            "location": "/best-practices/continuous-integration/#artifact-definitions", 
            "text": "Create a shared artifact with the following info:   Name:  CarthageFolder  Location:  (leave blank)   Copy Pattern:  Carthage/Build/**    Optional : You may want to automatically make the  fastlane plan  trigger whenever this plan is built", 
            "title": "Artifact definitions"
        }, 
        {
            "location": "/best-practices/continuous-integration/#fastlane-plan", 
            "text": "When configuring  fastlane  to run in this setup you need to make sure that you are not calling either:  reset_git_repo(force: true)  or  ensure_git_status_clean  as these calls will either fail the build or delete the  Carthage  directory.  Additionally you want to remove any  carthage  tasks from inside your  Fastfile  as  carthage  is now happening externally to the build.", 
            "title": "fastlane plan"
        }, 
        {
            "location": "/best-practices/continuous-integration/#build-plan-setup", 
            "text": "What this build plan does is it checks out the source code, then it downloads the entire  Carthage/Build/  directory into your local project - which is exactly what would be created from  carthage bootstrap  and then it runs  fastlane   Task 1:  Source Code Checkout  Task 2:  Artifact Download  Task 3:  fastlane", 
            "title": "Build plan setup"
        }, 
        {
            "location": "/best-practices/continuous-integration/#gitlab-ci-integration", 
            "text": "Use  Gitlab-CI Runner  running on an MacOS machine\nto build using fastlane.", 
            "title": "Gitlab-CI Integration"
        }, 
        {
            "location": "/best-practices/continuous-integration/#setting-up-repository", 
            "text": "Add a  .gitlab-ci.yml  file, to trigger  fastlane .  stages:\n  - unit_tests\n  - testflight\nvariables:\n  LC_ALL:  en_US.UTF-8 \n  LANG:  en_US.UTF-8 \nTestflight Build:\n  dependencies: []\n  stage: testflight\n  artifacts:\n    paths:\n      - fastlane/screenshots\n      - fastlane/logs\n  script:\n    - fastlane beta\n  tags: \n    - ios\n  only: \n     - /^release-.*$/\n     - master\nUnit Tests:\n  dependencies: []\n  stage: unit_tests\n  artifacts:\n    paths:\n      - fastlane/screenshots\n      - fastlane/logs\n  script:\n    - fastlane tests\n  tags:\n    - ios", 
            "title": "Setting up Repository"
        }, 
        {
            "location": "/best-practices/continuous-integration/#setting-up-the-lanes", 
            "text": "You should have a lane, in this example called  beta  - wich should do the usual,  match ,  gym ,  pilot , to distribute an updated Test Flight version, and one lane  tests  wich calls  scan  to run UI Tests.", 
            "title": "Setting up the lanes"
        }, 
        {
            "location": "/best-practices/continuous-integration/#auto-incemented-build-number", 
            "text": "To get an auto incremented Build-Number you can use something like the following lane:\nthen the gitlab build-id (wich is counting up each build) will be used.  lane :increment_build_number do\n  increment_build_number(build_number: ENV['CI_BUILD_ID'])\nend", 
            "title": "Auto Incemented Build Number."
        }, 
        {
            "location": "/best-practices/keys/", 
            "text": "fastlane keys\n\n\nThis guide will show you the best ways to store and use your keys for services like Crashlytics, Slack, etc.\n\n\nIn your \nFastfile\n\n\nlane :beta do\n  crashlytics(api_token: \n123abc\n, build_secret: \nsecret_key\n)\nend\n\n\n\n\nor if you want to only define the keys once and use it multiple times\n\n\nENV[\nCRASHLYTICS_API_TOKEN\n] = \n123abc\n\nENV[\nCRASHLYTICS_BUILD_SECRET\n] = \nsecret_key\n\n\nlane :beta do\n  crashlytics\nend\n\n\n\n\nThis is the most straight forward and easiest solution, but might cause a few issues:\n\n\n\n\nIf you ever decide to open source your application you'll have to make sure to remove the keys from your git history\n\n\nIf your keys got invalidated for whatever reason and you decide to rollback your code base to an earlier stage the keys will also be rolled back\n\n\n\n\nTo get the name of the available environment variables, run \nfastlane action [action_name]\n.\n\n\nBash Profile\n\n\nTo not store your keys in \ngit\n, you can pass all parameters of all actions using environment variables.\n\n\nYou can edit your \n~/.bash_profile\n to include something like\n\n\nexport SLACK_URL=\nhttps://hooks.slack.com/services/T03NA19Q5/...\n\nexport CRASHLYTICS_API_TOKEN=\n123abc\n\n\n\n\n\nIf you use a different shell (e.g. \nzshell\n) you'll need to edit \n~/.zshrc\n instead.\n\n\nAfter editing the \n.bash_profile\n you need to either re-open your terminal session or run \nsource ~/.bash_profile\n.\n\n\nDisadvantages\n\n\n\n\nEvery terminal tool you run gets access to your environment variables. \n\n\nYou have to edit your bash profile on every computer you want to run \nfastlane\n from\n\n\nThe bash profile isn't automatically loaded by some CI-systems like Jenkins\n\n\n\n\nTo get the name of the available environment variables, run \nfastlane action [action_name]\n.\n\n\ndotenv\n\n\ndotenv\n is a system to store your environment in a file that is project specific. Basically you have a hidden file in your project containing all the environment variables for your project.\n\n\nYou can store a default configuration in \n.env.default\n which will be loaded by \nfastlane\n automatically.\n\n\nSLACK_URL=\nhttps://hooks.slack.com/services/T03NA19Q5/...\n\nCRASHLYTICS_API_TOKEN=\n123abc\n\n\n\n\n\nYou might want different configurations depending on your environment.\n\n\nfastlane beta --env development\n\n\n\n\nand store the configuration in \n.env.development\n with all keys for the development environment.\n\n\nInstall \n[sudo] gem install dotenv\n or add \ndotenv\n to your \nGemfile\n. More information about the \nrecommend way to install gems\n.\n\n\nTo get the name of the available environment variables, run \nfastlane action [action_name]\n.", 
            "title": "Keys"
        }, 
        {
            "location": "/best-practices/keys/#fastlane-keys", 
            "text": "This guide will show you the best ways to store and use your keys for services like Crashlytics, Slack, etc.", 
            "title": "fastlane keys"
        }, 
        {
            "location": "/best-practices/keys/#in-your-fastfile", 
            "text": "lane :beta do\n  crashlytics(api_token:  123abc , build_secret:  secret_key )\nend  or if you want to only define the keys once and use it multiple times  ENV[ CRASHLYTICS_API_TOKEN ] =  123abc \nENV[ CRASHLYTICS_BUILD_SECRET ] =  secret_key \n\nlane :beta do\n  crashlytics\nend  This is the most straight forward and easiest solution, but might cause a few issues:   If you ever decide to open source your application you'll have to make sure to remove the keys from your git history  If your keys got invalidated for whatever reason and you decide to rollback your code base to an earlier stage the keys will also be rolled back   To get the name of the available environment variables, run  fastlane action [action_name] .", 
            "title": "In your Fastfile"
        }, 
        {
            "location": "/best-practices/keys/#bash-profile", 
            "text": "To not store your keys in  git , you can pass all parameters of all actions using environment variables.  You can edit your  ~/.bash_profile  to include something like  export SLACK_URL= https://hooks.slack.com/services/T03NA19Q5/... \nexport CRASHLYTICS_API_TOKEN= 123abc   If you use a different shell (e.g.  zshell ) you'll need to edit  ~/.zshrc  instead.  After editing the  .bash_profile  you need to either re-open your terminal session or run  source ~/.bash_profile .  Disadvantages   Every terminal tool you run gets access to your environment variables.   You have to edit your bash profile on every computer you want to run  fastlane  from  The bash profile isn't automatically loaded by some CI-systems like Jenkins   To get the name of the available environment variables, run  fastlane action [action_name] .", 
            "title": "Bash Profile"
        }, 
        {
            "location": "/best-practices/keys/#dotenv", 
            "text": "dotenv  is a system to store your environment in a file that is project specific. Basically you have a hidden file in your project containing all the environment variables for your project.  You can store a default configuration in  .env.default  which will be loaded by  fastlane  automatically.  SLACK_URL= https://hooks.slack.com/services/T03NA19Q5/... \nCRASHLYTICS_API_TOKEN= 123abc   You might want different configurations depending on your environment.  fastlane beta --env development  and store the configuration in  .env.development  with all keys for the development environment.  Install  [sudo] gem install dotenv  or add  dotenv  to your  Gemfile . More information about the  recommend way to install gems .  To get the name of the available environment variables, run  fastlane action [action_name] .", 
            "title": "dotenv"
        }, 
        {
            "location": "/advanced/", 
            "text": "Advanced fastlane\n\n\nPassing Parameters\n\n\nTo pass parameters from the command line to your lane, use the following syntax:\n\n\nfastlane [lane] key:value key2:value2\n\nfastlane deploy submit:false build_number:24\n\n\n\n\nTo access those values, change your lane declaration to also include \n|options|\n\n\nbefore_all do |lane, options|\n  # ...\nend\n\nbefore_each do |lane, options|\n  # ...\nend\n\nlane :deploy do |options|\n  # ...\n  if options[:submit]\n    # Only when submit is true\n  end\n  # ...\n  increment_build_number(build_number: options[:build_number])\n  # ...\nend\n\nafter_all do |lane, options|\n  # ...\nend\n\nafter_each do |lane, options|\n  # ...\nend\n\nerror do |lane, exception, options|\n  if options[:debug]\n    puts \nHi :)\n\n  end\nend\n\n\n\n\nSwitching lanes\n\n\nTo switch lanes while executing a lane, use the following code:\n\n\nlane :deploy do |options|\n  # ...\n  build(release: true) # that's the important bit\n  hockey\n  # ...\nend\n\nlane :staging do |options|\n  # ...\n  build # it also works when you don't pass parameters\n  hockey\n  # ...\nend\n\nlane :build do |options|\n  scheme = (options[:release] ? \nRelease\n : \nStaging\n)\n  ipa(scheme: scheme)\nend\n\n\n\n\nfastlane\n takes care of all the magic for you. You can call lanes of the same platform or a general lane outside of the \nplatform\n definition.\n\n\nPassing parameters is optional.\n\n\nReturning values\n\n\nAdditionally, you can retrieve the return value. In Ruby, the last line of the \nlane\n definition is the return value. Here is an example:\n\n\nlane :deploy do |options|\n  value = calculate(value: 3)\n  puts value # =\n 5\nend\n\nlane :calculate do |options|\n  # ...\n  2 + options[:value] # the last line will always be the return value\nend\n\n\n\n\nbefore_each\n and \nafter_each\n blocks\n\n\nbefore_each\n blocks are called before any lane is called. This would include being called before each lane you've switched to.\n\n\nbefore_each do |lane, options|\n  # ...\nend\n\n\n\n\nafter_each\n blocks are called after any lane is called. This would include being called after each lane you've switched to.\nJust like \nafter_all\n, \nafter_each\n is not called if an error occurs. The \nerror\n block should be used in this case.\n\n\nafter_each do |lane, options|\n  # ...\nend\n\n\n\n\ne.g. With this scenario, \nbefore_each\n and \nafter_each\n would be called 4 times: before the \ndeploy\n lane, before the switch to \narchive\n, \nsign\n, and \nupload\n, and after each of these lanes as well.\n\n\nlane :deploy do\n  archive\n  sign\n  upload\nend\n\nlane :archive do\n  # ...\nend\n\nlane :sign do\n  # ...\nend\n\nlane :upload do\n  # ...\nend\n\n\n\n\nRun actions directly\n\n\nIf you just want to try an action without adding them to your \nFastfile\n yet, you can use\n\n\nfastlane run notification message:\nMy Text\n title:\nThe Title\n\n\n\n\n\nTo get the avaiable options for any action run \nfastlane action [action_name]\n. You might not be able to set some kind of parameters using this method.\n\n\nShell values\n\n\nYou can get value from shell commands:\n\n\noutput = sh(\npod update\n)\n\n\n\n\nPriorities of parameters and options\n\n\nThe order in which \nfastlane\n tools take their values from\n\n\n\n\nCLI parameter (e.g. \ngym --scheme Example\n) or Fastfile (e.g. \ngym(scheme: 'Example')\n)\n\n\nEnvironment variable (e.g. \nGYM_SCHEME\n)\n\n\nTool specific config file (e.g. \nGymfile\n containing \nscheme 'Example'\n)\n\n\nDefault value (which might be taken from the \nAppfile\n, e.g. \napp_identifier\n from the \nAppfile\n)\n\n\nIf this value is required, you'll be asked for it (e.g. you have multiple schemes, you'll be asked for it)\n\n\n\n\nImporting another Fastfile\n\n\nWithin your \nFastfile\n you can import another \nFastfile\n using 2 methods:\n\n\nimport\n\n\nImport a \nFastfile\n from a local path\n\n\nimport \n../GeneralFastfile\n\n\noverride_lane :from_general do\n  # ...\nend\n\n\n\n\nimport_from_git\n\n\nImport from another git repository, which you can use to have one git repo with a default \nFastfile\n for all your project\n\n\nimport_from_git(url: 'https://github.com/fastlane/fastlane/tree/master/fastlane')\n# or\nimport_from_git(url: 'git@github.com:MyAwesomeRepo/MyAwesomeFastlaneStandardSetup.git',\n               path: 'fastlane/Fastfile')\n\nlane :new_main_lane do\n  # ...\nend\n\n\n\n\nThis will also automatically import all the local actions from this repo.\n\n\nNote\n\n\nYou should import the other \nFastfile\n on the top above your lane declarations. When defining a new lane \nfastlane\n will make sure to not run into any name conflicts. If you want to overwrite an existing lane (from the imported one), use the \noverride_lane\n keyword. \n\n\nEnvironment Variables\n\n\nYou can define environment variables in a \n.env\n or \n.env.default\n file in the same directory as your \nFastfile\n. Environment variables are loading using \ndotenv\n. Here's an example.\n\n\nWORKSPACE=YourApp.xcworkspace\nHOCKEYAPP_API_TOKEN=your-hockey-api-token\n\n\n\n\nfastlane\n also has a \n--env\n option that allows loading of environment specific \ndotenv\n files. \n.env\n and \n.env.default\n will be loaded before environment specific \ndotenv\n files are loaded. The naming convention for environment specific \ndotenv\n files is \n.env.\nenvironment\n\n\nFor example, \nfastlane \nlane-name\n --env development\n will load \n.env\n, \n.env.default\n, and \n.env.development\n\n\nLane Context\n\n\nThe different actions can \ncommunicate\n with each other using a shared hash. You can access them in your lanes with the following code.\n\n\nReplace \nVARIABLE_NAME_HERE\n with any of the following.\n\n\nlane_context[SharedValues::LANE_NAME]                 # The name of the current lane (stays the same when switching lanes)\nlane_context[SharedValues::BUILD_NUMBER]              # Generated by `increment_build_number`\nlane_context[SharedValues::VERSION_NUMBER]            # Generated by `increment_version_number`\nlane_context[SharedValues::SNAPSHOT_SCREENSHOTS_PATH] # Generated by _snapshot_\nlane_context[SharedValues::PRODUCE_APPLE_ID]          # The Apple ID of the newly created app\nlane_context[SharedValues::IPA_OUTPUT_PATH]           # Generated by _gym_\nlane_context[SharedValues::DSYM_OUTPUT_PATH]          # Generated by _gym_\nlane_context[SharedValues::SIGH_PROFILE_PATH]         # Generated by _sigh_\nlane_context[SharedValues::SIGH_UDID]                 # The UDID of the generated provisioning profile\nlane_context[SharedValues::HOCKEY_DOWNLOAD_LINK]      # Generated by `hockey`\n\n\n\n\nTo get information about the available lane variables, run \nfastlane action [action_name]\n.\n\n\nPrivate lanes\n\n\nSometimes you might have a lane that is used from different lanes, for example:\n\n\nlane :production do\n  # ...\n  build(release: true)\n  appstore # Deploy to the AppStore\n  # ...\nend\n\nlane :beta do\n  # ...\n  build(release: false)\n  crashlytics # Distribute to testers\n  # ...\nend\n\nlane :build do |options|\n  # ...\n  ipa\n  # ...\nend\n\n\n\n\nIt probably doesn't make sense to execute the \nbuild\n lane directly using \nfastlane build\n. You can hide this lane using\n\n\nprivate_lane :build do |options|\n  # ...\nend\n\n\n\n\nThis will hide the lane from:\n\n\n\n\nfastlane lanes\n\n\nfastlane list\n\n\nfastlane docs\n\n\n\n\nAnd also, you can't call the private lane using \nfastlane build\n.\n\n\nThe resulting private lane can only be called from another lane using the lane switching technology.\n\n\nLoad own actions from external folder\n\n\nAdd this to the top of your \nFastfile\n.\n\n\nactions_path '../custom_actions_folder/'\n\n\n\n\nSkip update check when launching \nfastlane\n\n\nYou can set the environment variable \nFASTLANE_SKIP_UPDATE_CHECK\n to skip the update check.\n\n\nAdding Credentials\n\n\nYou can add credentials for use by \nfastlane\n to your keychain using the \nCredentialsManager\n command line interface. This is useful for situations like CI environments.\n\n\nAdding a Credential\n\n\nfastlane-credentials add --username felix@krausefx.com\nPassword: *********\nCredential felix@krausefx.com:********* added to keychain.\n\n\n\n\nRemoving a Credential\n\n\nfastlane-credentials remove --username felix@krausefx.com\npassword has been deleted.", 
            "title": "Advanced"
        }, 
        {
            "location": "/advanced/#advanced-fastlane", 
            "text": "", 
            "title": "Advanced fastlane"
        }, 
        {
            "location": "/advanced/#passing-parameters", 
            "text": "To pass parameters from the command line to your lane, use the following syntax:  fastlane [lane] key:value key2:value2\n\nfastlane deploy submit:false build_number:24  To access those values, change your lane declaration to also include  |options|  before_all do |lane, options|\n  # ...\nend\n\nbefore_each do |lane, options|\n  # ...\nend\n\nlane :deploy do |options|\n  # ...\n  if options[:submit]\n    # Only when submit is true\n  end\n  # ...\n  increment_build_number(build_number: options[:build_number])\n  # ...\nend\n\nafter_all do |lane, options|\n  # ...\nend\n\nafter_each do |lane, options|\n  # ...\nend\n\nerror do |lane, exception, options|\n  if options[:debug]\n    puts  Hi :) \n  end\nend", 
            "title": "Passing Parameters"
        }, 
        {
            "location": "/advanced/#switching-lanes", 
            "text": "To switch lanes while executing a lane, use the following code:  lane :deploy do |options|\n  # ...\n  build(release: true) # that's the important bit\n  hockey\n  # ...\nend\n\nlane :staging do |options|\n  # ...\n  build # it also works when you don't pass parameters\n  hockey\n  # ...\nend\n\nlane :build do |options|\n  scheme = (options[:release] ?  Release  :  Staging )\n  ipa(scheme: scheme)\nend  fastlane  takes care of all the magic for you. You can call lanes of the same platform or a general lane outside of the  platform  definition.  Passing parameters is optional.", 
            "title": "Switching lanes"
        }, 
        {
            "location": "/advanced/#returning-values", 
            "text": "Additionally, you can retrieve the return value. In Ruby, the last line of the  lane  definition is the return value. Here is an example:  lane :deploy do |options|\n  value = calculate(value: 3)\n  puts value # =  5\nend\n\nlane :calculate do |options|\n  # ...\n  2 + options[:value] # the last line will always be the return value\nend", 
            "title": "Returning values"
        }, 
        {
            "location": "/advanced/#before_each-and-after_each-blocks", 
            "text": "before_each  blocks are called before any lane is called. This would include being called before each lane you've switched to.  before_each do |lane, options|\n  # ...\nend  after_each  blocks are called after any lane is called. This would include being called after each lane you've switched to.\nJust like  after_all ,  after_each  is not called if an error occurs. The  error  block should be used in this case.  after_each do |lane, options|\n  # ...\nend  e.g. With this scenario,  before_each  and  after_each  would be called 4 times: before the  deploy  lane, before the switch to  archive ,  sign , and  upload , and after each of these lanes as well.  lane :deploy do\n  archive\n  sign\n  upload\nend\n\nlane :archive do\n  # ...\nend\n\nlane :sign do\n  # ...\nend\n\nlane :upload do\n  # ...\nend", 
            "title": "before_each and after_each blocks"
        }, 
        {
            "location": "/advanced/#run-actions-directly", 
            "text": "If you just want to try an action without adding them to your  Fastfile  yet, you can use  fastlane run notification message: My Text  title: The Title   To get the avaiable options for any action run  fastlane action [action_name] . You might not be able to set some kind of parameters using this method.", 
            "title": "Run actions directly"
        }, 
        {
            "location": "/advanced/#shell-values", 
            "text": "You can get value from shell commands:  output = sh( pod update )", 
            "title": "Shell values"
        }, 
        {
            "location": "/advanced/#priorities-of-parameters-and-options", 
            "text": "The order in which  fastlane  tools take their values from   CLI parameter (e.g.  gym --scheme Example ) or Fastfile (e.g.  gym(scheme: 'Example') )  Environment variable (e.g.  GYM_SCHEME )  Tool specific config file (e.g.  Gymfile  containing  scheme 'Example' )  Default value (which might be taken from the  Appfile , e.g.  app_identifier  from the  Appfile )  If this value is required, you'll be asked for it (e.g. you have multiple schemes, you'll be asked for it)", 
            "title": "Priorities of parameters and options"
        }, 
        {
            "location": "/advanced/#importing-another-fastfile", 
            "text": "Within your  Fastfile  you can import another  Fastfile  using 2 methods:", 
            "title": "Importing another Fastfile"
        }, 
        {
            "location": "/advanced/#import", 
            "text": "Import a  Fastfile  from a local path  import  ../GeneralFastfile \n\noverride_lane :from_general do\n  # ...\nend", 
            "title": "import"
        }, 
        {
            "location": "/advanced/#import_from_git", 
            "text": "Import from another git repository, which you can use to have one git repo with a default  Fastfile  for all your project  import_from_git(url: 'https://github.com/fastlane/fastlane/tree/master/fastlane')\n# or\nimport_from_git(url: 'git@github.com:MyAwesomeRepo/MyAwesomeFastlaneStandardSetup.git',\n               path: 'fastlane/Fastfile')\n\nlane :new_main_lane do\n  # ...\nend  This will also automatically import all the local actions from this repo.", 
            "title": "import_from_git"
        }, 
        {
            "location": "/advanced/#note", 
            "text": "You should import the other  Fastfile  on the top above your lane declarations. When defining a new lane  fastlane  will make sure to not run into any name conflicts. If you want to overwrite an existing lane (from the imported one), use the  override_lane  keyword.", 
            "title": "Note"
        }, 
        {
            "location": "/advanced/#environment-variables", 
            "text": "You can define environment variables in a  .env  or  .env.default  file in the same directory as your  Fastfile . Environment variables are loading using  dotenv . Here's an example.  WORKSPACE=YourApp.xcworkspace\nHOCKEYAPP_API_TOKEN=your-hockey-api-token  fastlane  also has a  --env  option that allows loading of environment specific  dotenv  files.  .env  and  .env.default  will be loaded before environment specific  dotenv  files are loaded. The naming convention for environment specific  dotenv  files is  .env. environment  For example,  fastlane  lane-name  --env development  will load  .env ,  .env.default , and  .env.development", 
            "title": "Environment Variables"
        }, 
        {
            "location": "/advanced/#lane-context", 
            "text": "The different actions can  communicate  with each other using a shared hash. You can access them in your lanes with the following code.  Replace  VARIABLE_NAME_HERE  with any of the following.  lane_context[SharedValues::LANE_NAME]                 # The name of the current lane (stays the same when switching lanes)\nlane_context[SharedValues::BUILD_NUMBER]              # Generated by `increment_build_number`\nlane_context[SharedValues::VERSION_NUMBER]            # Generated by `increment_version_number`\nlane_context[SharedValues::SNAPSHOT_SCREENSHOTS_PATH] # Generated by _snapshot_\nlane_context[SharedValues::PRODUCE_APPLE_ID]          # The Apple ID of the newly created app\nlane_context[SharedValues::IPA_OUTPUT_PATH]           # Generated by _gym_\nlane_context[SharedValues::DSYM_OUTPUT_PATH]          # Generated by _gym_\nlane_context[SharedValues::SIGH_PROFILE_PATH]         # Generated by _sigh_\nlane_context[SharedValues::SIGH_UDID]                 # The UDID of the generated provisioning profile\nlane_context[SharedValues::HOCKEY_DOWNLOAD_LINK]      # Generated by `hockey`  To get information about the available lane variables, run  fastlane action [action_name] .", 
            "title": "Lane Context"
        }, 
        {
            "location": "/advanced/#private-lanes", 
            "text": "Sometimes you might have a lane that is used from different lanes, for example:  lane :production do\n  # ...\n  build(release: true)\n  appstore # Deploy to the AppStore\n  # ...\nend\n\nlane :beta do\n  # ...\n  build(release: false)\n  crashlytics # Distribute to testers\n  # ...\nend\n\nlane :build do |options|\n  # ...\n  ipa\n  # ...\nend  It probably doesn't make sense to execute the  build  lane directly using  fastlane build . You can hide this lane using  private_lane :build do |options|\n  # ...\nend  This will hide the lane from:   fastlane lanes  fastlane list  fastlane docs   And also, you can't call the private lane using  fastlane build .  The resulting private lane can only be called from another lane using the lane switching technology.", 
            "title": "Private lanes"
        }, 
        {
            "location": "/advanced/#load-own-actions-from-external-folder", 
            "text": "Add this to the top of your  Fastfile .  actions_path '../custom_actions_folder/'", 
            "title": "Load own actions from external folder"
        }, 
        {
            "location": "/advanced/#skip-update-check-when-launching-fastlane", 
            "text": "You can set the environment variable  FASTLANE_SKIP_UPDATE_CHECK  to skip the update check.", 
            "title": "Skip update check when launching fastlane"
        }, 
        {
            "location": "/advanced/#adding-credentials", 
            "text": "You can add credentials for use by  fastlane  to your keychain using the  CredentialsManager  command line interface. This is useful for situations like CI environments.  Adding a Credential  fastlane-credentials add --username felix@krausefx.com\nPassword: *********\nCredential felix@krausefx.com:********* added to keychain.  Removing a Credential  fastlane-credentials remove --username felix@krausefx.com\npassword has been deleted.", 
            "title": "Adding Credentials"
        }, 
        {
            "location": "/contributing/", 
            "text": "Contributing to \nfastlane\n\n\nGetting started\n\n\nMake sure you have \nbundler\n installed using \ngem install bundler\n\n\n\n\nOpen the GitHub page of the \nfastlane\n repository  (e.g. \nhttps://github.com/fastlane/fastlane\n)\n\n\nCreate an issue to discuss your idea/feature/enhancement.\n\n\nClick on \nFork\n on the top right\n\n\nThen clone your new repo locally \ngit clone https://github.com/[my_user]/fastlane.git\n\n\nOn your terminal, navigate to the project and run \ngit remote add upstream https://github.com/fastlane/fastlane\n (or use the \ngit\n URL if you use private key auth)\n\n\nCreate your feature branch (\ngit checkout -b my-new-feature\n).\n\n\nCommit your changes (\ngit commit -am 'Add some feature'\n).\n\n\nPush to the branch (\ngit push origin my-new-feature\n).\n\n\nCreate a new Pull Request.\n\n\n\n\nBefore working on something, make sure to have pulled the latest changes. To pull the changes run\n\n\ngit pull master\n\n\n\n\nNew Issues\n\n\nBefore submitting a new issue, do the following:\n\n\n\n\nVerify you're running the latest version by running \nfastlane -v\n and compare it with the \nproject page on GitHub\n.\n\n\nVerify you have Xcode tools installed by running \nxcode-select --install\n.\n\n\nMake sure to read through the \nREADME\n of the project.\n\n\n\n\nWhen submitting a new issue, please provide the following information:\n\n\n\n\nThe full stack trace and output when running \nfastlane\n.\n\n\nThe command and parameters you used to launch it.\n\n\nYour \nFastfile\n and all other configuration files you are using.\n\n\n\n\nBy providing this information it's much faster and easier to help you\n\n\nHelping to Resolve Existing Issues\n\n\nIf you're motivated to help out at a level beyond reporting issues, we really appreciate it! :+1: We use the \nhelp wanted\n label to mark things that we think it would be great to have community help in resolving, so that's a great place to start! In addition, working on the following things are super valuable:\n\n\nVerifying Bug Reports\n\n\nAre you able to reproduce this problem on your computer? If so, chime in! If the original issue report is a bit vague, but you have some additional details, please contribute them! If you find a bug report without an example script or configuration, contribute one that can be used to reproduce it.\n\n\nIf you're comfortable diving into the code a bit, see if you can produce a failing test that illustrates the bad behavior in the problematic area of the code! Tests live in the \nspec/\n directory, and are generally named relative to the source code files whose functionality they test. Once you are done, \ngit diff \n my_patch.diff\n can be used to produce a patch file containing the details of your changes, which can be added to the issue.\n\n\nTesting Proposed Fixes\n\n\nAnother way to help out is to verify submitted pull requests. To do that, you'll need to be able to get the author's proposed changes onto your machine. Start by giving yourself a new branch to work in:\n\n\ngit checkout -b testing_branch\n\n\n\n\nNext, you'll need to tell git where to find this contributor's fastlane fork and branch. Let's say that the contributor's username is \nJohnSmith\n and their topic branch is called \nnew_fastlane_action\n located at \nhttps://github.com/JohnSmith/fastlane\n. You can use the following commands to pull their work:\n\n\ngit remote add JohnSmith https://github.com/JohnSmith/fastlane.git\ngit pull JohnSmith new_fastlane_action\n\n\n\n\nOnce you have their changes locally, there's many things worth checking on:\n\n\n\n\nDoes the change work?\n\n\nAre there adequate tests to cover the changes or new functionality? Are the tests clear and testing the right things?\n\n\nIs the related documentation updated? New actions get described in \ndocs/Actions.md\n, for example.\n\n\nHow does the code look to you? Can you think of a nicer or more performant way to implement part of it?\n\n\n\n\nIf you're happy with what you see, leave a comment on the GitHub issue stating your approval. If not, leave a polite suggestion for what you think could be improved and how. The more you can show that you've reviewed the content seriously, the more valuable it will be to the author and other reviewers!\n\n\nPull Requests (PRs)\n\n\nPull requests are always welcome :smile:\n\n\nPRs should reference an open GitHub issue (preferably those marked with the \nhelp wanted\n label). Referring to the issue in the description of your PR is required and is really helpful for establishing the context needed for review.\n\n\nIf you're considering contributing new functionality, please open a new issue explaining the functionality desired first so that we can discuss as a community. We'll add the \nhelp wanted\n label if we believe this to be a meaningful contribution that will benefit other fastlane users and you go ahead with the pull request. :raised_hands:\n\n\n\n\nAdding automated tests that cover your changes and/or new functionality is important!\n\n\nfastlane\n has a lot of moving parts and receives contributions from many developers. The best way to ensure that your contributions keep working is to ensure that there will be failing tests if something accidentally gets broken.\n\n\nYou can run the tests by executing \nbundle install\n and then \nbundle exec rspec\n.\n\n\n\n\n\n\nYour code editor should indent using spaces with a tab size of 2 spaces.\n\n\n\n\nTo submit the changes to the fastlane repo, you have to do the following:\n\n\n\n\nRun \ngit push upstream master\n.\n\n\nOpen \nhttps://github.com/fastlane/fastlane\n in your browser and click the green \"Create Pull Request\" button\n\n\n\n\nWhat Do All These Labels Mean?\n\n\nGreat question! Check out the \nGitHub Labels\n document for a quick summary of the labels we use and what they mean.\n\n\nWhy Did My Issue/PR Get Closed?\n\n\nIt's not you, it's us! fastlane and its related tools receive a lot of issues and PRs. In order to effectively work through them and give each the prompt attention it deserves, we need to keep a sharp focus on the work we have outstanding.\n\n\nOne way we do this is by closing issues that we don't feel are immediately actionable. This might mean that we need more information in order to investigate (Have you provided enough information for us to reproduce the problem? The \nNew Issues\n section has the details!). Or, it might mean that we haven't been able to reproduce it using the provided info. In this case we might close the issue while we wait for others to reproduce the problem and possibly provide some more info that unlocks the mystery.\n\n\nIn any case, \na closed issue is not necessarily the end of the story!\n If more info becomes available after an issue is closed, it can be reopened for further consideration.\n\n\nOne of the best ways we can keep fastlane an approachable, stable, and dependable tool is to be deliberate about how we choose to modify it. If we don't adopt your changes or new feature into fastlane, that doesn't mean it was bad work! It may be that the fastlane philosophy about how to accomplish a particular task doesn't align well with your approach. The best way to make sure that your time is well spent in contributing to fastlane is to \nstart your work\n on a modification or new feature \nby opening an issue to discuss the problem or shortcoming with the community\n. The fastlane maintainers will do our best to give early feedback about whether a particular goal and approach is likely to be something we want to adopt!\n\n\nContributing New Actions\n\n\nThere are different approaches to build your own \nfastlane\n actions. You can either build your own local actions, or provide your own fastlane plugin. For more information, check out \nPlugins.md\n.\n\n\nDeveloping\n\n\nWhen working on something, directly edit the Ruby files in the project folders. Make sure to switch your text editor to use spaces and indentations should be 2 spaces.\n\n\nTo run the modified version of the tool, run the following in the project directory\n\n\n.[tool_name]/bin/[tool_name]\n\n\n\n\nor install the local copy (might require \nsudo\n)\n\n\nbundle install \n rake install\n\n\n\n\nDebugging\n\n\nI use a plain Sublime Text with a terminal. Debugging is pretty easy, just insert the following code to where you want to jump in:\n\n\nrequire 'pry'\nbinding.pry\n\n\n\n\nYou then jump into an interactive debugger that allows you to print out variables, call methods and much more. Continue running the original script using \ncontrol\n + \nd\n\n\nRunning tests\n\n\nIn the directory of one project, run the tests using\n\n\nrake test_all\n\n\nThis will do a few things:\n\n\n\n\nRuns the tests (you can run them via \nrspec\n too)\n\n\nMakes sure no debug code (like \npry\n) is still there\n\n\nThe \n--help\n command works as expected\n\n\n\n\nThe tests are executed using \nfastlane\n :rocket:\n\n\nTo run only a subset of the tests, you can add the \nnow: true\n keyword to the test\n\n\nit \nraises an exception if it rains\n, now: true do\n  # ...\nend\n\n\n\n\nand then run these tests only using\n\n\nrspec -t now\n\n\n\n\nrubocop validation\n\n\nThe \nfastlane\n repos use \nrubocop\n to validate the code style.\n\n\nThe style validation is automatically done when running \nrake test_all\n.\n\n\nTo automatically fix common code style issues (e.g. wrong spacing), run \nrubocop -a\n\n\nNeed help?\n\n\nPlease submit an \nissue\n on GitHub and provide information about your setup\n\n\nCode of Conduct\n\n\nHelp us keep \nfastlane\n open and inclusive. Please read and follow our \nCode of Conduct\n.\n\n\nAbove All, Thanks for Your Contributions\n\n\nThank you for reading to the end, and for taking the time to contribute to the project! If you include the \ud83d\udd11 emoji at the top of the body of your issue or pull request, we'll know that you've given this your full attention and are doing your best to help!\n\n\nLicense\n\n\nThis project is licensed under the terms of the MIT license. See the LICENSE file.\n\n\n\n\nThis project and all fastlane tools are in no way affiliated with Apple Inc. This project is open source under the MIT license, which means you have full access to the source code and can modify it to fit your own needs. All fastlane tools run on your own computer or server, so your credentials or other sensitive information will never leave your own computer. You are responsible for how you use fastlane tools.", 
            "title": "Contributing"
        }, 
        {
            "location": "/contributing/#contributing-to-fastlane", 
            "text": "", 
            "title": "Contributing to fastlane"
        }, 
        {
            "location": "/contributing/#getting-started", 
            "text": "Make sure you have  bundler  installed using  gem install bundler   Open the GitHub page of the  fastlane  repository  (e.g.  https://github.com/fastlane/fastlane )  Create an issue to discuss your idea/feature/enhancement.  Click on  Fork  on the top right  Then clone your new repo locally  git clone https://github.com/[my_user]/fastlane.git  On your terminal, navigate to the project and run  git remote add upstream https://github.com/fastlane/fastlane  (or use the  git  URL if you use private key auth)  Create your feature branch ( git checkout -b my-new-feature ).  Commit your changes ( git commit -am 'Add some feature' ).  Push to the branch ( git push origin my-new-feature ).  Create a new Pull Request.   Before working on something, make sure to have pulled the latest changes. To pull the changes run  git pull master", 
            "title": "Getting started"
        }, 
        {
            "location": "/contributing/#new-issues", 
            "text": "Before submitting a new issue, do the following:   Verify you're running the latest version by running  fastlane -v  and compare it with the  project page on GitHub .  Verify you have Xcode tools installed by running  xcode-select --install .  Make sure to read through the  README  of the project.   When submitting a new issue, please provide the following information:   The full stack trace and output when running  fastlane .  The command and parameters you used to launch it.  Your  Fastfile  and all other configuration files you are using.   By providing this information it's much faster and easier to help you", 
            "title": "New Issues"
        }, 
        {
            "location": "/contributing/#helping-to-resolve-existing-issues", 
            "text": "If you're motivated to help out at a level beyond reporting issues, we really appreciate it! :+1: We use the  help wanted  label to mark things that we think it would be great to have community help in resolving, so that's a great place to start! In addition, working on the following things are super valuable:", 
            "title": "Helping to Resolve Existing Issues"
        }, 
        {
            "location": "/contributing/#verifying-bug-reports", 
            "text": "Are you able to reproduce this problem on your computer? If so, chime in! If the original issue report is a bit vague, but you have some additional details, please contribute them! If you find a bug report without an example script or configuration, contribute one that can be used to reproduce it.  If you're comfortable diving into the code a bit, see if you can produce a failing test that illustrates the bad behavior in the problematic area of the code! Tests live in the  spec/  directory, and are generally named relative to the source code files whose functionality they test. Once you are done,  git diff   my_patch.diff  can be used to produce a patch file containing the details of your changes, which can be added to the issue.", 
            "title": "Verifying Bug Reports"
        }, 
        {
            "location": "/contributing/#testing-proposed-fixes", 
            "text": "Another way to help out is to verify submitted pull requests. To do that, you'll need to be able to get the author's proposed changes onto your machine. Start by giving yourself a new branch to work in:  git checkout -b testing_branch  Next, you'll need to tell git where to find this contributor's fastlane fork and branch. Let's say that the contributor's username is  JohnSmith  and their topic branch is called  new_fastlane_action  located at  https://github.com/JohnSmith/fastlane . You can use the following commands to pull their work:  git remote add JohnSmith https://github.com/JohnSmith/fastlane.git\ngit pull JohnSmith new_fastlane_action  Once you have their changes locally, there's many things worth checking on:   Does the change work?  Are there adequate tests to cover the changes or new functionality? Are the tests clear and testing the right things?  Is the related documentation updated? New actions get described in  docs/Actions.md , for example.  How does the code look to you? Can you think of a nicer or more performant way to implement part of it?   If you're happy with what you see, leave a comment on the GitHub issue stating your approval. If not, leave a polite suggestion for what you think could be improved and how. The more you can show that you've reviewed the content seriously, the more valuable it will be to the author and other reviewers!", 
            "title": "Testing Proposed Fixes"
        }, 
        {
            "location": "/contributing/#pull-requests-prs", 
            "text": "Pull requests are always welcome :smile:  PRs should reference an open GitHub issue (preferably those marked with the  help wanted  label). Referring to the issue in the description of your PR is required and is really helpful for establishing the context needed for review.  If you're considering contributing new functionality, please open a new issue explaining the functionality desired first so that we can discuss as a community. We'll add the  help wanted  label if we believe this to be a meaningful contribution that will benefit other fastlane users and you go ahead with the pull request. :raised_hands:   Adding automated tests that cover your changes and/or new functionality is important!  fastlane  has a lot of moving parts and receives contributions from many developers. The best way to ensure that your contributions keep working is to ensure that there will be failing tests if something accidentally gets broken.  You can run the tests by executing  bundle install  and then  bundle exec rspec .    Your code editor should indent using spaces with a tab size of 2 spaces.   To submit the changes to the fastlane repo, you have to do the following:   Run  git push upstream master .  Open  https://github.com/fastlane/fastlane  in your browser and click the green \"Create Pull Request\" button", 
            "title": "Pull Requests (PRs)"
        }, 
        {
            "location": "/contributing/#what-do-all-these-labels-mean", 
            "text": "Great question! Check out the  GitHub Labels  document for a quick summary of the labels we use and what they mean.", 
            "title": "What Do All These Labels Mean?"
        }, 
        {
            "location": "/contributing/#why-did-my-issuepr-get-closed", 
            "text": "It's not you, it's us! fastlane and its related tools receive a lot of issues and PRs. In order to effectively work through them and give each the prompt attention it deserves, we need to keep a sharp focus on the work we have outstanding.  One way we do this is by closing issues that we don't feel are immediately actionable. This might mean that we need more information in order to investigate (Have you provided enough information for us to reproduce the problem? The  New Issues  section has the details!). Or, it might mean that we haven't been able to reproduce it using the provided info. In this case we might close the issue while we wait for others to reproduce the problem and possibly provide some more info that unlocks the mystery.  In any case,  a closed issue is not necessarily the end of the story!  If more info becomes available after an issue is closed, it can be reopened for further consideration.  One of the best ways we can keep fastlane an approachable, stable, and dependable tool is to be deliberate about how we choose to modify it. If we don't adopt your changes or new feature into fastlane, that doesn't mean it was bad work! It may be that the fastlane philosophy about how to accomplish a particular task doesn't align well with your approach. The best way to make sure that your time is well spent in contributing to fastlane is to  start your work  on a modification or new feature  by opening an issue to discuss the problem or shortcoming with the community . The fastlane maintainers will do our best to give early feedback about whether a particular goal and approach is likely to be something we want to adopt!", 
            "title": "Why Did My Issue/PR Get Closed?"
        }, 
        {
            "location": "/contributing/#contributing-new-actions", 
            "text": "There are different approaches to build your own  fastlane  actions. You can either build your own local actions, or provide your own fastlane plugin. For more information, check out  Plugins.md .", 
            "title": "Contributing New Actions"
        }, 
        {
            "location": "/contributing/#developing", 
            "text": "When working on something, directly edit the Ruby files in the project folders. Make sure to switch your text editor to use spaces and indentations should be 2 spaces.  To run the modified version of the tool, run the following in the project directory  .[tool_name]/bin/[tool_name]  or install the local copy (might require  sudo )  bundle install   rake install", 
            "title": "Developing"
        }, 
        {
            "location": "/contributing/#debugging", 
            "text": "I use a plain Sublime Text with a terminal. Debugging is pretty easy, just insert the following code to where you want to jump in:  require 'pry'\nbinding.pry  You then jump into an interactive debugger that allows you to print out variables, call methods and much more. Continue running the original script using  control  +  d", 
            "title": "Debugging"
        }, 
        {
            "location": "/contributing/#running-tests", 
            "text": "In the directory of one project, run the tests using  rake test_all  This will do a few things:   Runs the tests (you can run them via  rspec  too)  Makes sure no debug code (like  pry ) is still there  The  --help  command works as expected   The tests are executed using  fastlane  :rocket:  To run only a subset of the tests, you can add the  now: true  keyword to the test  it  raises an exception if it rains , now: true do\n  # ...\nend  and then run these tests only using  rspec -t now", 
            "title": "Running tests"
        }, 
        {
            "location": "/contributing/#rubocop-validation", 
            "text": "The  fastlane  repos use  rubocop  to validate the code style.  The style validation is automatically done when running  rake test_all .  To automatically fix common code style issues (e.g. wrong spacing), run  rubocop -a", 
            "title": "rubocop validation"
        }, 
        {
            "location": "/contributing/#need-help", 
            "text": "Please submit an  issue  on GitHub and provide information about your setup", 
            "title": "Need help?"
        }, 
        {
            "location": "/contributing/#code-of-conduct", 
            "text": "Help us keep  fastlane  open and inclusive. Please read and follow our  Code of Conduct .", 
            "title": "Code of Conduct"
        }, 
        {
            "location": "/contributing/#above-all-thanks-for-your-contributions", 
            "text": "Thank you for reading to the end, and for taking the time to contribute to the project! If you include the \ud83d\udd11 emoji at the top of the body of your issue or pull request, we'll know that you've given this your full attention and are doing your best to help!", 
            "title": "Above All, Thanks for Your Contributions"
        }, 
        {
            "location": "/contributing/#license", 
            "text": "This project is licensed under the terms of the MIT license. See the LICENSE file.   This project and all fastlane tools are in no way affiliated with Apple Inc. This project is open source under the MIT license, which means you have full access to the source code and can modify it to fit your own needs. All fastlane tools run on your own computer or server, so your credentials or other sensitive information will never leave your own computer. You are responsible for how you use fastlane tools.", 
            "title": "License"
        }
    ]
}