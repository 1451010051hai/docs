{
    "docs": [
        {
            "location": "/", 
            "text": "fastlane\n\n\n\n\n\n\n\n\nfastlane\n is \nthe\n tool to release your iOS and Android app :rocket: It handles all tedious tasks, like generating screenshots, dealing with code signing, and releasing your application.\n\n\nTODO: Alternative\n\n\nfastlane\n is a tool for iOS, Mac, and Android developers to automate tedious tasks like generating screenshots, dealing with provisioning profiles, and releasing your application.\n\n\nYou create a so-called \nFastfile\n in your repository, that defines how your beta or App Store release process:\n\n\nlane :beta do\n  increment_build_number\n  gym                       # Build your app\n  testflight                # Upload to TestFlight\nend\n\nlane :appstore do\n  snapshot                  # Generate screenshots for the App Store\n  gym                       # Build your app\n  deliver                   # Upload the screenshots and the binary to iTunes\n  slack                     # Let your team-mates know the new version is live\nend\n\n\n\n\nYou just defined 2 different lanes, one for beta deployment, one for App Store. To release your app in the App Store, all you have to do is\n\n\nfastlane appstore\n\n\n\n\nWhy fastlane?\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\ud83d\ude80\n\n\nSave \nhours\n every time you push a new release to the store or beta testing service\n\n\n\n\n\n\n\u2728\n\n\nIntegrates with all your existing tools and services (170 actions currently)\n\n\n\n\n\n\n\ud83d\udcd6\n\n\n100% open source under the MIT license\n\n\n\n\n\n\n\ud83c\udfa9\n\n\nEasy setup assistant to get started in a few minutes\n\n\n\n\n\n\n\u2692\n\n\nRuns on \nyour\n machine, it's your app and your data\n\n\n\n\n\n\n\ud83d\udc7b\n\n\nIntegrates with all major CI systems\n\n\n\n\n\n\n\ud83d\udda5\n\n\nSupports iOS, Mac, and Android apps\n\n\n\n\n\n\n\ud83d\udd27\n\n\nExtend and customise \nfastlane\n to fit your needs, you're not dependent on anyone\n\n\n\n\n\n\n\ud83d\udcad\n\n\nNever remember any commands any more, just \nfastlane\n\n\n\n\n\n\n\ud83d\udea2\n\n\nDeploy from any computer, including a CI server\n\n\n\n\n\n\n\n\nGetting Started\n\n\nMake sure you have the latest version of the Xcode command line tools installed:\n\n\nxcode-select --install\n\n\n\n\nUsing the terminal\n\n\nsudo gem install fastlane --verbose\n\n\n\n\nNavigate to your iOS or Android app and run\n\n\nfastlane init\n\n\n\n\nfastlane\n will automatically detect your project, and ask for any missing information.\n\n\nFor more details about how to get up and running, check out the getting started guides:\n\n\n\n\nfastlane Getting Started guide for iOS\n\n\nfastlane Getting Started guide for Android\n\n\n\n\nUsing the Fabric app\n\n\nIf you're not familiar with the terminal and prefer a graphical user interface, download the \nFabric app\n and use the built-in \nfastlane\n button.\n\n\nQuestions and support\n\n\nAll fastlane related questions, problems and feature ideas should be posted as \nGitHub issue\n. This way, other users can search existing discussions, and everybody can jump in.\n\n\nSystem requirements\n\n\nfastlane\n requires macOS or Linux with Ruby 2.0.0 or above\n\n\nCode of Conduct\n\n\nHelp us keep \nfastlane\n open and inclusive. Please read and follow our \nCode of Conduct\n.\n\n\nLicense\n\n\nThis project is licensed under the terms of the MIT license. See the \nLICENSE\n file.\n\n\n\n\nThis project and all fastlane tools are in no way affiliated with Apple Inc or Google. This project is open source under the MIT license, which means you have full access to the source code and can modify it to fit your own needs. All fastlane tools run on your own computer or server, so your credentials or other sensitive information will never leave your own computer. You are responsible for how you use fastlane tools.", 
            "title": "Home"
        }, 
        {
            "location": "/#fastlane", 
            "text": "fastlane  is  the  tool to release your iOS and Android app :rocket: It handles all tedious tasks, like generating screenshots, dealing with code signing, and releasing your application.  TODO: Alternative  fastlane  is a tool for iOS, Mac, and Android developers to automate tedious tasks like generating screenshots, dealing with provisioning profiles, and releasing your application.  You create a so-called  Fastfile  in your repository, that defines how your beta or App Store release process:  lane :beta do\n  increment_build_number\n  gym                       # Build your app\n  testflight                # Upload to TestFlight\nend\n\nlane :appstore do\n  snapshot                  # Generate screenshots for the App Store\n  gym                       # Build your app\n  deliver                   # Upload the screenshots and the binary to iTunes\n  slack                     # Let your team-mates know the new version is live\nend  You just defined 2 different lanes, one for beta deployment, one for App Store. To release your app in the App Store, all you have to do is  fastlane appstore", 
            "title": "fastlane"
        }, 
        {
            "location": "/#why-fastlane", 
            "text": "\ud83d\ude80  Save  hours  every time you push a new release to the store or beta testing service    \u2728  Integrates with all your existing tools and services (170 actions currently)    \ud83d\udcd6  100% open source under the MIT license    \ud83c\udfa9  Easy setup assistant to get started in a few minutes    \u2692  Runs on  your  machine, it's your app and your data    \ud83d\udc7b  Integrates with all major CI systems    \ud83d\udda5  Supports iOS, Mac, and Android apps    \ud83d\udd27  Extend and customise  fastlane  to fit your needs, you're not dependent on anyone    \ud83d\udcad  Never remember any commands any more, just  fastlane    \ud83d\udea2  Deploy from any computer, including a CI server", 
            "title": "Why fastlane?"
        }, 
        {
            "location": "/#getting-started", 
            "text": "Make sure you have the latest version of the Xcode command line tools installed:  xcode-select --install", 
            "title": "Getting Started"
        }, 
        {
            "location": "/#using-the-terminal", 
            "text": "sudo gem install fastlane --verbose  Navigate to your iOS or Android app and run  fastlane init  fastlane  will automatically detect your project, and ask for any missing information.  For more details about how to get up and running, check out the getting started guides:   fastlane Getting Started guide for iOS  fastlane Getting Started guide for Android", 
            "title": "Using the terminal"
        }, 
        {
            "location": "/#using-the-fabric-app", 
            "text": "If you're not familiar with the terminal and prefer a graphical user interface, download the  Fabric app  and use the built-in  fastlane  button.", 
            "title": "Using the Fabric app"
        }, 
        {
            "location": "/#questions-and-support", 
            "text": "All fastlane related questions, problems and feature ideas should be posted as  GitHub issue . This way, other users can search existing discussions, and everybody can jump in.", 
            "title": "Questions and support"
        }, 
        {
            "location": "/#system-requirements", 
            "text": "fastlane  requires macOS or Linux with Ruby 2.0.0 or above", 
            "title": "System requirements"
        }, 
        {
            "location": "/#code-of-conduct", 
            "text": "Help us keep  fastlane  open and inclusive. Please read and follow our  Code of Conduct .", 
            "title": "Code of Conduct"
        }, 
        {
            "location": "/#license", 
            "text": "This project is licensed under the terms of the MIT license. See the  LICENSE  file.   This project and all fastlane tools are in no way affiliated with Apple Inc or Google. This project is open source under the MIT license, which means you have full access to the source code and can modify it to fit your own needs. All fastlane tools run on your own computer or server, so your credentials or other sensitive information will never leave your own computer. You are responsible for how you use fastlane tools.", 
            "title": "License"
        }, 
        {
            "location": "/getting-started/ios/setup/", 
            "text": "Getting started with \nfastlane\n for iOS\n\n\nInstalling fastlane\n\n\nsudo gem install fastlane --verbose\n\n\n\n\nSetting up fastlane\n\n\nNavigate your terminal to your project's directory and run\n\n\nfastlane init\n\n\n\n\nYou'll be asked for your Apple ID, and \nfastlane\n will automatically generate a fastlane configuration for you, based on the information provided.\n\n\nYou can see the newly created \nfastlane\n directory, with all your existing metadata fetched from iTunes Connect.\n\n\n\n\nThe most interesting file is \nfastlane/Fastfile\n, which contains all the information that is needed to distribute your app.\n\n\nWhat's next?\n\n\nfastlane\n created all the required files for you, now you can go ahead and customise it to generate screenshots or to automatically distribute new builds\n\n\n\n\nAutomatically generate screenshots\n\n\nDistribute beta builds\n\n\nDeploy to the App Store\n\n\n\n\nUse a Gemfile\n\n\nIt is recommended that you use a Gemfile to define your dependency to \nfastlane\n. This will clearly define the used fastlane version, and its dependencies, and will also speed up using fastlane.\n\n\n\n\nCreate a \nGemfile\n with the content\n\n\n\n\nsource \nhttps://rubygems.org\n\n\ngem \nfastlane\n\n\n\n\n\n\n\nRun \nbundle update\n and add both the \nGemfile\n and the \nGemfile.lock\n to version control\n\n\nEvery time you run \nfastlane\n, use \nbundle exec fastlane [lane]\n\n\nOn your CI, add \nbundle install\n as your first build step\n\n\nTo update \nfastlane\n, just run \nbundle update", 
            "title": "Setup"
        }, 
        {
            "location": "/getting-started/ios/setup/#getting-started-with-fastlane-for-ios", 
            "text": "", 
            "title": "Getting started with fastlane for iOS"
        }, 
        {
            "location": "/getting-started/ios/setup/#installing-fastlane", 
            "text": "sudo gem install fastlane --verbose", 
            "title": "Installing fastlane"
        }, 
        {
            "location": "/getting-started/ios/setup/#setting-up-fastlane", 
            "text": "Navigate your terminal to your project's directory and run  fastlane init  You'll be asked for your Apple ID, and  fastlane  will automatically generate a fastlane configuration for you, based on the information provided.  You can see the newly created  fastlane  directory, with all your existing metadata fetched from iTunes Connect.   The most interesting file is  fastlane/Fastfile , which contains all the information that is needed to distribute your app.", 
            "title": "Setting up fastlane"
        }, 
        {
            "location": "/getting-started/ios/setup/#whats-next", 
            "text": "fastlane  created all the required files for you, now you can go ahead and customise it to generate screenshots or to automatically distribute new builds   Automatically generate screenshots  Distribute beta builds  Deploy to the App Store", 
            "title": "What's next?"
        }, 
        {
            "location": "/getting-started/ios/setup/#use-a-gemfile", 
            "text": "It is recommended that you use a Gemfile to define your dependency to  fastlane . This will clearly define the used fastlane version, and its dependencies, and will also speed up using fastlane.   Create a  Gemfile  with the content   source  https://rubygems.org \n\ngem  fastlane    Run  bundle update  and add both the  Gemfile  and the  Gemfile.lock  to version control  Every time you run  fastlane , use  bundle exec fastlane [lane]  On your CI, add  bundle install  as your first build step  To update  fastlane , just run  bundle update", 
            "title": "Use a Gemfile"
        }, 
        {
            "location": "/getting-started/ios/screenshots/", 
            "text": "fastlane screenshots for iOS and tvOS\n\n\nYour App Store screenshots are probably the most important thing when it comes to convincing potential users to download or purchase your app. Unfortunately, many apps don't do screenshots well. This is often because taking screenshots of your app and then preparing them for display is time consuming, and it's hard to get everything right and consistent! For example:\n\n\n\n\nAre the screenshots in the App Store inconsistent with your latest app design?\n\n\nIs your app localized into many languages that require different screenshots for each?\n\n\nHave you made sure that no loading indicators are showing?\n\n\nIs the same content displayed for each of your size variations?\n\n\n\n\nfastlane\n tools can automate this process making it fast, and consistent while giving you beautiful results!\n\n\nAlternatives\n\n\nFor the full story about the many ways that developers can capture and beautify screenshots check out \nthis article\n.\n\n\nManually Capturing Screenshots\n\n\nIt goes without saying that this takes too much time, which also decreases the quality of the screenshots. Since it is not automated, the screenshots will show slightly different content on the various devices and languages. Many companies choose to create screenshots in one language and use them for all languages. While this might seem okay to us developers, there are many potential users out there that cannot read the text on your app screenshots if they are not localised. Have you ever looked at a screenshots with content in a language you don't know? It won't convince you to download the app.\n\n\nHowever, the biggest disadvantage of this method is what happens when you need to repeat the process. If you notice a spelling mistake in the screenshots, if you release an update with a new design, or if you just want to show more up to date content, you'll have to create new screenshots for all languages and devices... manually.\n\n\nThe positive side of this approach is that your screenshots will all be crisp and correctly sized, with readable text.\n\n\nScaled Screenshots via iTunes Connect\n\n\nWith the \niTunes Connect screenshot update\n from August 2016, you can now use one set of screenshots for all available devices and screenshots. iTunes Connect will automatically scale the images for you, so that each device renders the same exact image.\n\n\nWhile this is convenient, this approach has the same problems as the device frame approach: The screenshots don't actually show how the app looks on the user's device. It's a valid way to start though, since you can gradually overwrite screenshots for specific languages and devices.\n\n\nCapture Screenshots Automatically\n\n\nsnapshot\n works with \nfastlane\n to automate the process of capturing screenshots of your app. It allows you to:\n\n\n\n\nCapture hundreds of screenshots in multiple languages on all simulators\n\n\nDo something else while the computer takes the screenshots for you\n\n\nConfigure it once, and store the configuration so anyone on the team can run it\n\n\nGenerate a beautiful web page showing all screenshots on all devices. This is perfect to send to Q\nA, marketing, or translators for verification\n\n\nAvoid having loading indicators in your App Store screenshots by intelligently waiting for network requests to be finished\n\n\nGet a summary of how your app looks like across all supported devices and languages\n\n\n\n\nAfter \nsnapshot\n successfully captures all the screenshots, it will show you a beautiful HTML page to summarize all the screens that were captured:\n\n\n\n\nGetting Started Using UI Tests\n\n\nsnapshot\n uses the capabilities of Apple's UI Tests to drive interactions with your app. To get familiar with writing UI Tests, check out the following introductions:\n\n\n\n\nWWDC 2015 Introduction to UI Tests\n\n\nA first look into UI Tests\n\n\nUI Testing in Xcode 7\n\n\nHSTestingBackchannel : \u2018Cheat\u2019 by communicating directly with your app\n\n\nAutomating App Store screenshots using fastlane snapshot and frameit\n\n\n\n\nTo jump-start your UI tests, you can use the UI Test recorder, which you can start by clicking the red record button on the bottom of the window. By interacting with your app through the simulator while using it, Xcode will generate UI Test code for you. To learn more, check out this \nthis blog post\n!\n\n\nSetting Up \nsnapshot\n\n\n\n\nCreate a new UI Test target in your Xcode project (See the top part of \nthis article\n)\n\n\nRun \nsnapshot init\n in your project folder\n\n\nAdd the \n./SnapshotHelper.swift\n file to your UI Test target (You can move the file anywhere you want)\n\n\n(Objective C only) Add the bridging header to your test class.\n\n\n#import \"MYUITests-Swift.h\"\n\n\nThe bridging header is named after your test target with -Swift.h appended.\n\n\n\n\n\n\nIn your UI Test class, click the \nRecord\n button on the bottom left and record your interaction\n\n\nTo take a screenshot, call the following between interactions\n\n\nSwift: \nsnapshot(\"01LoginScreen\")\n\n\nObjective C: \n[Snapshot snapshot:@\"01LoginScreen\" waitForLoadingIndicator:YES];\n\n\n\n\n\n\nAdd the following code to your \nsetUp()\n method:\n\n\n\n\nSwift\n\n\nlet app = XCUIApplication()\nsetupSnapshot(app)\napp.launch()\n\n\n\n\nObjective C\n\n\nXCUIApplication *app = [[XCUIApplication alloc] init];\n[Snapshot setupSnapshot:app];\n[app launch];\n\n\n\n\nIf you have \nfastlane\n installed, it's easy to give \nsnapshot\n a try. First clone the \nfastlane\n repo, head over to the \nsnapshot\n example project, and then run \nfastlane snapshot\n\n\ngit clone https://github.com/fastlane/fastlane  # Clone the fastlane repo\ncd fastlane/snapshot/example                    # Navigate to the example project\nfastlane snapshot                               # Generate screenshots for the sample app\n\n\n\n\n\n\nUpload Screenshots for the App Store\n\n\nAfter generating your screenshots using \nfastlane snapshot\n, you usually want to upload them to iTunes Connect.\n\n\nIf you followed the setup guide, you already ran \nfastlane init\n before, so you should have your existing screenshots and metadata inside the \nfastlane/screenshots\n and \nfastlane/metadata\n directory. Running \nfastlane snapshot\n will store the screenshots in the \nfastlane/screenshots\n directory by default. \n\n\nTo upload the screenshots stored in \nfastlane/screenshots\n, just run\n\n\nfastlane deliver\n\n\n\n\nThis will also show you a metadata summary, before actually uploading the screenshots, as this will overwrite the metadata and screenshots you already have on iTunes Connect. \n\n\nUse in Fastfile\n\n\nTo put all of this together so that anyone on your team could trigger generating and uploading new screenshots, you can define a \nfastlane\n lane called \nscreenshots\n. It would be responsible for:\n\n\n\n\nRunning your app through \nsnapshot\n to automatically capture your screenshots\n\n\nHaving \ndeliver\n send your final screenshots to iTunes Connect for use in the App Store\n\n\n\n\nAdd the following code to your \nfastlane/Fastfile\n:\n\n\nlane :screenshots do\n  snapshot\n  deliver\nend\n\n\n\n\nTo get a list of all available options for each of the steps, run\n\n\nfastlane action snapshot\nfastlane action deliver\n\n\n\n\nPut Your Screenshots Into Device Frames\n\n\nframeit\n helps you beautify your screenshots with devices frames and text by running one simple command. It provides support for:\n\n\n\n\nMultiple device types\n\n\nPortrait and landscape orientations\n\n\nBlack and silver devices\n\n\nSetting a background color and decorating the image with text\n\n\n\n\n\n\nUsage\n\n\nAutomatically add device frames around all screenshots in the current directory and its subdirectories, just run\n\n\nfastlane frameit\n\n\n\n\nThis will only add a device frame around the screenshots, not the background and title. Those images can be used for your website, email newsletter and similar.\n\n\nIf you want to implement the custom titles and background, you'll have to setup a \nFramefile.json\n, more information can be found \nhere\n.\n\n\nIf you want to upload the screenshots to the App Store, you \nhave\n to provide a \nFramefile.json\n, with titles and background, otherwise the resolution of the framed screenshots doesn't match the requirements of iTunes Connect.\n\n\nDependencies\n\n\n\n\nInstalling ImageMagick\n\n\nframeit\n depends on a tool called \nimagemagick\n to do image manipulation. The easiest way to install it is through \nhomebrew\n:\n\n\nbrew install libpng jpeg imagemagick\n\n\n\n\n\n\n\n\nTroubleshooting ImageMagick\n\n\nIf you have installed \nimagemagick\n but are seeing error messages like:\n\n\nmogrify: no decode delegate for this image format `PNG'\n\n\n\n\nYou may need to reinstall and build from source. Run:\n\n\nbrew uninstall imagemagick; brew install libpng jpeg; brew install imagemagick --build-from-source\n\n\n\n\n\n\n\n\nSetting Up Device Frames\n\n\nfastlane\n uses device frames provided by Apple which need to be downloaded and installed separately for legal reasons. Running \nfastlane frameit setup\n can walk you through the process.\n\n\nfastlane frameit setup\n\n\n\n\n\n\nTo add the framing to your deployment process, use the following code in your \nFastfile\n:\n\n\nlane :screenshots do\n  snapshot\n  frameit(white: true)\n  deliver\nend", 
            "title": "Screenshots"
        }, 
        {
            "location": "/getting-started/ios/screenshots/#fastlane-screenshots-for-ios-and-tvos", 
            "text": "Your App Store screenshots are probably the most important thing when it comes to convincing potential users to download or purchase your app. Unfortunately, many apps don't do screenshots well. This is often because taking screenshots of your app and then preparing them for display is time consuming, and it's hard to get everything right and consistent! For example:   Are the screenshots in the App Store inconsistent with your latest app design?  Is your app localized into many languages that require different screenshots for each?  Have you made sure that no loading indicators are showing?  Is the same content displayed for each of your size variations?   fastlane  tools can automate this process making it fast, and consistent while giving you beautiful results!", 
            "title": "fastlane screenshots for iOS and tvOS"
        }, 
        {
            "location": "/getting-started/ios/screenshots/#alternatives", 
            "text": "For the full story about the many ways that developers can capture and beautify screenshots check out  this article .", 
            "title": "Alternatives"
        }, 
        {
            "location": "/getting-started/ios/screenshots/#manually-capturing-screenshots", 
            "text": "It goes without saying that this takes too much time, which also decreases the quality of the screenshots. Since it is not automated, the screenshots will show slightly different content on the various devices and languages. Many companies choose to create screenshots in one language and use them for all languages. While this might seem okay to us developers, there are many potential users out there that cannot read the text on your app screenshots if they are not localised. Have you ever looked at a screenshots with content in a language you don't know? It won't convince you to download the app.  However, the biggest disadvantage of this method is what happens when you need to repeat the process. If you notice a spelling mistake in the screenshots, if you release an update with a new design, or if you just want to show more up to date content, you'll have to create new screenshots for all languages and devices... manually.  The positive side of this approach is that your screenshots will all be crisp and correctly sized, with readable text.", 
            "title": "Manually Capturing Screenshots"
        }, 
        {
            "location": "/getting-started/ios/screenshots/#scaled-screenshots-via-itunes-connect", 
            "text": "With the  iTunes Connect screenshot update  from August 2016, you can now use one set of screenshots for all available devices and screenshots. iTunes Connect will automatically scale the images for you, so that each device renders the same exact image.  While this is convenient, this approach has the same problems as the device frame approach: The screenshots don't actually show how the app looks on the user's device. It's a valid way to start though, since you can gradually overwrite screenshots for specific languages and devices.", 
            "title": "Scaled Screenshots via iTunes Connect"
        }, 
        {
            "location": "/getting-started/ios/screenshots/#capture-screenshots-automatically", 
            "text": "snapshot  works with  fastlane  to automate the process of capturing screenshots of your app. It allows you to:   Capture hundreds of screenshots in multiple languages on all simulators  Do something else while the computer takes the screenshots for you  Configure it once, and store the configuration so anyone on the team can run it  Generate a beautiful web page showing all screenshots on all devices. This is perfect to send to Q A, marketing, or translators for verification  Avoid having loading indicators in your App Store screenshots by intelligently waiting for network requests to be finished  Get a summary of how your app looks like across all supported devices and languages   After  snapshot  successfully captures all the screenshots, it will show you a beautiful HTML page to summarize all the screens that were captured:", 
            "title": "Capture Screenshots Automatically"
        }, 
        {
            "location": "/getting-started/ios/screenshots/#getting-started-using-ui-tests", 
            "text": "snapshot  uses the capabilities of Apple's UI Tests to drive interactions with your app. To get familiar with writing UI Tests, check out the following introductions:   WWDC 2015 Introduction to UI Tests  A first look into UI Tests  UI Testing in Xcode 7  HSTestingBackchannel : \u2018Cheat\u2019 by communicating directly with your app  Automating App Store screenshots using fastlane snapshot and frameit   To jump-start your UI tests, you can use the UI Test recorder, which you can start by clicking the red record button on the bottom of the window. By interacting with your app through the simulator while using it, Xcode will generate UI Test code for you. To learn more, check out this  this blog post !", 
            "title": "Getting Started Using UI Tests"
        }, 
        {
            "location": "/getting-started/ios/screenshots/#setting-up-snapshot", 
            "text": "Create a new UI Test target in your Xcode project (See the top part of  this article )  Run  snapshot init  in your project folder  Add the  ./SnapshotHelper.swift  file to your UI Test target (You can move the file anywhere you want)  (Objective C only) Add the bridging header to your test class.  #import \"MYUITests-Swift.h\"  The bridging header is named after your test target with -Swift.h appended.    In your UI Test class, click the  Record  button on the bottom left and record your interaction  To take a screenshot, call the following between interactions  Swift:  snapshot(\"01LoginScreen\")  Objective C:  [Snapshot snapshot:@\"01LoginScreen\" waitForLoadingIndicator:YES];    Add the following code to your  setUp()  method:   Swift  let app = XCUIApplication()\nsetupSnapshot(app)\napp.launch()  Objective C  XCUIApplication *app = [[XCUIApplication alloc] init];\n[Snapshot setupSnapshot:app];\n[app launch];  If you have  fastlane  installed, it's easy to give  snapshot  a try. First clone the  fastlane  repo, head over to the  snapshot  example project, and then run  fastlane snapshot  git clone https://github.com/fastlane/fastlane  # Clone the fastlane repo\ncd fastlane/snapshot/example                    # Navigate to the example project\nfastlane snapshot                               # Generate screenshots for the sample app", 
            "title": "Setting Up snapshot"
        }, 
        {
            "location": "/getting-started/ios/screenshots/#upload-screenshots-for-the-app-store", 
            "text": "After generating your screenshots using  fastlane snapshot , you usually want to upload them to iTunes Connect.  If you followed the setup guide, you already ran  fastlane init  before, so you should have your existing screenshots and metadata inside the  fastlane/screenshots  and  fastlane/metadata  directory. Running  fastlane snapshot  will store the screenshots in the  fastlane/screenshots  directory by default.   To upload the screenshots stored in  fastlane/screenshots , just run  fastlane deliver  This will also show you a metadata summary, before actually uploading the screenshots, as this will overwrite the metadata and screenshots you already have on iTunes Connect.", 
            "title": "Upload Screenshots for the App Store"
        }, 
        {
            "location": "/getting-started/ios/screenshots/#use-in-fastfile", 
            "text": "To put all of this together so that anyone on your team could trigger generating and uploading new screenshots, you can define a  fastlane  lane called  screenshots . It would be responsible for:   Running your app through  snapshot  to automatically capture your screenshots  Having  deliver  send your final screenshots to iTunes Connect for use in the App Store   Add the following code to your  fastlane/Fastfile :  lane :screenshots do\n  snapshot\n  deliver\nend  To get a list of all available options for each of the steps, run  fastlane action snapshot\nfastlane action deliver", 
            "title": "Use in Fastfile"
        }, 
        {
            "location": "/getting-started/ios/screenshots/#put-your-screenshots-into-device-frames", 
            "text": "frameit  helps you beautify your screenshots with devices frames and text by running one simple command. It provides support for:   Multiple device types  Portrait and landscape orientations  Black and silver devices  Setting a background color and decorating the image with text", 
            "title": "Put Your Screenshots Into Device Frames"
        }, 
        {
            "location": "/getting-started/ios/screenshots/#usage", 
            "text": "Automatically add device frames around all screenshots in the current directory and its subdirectories, just run  fastlane frameit  This will only add a device frame around the screenshots, not the background and title. Those images can be used for your website, email newsletter and similar.  If you want to implement the custom titles and background, you'll have to setup a  Framefile.json , more information can be found  here .  If you want to upload the screenshots to the App Store, you  have  to provide a  Framefile.json , with titles and background, otherwise the resolution of the framed screenshots doesn't match the requirements of iTunes Connect.", 
            "title": "Usage"
        }, 
        {
            "location": "/getting-started/ios/screenshots/#dependencies", 
            "text": "Installing ImageMagick  frameit  depends on a tool called  imagemagick  to do image manipulation. The easiest way to install it is through  homebrew :  brew install libpng jpeg imagemagick    Troubleshooting ImageMagick  If you have installed  imagemagick  but are seeing error messages like:  mogrify: no decode delegate for this image format `PNG'  You may need to reinstall and build from source. Run:  brew uninstall imagemagick; brew install libpng jpeg; brew install imagemagick --build-from-source    Setting Up Device Frames  fastlane  uses device frames provided by Apple which need to be downloaded and installed separately for legal reasons. Running  fastlane frameit setup  can walk you through the process.  fastlane frameit setup   To add the framing to your deployment process, use the following code in your  Fastfile :  lane :screenshots do\n  snapshot\n  frameit(white: true)\n  deliver\nend", 
            "title": "Dependencies"
        }, 
        {
            "location": "/getting-started/ios/beta-deployment/", 
            "text": "iOS Beta deployment using fastlane\n\n\nBuilding your app\n\n\nfastlane\n takes care of building your app using a feature called \ngym\n, just add the following to your \nFastfile\n:\n\n\nlane :beta do\n  gym(scheme: \nMyApp\n)\nend\n\n\n\n\nAdditionally you can specify more options for building your app, for example\n\n\nlane :beta do\n  gym(scheme: \nMyApp\n,\n      workspace: \nExample.xcworkspace\n,\n      include_bitcode: true)\nend\n\n\n\n\nTry running the lane using\n\n\nfastlane beta\n\n\n\n\nIf everything works, you should have a \n[ProductName].ipa\n file in the current directory. To get a list of all available parameters for \ngym\n, run \nfastlane action gym\n.\n\n\nCodesigning\n\n\nChances are that something went wrong because of code signing at the previous step. We prepared our own \nCode Signing Guide\n that helps you setting up the right code signing approach for your project.\n\n\nUploading your app\n\n\nAfter building your app, it's ready to be uploaded to a beta testing service of your choice. The beauty of \nfastlane\n is that you can easily switch beta provider, or even upload to multiple at once, without any extra work.\n\n\nAll you have to do is to put the name of the beta testing provider of your choice after building the app using \ngym\n:\n\n\nlane :beta do\n  match(type: \nappstore\n)       # see code signing guide for more information\n  gym(scheme: \nMyApp\n)          # build your app\n  testflight                    # upload your app to TestFlight\n  slack(message: \nSuccessfully distributed a new beta build\n)\nend\n\n\n\n\nfastlane\n automatically passes on information about the generated \n.ipa\n file from \ngym\n to the beta testing provider of your choice.\n\n\nSupported beta testing services\n\n\n\n\nTestFlight\n\n\nYou can easily upload new builds to TestFlight (which is part of iTunes Connect) using \nfastlane\n. To do so, just use the built-in \ntestflight\n action after building your app\n\n\nlane :beta do\n  ...\n  gym\n  testflight\nend\n\n\n\n\nSome example use cases\n\n\nlane :beta do\n  ...\n  gym\n\n  # Variant 1: Provide a changelog to your build\n  testflight(changelog: \nAdd rocket emoji\n)\n\n  # Variant 2: Skip the \nWaiting for processing\n of the binary\n  #   While this will speed up your build, it will not distribute\n  #   the binary to your tests, nor set a changelog\n  testflight(skip_waiting_for_build_processing: true)\nend\n\n\n\n\nIf you used \nfastlane init\n to setup \nfastlane\n, your Apple ID is stored in the \nfastlane/Appfile\n. You can also overwrite the username, using \ntestflight(username: \"bot@fastlane.tools\")\n.\n\n\nTo get a list of all available options, run\n\n\nfastlane action testflight\n\n\n\n\nWith \nfastlane\n, you can also automatically manage your beta testers, check out TODO for more information.\n\n\n\n\n\n\n\n\nCrashlytics\n\n\nlane :beta do\n  ...\n  gym\n  crashlytics(api_token: \n[insert_key_here]\n,\n              build_secret: \n[insert_key_here]\n)\nend\n\n\n\n\nTo get your API token, open the \norganizations settings page\n and click on the API key and build secret links. \n\n\nTo get a list of all available options, run\n\n\nfastlane action testfairy\n\n\n\n\nTODO: Also mention the other onboarding method\n\n\n\n\n\n\n\n\nTestFairy\n\n\nlane :beta do\n  ...\n  gym\n\n  testfairy(api_key: \n[insert_key_here]\n)\n\n  # Variant 1: Provide a changelog\n  testfairy(api_key: \n[insert_key_here]\n, \n            comment: \nAdd rocket emoji\n)\n\n  # Variant 2: Specify tester groups\n  testfairy(api_key: \n[insert_key_here]\n, testers_groups: [\ngroup1\n])\nend\n\n\n\n\nTo get a list of all available options, run\n\n\nfastlane action testfairy\n\n\n\n\nMore information about the service on \nTestFairy.com\n.\n\n\n\n\nRelease Notes\n\n\n\n\nAutomatically based on git commits\n\n\nYour changelog changes, so it doesn't make a lot of sense to store a static release note in the \nFastfile\n.\n\n\nlane :beta do\n  match\n  gym\n\n  changelog_from_git_commits # this will generate the changelog based on your last commits\n  testflight\nend\n\n\n\n\nGet a list of all available options using \nfastlane action changelog_from_git_commits\n, here are some examples\n\n\nchangelog_from_git_commits(\n  between: ['7b092b3', 'HEAD'], # Optional, lets you specify a revision/tag range between which to collect commit info\n  include_merges: true # Optional, lets you filter out merge commits\n)\n\n\n\n\n\n\n\n\n\n\nPrompt for changelog\n\n\nYou can automatically be asked for the changelog in your terminal using the \nprompt\n action:\n\n\nlane :beta do\n  # Variant 1: Ask for a one line input\n  changelog = prompt(\nChangelog: \n)\n\n  # Variant 2: Ask for a multi-line input\n  #   The user confirms their input by typing `END` and Enter\n  changelog = prompt(\n    text: \nChangelog: \n,\n    multi_line_end_keyword: \nEND\n\n  )\n\n  match\n  gym\n\n  testflight(changelog: changelog)\nend\n\n\n\n\n\n\n\n\n\n\nFetching the changelog from the file system or remote server\n\n\nYou can fetch values from anywhere in your \nFastfile\n, including the file system and remote server\n\n\nlane :beta do\n  # Variant 1: Read from file system\n  #   note the `..`, since fastlane runs in the _fastlane_ directory\n  changelog = File.read(\n../Changelog.txt\n)\n\n  # Variant 2: Fetch data from a remote web server\n  changelog = download(url: \nhttps://lookatmycms.com/changelog.txt\n)\n\n  match\n  gym\n\n  testflight(changelog: changelog)\nend\n\n\n\n\n\n\n\n\nBest Practices\n\n\n\n\nManage devices and testers using fastlane\n\n\n\n\nTestFlight\n\n\nIf you're using TestFlight you don't need to worry about UDIDs of your devices. Instead you just maintain a list of testers based on their Apple ID email address.\n\n\nfastlane\n supports automatically registering devices using different approaches\n\n\nboarding\n\n\nboarding\n allows you set up a registration page for your beta testers, so they can enter their email address and start testing your application.\n\n\n\n\nCheck out the \nboarding GitHub repo\n for more information.\n\n\npilot\n\n\npilot\n is automatically installed with \nfastlane\n, you can use it to register individual testers to TestFlight\n\n\n# Register a new external tester\nfastlane pilot add email@invite.com\n\n# Register a new external tester and add them to your app\nfastlane pilot add email@invite.com -a com.app.name\n\n\n\n\n\n\n\n\n\n\nThird party beta testing services\n\n\nIf you're using a third party beta testing service, you'll need to manage your registered devices and their UDIDs. \nfastlane\n already supports device registrations and updating provisioning profiles out of the box. \n\n\nlane :beta do\n  # Before calling match, we make sure all our devices are registered on the Apple Developer Portal\n  register_devices(devices_file: \ndevices.txt\n)\n\n  # After registering the new devices, we'll make sure to update the provisioning profile if necessary\n  # Note how we make sure to pass \nadhoc\n to get and use a provisioning profile for Ad Hoc distribution\n  match(force_for_new_devices: true, type: \nadhoc\n)\n  gym\n  ...\nend\n\n\n\n\nThe \ndevices.txt\n should look like this:\n\n\nDevice ID Device Name\nA123456789012345678901234567890123456789  DeviceName1\nB123456789012345678901234567890123456789  DeviceName2\n\n\n\n\n\n\n\n\n\n\nIncrementing the build number\n\n\nDepending on the beta testing service you use, you'll have to increment the build number each time you upload a new build. This is a requirement for TestFlight for example.\n\n\nTo do so, there are some built-in fastlane actions available, here are some examples\n\n\nlane :beta do\n  # Ensure that there that your git status is not dirty\n  ensure_git_status_clean\n\n  # Increment the build number (not the version number)\n  # Providing the xcodeproj is optional\n  increment_build_number(xcodeproj: \nExample.xcodeproj\n)\n\n  # Commit the version bump\n  commit_version_bump(xcodeproj: \nExample.xcodeproj\n)\n\n  # Add a git tag for this build. This will automatically\n  # use an appropriate git tag name\n  add_git_tag\n\n  # Push the new commit and tag back to your git remote\n  push_to_git_remote\nend\n\n\n\n\nFor all the steps above, there are more parameters available, run the following to get a full list:\n\n\nfastlane action [action_name]", 
            "title": "Beta Deployment"
        }, 
        {
            "location": "/getting-started/ios/beta-deployment/#ios-beta-deployment-using-fastlane", 
            "text": "", 
            "title": "iOS Beta deployment using fastlane"
        }, 
        {
            "location": "/getting-started/ios/beta-deployment/#building-your-app", 
            "text": "fastlane  takes care of building your app using a feature called  gym , just add the following to your  Fastfile :  lane :beta do\n  gym(scheme:  MyApp )\nend  Additionally you can specify more options for building your app, for example  lane :beta do\n  gym(scheme:  MyApp ,\n      workspace:  Example.xcworkspace ,\n      include_bitcode: true)\nend  Try running the lane using  fastlane beta  If everything works, you should have a  [ProductName].ipa  file in the current directory. To get a list of all available parameters for  gym , run  fastlane action gym .", 
            "title": "Building your app"
        }, 
        {
            "location": "/getting-started/ios/beta-deployment/#codesigning", 
            "text": "Chances are that something went wrong because of code signing at the previous step. We prepared our own  Code Signing Guide  that helps you setting up the right code signing approach for your project.", 
            "title": "Codesigning"
        }, 
        {
            "location": "/getting-started/ios/beta-deployment/#uploading-your-app", 
            "text": "After building your app, it's ready to be uploaded to a beta testing service of your choice. The beauty of  fastlane  is that you can easily switch beta provider, or even upload to multiple at once, without any extra work.  All you have to do is to put the name of the beta testing provider of your choice after building the app using  gym :  lane :beta do\n  match(type:  appstore )       # see code signing guide for more information\n  gym(scheme:  MyApp )          # build your app\n  testflight                    # upload your app to TestFlight\n  slack(message:  Successfully distributed a new beta build )\nend  fastlane  automatically passes on information about the generated  .ipa  file from  gym  to the beta testing provider of your choice.", 
            "title": "Uploading your app"
        }, 
        {
            "location": "/getting-started/ios/beta-deployment/#supported-beta-testing-services", 
            "text": "TestFlight  You can easily upload new builds to TestFlight (which is part of iTunes Connect) using  fastlane . To do so, just use the built-in  testflight  action after building your app  lane :beta do\n  ...\n  gym\n  testflight\nend  Some example use cases  lane :beta do\n  ...\n  gym\n\n  # Variant 1: Provide a changelog to your build\n  testflight(changelog:  Add rocket emoji )\n\n  # Variant 2: Skip the  Waiting for processing  of the binary\n  #   While this will speed up your build, it will not distribute\n  #   the binary to your tests, nor set a changelog\n  testflight(skip_waiting_for_build_processing: true)\nend  If you used  fastlane init  to setup  fastlane , your Apple ID is stored in the  fastlane/Appfile . You can also overwrite the username, using  testflight(username: \"bot@fastlane.tools\") .  To get a list of all available options, run  fastlane action testflight  With  fastlane , you can also automatically manage your beta testers, check out TODO for more information.     Crashlytics  lane :beta do\n  ...\n  gym\n  crashlytics(api_token:  [insert_key_here] ,\n              build_secret:  [insert_key_here] )\nend  To get your API token, open the  organizations settings page  and click on the API key and build secret links.   To get a list of all available options, run  fastlane action testfairy  TODO: Also mention the other onboarding method     TestFairy  lane :beta do\n  ...\n  gym\n\n  testfairy(api_key:  [insert_key_here] )\n\n  # Variant 1: Provide a changelog\n  testfairy(api_key:  [insert_key_here] , \n            comment:  Add rocket emoji )\n\n  # Variant 2: Specify tester groups\n  testfairy(api_key:  [insert_key_here] , testers_groups: [ group1 ])\nend  To get a list of all available options, run  fastlane action testfairy", 
            "title": "Supported beta testing services"
        }, 
        {
            "location": "/getting-started/ios/beta-deployment/#more-information-about-the-service-on-testfairycom", 
            "text": "", 
            "title": "More information about the service on TestFairy.com."
        }, 
        {
            "location": "/getting-started/ios/beta-deployment/#release-notes", 
            "text": "Automatically based on git commits  Your changelog changes, so it doesn't make a lot of sense to store a static release note in the  Fastfile .  lane :beta do\n  match\n  gym\n\n  changelog_from_git_commits # this will generate the changelog based on your last commits\n  testflight\nend  Get a list of all available options using  fastlane action changelog_from_git_commits , here are some examples  changelog_from_git_commits(\n  between: ['7b092b3', 'HEAD'], # Optional, lets you specify a revision/tag range between which to collect commit info\n  include_merges: true # Optional, lets you filter out merge commits\n)     Prompt for changelog  You can automatically be asked for the changelog in your terminal using the  prompt  action:  lane :beta do\n  # Variant 1: Ask for a one line input\n  changelog = prompt( Changelog:  )\n\n  # Variant 2: Ask for a multi-line input\n  #   The user confirms their input by typing `END` and Enter\n  changelog = prompt(\n    text:  Changelog:  ,\n    multi_line_end_keyword:  END \n  )\n\n  match\n  gym\n\n  testflight(changelog: changelog)\nend     Fetching the changelog from the file system or remote server  You can fetch values from anywhere in your  Fastfile , including the file system and remote server  lane :beta do\n  # Variant 1: Read from file system\n  #   note the `..`, since fastlane runs in the _fastlane_ directory\n  changelog = File.read( ../Changelog.txt )\n\n  # Variant 2: Fetch data from a remote web server\n  changelog = download(url:  https://lookatmycms.com/changelog.txt )\n\n  match\n  gym\n\n  testflight(changelog: changelog)\nend", 
            "title": "Release Notes"
        }, 
        {
            "location": "/getting-started/ios/beta-deployment/#best-practices", 
            "text": "Manage devices and testers using fastlane   TestFlight  If you're using TestFlight you don't need to worry about UDIDs of your devices. Instead you just maintain a list of testers based on their Apple ID email address.  fastlane  supports automatically registering devices using different approaches", 
            "title": "Best Practices"
        }, 
        {
            "location": "/getting-started/ios/beta-deployment/#boarding", 
            "text": "boarding  allows you set up a registration page for your beta testers, so they can enter their email address and start testing your application.   Check out the  boarding GitHub repo  for more information.", 
            "title": "boarding"
        }, 
        {
            "location": "/getting-started/ios/beta-deployment/#pilot", 
            "text": "pilot  is automatically installed with  fastlane , you can use it to register individual testers to TestFlight  # Register a new external tester\nfastlane pilot add email@invite.com\n\n# Register a new external tester and add them to your app\nfastlane pilot add email@invite.com -a com.app.name     Third party beta testing services  If you're using a third party beta testing service, you'll need to manage your registered devices and their UDIDs.  fastlane  already supports device registrations and updating provisioning profiles out of the box.   lane :beta do\n  # Before calling match, we make sure all our devices are registered on the Apple Developer Portal\n  register_devices(devices_file:  devices.txt )\n\n  # After registering the new devices, we'll make sure to update the provisioning profile if necessary\n  # Note how we make sure to pass  adhoc  to get and use a provisioning profile for Ad Hoc distribution\n  match(force_for_new_devices: true, type:  adhoc )\n  gym\n  ...\nend  The  devices.txt  should look like this:  Device ID Device Name\nA123456789012345678901234567890123456789  DeviceName1\nB123456789012345678901234567890123456789  DeviceName2     Incrementing the build number  Depending on the beta testing service you use, you'll have to increment the build number each time you upload a new build. This is a requirement for TestFlight for example.  To do so, there are some built-in fastlane actions available, here are some examples  lane :beta do\n  # Ensure that there that your git status is not dirty\n  ensure_git_status_clean\n\n  # Increment the build number (not the version number)\n  # Providing the xcodeproj is optional\n  increment_build_number(xcodeproj:  Example.xcodeproj )\n\n  # Commit the version bump\n  commit_version_bump(xcodeproj:  Example.xcodeproj )\n\n  # Add a git tag for this build. This will automatically\n  # use an appropriate git tag name\n  add_git_tag\n\n  # Push the new commit and tag back to your git remote\n  push_to_git_remote\nend  For all the steps above, there are more parameters available, run the following to get a full list:  fastlane action [action_name]", 
            "title": "pilot"
        }, 
        {
            "location": "/getting-started/ios/appstore-deployment/", 
            "text": "iOS App Store deployment using fastlane\n\n\nBuilding your app\n\n\nfastlane\n takes care of building your app using a feature called \ngym\n, just add the following to your \nFastfile\n:\n\n\nlane :appstore do\n  gym(scheme: \nMyApp\n)\nend\n\n\n\n\nAdditionally you can specify more options for building your app, for example\n\n\nlane :appstore do\n  gym(scheme: \nMyApp\n,\n      workspace: \nExample.xcworkspace\n,\n      include_bitcode: true)\nend\n\n\n\n\nTry running the lane using\n\n\nfastlane appstore\n\n\n\n\nIf everything works, you should have a \n[ProductName].ipa\n file in the current directory. To get a list of all available parameters for \ngym\n, run \nfastlane action gym\n.\n\n\nCodesigning\n\n\nChances are that something went wrong because of code signing at the previous step. We prepared our own \nCode Signing Guide\n that helps you setting up the right code signing approach for your project.\n\n\nSubmitting your app\n\n\nGenerating screenshots\n\n\nTo find out more about how to automatically generate screenshots for the App Store, check out the \nscreenshots guide\n.\n\n\nUpload the binary and app metadata\n\n\nAfter building your app, it's ready to be uploaded to the App Store. If you've already followed the \nbeta deployment guide\n, the following code might look similar already. \n\n\nlane :appstore do\n  snapshot                      # generate new screenshots for the App Store\n  match(type: \nappstore\n)       # see code signing guide for more information\n  gym(scheme: \nMyApp\n)          # build your app\n  appstore                      # upload your app to iTunes Connect\n  slack(message: \nSuccessfully uploaded a new App Store build\n)\nend\n\n\n\n\nfastlane\n automatically passes on information about the generated screenshots and the binary to the \nappstore\n action of your \nFastfile\n.\n\n\nFor a list of all options for each of the steps run \nfastlane action [action_name]\n.\n\n\nBest Practices\n\n\n\n\nPush Notifications\n\n\nTo make sure your latest push notification certificate is still valid during your submission process, add the following at the beginning of your lane:\n\n\nlane :appstore do\n  pem\n  ...\nend\n\n\n\n\npem\n will ensure your certificate is valid for at least another 2 weeks, and create a new one if it isn't.\n\n\nIf you don't have any push certificates already, \npem\n will create one for you and store locally in your project's directory. To get more information about the available options run \nfastlane action pem\n.", 
            "title": "App Store Deployment"
        }, 
        {
            "location": "/getting-started/ios/appstore-deployment/#ios-app-store-deployment-using-fastlane", 
            "text": "", 
            "title": "iOS App Store deployment using fastlane"
        }, 
        {
            "location": "/getting-started/ios/appstore-deployment/#building-your-app", 
            "text": "fastlane  takes care of building your app using a feature called  gym , just add the following to your  Fastfile :  lane :appstore do\n  gym(scheme:  MyApp )\nend  Additionally you can specify more options for building your app, for example  lane :appstore do\n  gym(scheme:  MyApp ,\n      workspace:  Example.xcworkspace ,\n      include_bitcode: true)\nend  Try running the lane using  fastlane appstore  If everything works, you should have a  [ProductName].ipa  file in the current directory. To get a list of all available parameters for  gym , run  fastlane action gym .", 
            "title": "Building your app"
        }, 
        {
            "location": "/getting-started/ios/appstore-deployment/#codesigning", 
            "text": "Chances are that something went wrong because of code signing at the previous step. We prepared our own  Code Signing Guide  that helps you setting up the right code signing approach for your project.", 
            "title": "Codesigning"
        }, 
        {
            "location": "/getting-started/ios/appstore-deployment/#submitting-your-app", 
            "text": "", 
            "title": "Submitting your app"
        }, 
        {
            "location": "/getting-started/ios/appstore-deployment/#generating-screenshots", 
            "text": "To find out more about how to automatically generate screenshots for the App Store, check out the  screenshots guide .", 
            "title": "Generating screenshots"
        }, 
        {
            "location": "/getting-started/ios/appstore-deployment/#upload-the-binary-and-app-metadata", 
            "text": "After building your app, it's ready to be uploaded to the App Store. If you've already followed the  beta deployment guide , the following code might look similar already.   lane :appstore do\n  snapshot                      # generate new screenshots for the App Store\n  match(type:  appstore )       # see code signing guide for more information\n  gym(scheme:  MyApp )          # build your app\n  appstore                      # upload your app to iTunes Connect\n  slack(message:  Successfully uploaded a new App Store build )\nend  fastlane  automatically passes on information about the generated screenshots and the binary to the  appstore  action of your  Fastfile .  For a list of all options for each of the steps run  fastlane action [action_name] .", 
            "title": "Upload the binary and app metadata"
        }, 
        {
            "location": "/getting-started/ios/appstore-deployment/#best-practices", 
            "text": "Push Notifications  To make sure your latest push notification certificate is still valid during your submission process, add the following at the beginning of your lane:  lane :appstore do\n  pem\n  ...\nend  pem  will ensure your certificate is valid for at least another 2 weeks, and create a new one if it isn't.  If you don't have any push certificates already,  pem  will create one for you and store locally in your project's directory. To get more information about the available options run  fastlane action pem .", 
            "title": "Best Practices"
        }, 
        {
            "location": "/getting-started/android/setup/", 
            "text": "Getting started with \nfastlane\n for Android\n\n\nInstalling \nfastlane\n\n\nsudo gem install fastlane --verbose\n\n\n\n\nSetting up \nfastlane\n\n\nNavigate your terminal to your project's directory and run\n\n\nfastlane init\n\n\n\n\nYou'll be asked to confirm that you're ready to begin, and then for a few pieces of information. To get started quickly:\n\n\n\n\nProvide the package name for your application when asked (e.g. io.fabric.yourapp)\n\n\nPress enter when asked for the path to your json secret file\n\n\nAnswer 'n' when asked if you plan on uploading info to Google Play via fastlane (we can set this up later)\n\n\n\n\nThat's it! \nfastlane\n will automatically generate a configuration for you based on the information provided.\n\n\nYou can see the newly created \n./fastlane\n directory, with the following files:\n\n\n\n\nAppfile\n which defines configuration information that is global to your app\n\n\nFastfile\n which defines the \"lanes\" that drive the behavior of \nfastlane\n\n\n\n\n\n\nThe most interesting file is \nfastlane/Fastfile\n, which contains all the information that is needed to distribute your app.\n\n\nSetting up \nsupply\n\n\nsupply\n is a \nfastlane\n tool that uploads app metadata, screenshots and binaries to Google Play. You can also select tracks for builds and promote builds to production!\n\n\nSetting it up requires downloading a credentials file from your Google Developers Service Account.\n\n\nCollect your Google credentials\n\n\n\n\nOpen the \nGoogle Play Console\n\n\nSelect \nSettings\n tab, followed by the \nAPI access\n tab\n\n\nClick the \nCreate Service Account\n button and follow the \nGoogle Developers Console\n link in the dialog\n\n\nClick the \nCreate Service account\n button at the top of the developers console screen\n\n\nProvide a name for the service account\n\n\nClick \nSelect a role\n and choose \nProject \n Service Account Actor\n\n\nCheck the \nFurnish a new private key\n checkbox\n\n\nSelect \nJSON\n as the Key type\n\n\nClick \nCreate\n to close the dialog\n\n\nMake a note of the file name of the JSON file downloaded to your computer\n\n\nBack on the Google Play developer console, click \nDone\n to close the dialog\n\n\nClick on \nGrant Access\n for the newly added service account\n\n\nChoose \nRelease Manager\n from the \nRole\n dropdown\n\n\nClick \nAdd user\n to close the dialog\n\n\n\n\nConfigure \nsupply\n\n\nEdit your \nfastlane/Appfile\n and change the \njson_key_file\n line to have the path to your credentials file:\n\n\njson_key_file \n/path/to/your/downloaded/key.json\n\n\n\n\n\nFetch your app metadata\n\n\nIf your app has been created on the Google Play developer console, you're ready to start using \nsupply\n to manage it! Run:\n\n\nfastlane supply init\n\n\n\n\nand all of your current Google Play store metadata will be downloaded to \nfastlane/metadata/android\n.\n\n\n\n\nDue to limitations of the Google Play API, \nsupply\n can't download existing screenshots or videos.\n\n\nWhat's next?\n\n\nfastlane\n is ready to generate screenshots and automatically distribute new builds! To learn more, check out:\n\n\n\n\nAutomatically generate screenshots\n\n\nDistribute beta builds\n\n\nDeploy to Google Play for production release\n\n\n\n\nUse a Gemfile\n\n\nIt is recommended that you use a \nGemfile\n to define your dependency on \nfastlane\n. This will clearly define the used \nfastlane\n version, and its dependencies, and will also speed up using \nfastlane\n.\n\n\n\n\nCreate a \nGemfile\n with the content\n\n\n\n\nsource \nhttps://rubygems.org\n\n\ngem \nfastlane\n\n\n\n\n\n\n\nRun \nbundle update\n and add both the \nGemfile\n and the \nGemfile.lock\n to version control\n\n\nEvery time you run \nfastlane\n, use \nbundle exec fastlane [lane]\n\n\nOn your CI, add \nbundle install\n as your first build step\n\n\nTo update \nfastlane\n, just run \nbundle update", 
            "title": "Setup"
        }, 
        {
            "location": "/getting-started/android/setup/#getting-started-with-fastlane-for-android", 
            "text": "", 
            "title": "Getting started with fastlane for Android"
        }, 
        {
            "location": "/getting-started/android/setup/#installing-fastlane", 
            "text": "sudo gem install fastlane --verbose", 
            "title": "Installing fastlane"
        }, 
        {
            "location": "/getting-started/android/setup/#setting-up-fastlane", 
            "text": "Navigate your terminal to your project's directory and run  fastlane init  You'll be asked to confirm that you're ready to begin, and then for a few pieces of information. To get started quickly:   Provide the package name for your application when asked (e.g. io.fabric.yourapp)  Press enter when asked for the path to your json secret file  Answer 'n' when asked if you plan on uploading info to Google Play via fastlane (we can set this up later)   That's it!  fastlane  will automatically generate a configuration for you based on the information provided.  You can see the newly created  ./fastlane  directory, with the following files:   Appfile  which defines configuration information that is global to your app  Fastfile  which defines the \"lanes\" that drive the behavior of  fastlane    The most interesting file is  fastlane/Fastfile , which contains all the information that is needed to distribute your app.", 
            "title": "Setting up fastlane"
        }, 
        {
            "location": "/getting-started/android/setup/#setting-up-supply", 
            "text": "supply  is a  fastlane  tool that uploads app metadata, screenshots and binaries to Google Play. You can also select tracks for builds and promote builds to production!  Setting it up requires downloading a credentials file from your Google Developers Service Account.", 
            "title": "Setting up supply"
        }, 
        {
            "location": "/getting-started/android/setup/#collect-your-google-credentials", 
            "text": "Open the  Google Play Console  Select  Settings  tab, followed by the  API access  tab  Click the  Create Service Account  button and follow the  Google Developers Console  link in the dialog  Click the  Create Service account  button at the top of the developers console screen  Provide a name for the service account  Click  Select a role  and choose  Project   Service Account Actor  Check the  Furnish a new private key  checkbox  Select  JSON  as the Key type  Click  Create  to close the dialog  Make a note of the file name of the JSON file downloaded to your computer  Back on the Google Play developer console, click  Done  to close the dialog  Click on  Grant Access  for the newly added service account  Choose  Release Manager  from the  Role  dropdown  Click  Add user  to close the dialog", 
            "title": "Collect your Google credentials"
        }, 
        {
            "location": "/getting-started/android/setup/#configure-supply", 
            "text": "Edit your  fastlane/Appfile  and change the  json_key_file  line to have the path to your credentials file:  json_key_file  /path/to/your/downloaded/key.json", 
            "title": "Configure supply"
        }, 
        {
            "location": "/getting-started/android/setup/#fetch-your-app-metadata", 
            "text": "If your app has been created on the Google Play developer console, you're ready to start using  supply  to manage it! Run:  fastlane supply init  and all of your current Google Play store metadata will be downloaded to  fastlane/metadata/android .   Due to limitations of the Google Play API,  supply  can't download existing screenshots or videos.", 
            "title": "Fetch your app metadata"
        }, 
        {
            "location": "/getting-started/android/setup/#whats-next", 
            "text": "fastlane  is ready to generate screenshots and automatically distribute new builds! To learn more, check out:   Automatically generate screenshots  Distribute beta builds  Deploy to Google Play for production release", 
            "title": "What's next?"
        }, 
        {
            "location": "/getting-started/android/setup/#use-a-gemfile", 
            "text": "It is recommended that you use a  Gemfile  to define your dependency on  fastlane . This will clearly define the used  fastlane  version, and its dependencies, and will also speed up using  fastlane .   Create a  Gemfile  with the content   source  https://rubygems.org \n\ngem  fastlane    Run  bundle update  and add both the  Gemfile  and the  Gemfile.lock  to version control  Every time you run  fastlane , use  bundle exec fastlane [lane]  On your CI, add  bundle install  as your first build step  To update  fastlane , just run  bundle update", 
            "title": "Use a Gemfile"
        }, 
        {
            "location": "/getting-started/android/screenshots/", 
            "text": "fastlane screenshots for Android\n\n\nYour app screenshots are probably the most important thing when it comes to convincing potential users to download or purchase your app. Unfortunately, many apps don't do screenshots well. This is often because taking screenshots of your app and then preparing them for display is time consuming, and it's hard to get everything right and consistent! For example:\n\n\n\n\nAre the screenshots in Google Play inconsistent with your latest app design?\n\n\nIs your app localized into many languages that require different screenshots for each?\n\n\nIs the same content displayed for each of your size variations?\n\n\n\n\nfastlane\n tools can automate this process, making it fast and consistent while giving you beautiful results!\n\n\n\n\nCapture Screenshots Automatically\n\n\nscreengrab\n works with \nfastlane\n to automate the process of capturing screenshots of your app. It allows you to:\n\n\n\n\nCapture hundreds of screenshots in multiple languages on any simulator\n\n\nDo something else while the computer takes the screenshots for you\n\n\nConfigure it once, and store the configuration so anyone on the team can run it\n\n\nGet a summary of how your app looks like across all supported devices and languages\n\n\n\n\nAfter \nscreengrab\n completes, it will show you summary of the screenshots you captured:\n\n\n\n\nGetting Started Using Espresso\n\n\nscreengrab\n uses the capabilities of Android's built-in \nInstrumented tests\n combined with \nEspresso\n to drive interactions with your app. To get familiar with writing UI Tests with Espresso, check out \nTesting UI for a Single App\n.\n\n\nInstalling \nscreengrab\n\n\nInstall the gem:\n\n\nsudo gem install screengrab\n\n\n\n\nGradle dependency\n\n\nAdd the test dependency to your Gradle build:\n\n\nandroidTestCompile 'tools.fastlane:screengrab:x.x.x'\n\n\n\n\nThe latest version can be determined by visiting the \nscreengrab\n RubyGems page\n\n\nConfiguring your Manifest Permissions\n\n\nEnsure that the following permissions exist in your \nsrc/debug/AndroidManifest.xml\n\n\n!-- Allows unlocking your device and activating its screen so UI tests can succeed --\n\n\nuses-permission android:name=\nandroid.permission.DISABLE_KEYGUARD\n/\n\n\nuses-permission android:name=\nandroid.permission.WAKE_LOCK\n/\n\n\n\n!-- Allows for storing and retrieving screenshots --\n\n\nuses-permission android:name=\nandroid.permission.WRITE_EXTERNAL_STORAGE\n /\n\n\nuses-permission android:name=\nandroid.permission.READ_EXTERNAL_STORAGE\n /\n\n\n\n!-- Allows changing locales --\n\n\nuses-permission android:name=\nandroid.permission.CHANGE_CONFIGURATION\n /\n\n\n\n\n\nConfiguring your UI Tests for \nscreengrab\n\n\n\n\nAdd \n@ClassRule public static final LocaleTestRule localeTestRule = new LocaleTestRule();\n to your tests class to handle automatic switching of locales\n\n\nTo capture screenshots, add the following to your tests \nScreengrab.screenshot(\"name_of_screenshot_here\");\n on the appropriate screens\n\n\n\n\nGenerating Screenshots with Screengrab\n\n\n\n\nRun \n./gradlew assembleDebug assembleAndroidTest\n to generate debug and test APKs\n\n\nRun \nfastlane screengrab\n in your app project directory to generate screenshots\n\n\nYou will be prompted to provide any required parameters which are not in your \nScreengrabfile\n, or provided as command line arguments\n\n\n\n\n\n\nYour screenshots will be saved to \nfastlane/metadata/android\n in the directory where you ran \nfastlane screengrab\n\n\n\n\nImproved screenshot capture with UI Automator\n\n\nAs of \nscreengrab\n 0.5.0, you can specify different strategies to control the way \nscreengrab\n captures screenshots. The newer strategy delegates to \nUI Automator\n which fixes a number of problems compared to the original strategy:\n\n\n\n\nShadows/elevation are correctly captured for Material UI\n\n\nMulti-window situations are correctly captured (dialogs, etc.)\n\n\nWorks on Android N\n\n\n\n\nHowever, UI Automator requires a device with \nAPI level \n= 18\n, so it is not yet the default strategy. To enable it for all screenshots by default, make the following call before your tests run:\n\n\nScreengrab.setDefaultScreenshotStrategy(new UiAutomatorScreenshotStrategy());\n\n\n\n\nUpload Screenshots to Google Play\n\n\nAfter generating your screenshots using \nfastlane screengrab\n, you'll usually want to upload them to Google Play.\n\n\nTo upload the screenshots stored in \nfastlane/metadata/android\n, just run:\n\n\nfastlane supply\n\n\n\n\nUse in Fastfile\n\n\nTo put all of this together so that anyone on your team could trigger generating and uploading new screenshots, you can define a \nfastlane\n lane called \nscreenshots\n. It would be responsible for:\n\n\n\n\nRunning your app through \nscreengrab\n to automatically capture your screenshots\n\n\nHaving \nsupply\n send your screenshots to Google Play for use in the store\n\n\n\n\nAdd the following code to your \nfastlane/Fastfile\n:\n\n\nlane :screenshots do\n  screengrab\n  supply\nend\n\n\n\n\nTo get a list of all available options for each of the steps, run\n\n\nfastlane action screengrab\nfastlane action supply", 
            "title": "Screenshots"
        }, 
        {
            "location": "/getting-started/android/screenshots/#fastlane-screenshots-for-android", 
            "text": "Your app screenshots are probably the most important thing when it comes to convincing potential users to download or purchase your app. Unfortunately, many apps don't do screenshots well. This is often because taking screenshots of your app and then preparing them for display is time consuming, and it's hard to get everything right and consistent! For example:   Are the screenshots in Google Play inconsistent with your latest app design?  Is your app localized into many languages that require different screenshots for each?  Is the same content displayed for each of your size variations?   fastlane  tools can automate this process, making it fast and consistent while giving you beautiful results!", 
            "title": "fastlane screenshots for Android"
        }, 
        {
            "location": "/getting-started/android/screenshots/#capture-screenshots-automatically", 
            "text": "screengrab  works with  fastlane  to automate the process of capturing screenshots of your app. It allows you to:   Capture hundreds of screenshots in multiple languages on any simulator  Do something else while the computer takes the screenshots for you  Configure it once, and store the configuration so anyone on the team can run it  Get a summary of how your app looks like across all supported devices and languages   After  screengrab  completes, it will show you summary of the screenshots you captured:", 
            "title": "Capture Screenshots Automatically"
        }, 
        {
            "location": "/getting-started/android/screenshots/#getting-started-using-espresso", 
            "text": "screengrab  uses the capabilities of Android's built-in  Instrumented tests  combined with  Espresso  to drive interactions with your app. To get familiar with writing UI Tests with Espresso, check out  Testing UI for a Single App .", 
            "title": "Getting Started Using Espresso"
        }, 
        {
            "location": "/getting-started/android/screenshots/#installing-screengrab", 
            "text": "Install the gem:  sudo gem install screengrab", 
            "title": "Installing screengrab"
        }, 
        {
            "location": "/getting-started/android/screenshots/#gradle-dependency", 
            "text": "Add the test dependency to your Gradle build:  androidTestCompile 'tools.fastlane:screengrab:x.x.x'  The latest version can be determined by visiting the  screengrab  RubyGems page", 
            "title": "Gradle dependency"
        }, 
        {
            "location": "/getting-started/android/screenshots/#configuring-your-manifest-permissions", 
            "text": "Ensure that the following permissions exist in your  src/debug/AndroidManifest.xml  !-- Allows unlocking your device and activating its screen so UI tests can succeed --  uses-permission android:name= android.permission.DISABLE_KEYGUARD /  uses-permission android:name= android.permission.WAKE_LOCK /  !-- Allows for storing and retrieving screenshots --  uses-permission android:name= android.permission.WRITE_EXTERNAL_STORAGE  /  uses-permission android:name= android.permission.READ_EXTERNAL_STORAGE  /  !-- Allows changing locales --  uses-permission android:name= android.permission.CHANGE_CONFIGURATION  /", 
            "title": "Configuring your Manifest Permissions"
        }, 
        {
            "location": "/getting-started/android/screenshots/#configuring-your-ui-tests-for-screengrab", 
            "text": "Add  @ClassRule public static final LocaleTestRule localeTestRule = new LocaleTestRule();  to your tests class to handle automatic switching of locales  To capture screenshots, add the following to your tests  Screengrab.screenshot(\"name_of_screenshot_here\");  on the appropriate screens", 
            "title": "Configuring your UI Tests for screengrab"
        }, 
        {
            "location": "/getting-started/android/screenshots/#generating-screenshots-with-screengrab", 
            "text": "Run  ./gradlew assembleDebug assembleAndroidTest  to generate debug and test APKs  Run  fastlane screengrab  in your app project directory to generate screenshots  You will be prompted to provide any required parameters which are not in your  Screengrabfile , or provided as command line arguments    Your screenshots will be saved to  fastlane/metadata/android  in the directory where you ran  fastlane screengrab", 
            "title": "Generating Screenshots with Screengrab"
        }, 
        {
            "location": "/getting-started/android/screenshots/#improved-screenshot-capture-with-ui-automator", 
            "text": "As of  screengrab  0.5.0, you can specify different strategies to control the way  screengrab  captures screenshots. The newer strategy delegates to  UI Automator  which fixes a number of problems compared to the original strategy:   Shadows/elevation are correctly captured for Material UI  Multi-window situations are correctly captured (dialogs, etc.)  Works on Android N   However, UI Automator requires a device with  API level  = 18 , so it is not yet the default strategy. To enable it for all screenshots by default, make the following call before your tests run:  Screengrab.setDefaultScreenshotStrategy(new UiAutomatorScreenshotStrategy());", 
            "title": "Improved screenshot capture with UI Automator"
        }, 
        {
            "location": "/getting-started/android/screenshots/#upload-screenshots-to-google-play", 
            "text": "After generating your screenshots using  fastlane screengrab , you'll usually want to upload them to Google Play.  To upload the screenshots stored in  fastlane/metadata/android , just run:  fastlane supply", 
            "title": "Upload Screenshots to Google Play"
        }, 
        {
            "location": "/getting-started/android/screenshots/#use-in-fastfile", 
            "text": "To put all of this together so that anyone on your team could trigger generating and uploading new screenshots, you can define a  fastlane  lane called  screenshots . It would be responsible for:   Running your app through  screengrab  to automatically capture your screenshots  Having  supply  send your screenshots to Google Play for use in the store   Add the following code to your  fastlane/Fastfile :  lane :screenshots do\n  screengrab\n  supply\nend  To get a list of all available options for each of the steps, run  fastlane action screengrab\nfastlane action supply", 
            "title": "Use in Fastfile"
        }, 
        {
            "location": "/getting-started/android/beta-deployment/", 
            "text": "Deploy to Beta distribution services using fastlane\n\n\nTo be written soon, this will contain\n\n\n\n\nBuilding your app using \ngradle\n\n\nDeploy to Beta by Crashlytics\n\n\nDeploy to Google Play for beta\n\n\nBest practises around the deployment\n\n\nOrder of commands", 
            "title": "Beta Deployment"
        }, 
        {
            "location": "/getting-started/android/beta-deployment/#deploy-to-beta-distribution-services-using-fastlane", 
            "text": "To be written soon, this will contain   Building your app using  gradle  Deploy to Beta by Crashlytics  Deploy to Google Play for beta  Best practises around the deployment  Order of commands", 
            "title": "Deploy to Beta distribution services using fastlane"
        }, 
        {
            "location": "/getting-started/android/release-deployment/", 
            "text": "Deploy to Google Play using fastlane\n\n\nTo be written soon, this will contain\n\n\n\n\nBuilding your app using \ngradle\n\n\nReference the screenshots docs\n\n\nDeploy to Google Play for production\n\n\nMention how to deploy to the beta track\n\n\n\n\n\n\nBest practises around the deployment\n\n\nOrder of commands", 
            "title": "Release Deployment"
        }, 
        {
            "location": "/getting-started/android/release-deployment/#deploy-to-google-play-using-fastlane", 
            "text": "To be written soon, this will contain   Building your app using  gradle  Reference the screenshots docs  Deploy to Google Play for production  Mention how to deploy to the beta track    Best practises around the deployment  Order of commands", 
            "title": "Deploy to Google Play using fastlane"
        }, 
        {
            "location": "/actions/Actions/", 
            "text": "Actions\n\n\nThere are lots of predefined \nfastlane\n actions you can use. If you have ideas for more, please \nlet me know\n.\n\n\nTo get the most up-to-date information from the command line on your current version you can also run:\n\n\nfastlane actions: List all available fastlane actions\nfastlane action [action_name]:\n\n\n\n\nYou can import another \nFastfile\n by using the \nimport\n action. This is useful if you have shared lanes across multiple apps and you want to store a \nFastfile\n in a separate folder. The path must be relative to the \nFastfile\n this is called from.\n\n\nimport './path/to/other/Fastfile'\n\n\n\n\n\n\nBuilding\n\n\nTesting\n\n\nDeploying\n\n\nModifying Project\n\n\nDeveloper Portal\n\n\nUsing git\n\n\nUsing mercurial\n\n\nNotifications\n\n\nMisc\n\n\n\n\nBuilding\n\n\nBundler\n\n\nThis will install your Gemfile by executing \nbundle install\n\n\nbundle_install\n\n\n\n\nCocoaPods\n\n\nIf you use \nCocoaPods\n you can use the \ncocoapods\n integration to run \npod install\n before building your app.\n\n\ncocoapods # this will run pod install\n\n\n\n\nCarthage\n\n\nThis will execute \ncarthage bootstrap\n\n\ncarthage\n\n\n\n\nMore options are available:\n\n\ncarthage(\n  command: \nbootstrap\n                            # One of: build, bootstrap, update, archive. (default: bootstrap)\n  dependencies: ['Alamofire', 'Notice'],          # Specify which dependencies to update (only for the update command)\n  use_ssh: false,                                 # Use SSH for downloading GitHub repositories.\n  use_submodules: false,                          # Add dependencies as Git submodules.\n  use_binaries: true,                             # Check out dependency repositories even when prebuilt frameworks exist\n  no_build: false,                                # When bootstrapping Carthage do not build\n  no_skip_current: false,                         # Don't skip building the current project (only for frameworks)\n  verbose: false,                                 # Print xcodebuild output inline\n  platform: \nall\n,                                # Define which platform to build for (one of \u2018all\u2019, \u2018Mac\u2019, \u2018iOS\u2019, \u2018watchOS\u2019, 'tvOS', or comma-separated values of the formers except for \u2018all\u2019)\n  configuration: \nRelease\n,                       # Build configuration to use when building\n  toolchain: \ncom.apple.dt.toolchain.Swift_2_3\n   # Specify the xcodebuild toolchain\n)\n\n\n\n\ngym\n\n\ngym\n builds and packages iOS apps for you. It takes care of all the heavy lifting and makes it super easy to generate a signed \nipa\n file.\n\n\ngym(scheme: \nMyApp\n, workspace: \nMyApp.xcworkspace\n)\n\n\n\n\nThere are many more options available, you can use \ngym --help\n to get the latest list of available options.\n\n\ngym(\n  workspace: \nMyApp.xcworkspace\n,\n  configuration: \nDebug\n,\n  scheme: \nMyApp\n,\n  silent: true,\n  clean: true,\n  output_directory: \npath/to/dir\n, # Destination directory. Defaults to current directory.\n  output_name: \nmy-app.ipa\n,       # specify the name of the .ipa file to generate (including file extension)\n  sdk: \n10.0\n                     # use SDK as the name or path of the base SDK when building the project.\n)\n\n\n\n\nUse \ngym --help\n to get all available options.\n\n\nThe alternative to \ngym\n is \nipa\n which uses \nshenzhen\n under the hood.\n\n\ngradle\n\n\nYou can use the \ngradle\n action to integrate your gradle tasks into \nfastlane\n.\n\n\nSimple usage:\n\n\ngradle(\n  task: 'assemble',\n  flavor: 'WorldDomination',\n  build_type: 'Release'\n)\n\n\n\n\nIn case of an \nassemble\n task, the signed apk path is accessible in: \nlane_context[Actions::SharedValues::GRADLE_APK_OUTPUT_PATH]\n\n\nYou can pass \ngradle properties\n:\n\n\ngradle(\n  # ...\n\n  properties: {\n    'versionCode' =\n 100,\n    'versionName' =\n '1.0.0',\n    # ...\n  }\n)\n\n\n\n\nIf you need to pass sensitive information through the \ngradle\n action, and don't want the generated command to be printed before it is run, you can suppress that:\n\n\ngradle(\n  # ...\n  print_command: false\n)\n\n\n\n\nYou can also suppress printing the output generated by running the generated Gradle command:\n\n\ngradle(\n  # ...\n  print_command_output: false\n)\n\n\n\n\nTo pass any other CLI flags to gradle use:\n\n\ngradle(\n  # ...\n\n  flags: \n--exitcode --xml file.xml\n\n)\n\n\n\n\nverify_xcode\n\n\nVerifies that the Xcode installation is properly signed by Apple. This is relevant after recent \nattacks targeting Xcode\n.\n\n\nAdd this action to your \nappstore\n lane. Keep in mind this action might take several minutes to be completed.\n\n\nverify_xcode\n\n\n\n\nscreengrab\n\n\nscreengrab\n automates taking localized screenshots of your Android app on every device\n\n\nscreengrab\n\n\n\n\nOther options (\nscreengrab --help\n)\n\n\nscreengrab(\n  locales: ['en-US', 'fr-FR', 'ja-JP'],\n  clear_previous_screenshots: true,\n  app_apk_path: 'build/outputs/apk/example-debug.apk',\n  tests_apk_path: 'build/outputs/apk/example-debug-androidTest-unaligned.apk'\n)\n\n\n\n\nsnapshot\n\n\nsnapshot\n\n\n\n\nOther options (\nsnapshot --help\n)\n\n\nsnapshot(\n  skip_open_summary: true,\n  clean: true\n)\n\n\n\n\nTake a look at the \nprefilling data guide\n on the \nsnapshot\n documentation.\n\n\nclear_derived_data\n\n\nClears the Xcode Derived Data at path \n~/Library/Developer/Xcode/DerivedData\n\n\nclear_derived_data\n\n\n\n\nipa\n\n\nNote\n: This action is deprecated, use \ngym\n instead.\n\n\nBuild your app right inside \nfastlane\n and the path to the resulting ipa is automatically available to all other actions.\n\n\nYou should check out the \ncode signing guide\n.\n\n\nipa(\n  workspace: \nMyApp.xcworkspace\n,\n  configuration: \nDebug\n,\n  scheme: \nMyApp\n,\n  # (optionals)\n  clean: true,                     # This means 'Do Clean'. Cleans project before building (the default if not specified).\n  destination: \npath/to/dir\n,      # Destination directory. Defaults to current directory.\n  ipa: \nmy-app.ipa\n,               # specify the name of the .ipa file to generate (including file extension)\n  xcargs: \nMY_ADHOC=0\n,            # pass additional arguments to xcodebuild when building the app.\n  embed: \nmy.mobileprovision\n,     # Sign .ipa file with .mobileprovision\n  identity: \nMyIdentity\n,          # Identity to be used along with --embed\n  sdk: \n10.0\n,                     # use SDK as the name or path of the base SDK when building the project.\n  archive: true                    # this means 'Do Archive'. Archive project after building (the default if not specified).\n)\n\n\n\n\nThe \nipa\n action uses \nshenzhen\n under the hood.\n\n\nThe path to the \nipa\n is automatically used by \nCrashlytics\n, \nHockey\n and \nDeployGate\n.\n\n\nImportant:\n\n\nTo also use it in \ndeliver\n, update your \nDeliverfile\n and remove all code in the \nBuilding and Testing\n section, in particular all \nipa\n and \nbeta_ipa\n blocks.\n\n\nSee how \nProduct Hunt\n uses the \nipa\n action.\n\n\nupdate_project_provisioning\n\n\nYou should check out the \ncode signing guide\n before using this action.\n\n\nUpdates your Xcode project to use a specific provisioning profile for code signing, so that you can properly build and sign the .ipa file using the \nipa\n action or a CI service.\n\n\nSince you have to use different provisioning profiles for various targets (WatchKit, Extension, etc.) and configurations (Debug, Release) you can use the \ntarget_filter\n and \nbuild_configuration\n options:\n\n\nupdate_project_provisioning(\n  xcodeproj: \nProject.xcodeproj\n,\n  profile: \n./watch_app_store.mobileprovision\n, # optional if you use sigh\n  target_filter: \n.*WatchKit Extension.*\n, # matches name or type of a target\n  build_configuration: \nRelease\n\n)\n\n\n\n\nThe \ntarget_filter\n and \nbuild_configuration\n options use standard regex, so if you want an exact match for a target, use \n^MyTargetName$\n to prevent a match for the \nPods - MyTargetName\n target, for instance.\n\n\nExample Usage at MindNode\n\n\nupdate_app_group_identifiers\n\n\nUpdates the App Group Identifiers in the given Entitlements file, so you can have app groups for the app store build and app groups for an enterprise build.\n\n\nupdate_app_group_identifiers(\n    entitlements_file: '/path/to/entitlements_file.entitlements',\n    app_group_identifiers: ['group.your.app.group.identifier'])\n\n\n\n\nupdate_icloud_container_identifiers\n\n\nUpdates the iCloud Container Identifiers in the given Entitlements file, so you can use different iCloud containers for different builds like Adhoc, App Store, etc.\n\n\nupdate_icloud_container_identifiers(\n  entitlements_file: '/path/to/entitlements_file.entitlements',\n  icloud_container_identifiers: ['iCloud.com.companyname.appname']\n)\n\n\n\n\nensure_xcode_version\n\n\nMakes sure a specific version of Xcode is selected to be used to build.\nYou can use \nensure_xcode_version\n to ensure that a beta version of Xcode is not accidentally selected to build, which would make uploading to TestFlight fail.\n\n\nensure_xcode_version(version: \n7.2\n)\n\n\n\n\nxcode_install\n\n\nMakes sure a specific version of Xcode is installed. If that's not the case, it will automatically be downloaded by the \nxcode_install\n gem.\n\n\nThis will make sure to use the correct Xcode for later actions.\n\n\nxcode_install(version: \n7.1\n)\n\n\n\n\nxcversion\n\n\nFinds and selects a version of an installed Xcode that best matches the provided \nGem::Version\n requirement specifier\n.\n\n\nxcversion version: \n7.1\n # Selects Xcode 7.1.0\nxcversion version: \n~\n 7.1.0\n # Selects the latest installed version from the 7.1.x set\n\n\n\n\nxcode_select\n\n\nSelect and build with the Xcode installed at the provided path. Use the \nxcversion\n action if you want to select an Xcode based on a version specifier or you don't have known, stable paths as may happen in a CI environment.\n\n\nxcode_select \n/Applications/Xcode6.1.app\n\n\n\n\n\nresign\n\n\nThis will resign an ipa with another signing identity and provisioning profile.\n\n\nIf you have used the \nipa\n and \nsigh\n actions, then this action automatically gets the \nipa\n and \nprovisioning_profile\n values respectively from those actions and you don't need to manually set them (although you can always override them).\n\n\nresign(\n  ipa: 'path/to/ipa', # can omit if using the `ipa` action\n  signing_identity: 'iPhone Distribution: Luka Mirosevic (0123456789)',\n  provisioning_profile: 'path/to/profile', # can omit if using the _sigh_ action\n)\n\n\n\n\nYou may provide multiple provisioning profiles if the application contains nested applications or app extensions, which need their own provisioning profile. You can do so by passing an array of provisioning profile strings or a hash that associates provisioning profile values to bundle identifier keys.\n\n\nresign(\n  ipa: 'path/to/ipa', # can omit if using the `ipa` action\n  signing_identity: 'iPhone Distribution: Luka Mirosevic (0123456789)',\n  provisioning_profile: {\n    'com.example.awesome-app' =\n 'path/to/profile',\n    'com.example.awesome-app.app-extension' =\n 'path/to/app-extension/profile'\n  }\n)\n\n\n\n\ncreate_keychain\n\n\nCreate a new keychain, which can then be used to import certificates.\n\n\ncreate_keychain(\n  name: \nKeychainName\n,\n  default_keychain: true,\n  unlock: true,\n  timeout: 3600,\n  lock_when_sleeps: true\n)\n\n\n\n\nunlock_keychain\n\n\nUnlock an existing keychain and add it to the keychain search list.\n\n\nunlock_keychain(\n  path: \n/path/to/KeychainName.keychain\n,\n  password: \nmysecret\n\n)\n\n\n\n\nBy default the keychain is added to the existing. To replace them with the selected keychain you may use \n:replace\n.\n\n\nunlock_keychain(\n  path: \n/path/to/KeychainName.keychain\n,\n  password: \nmysecret\n,\n  add_to_search_list: :replace # To only add a keychain use `true` or `:add`.\n)\n\n\n\n\nIn addition, the keychain can be selected as a default keychain.\n\n\nunlock_keychain(\n  path: \n/path/to/KeychainName.keychain\n,\n  password: \nmysecret\n,\n  set_default: true\n)\n\n\n\n\nIf the keychain file is located in the standard location \n~/Library/Keychains\n, then it is sufficient to provide the keychain file name, or file name with its suffix.\n\n\nunlock_keychain(\n  path: \nKeychainName\n,\n  password: \nmysecret\n\n)\n\n\n\n\nget_ipa_info_plist_value\n\n\nReturns a value from Info.plist inside a .ipa file\n\n\nget_ipa_info_plist_value(ipa: \npath.ipa\n, key: \nKEY_YOU_READ\n)\n\n\n\n\ndelete_keychain\n\n\nDelete a keychain, can be used after creating one with \ncreate_keychain\n.\n\n\ndelete_keychain(name: \nKeychainName\n)\n\n\n\n\nimport_certificate\n\n\nImport certificates into the current default keychain. Use \ncreate_keychain\n to create a new keychain.\n\n\nimport_certificate certificate_path: \ncerts/AppleWWDRCA.cer\n\nimport_certificate certificate_path: \ncerts/dist.p12\n, certificate_password: ENV['CERT_PASSWORD']\n\n\n\n\nxcodebuild\n\n\nNote\n: \nxcodebuild\n is a complex command, so it is recommended to use \ngym\n for building your ipa file and \nscan\n for testing your app instead.\n\n\nMake sure to also read the \ncode signing guide\n.\n\n\n# Create an archive. (./build-dir/MyApp.xcarchive)\nxcodebuild(\n  archive: true,\n  archive_path: './build-dir/MyApp.xcarchive',\n  scheme: 'MyApp',\n  workspace: 'MyApp.xcworkspace'\n)\n\n\n\n\nbuild_settings\n are variables which are exposed inside the build process as ENV variables, and can be used to override project settings, or dynamically set values inside a Plist.\n\n\noutput_style\n sets the output format of the console output. Supported options are: 1) \n:standard\n, this is the default and will output pretty colored UTF8, and 2) \n:basic\n, which will output monochrome ASCII, useful for a CI environment like TeamCity that doesn't support color/UTF8.\n\n\nxcodebuild(\n  workspace: \n...\n,\n  scheme: \n...\n,\n  build_settings: {\n    \nCODE_SIGN_IDENTITY\n =\n \niPhone Developer: ...\n,\n    \nPROVISIONING_PROFILE\n =\n \n...\n,\n    \nJOBS\n =\n 16\n  },\n  output_style: :basic\n)\n\n\n\n\nTo keep your Fastfile lightweight, there are also alias actions available for\nthe most common \nxcodebuild\n operations: \nxcarchive\n, \nxcbuild\n, \nxcclean\n, \nxctest\n \n \nxcexport\n.\n\n\nTo export the IPA files using \nxcodebuild\n you can provide \n:export_options_plist\n as a path to plist file or as a hash of values. To get the list of available keys and values please read help page: \nxcodebuild --help\n:\n\n\nxcexport(\n  archive_path: \n...\n,\n  export_options_plist: \n/path/to/export_options.plist\n\n)\n\n# or\nxcexport(\n  archive_path: \n...\n,\n  export_options_plist: {\n    method: \nad-hoc\n,\n    thinning: \nthin-for-all-variants\n,\n    manifest: {\n      appURL: \nhttps://example.com/path/MyApp Name.ipa\n,\n      displayImageURL: \nhttps://example.com/display image.png\n,\n      fullSizeImageURL: \nhttps://example.com/fullSize image.png\n,\n    }\n  }\n)\n\n\n\n\nWhen using \n:export_options_plist\n as hash, the \n:teamID\n is read from \nAppfile\n. \n:appURL\n, \n:displayImageURL\n, \n:fullSizeImageURL\n, \n:assetPackManifestURL\n and \n:onDemandResourcesAssetPacksBaseURL\n are URI escaped to prevent Xcode errors.\n\n\nEnvironment variables may be added to a .env file in place of some parameters:\n\n\nXCODE_PROJECT=\n./MyApp.xcodeproj\n\nXCODE_WORKSPACE=\n./MyApp.xcworkspace\n\nXCODE_SCHEME=\nMyApp\n\nXCODE_BUILD_PATH=\n./build\n\n\n\n\n\nMore usage examples (assumes the above .env setup is being used):\n\n\n  # Clean the project\n  xcclean\n\n  # Build the project\n  xcbuild\n\n  # Run tests in given simulator\n  xctest(\n    destination: \nname=iPhone 5s,OS=8.1\n\n  )\n\n  # Create an archive (./build-dir/MyApp.xcarchive)\n  xcarchive\n\n  # Export a signed binary (./build-dir/MyApp.ipa)\n  xcexport\n\n\n\n\nSee how \nWikipedia\n uses the \nxctest\n action to test their app.\n\n\nNote\n: \nxcodebuild\n is a complex command, so it is recommended to use \ngym\n for building your ipa file and \nscan\n for testing your app instead.\n\n\ncopy_artifacts\n\n\nThis action copies artifacs to a target directory. It's useful if you have a CI that will pick up these artifacts and attach them to the build. Useful e.g. for storing your \n.ipa\ns, \n.dSYM.zip\ns, \n.mobileprovision\ns, \n.cert\ns\n\n\nMake sure your target_path is gitignored, and if you use \nreset_git_repo\n, make sure the artifacts are added to the exclude list\n\n\nExample in conjunction with reset_git_repo\n\n\n# Move our artifacts to a safe location so TeamCity can pick them up\ncopy_artifacts(\n  target_path: 'artifacts',\n  artifacts: ['*.cer', '*.mobileprovision', '*.ipa', '*.dSYM.zip']\n)\n\n# Reset the git repo to a clean state, but leave our artifacts in place\nreset_git_repo(\n  exclude: 'artifacts'\n)\n\n\n\n\nclean_build_artifacts\n\n\nThis action deletes the files that get created in your repo as a result of running the \nipa\n and \nsigh\n commands. It doesn't delete the \nfastlane/report.xml\n though, this is probably more suited for the .gitignore.\n\n\nUseful if you quickly want to send out a test build by dropping down to the command line and typing something like \nfastlane beta\n, without leaving your repo in a messy state afterwards.\n\n\nclean_build_artifacts\n\n\n\n\nSee how \nArtsy\n cleans their build artifacts after building and distributing their app.\n\n\nframeit\n\n\nBy default, the device color will be black\n\n\nframeit\n\n\n\n\nTo use white (sorry, silver) device frames\n\n\nframeit :silver\n\n\n\n\nSee how \nMindNode\n uses \nframeit\n to not only frame the screenshots, but also add a title and a background around the screenshots. More information available in their \nFastfile\n and the \nscreenshots folder\n (\nFramefile.json\n)\n\n\ndsym_zip\n\n\nCreate a zipped dSYM file from your \n.xcarchive\n, useful if you use the \nxcodebuild\n action in combination with \ncrashlytics\n or \nhockey\n.\n\n\ndsym_zip\n\n\n\n\nYou can manually specify the path to the xcarchive (not needed if you use \nxcodebuild\n/\nxcarchive\n to build your archive):\n\n\ndsym_zip(\n  archive_path: 'MyApp.xcarchive'\n)\n\n\n\n\nsplunkmint\n\n\nUploads dSYM.zip file to \nSplunk MINT\n for crash symbolication.\n\n\nsplunkmint(\n    dsym: \nMy.app.dSYM.zip\n,\n    api_key: \n43564d3a\n,\n    api_token: \ne05456234c4869fb7e0b61\n\n)\n\n\n\n\nIf you use \ngym\n the \ndsym\n parameter is optional.\n\n\nrecreate_schemes\n\n\nRecreate shared Xcode project schemes if the \nShared\n checkbox was not enabled.\n\n\nrecreate_schemes(\n  project: './path/to/MyApp.xcodeproj'\n)\n\n\n\n\nTesting\n\n\nscan\n\n\nscan\n makes it super easy to run tests of your iOS and Mac applications\n\n\nscan\n\n\n\n\nYou can define all options that are available in \nscan --help\n\n\nscan(\n  workspace: \nApp.xcworkspace\n,\n  scheme: \nMyTests\n,\n  clean: false\n)\n\n\n\n\nxctest\n\n\nUse the \nxctest\n command to run unit tests.\n\n\nWhen running tests, coverage reports can be generated via \nxcpretty\n reporters:\n\n\n  # Run tests in given simulator\n  xctest(\n    destination: \nname=iPhone 5s,OS=8.1\n,\n    destination_timeout: 120, # increase device/simulator timeout, usually used on slow CI boxes\n    reports: [{\n      report: 'html',\n      output: './build-dir/test-report.html',  # will use XCODE_BUILD_PATH/report, if output is not provided\n      screenshots: 1\n    },\n    {\n      report: 'junit',\n      output: './build-dir/test-report.xml'\n    }]\n  )\n\n\n\n\nxctool\n\n\nYou can run any \nxctool\n action. This will require having \nxctool\n installed through \nhomebrew\n.\n\n\nxctool :test\n\n\n\n\nIt is recommended to have the \nxctool\n configuration stored in a \n.xctool-args\n file.\n\n\nIf you prefer to have the build configuration stored in the \nFastfile\n:\n\n\nxctool :test, [\n      \n--workspace\n, \n'AwesomeApp.xcworkspace'\n,\n      \n--scheme\n, \n'Schema Name'\n,\n      \n--configuration\n, \nDebug\n,\n      \n--sdk\n, \niphonesimulator\n,\n      \n--arch\n, \ni386\n\n    ].join(\n \n)\n\n\n\n\nslather\n\n\n\n\nGenerate test coverage reports for Xcode projects \n hook it into CI.\n\n\n\n\nslather(\n  build_directory: 'foo',\n  input_format: 'bah',\n  scheme: 'Foo',\n  proj: 'foo.xcodeproj'\n)\n\n\n\n\ngcovr\n\n\nGenerate summarized code coverage reports.\n\n\ngcovr(\n  html: true,\n  html_details: true,\n  output: \n./code-coverage/report.html\n\n)\n\n\n\n\nlcov\n\n\nGenerate code coverage reports based on lcov.\n\n\nlcov(\n  project_name: \nyourProjectName\n,\n  scheme: \nyourScheme\n,\n  output_dir: \ncov_reports\n # This value is optional. Default is coverage_reports\n)\n\n\n\n\nxcov\n\n\nCreate nice code coverage reports and post coverage summaries on Slack \n(xcov gem is required)\n.\n\n\nxcov(\n  workspace: \nYourWorkspace.xcworkspace\n,\n  scheme: \nYourScheme\n,\n  output_directory: \nxcov_output\n\n)\n\n\n\n\nOCLint\n\n\nRun the static analyzer tool \nOCLint\n for your project. You need to have a \ncompile_commands.json\n file in your \nfastlane\n directory or pass a path to your file.\n\n\noclint(\n  compile_commands: 'commands.json',    # The JSON compilation database, use xctool reporter 'json-compilation-database'\n  select_regex: /ViewController.m/,     # Select all files matching this regex\n  exclude_regex: /Test.m/,              # Exclude all files matching this regex\n  report_type: 'pmd',                   # The type of the report (default: html)\n  max_priority_1: 10,                   # The max allowed number of priority 1 violations\n  max_priority_2: 100,                  # The max allowed number of priority 2 violations\n  max_priority_3: 1000,                 # The max allowed number of priority 3 violations\n  thresholds: [                         # Override the default behavior of rules\n    'LONG_LINE=200',\n    'LONG_METHOD=200'\n  ],\n  enable_rules: [                       # List of rules to pick explicitly\n    'DoubleNegative',\n    \nSwitchStatementsDon'TNeedDefaultWhenFullyCovered\n\n  ],\n  disable_rules: [\nGotoStatement\n],     # List of rules to disable\n  list_enabled_rules: true,             # List enabled rules\n  enable_clang_static_analyzer: true,   # Enable Clang Static Analyzer, and integrate results into OCLint report\n  enable_global_analysis: true,         # Compile every source, and analyze across global contexts (depends on number of source files, could results in high memory load)\n  allow_duplicated_violations: true     # Allow duplicated violations in the OCLint report\n)\n\n\n\n\nSwiftLint\n\n\nRun SwiftLint for your project.\n\n\nswiftlint(\n  mode: :lint,                          # SwiftLint mode: :lint (default) or :autocorrect\n  output_file: 'swiftlint.result.json', # The path of the output file (optional)\n  config_file: '.swiftlint-ci.yml',     # The path of the configuration file (optional)\n  files: [                              # List of files to process (optional)\n    'AppDelegate.swift',\n    'path/to/project/Model.swift'\n  ],\n  ignore_exit_status: true              # Allow fastlane to continue even if SwiftLint returns a non-zero exit status\n)\n\n\n\n\nensure_no_debug_code\n\n\nYou don't want any debug code to slip into production. You can use the \nensure_no_debug_code\n action to make sure no debug code is in your code base before deploying it:\n\n\nensure_no_debug_code(text: \n// TODO\n)\n\n\n\n\nensure_no_debug_code(text: \nNSLog\n,\n                     path: \n./lib\n,\n                extension: \nm\n)\n\n\n\n\nensure_no_debug_code(text: \n(^#define DEBUG|NSLog)\n,\n                     path: \n./lib\n,\n                extension: \nm\n)\n\n\n\n\nensure_no_debug_code(text: \n,\n                     path: \n./lib\n,\n               extensions: [\nm\n, \nswift\n])\n\n\n\n\nAppium\n\n\nRun UI testing by \nAppium::Driver\n with RSpec.\n\n\nappium(\n  app_path:  \nappium/apps/TargetApp.app\n,\n  spec_path: \nappium/spec\n,\n  platform:  \niOS\n,\n  caps: {\n    versionNumber: \n9.1\n,\n    deviceName:    \niPhone 6\n\n  }\n)\n\n\n\n\nDeploying\n\n\npilot\n\n\npilot\n\n\n\n\nOptions\n\n\nIf your account is on multiple teams and you need to tell the \niTMSTransporter\n which \"provider\" to use, you can set the \nitc_provider\n option to pass this info.\n\n\npilot(\n  username: \nfelix@krausefx.com\n,\n  app_identifier: \ncom.krausefx.app\n,\n  itc_provider: 'abcde12345' # pass a specific value to the iTMSTransporter -itc_provider option\n)\n\n\n\n\nMore information about the available options \nfastlane action pilot\n and a more detailed description on the \npilot project page\n.\n\n\ndeliver\n\n\ndeliver\n\n\n\n\nTo upload a new build to TestFlight use \npilot\n instead.\n\n\nOptions\n\n\nIf you don't want a PDF report for App Store builds, append \n:force\n to the command. This is useful when running \nfastlane\n on your Continuous Integration server: \ndeliver(force: true)\n\n\nIf your account is on multiple teams and you need to tell the \niTMSTransporter\n which \"provider\" to use, you can set the \nitc_provider\n option to pass this info.\n\n\nOther options\n\n\ndeliver(\n  force: true, # Set to true to skip PDF verification\n  email: \nitunes@connect.com\n # different Apple ID than the dev portal\n  itc_provider: 'abcde12345' # pass a specific value to the iTMSTransporter -itc_provider option\n)\n\n\n\n\nSee how \nProduct Hunt\n automated the building and distributing of a beta version over TestFlight in their \nFastfile\n.\n\n\nNote:\n There is an action named \nappstore\n which is a convenience alias to \ndeliver\n.\n\n\nTestFlight\n\n\nTo upload a new binary to Apple TestFlight use the \ntestflight\n action:\n\n\ntestflight\n\n\n\n\nThis will use \ndeliver\n under the hood.\n\n\nAdditionally you can skip the submission of the new binary to the testers to only upload the build:\n\n\ntestflight(skip_deploy: true)\n\n\n\n\nlatest_testflight_build_number\n\n\nFetches most recent build number from TestFlight based on the version number. Provides a way to have \nincrement_build_number\n be based on the latest build you uploaded to iTC.\n\n\nlatest_testflight_build_number(version: \n1.3\n)\n\n\n\n\ncan be used in combination with \nincrement_build_number\n\n\nincrement_build_number({\n  build_number: latest_testflight_build_number + 1\n})\n\n\n\n\nLocal Device\n\n\ninstall_on_device\n\n\nInstalls the ipa on the device, if no id is given, the first found iOS device will be used, works via USB or Wi-Fi.\nthis requires \nios-deploy\n to be installed please have a look at \nios-deploy\n. to quickly install it, use \nnpm -g i ios-deploy\n\n\ninstall_on_device(\n  device_id: \na3be6c9ff7e5c3c6028597513243b0f933b876d4\n\n  ipa: \n./app.ipa\n\n)\n\n\n\n\nHockeyApp\n\n\nhockey(\n  api_token: '...',\n  ipa: './app.ipa',\n  notes: \nChangelog\n\n)\n\n\n\n\nSymbols will also be uploaded automatically if a \napp.dSYM.zip\n file is found next to \napp.ipa\n. In case it is located in a different place you can specify the path explicitly in \n:dsym\n parameter.\n\n\nMore information about the available options can be found in the \nHockeyApp Docs\n.\n\n\nSee how \nArtsy\n distributes new builds via Hockey in their \nFastfile\n.\n\n\nCrashlytics Beta\n\n\ncrashlytics(\n  crashlytics_path: './Pods/Crashlytics/', # path to your Crashlytics submit binary.\n  api_token: '...',\n  build_secret: '...',\n  ipa_path: './app.ipa'\n)\n\n\n\n\nAdditionally you can specify \nnotes\n, \nemails\n, \ngroups\n and \nnotifications\n.\n\n\nDistributing to Groups\n\n\nWhen using the \ngroups\n parameter, it's important to use the group \nalias\n names for each group you'd like to distribute to. A group's alias can be found in the web UI. If you're viewing the Beta page, you can open the groups dialog here:\n\n\n\n\nEach group's alias is then listed here:\n\n\n\n\nThere are a couple reasons why aliases exist:\n\n\n\n\nThey are restricted to a safer set of characters to try to make command line invocations a bit easier\n\n\nThey are created once when the group is created, but are not affected by later edits to the group. This allows your scripts to be stable, even if you decide to change the group's name.\n\n\n\n\nSo, for the example group above, you should specify\n\n\ngroups: [\"dev-team-1\"]\n :white_check_mark:\n\n\nnot\n\n\ngroups: [\"Android Devs\"]\n :x:\n\n\nEnvironment Variables\n\n\nThe following environment variables may be used in place of parameters: \nCRASHLYTICS_API_TOKEN\n, \nCRASHLYTICS_BUILD_SECRET\n, and \nCRASHLYTICS_FRAMEWORK_PATH\n.\n\n\nApteligent\n\n\nUploads dSYM.zip file to \nApteligent\n for crash symbolication.\n\n\napteligent(\n  app_id: '...',\n  api_key: '...'\n)\n\n\n\n\nIf you use \ngym\n the \ndsym\n parameter is optional.\n\n\ndownload_dsyms\n\n\nThis action downloads dSYM files from Apple iTunes Connect after the ipa got re-compiled by Apple. Useful if you have Bitcode enabled.\n\n\nlane :refresh_dsyms do\n  download_dsyms                  # Download dSYM files from iTC\n  upload_symbols_to_crashlytics   # Upload them to Crashlytics\n  clean_build_artifacts           # Delete the local dSYM files\nend\n\n\n\n\nupload_symbols_to_crashlytics\n\n\nThis action allows you to upload symbolication files to Crashlytics. It's extra useful if you use it to download the latest dSYM files from Apple when you use Bitcode.\n\n\nupload_symbols_to_crashlytics(dsym_path: \n./App.dSYM.zip\n)\n\n\n\n\nupload_symbols_to_sentry\n\n\nThis action allows you to upload symbolication files to Sentry.\n\n\nupload_symbols_to_sentry(\n  auth_token: '...',\n  org_slug: '...',\n  project_slug: '...',\n  dsym_path: './App.dSYM.zip'\n)\n\n\n\n\nThe following environment variables may be used in place of parameters: \nSENTRY_AUTH_TOKEN\n, \nSENTRY_ORG_SLUG\n, \nSENTRY_PROJECT_SLUG\n, and \nSENTRY_DSYM_PATH\n.\n\n\nAWS S3 Distribution\n\n\nUpload a new build to Amazon S3 to distribute the build to beta testers. Works for both Ad Hoc and Enterprise signed applications. This step will generate the necessary HTML, plist, and version files for you.\n\n\nAdd the \ns3\n action after the \nipa\n step:\n\n\ns3\n\n\n\n\nYou can also customize a lot of options:\n\n\ns3(\n  # All of these are used to make Shenzhen's `ipa distribute:s3` command\n  access_key: ENV['S3_ACCESS_KEY'],               # Required from user.\n  secret_access_key: ENV['S3_SECRET_ACCESS_KEY'], # Required from user.\n  bucket: ENV['S3_BUCKET'],                       # Required from user.\n  ipa: 'AppName.ipa',                             # Optional is you use `ipa` to build\n  dsym: 'AppName.app.dSYM.zip',                   # Optional is you use `ipa` to build\n  path: 'v{CFBundleShortVersionString}_b{CFBundleVersion}/', # This is actually the default.\n  upload_metadata: true,                          # Upload version.json, plist and HTML. Set to false to skip uploading of these files.\n  version_file_name: 'app_version.json',          # Name of the file to upload to S3. Defaults to 'version.json'\n  version_template_path: 'path/to/erb'            # Path to an ERB to configure the structure of the version JSON file\n)\n\n\n\n\nIt is recommended to \nnot\n store the AWS access keys in the \nFastfile\n.\n\n\nThe uploaded \nversion.json\n file provides an easy way for apps to poll if a new update is available. The JSON looks like:\n\n\n{\n    \nlatestVersion\n: \n%= full_version %\n,\n    \nupdateUrl\n: \nitms-services://?action=download-manifest\nurl=\n%= url %\n\n}\n\n\n\n\nDeployGate\n\n\nYou can retrieve your username and API token on \nyour settings page\n.\n\n\ndeploygate(\n  api_token: '...',\n  user: 'target username or organization name',\n  ipa: './ipa_file.ipa',\n  message: \nBuild #{lane_context[SharedValues::BUILD_NUMBER]}\n,\n  distribution_key: '(Optional) Target Distribution Key'\n)\n\n\n\n\nIf you put \ndeploygate\n after \nipa\n action, you don't have to specify IPA file path, as it is extracted from the lane context automatically.\n\n\nMore information about the available options can be found in the \nDeployGate Push API document\n.\n\n\nXcode Server\n\n\nThis action retrieves integration assets (\n.xcarchive\n, logs etc) from your Xcode Server instance over HTTPS.\n\n\nxcode_server_get_assets(\n    host: '10.99.0.59', # Specify Xcode Server's Host or IP Address\n    bot_name: 'release-1.3.4' # Specify the particular Bot\n  )\n\n\n\n\nThis allows you to use Xcode Server for building and testing, which can be useful when your build takes a long time and requires connected iOS devices for testing. This action only requires you specify the \nhost\n and the \nbot_name\n and it will go and download, unzip and return a path to the downloaded folder. Then you can export an IPA from the archive and upload it with \ndeliver\n.\n\n\nRun \nfastlane action xcode_server_get_assets\n for the full list of options.\n\n\nset_changelog\n\n\nTo easily set the changelog of an app on iTunes Connect for all languages\n\n\nset_changelog(app_identifier: \ncom.krausefx.app\n, version: \n1.0\n, changelog: \nAll Languages\n)\n\n\n\n\nYou can store the changelog in \n./fastlane/changelog.txt\n and it will automatically get loaded from there. This integration is useful if you support e.g. 10 languages and want to use the same \"What's new\"-text for all languages.\n\n\nmake_changelog_from_jenkins\n\n\nGenerate a changelog using the Changes section the running Jenkins job.\n\n\nmake_changelog_from_jenkins(\n  # Optional, lets you set a changelog in the case is not generated on Jenkins or if ran outside of Jenkins\n  fallback_changelog: \nBug fixes and performance enhancements\n\n)\n\n\n\n\nGitHub Releases\n\n\nThis action creates a new release for your repository on GitHub and can also upload specified assets like \n.ipa\ns and \n.app\ns, binary files, changelogs etc.\n\n\ngithub_release = set_github_release(\n  repository_name: \nfastlane/fastlane\n,\n  api_token: ENV['GITHUB_TOKEN'],\n  name: \nSuper New actions\n,\n  tag_name: \nv1.22.0\n,\n  description: File.read(\nchangelog\n),\n  commitish: \nmaster\n,\n  upload_assets: [\nexample_integration.ipa\n, \n./pkg/built.gem\n]\n)\n\n\n\n\nartifactory\n\n\nThis allows you to upload your ipa, or any other file you want, to artifactory.\n\n\nartifactory(\n  username: \nusername\n,\n  password: \npassword\n,\n  endpoint: \nhttps://artifactory.example.com/artifactory/\n,\n  file: 'example.ipa',                                # File to upload\n  repo: 'mobile_artifacts',                           # Artifactory repo\n  repo_path: '/ios/appname/example-major.minor.ipa'   # Path to place the artifact including its filename\n)\n\n\n\n\nTo get a list of all available parameters run \nfastlane action artifactory\n\n\nnexus_upload\n\n\nUpload your ipa, or any other file you want, to Sonatype Nexus platform.\n\n\nnexus_upload(\n  file: \n/path/to/file.ipa\n,\n  repo_id: \nartefacts\n,\n  repo_group_id: \ncom.fastlane\n,\n  repo_project_name: \nipa\n,\n  repo_project_version: \n1.13\n,\n  repo_classifier: \ndSYM\n, # Optional\n  endpoint: \nhttp://localhost:8081\n,\n  username: \nadmin\n,\n  password: \nadmin123\n\n)\n\n\n\n\nAppetize.io\n\n\nUpload your zipped app to Appetize.io to stream your app in the browser.\n\n\nappetize(\n  path: './MyApp.zip',\n  api_token: 'yourapitoken', # get it from https://appetize.io/docs#request-api-token\n  public_key: 'your_public_key' # get it from https://appetize.io/dashboard\n)\n\n\n\n\nIf you provide a \npublic_key\n, this will overwrite an existing application. If you want to have this build as a new app version, you shouldn't provide this value.\n\n\ndevice_grid\n for your Pull Requests\n\n\n\n\nFollow \nthis guide\n to get a grid of devices every time you submit a pull request. The app will be uploaded to \nappetize.io\n so you can stream and try them right in your browser.\n\n\nOpen the Guide\n\n\nFrom within your app, you can check it is currently running on \nAppetize.io\n using\n\n\n[[NSUserDefaults standardUserDefaults] objectForKey:@\nisAppetize\n]\n\n\n\n\nAppaloosa\n\n\nUpload your ipa or apk to your private store on Appaloosa.\n\n\nAdd the \nappaloosa\n action after the \ngym\n step or use it with your existing \napk\n.\n\n\nYou can add some options:\n\n\nappaloosa(\n  # Path tor your IPA or APK\n  binary: '/path/to/binary.ipa',\n  # You can find your store\u2019s id at the bottom of the \u201cSettings\u201d page of your store\n  store_id: 'your_store_id',\n  # You can find your api_token at the bottom of the \u201cSettings\u201d page of your store\n  api_token: 'your_api_key',\n  # User group_ids visibility, if it's not specified we'll publish the app for all users in your store'\n  group_ids: '112, 232, 387',\n  # You can use fastlane/snapshot or specify your own screenshots folder.\n  # If you use snapshot please specify a local and a device to upload your screenshots from.\n  # When multiple values are specified in the Snapfile, we default to 'en-US'\n  locale: 'en-US',\n  # By default, the screenshots from the last device will be used\n  device: 'iPhone6',\n  # Screenshots' filenames should start with device's name like \niphone6-s1.png\n if device specified\n  screenshots: '/path/to_your/screenshots'\n  )\n\n\n\n\nTryouts.io\n\n\nUpload your Android or iOS build to \nTryouts.io\n\n\ntryouts(\n  api_token: \n...\n,\n  app_id: \napplication-id\n,\n  build_file: \ntest.ipa\n,\n)\n\n\n\n\nFor more information about the available options, run \nfastlane action tryouts\n or check out the \nTryouts Documentation\n.\n\n\nInstallr\n\n\nUpload your iOS build to \nInstallr\n\n\ninstallr(\n  api_token: \n...\n,\n  ipa: \ntest.ipa\n,\n  notes: \nThe next great version of the app!\n,\n  notify: \ndev,qa\n,\n  add: \nexec,ops\n\n)\n\n\n\n\nFor more information about the available options, run \nfastlane action installr\n or check out the \nInstallr Documentation\n.\n\n\nTestFairy\n\n\nUpload your iOS build to \nTestFairy\n\n\nYou can retrieve your API key on \nyour settings page\n.\n\n\ntestfairy(\n  api_key: '...',\n  ipa: './ipa_file.ipa',\n  comment: \nBuild #{lane_context[SharedValues::BUILD_NUMBER]}\n,\n)\n\n\n\n\nModifying Project\n\n\nincrement_build_number\n\n\nThis method will increment the \nbuild number\n, not the app version. Usually this is just an auto incremented number. You first have to \nset up your Xcode project\n, if you haven't done it already.\n\n\nincrement_build_number # automatically increment by one\nincrement_build_number(\n  build_number: '75' # set a specific number\n)\n\nincrement_build_number(\n  build_number: 75, # specify specific build number (optional, omitting it increments by one)\n  xcodeproj: './path/to/MyApp.xcodeproj' # (optional, you must specify the path to your main Xcode project if it is not in the project root directory)\n)\n\n\n\n\nSee how \nWikpedia\n uses the \nincrement_build_number\n action.\n\n\nYou can also only receive the build number without modifying it\n\n\nbuild_number = get_build_number(xcodeproj: \nProject.xcodeproj\n)\n\n\n\n\nincrement_version_number\n\n\nThis action will increment the \nversion number\n. You first have to \nset up your Xcode project\n, if you haven't done it already.\n\n\nincrement_version_number # Automatically increment patch version number.\nincrement_version_number(\n  bump_type: \npatch\n # Automatically increment patch version number\n)\nincrement_version_number(\n  bump_type: \nminor\n # Automatically increment minor version number\n)\nincrement_version_number(\n  bump_type: \nmajor\n # Automatically increment major version number\n)\nincrement_version_number(\n  version_number: '2.1.1' # Set a specific version number\n)\n\nincrement_version_number(\n  version_number: '2.1.1',                # specify specific version number (optional, omitting it increments patch version number)\n  xcodeproj: './path/to/MyApp.xcodeproj'  # (optional, you must specify the path to your main Xcode project if it is not in the project root directory)\n)\n\n\n\n\nSee how \nWikpedia\n uses the \nincrement_version_number\n action.\n\n\nYou can also only receive the version number without modifying it\n\n\nversion = get_version_number(xcodeproj: \nProject.xcodeproj\n)\n\n\n\n\nget_build_number_repository\n\n\nget_build_number_repository\n\n\n\n\nThis action will get the \nbuild number\n according to what the SCM HEAD reports.\nCurrently supported SCMs are svn (uses root revision), git-svn (uses svn revision) and git (uses short hash) and mercurial (uses short hash or revision number).\n\n\nThere is an option, \n:use_hg_revision_number\n, which allows to use mercurial revision number instead of hash.\n\n\nset_build_number_repository\n\n\nset_build_number_repository\n\n\n\n\nThis action will set the \nbuild number\n according to what the SCM HEAD reports.\nCurrently supported SCMs are svn (uses root revision), git-svn (uses svn revision) and git (uses short hash) and mercurial (uses short hash or revision number).\n\n\nThere is an option, \n:use_hg_revision_number\n, which allows to use mercurial revision number instead of hash.\n\n\nupdate_project_team\n\n\nThis action allows you to modify the developer team. This may be useful if you want to use a different team for alpha, beta or distribution.\n\n\nupdate_project_team(\n  path: \nExample.xcodeproj\n,\n  teamid: \nA3ZZVJ7CNY\n\n)\n\n\n\n\nupdate_info_plist\n\n\nThis action allows you to modify your \nInfo.plist\n file before building. This may be useful if you want a separate build for alpha, beta or nightly builds, but don't want a separate target.\n\n\n# update app identifier string\nupdate_info_plist(\n  plist_path: \npath/to/Info.plist\n,\n  app_identifier: \ncom.example.newappidentifier\n\n)\n\n# Change the Display Name of your app\nupdate_info_plist(\n  plist_path: \npath/to/Info.plist\n,\n  display_name: \nMyApp-Beta\n\n)\n\n# Target a specific `xcodeproj` rather than finding the first available one\nupdate_info_plist(\n  xcodeproj: \npath/to/Example.proj\n,\n  plist_path: \npath/to/Info.plist\n,\n  display_name: \nMyApp-Beta\n\n)\n\n# Advanced processing: find URL scheme for particular key and replace value\nupdate_info_plist(\n  xcodeproj: \npath/to/Example.proj\n,\n  plist_path: \npath/to/Info.plist\n,\n  block: lambda { |plist|\n    urlScheme = plist['CFBundleURLTypes'].find{|scheme| scheme['CFBundleURLName'] == 'com.acme.default-url-handler'}\n    urlScheme[:CFBundleURLSchemes] = ['acme-production']\n  }\n)\n\n\n\n\nupdate_url_schemes\n\n\nThis action allows you to update the URL schemes of the app before building it.\nFor example, you can use this to set a different url scheme for the alpha\nor beta version of the app.\n\n\nupdate_url_schemes(path: \npath/to/Info.plist\n,\n            url_schemes: [\ncom.myapp\n])\n\n\n\n\nupdate_app_identifier\n\n\nUpdate an app identifier by either setting \nCFBundleIdentifier\n or \nPRODUCT_BUNDLE_IDENTIFIER\n, depending on which is already in use.\n\n\nupdate_app_identifier(\n  xcodeproj: 'Example.xcodeproj', # Optional path to xcodeproj, will use the first .xcodeproj if not set\n  plist_path: 'Example/Info.plist', # Path to info plist file, relative to xcodeproj\n  app_identifier: 'com.test.example' # The App Identifier\n)\n\n\n\n\nbadge\n\n\nModify your app icon and add a badge to it. For more info how to use it see repo.\n\n\nbadge(dark: true) # or\nbadge(alpha: true) # or\nbadge(custom: \n/Users/xxx/Desktop/badge.png\n) # or\nbadge(shield: \nVersion-0.0.3-blue\n, no_badge: true)\n\n\n\n\nNote\n If you want to reset the badge back to default you can use \nsh \"git checkout -- \npath\n/Assets.xcassets/\"\n\n\nupdate_urban_airship_configuration\n\n\nEasily update the AirshipConfig.plist for different deployment targets.\n\n\nupdate_urban_airship_configuration(\n  plist_path: \nAirshipConfig.plist\n,\n  production_app_key: \nPRODKEY\n,\n  production_app_secret: \nPRODSECRET\n\n)\n\n\n\n\nDeveloper Portal\n\n\nmatch\n\n\nCheck out \ncodesigning.guide\n for more information about the concept of \nmatch\n.\n\n\nmatch\n allows you to easily sync your certificates and profiles across your team using git. More information on \nGitHub\n.\n\n\nmatch(type: \nappstore\n, app_identifier: \ntools.fastlane.app\n)\nmatch(type: \ndevelopment\n, readonly: true)\n\n\n\n\nsigh\n\n\nNote\n: It is recommended to use \nmatch\n according to the \ncodesigning.guide\n for generating and maintaining your provisioning profiles. Use \nsigh\n directly only if you want full control over what's going on and know more about codesigning.\n\n\nThis will generate and download your App Store provisioning profile. \nsigh\n will store the generated profile in the current folder.\n\n\nsigh\n\n\n\n\nYou can pass all options listed in \nsigh --help\n in \nfastlane\n:\n\n\nsigh(\n  adhoc: true,\n  force: true,\n  filename: \nmyFile.mobileprovision\n\n)\n\n\n\n\nSee how \nWikpedia\n uses \nsigh\n to automatically retrieve the latest provisioning profile.\n\n\nPEM\n\n\nThis will generate a new push profile if necessary (the old one is about to expire).\n\n\nUse it like this:\n\n\npem\n\n\n\n\npem(\n  force: true, # create a new profile, even if the old one is still valid\n  app_identifier: 'net.sunapps.9', # optional app identifier,\n  save_private_key: true,\n  new_profile: proc do |profile_path| # this block gets called when a new profile was generated\n    puts profile_path # the absolute path to the new PEM file\n    # insert the code to upload the PEM file to the server\n  end\n)\n\n\n\n\nUse the \nfastlane action pem\n command to view all available options.\n\n\nProduct Hunt\n uses \nPEM\n to automatically create a new push profile for Parse.com if necessary before a release.\n\n\ncert\n\n\nNote\n: It is recommended to use \nmatch\n according to the \ncodesigning.guide\n for generating and maintaining your certificates. Use \ncert\n directly only if you want full control over what's going on and know more about codesigning.\n\n\nThe \ncert\n action can be used to make sure to have the latest signing certificate installed. More information on the \ncert\n project page\n.\n\n\ncert\n\n\n\n\nfastlane\n will automatically pass the signing certificate to use to \nsigh\n.\n\n\nYou can pass all options listed in \nsigh --help\n in \nfastlane\n:\n\n\ncert(\n  development: true,\n  username: \nuser@email.com\n\n)\n\n\n\n\nproduce\n\n\nCreate new apps on iTunes Connect and Apple Developer Portal. If the app already exists, \nproduce\n will not do anything.\n\n\nproduce(\n  username: 'felix@krausefx.com',\n  app_identifier: 'com.krausefx.app',\n  app_name: 'MyApp',\n  language: 'English',\n  version: '1.0',\n  sku: 123,\n  team_name: 'SunApps GmbH' # Only necessary when in multiple teams.\n)\n\n\n\n\nSunApps\n uses \nproduce\n to automatically generate new apps for new customers.\n\n\nregister_devices\n\n\nThis will register iOS devices with the Developer Portal so that you can include them in your provisioning profiles.\n\n\nThis is an optimistic action, in that it will only ever add new devices to the member center, and never remove devices. If a device which has already been registered within the member center is not passed to this action, it will be left alone in the member center and continue to work.\n\n\nThe action will connect to the Apple Developer Portal using the username you specified in your \nAppfile\n with \napple_id\n, but you can override it using the \nusername\n option, or by setting the env variable \nENV['DELIVER_USER']\n.\n\n\n# Simply provide a list of devices as a Hash\nregister_devices(\n  devices: {\n    'Luka iPhone 6' =\n '1234567890123456789012345678901234567890',\n    'Felix iPad Air 2' =\n 'abcdefghijklmnopqrstvuwxyzabcdefghijklmn',\n  }\n)\n\n# Alternatively provide a standard UDID export .txt file, see the Apple Sample (https://devimages.apple.com.edgekey.net/downloads/devices/Multiple-Upload-Samples.zip)\nregister_devices(\n  devices_file: './devices.txt'\n)\n\n# Advanced\nregister_devices(\n  devices_file: './devices.txt', # You must pass in either `devices_file` or `devices`.\n  team_id: 'XXXXXXXXXX',         # Optional, if you're a member of multiple teams, then you need to pass the team ID here.\n  username: 'luka@goonbee.com'   # Optional, lets you override the Apple Member Center username.\n)\n\n\n\n\nUsing git\n\n\nchangelog_from_git_commits\n\n\nThis action turns your git commit history into formatted changelog text.\n\n\n# Collects commits since your last tag and returns a concatenation of their subjects and bodies\nchangelog_from_git_commits\n\n# Advanced options\nchangelog_from_git_commits(\n  between: ['7b092b3', 'HEAD'], # Optional, lets you specify a revision/tag range between which to collect commit info\n  pretty: '- (%ae) %s', # Optional, lets you provide a custom format to apply to each commit when generating the changelog text\n  tag_match_pattern: nil, # Optional, lets you search for a tag name that matches a glob(7) pattern\n  match_lightweight_tag: false, # Optional, lets you ignore lightweight (non-annotated) tags when searching for the last tag\n  include_merges: true # Optional, lets you filter out merge commits\n)\n\n\n\n\nensure_git_branch\n\n\nThis action will check if your git repo is checked out to a specific branch. You may only want to make releases from a specific branch, so \nensure_git_branch\n will stop a lane if it was accidentally executed on an incorrect branch.\n\n\nensure_git_branch # defaults to `master` branch\n\nensure_git_branch(\n  branch: 'develop'\n)\n\n\n\n\nlast_git_tag\n\n\nSimple action to get the latest git tag\n\n\nlast_git_tag\n\n\n\n\nIf you are using this action on a \nshallow clone\n, \nthe default with some CI systems like Bamboo\n, you need to ensure that you have also have pulled all the git tags appropriately.  Assuming your git repo has the correct remote set you can issue \nsh(\"git fetch --tags\")\n\n\n  #Only fetch tags if a remote is set\n  remote_count = sh(\ngit remote show | wc -l\n)\n  if remote_count \n 0.to_s\n    sh(\ngit fetch --tags\n)\n    last_git_tag\n  end\n\n\n\n\ngit_branch\n\n\nQuickly get the name of the branch you're currently in\n\n\ngit_branch\n\n\n\n\ngit_tag_exists\n\n\nChecks whether the given tag exists in the repo\n\n\nif git_tag_exists(tag: \n1.1.0\n)\n  UI.message(\nFound it \ud83d\ude80\n)\nend\n\n\n\n\ngit_add\n\n\nTo simply add one file before commit use\n\n\ngit_add(path: \n./version.txt\n)\n\n\n\n\nTo add several files before commit use\n\n\ngit_add(path: [\n./version.txt\n, \n./changelog.txt\n])\n\n\n\n\ngit_commit\n\n\nTo simply commit one file with a certain commit message use\n\n\ngit_commit(path: \n./version.txt\n,\n        message: \nVersion Bump\n)\n\n\n\n\nTo commit several files with a certain commit message use\n\n\ngit_commit(path: [\n./version.txt\n, \n./changelog.txt\n]\n        message: \nVersion Bump\n)\n\n\n\n\nensure_git_status_clean\n\n\nA sanity check to make sure you are working in a repo that is clean. Especially useful to put at the beginning of your Fastfile in the \nbefore_all\n block, if some of your other actions will touch your filesystem, do things to your git repo, or just as a general reminder to save your work. Also needed as a prerequisite for some other actions like \nreset_git_repo\n.\n\n\nensure_git_status_clean\n\n\n\n\nWikipedia\n uses \nensure_git_status_clean\n to make sure, no uncommited changes are deployed by `fastlane.\n\n\ncommit_version_bump\n\n\nThis action will create a \"Version Bump\" commit in your repo. Useful in conjunction with \nincrement_build_number\n.\n\n\nIt checks the repo to make sure that only the relevant files have changed, these are the files that \nincrement_build_number\n (\nagvtool\n) touches:\n- All .plist files\n- The \n.xcodeproj/project.pbxproj\n file\n\n\nThen commits those files to the repo.\n\n\nCustomise the message with the \n:message\n option, defaults to \"Version Bump\"\n\n\nIf you have other uncommitted changes in your repo, this action will fail. If you started off in a clean repo, and used the \nipa\n and or \nsigh\n actions, then you can use the \nclean_build_artifacts\n action to clean those temporary files up before running this action.\n\n\ncommit_version_bump\n\ncommit_version_bump(\n  message: 'Version Bump',                    # create a commit with a custom message\n  xcodeproj: './path/to/MyProject.xcodeproj', # optional, if you have multiple Xcode project files, you must specify your main project here\n)\n\n\n\n\nArtsy\n uses \nfastlane\n to automatically commit the version bump, add a new git tag and push everything back to \nmaster\n.\n\n\nnumber_of_commits\n\n\nYou can use this action to get the number of commits of this repo. This is useful if you want to set the build number to the number of commits.\n\n\nbuild_number = number_of_commits\nincrement_build_number(build_number: build_number)\n\n\n\n\nadd_git_tag\n\n\nThis will automatically tag your build with the following format: \ngrouping\n/\nlane\n/\nprefix\nbuild_number\n, where:\n\n\n\n\ngrouping\n is just to keep your tags organised under one \"folder\", defaults to 'builds'\n\n\nlane\n is the name of the current fastlane lane\n\n\nprefix\n is anything you want to stick in front of the version number, e.g. \"v\"\n\n\nbuild_number\n is the build number, which defaults to the value emitted by the \nincrement_build_number\n action\n\n\n\n\nFor example for build 1234 in the \"appstore\" lane it will tag the commit with \nbuilds/appstore/1234\n\n\nadd_git_tag # simple tag with default values\n\nadd_git_tag(\n  grouping: 'fastlane-builds',\n  prefix: 'v',\n  build_number: 123\n)\n\n\n\n\nAlternatively, you can specify your own tag. Note that if you do specify a tag, all other arguments are ignored.\n\n\nadd_git_tag(\n  tag: 'my_custom_tag'\n)\n\n\n\n\nArtsy\n uses \nfastlane\n to automatically commit the version bump, add a new git tag and push everything back to \nmaster\n.\n\n\ngit_pull\n\n\nExecutes a simple \ngit pull --tags\n command\n\n\npush_to_git_remote\n\n\nLets you push your local commits to a remote git repo. Useful if you make local changes such as adding a version bump commit (using \ncommit_version_bump\n) or a git tag (using 'add_git_tag') on a CI server, and you want to push those changes back to your canonical/main repo.\n\n\nTags will be pushed as well by default, except when setting the option 'tags' to false.\n\n\npush_to_git_remote # simple version. pushes 'master' branch to 'origin' remote\n\npush_to_git_remote(\n  remote: 'origin',         # optional, default: 'origin'\n  local_branch: 'develop',  # optional, aliased by 'branch', default: 'master'\n  remote_branch: 'develop', # optional, default is set to local_branch\n  force: true,              # optional, default: false\n  tags: false               # optional, default: true\n)\n\n\n\n\nArtsy\n uses \nfastlane\n to automatically commit the version bump, add a new git tag and push everything back to \nmaster\n.\n\n\npush_git_tags\n\n\nIf you only want to push the tags and nothing else, you can use the \npush_git_tags\n action:\n\n\npush_git_tags\n\n\n\n\nreset_git_repo\n\n\nThis action will reset your git repo to a clean state, discarding any uncommitted and untracked changes. Useful in case you need to revert the repo back to a clean state, e.g. after the fastlane run.\nUntracked files like \n.env\n will also be deleted, unless \n:skip_clean\n is true.\n\n\nIt's a pretty drastic action so it comes with a sort of safety latch. It will only proceed with the reset if either of these conditions are met:\n\n\n\n\nYou have called the \nensure_git_status_clean\n action prior to calling this action. This ensures that your repo started off in a clean state, so the only things that will get destroyed by this action are files that are created as a byproduct of the fastlane run.\n\n\nYou call it with the \nforce: true\n option, in which case \"you have been warned\".\n\n\n\n\nAlso useful for putting in your \nerror\n block, to bring things back to a pristine state (again with the caveat that you have called \nensure_git_status_clean\n before)\n\n\nreset_git_repo\nreset_git_repo(force: true) # If you don't care about warnings and are absolutely sure that you want to discard all changes. This will reset the repo even if you have valuable uncommitted changes, so use with care!\nreset_git_repo(skip_clean: true) # If you want 'git clean' to be skipped, thus NOT deleting untracked files like '.env'. Optional, defaults to false.\n\n# You can also specify a list of files that should be reset.\nreset_git_repo(\n  force: true,\n  files: [\n    \n./file.txt\n\n  ])\n\n\n\n\nMindNode\n uses this action to reset temporary changes of the project configuration after successfully building it.\n\n\nget_github_release\n\n\nYou can easily receive information about a specific release from GitHub.com\n\n\nrelease = get_github_release(url: \nfastlane/fastlane\n, version: \n1.0.0\n)\nputs release['name']\n\n\n\n\nTo get a list of all available values run \nfastlane action get_github_release\n.\n\n\nimport_from_git\n\n\nImport another Fastfile from a remote git repository to use its lanes.\n\n\nThis is useful if you have shared lanes across multiple apps and you want to store the Fastfile in a remote git repository.\n\n\nimport_from_git(\n  url: 'git@github.com:fastlane/fastlane.git', # The url of the repository to import the Fastfile from.\n  branch: 'HEAD', # The branch to checkout on the repository. Defaults to `HEAD`.\n  path: 'fastlane/Fastfile' # The path of the Fastfile in the repository. Defaults to `fastlane/Fastfile`.\n)\n\n\n\n\nlast_git_commit\n\n\nGet information about the last git commit, returns the commit hash, the abbreviated commit hash, the author and the git message.\n\n\ncommit = last_git_commit\ncrashlytics(notes: commit[:message]) # message of commit\nauthor = commit[:author] # author of the commit\nhash = commit[:commit_hash] # long sha of commit\nshort_hash = commit[:abbreviated_commit_hash] # short sha of commit\n\n\n\n\ncreate_pull_request\n\n\nCreate a new pull request.\n\n\ncreate_pull_request(\n  api_token: ENV['GITHUB_TOKEN'],\n  repo: 'fastlane/fastlane',\n  title: 'Amazing new feature',\n  head: 'my-feature',                 # optional, defaults to current branch name.\n  base: 'master',                     # optional, defaults to 'master'.\n  body: 'Please pull this in!',       # optional\n  api_url: 'http://yourdomain/api/v3' # optional, for Github Enterprise, defaults to 'https://api.github.com'.\n)\n\n\n\n\nUsing mercurial\n\n\nhg_ensure_clean_status\n\n\nAlong the same lines as the \nensure_git_status_clean\n action, this is a sanity check to ensure the working mercurial repo is clean. Especially useful to put at the beginning of your Fastfile in the \nbefore_all\n block.\n\n\nhg_ensure_clean_status\n\n\n\n\nhg_commit_version_bump\n\n\nThe mercurial equivalent of the \ncommit_version_bump\n git action. Like the git version, it is useful in conjunction with \nincrement_build_number\n.\n\n\nIt checks the repo to make sure that only the relevant files have changed, these are the files that \nincrement_build_number\n (\nagvtool\n) touches:\n- All .plist files\n- The \n.xcodeproj/project.pbxproj\n file\n\n\nThen commits those files to the repo.\n\n\nCustomise the message with the \n:message\n option, defaults to \"Version Bump\"\n\n\nIf you have other uncommitted changes in your repo, this action will fail. If you started off in a clean repo, and used the \nipa\n and or \nsigh\n actions, then you can use the \nclean_build_artifacts\n action to clean those temporary files up before running this action.\n\n\nhg_commit_version_bump\n\nhg_commit_version_bump(\n  message: 'Version Bump',                    # create a commit with a custom message\n  xcodeproj: './path/to/MyProject.xcodeproj', # optional, if you have multiple Xcode project files, you must specify your main project here\n)\n\n\n\n\nhg_add_tag\n\n\nA simplified version of git action \nadd_git_tag\n. It adds a given tag to the mercurial repo.\n\n\nSpecify the tag name with the \n:tag\n option.\n\n\nhg_add_tag tag: version_number\n\n\n\n\nhg_push\n\n\nThe mercurial equivalent of \npush_to_git_remote\n \u2014 pushes your local commits to a remote mercurial repo. Useful when local changes such as adding a version bump commit or adding a tag are part of your lane\u2019s actions.\n\n\nhg_push # simple version. pushes commits from current branch to default destination\n\nhg_push(\n  destination: 'ssh://hg@repohost.com/owner/repo', # optional\n  force: true,                                     # optional, default: false\n)\n\n\n\n\nNotifications\n\n\nSlack\n\n\nCreate an Incoming WebHook and export this as \nSLACK_URL\n. Can send a message to \n#channel\n (by default), a direct message to \n@username\n or a message to a private group \ngroup\n with success (green) or failure (red) status.\n\n\nslack(\n  message: \nApp successfully released!\n\n)\n\nslack(\n  message: \nApp successfully released!\n,\n  channel: \n#channel\n,  # Optional, by default will post to the default channel configured for the POST URL.\n  success: true,        # Optional, defaults to true.\n  payload: {            # Optional, lets you specify any number of your own Slack attachments.\n    'Build Date' =\n Time.new.to_s,\n    'Built by' =\n 'Jenkins',\n  },\n  default_payloads: [:git_branch, :git_author], # Optional, lets you specify a whitelist of default payloads to include. Pass an empty array to suppress all the default payloads. Don't add this key, or pass nil, if you want all the default payloads. The available default payloads are: `lane`, `test_result`, `git_branch`, `git_author`, `last_git_commit_message`.\n  attachment_properties: { # Optional, lets you specify any other properties available for attachments in the slack API (see https://api.slack.com/docs/attachments). This hash is deep merged with the existing properties set using the other properties above. This allows your own fields properties to be appended to the existing fields that were created using the `payload` property for instance.\n    thumb_url: 'http://example.com/path/to/thumb.png',\n    fields: [{\n      title: 'My Field',\n      value: 'My Value',\n      short: true\n    }]\n  }\n)\n\n\n\n\nTake a look at the \nexample projects\n of how you can use the slack action, for example the \nMindNode configuration\n.\n\n\nMailgun\n\n\nSend email notifications right from \nfastlane\n using \nMailgun\n.\n\n\nENV['MAILGUN_SANDBOX_POSTMASTER'] ||= \nMY_POSTMASTER\n\nENV['MAILGUN_APIKEY'] = \nMY_API_KEY\n\nENV['MAILGUN_APP_LINK'] = \nMY_APP_LINK\n\n\nmailgun(\n  to: \nfastlane@krausefx.com\n,\n  success: true,\n  message: \nThis is the mail's content\n\n)\n\nor\n\nmailgun(\n  postmaster: \nMY_POSTMASTER\n,\n  apikey: \nMY_API_KEY\n,\n  to: \nDESTINATION_EMAIL\n,\n  from: \nEMAIL_FROM_NAME\n,\n  success: true,\n  message: \nMail Body\n,\n  app_link: \nhttp://www.myapplink.com\n,\n  ci_build_link: \nhttp://www.mycibuildlink.com\n,\n  template_path: \nHTML_TEMPLATE_PATH\n\n)\n\n\n\n\nHipChat\n\n\nSend a message to \nroom\n (by default) or a direct message to \n@username\n with success (green) or failure (red) status.\n\n\n  ENV[\nHIPCHAT_API_TOKEN\n] = \nYour API token\n\n  ENV[\nHIPCHAT_API_VERSION\n] = \n1 for API version 1 or 2 for API version 2\n\n\n  hipchat(\n    message: \nApp successfully released!\n,\n    message_format: \nhtml\n, # or \ntext\n, defaults to \nhtml\n\n    channel: \nRoom or @username\n,\n    success: true\n  )\n\n\n\n\nTypetalk\n\n\nSend a message to \ntopic\n with success (:smile:) or failure (:rage:) status.\n\nUsing Bot's Typetalk Token\n\n\n  typetalk(\n    message: \nApp successfully released!\n,\n    note_path: 'ChangeLog.md',\n    topicId: 1,\n    success: true,\n    typetalk_token: 'Your Typetalk Token'\n  )\n\n\n\n\nChatWork\n\n\nPost a message to a \ngroup chat\n.\n\n\nHow to authenticate ChatWork API\n\n\n  ENV[\nCHATWORK_API_TOKEN\n] = \nYour API token\n\n\n  chatwork(\n    message: \nApp successfully released!\n,\n    roomid: 12345,\n    success: true\n  )\n\n\n\n\nNotification\n\n\nDisplay a notification using the macOS notification center. Uses \nterminal-notifier\n.\n\n\n  notification(subtitle: \nFinished Building\n, message: \nReady to upload...\n)\n\n\n\n\nByMyEyes\n uses the \nnotify\n action to show a success message after \nfastlane\n finished executing.\n\n\nTestmunk\n\n\nRun your functional tests on real iOS devices over the cloud (for free on an iPod). With this simple \ntestcase\n you can ensure your app launches and there is no crash at launch. Tests can be extended with \nTestmunk's library\n or custom steps. More details about this action can be found in \ntestmunk.rb\n.\n\n\nENV['TESTMUNK_EMAIL'] = 'email@email.com'\n# Additionally, you have to set TESTMUNK_API, TESTMUNK_APP and TESTMUNK_IPA\ntestmunk\n\n\n\n\nPodio\n\n\nCreates an item within your Podio app. In case an item with the given identifying value already exists within your Podio app, it updates that item. To find out how to get your authentication credentials see \nPodio API documentation\n. To find out how to get your identifying field (external ID) and general info about Podio item see \ntutorials\n.\n\n\nENV[\nPODIO_ITEM_IDENTIFYING_FIELD\n] = \nString specifying the field key used for identification of an item\n\n\npodio_item(\n  identifying_value: \nYour unique value\n,\n  other_fields: {\n    \nfield1\n =\n \nfieldValue\n,\n    \nfield2\n =\n \nfieldValue2\n\n  }\n)\n\n\n\n\nTo see all environment values, please run \nfastlane action podio_item\n.\n\n\nOneSignal\n\n\nCreate a onesignal app for managing push notifications\n\n\nENV[\nONE_SIGNAL_APP_ID\n] = \nResulting OneSignal app ID\n\nENV[\nONE_SIGNAL_APP_AUTH_KEY\n] = \nAuth key for the created App\n\n\nonesignal(\n  auth_token: \nYour OneSignal Auth Token\n,\n  app_name: \nName for OneSignal App\n,\n  android_token: \nYour Android GCM key (optional)\n,\n  apns_p12: \nPath to Apple .p12 file (optional)\n\n  apns_p12_password: \nPassword for .p12 file (optional)\n\n  apns_env: \nproduction/sandbox (defaults to production)\n\n)\n\n\n\n\nFlock\n\n\nSend a text message to a Flock group.\n\n\nflock(\n  message: \nHello\n\n  token: \nxxx\n\n)\n\n\n\n\nTo obtain the token, create a new\n\nincoming message webhook\n\nin your Flock admin panel.\n\n\nJIRA\n\n\nLeave a comment on a JIRA ticket.\n\n\njira(\n  url: \nhttps://bugs.yourdomain.com\n,\n  username: \nYour username\n,\n  password: \nYour password\n,\n  ticket_id: \nTicket ID, i.e. IOS-123\n,\n  comment_text: \nText to post as a comment\n\n)\n\n\n\n\nOther\n\n\nupdate_fastlane\n\n\nThis action will look at all installed fastlane tools and update them to the next available minor version - major version updates will not be performed automatically, as they might include breaking changes. If an update was performed, fastlane will be restarted before the run continues.\n\n\nIf you are using rbenv or rvm, everything should be good to go. However, if you are using the system's default ruby, some additional setup is needed for this action to work correctly. In short, fastlane needs to be able to access your gem library without running in \nsudo\n mode.\n\n\nThe simplest possible fix for this is putting the following lines into your \n~/.bashrc\n or \n~/.zshrc\n file:\n\n\nexport GEM_HOME=~/.gems\nexport PATH=$PATH:~/.gems/bin\n\n\n\n\nAfter the above changes, restart your terminal, then run \nmkdir $GEM_HOME\n to create the new gem directory. After this, you're good to go!\n\n\nRecommended usage of the \nupdate_fastlane_ action is at the top of the\nbefore_all` block, before running any other action:\n\n\nbefore_all do\n  update_fastlane\n\n  cocoapods\n  increment_build_number\n  ...\nend\n\n\n\n\nsonar\n\n\nThis action will execute \nsonar-runner\n to run SonarQube analysis on your source code.\n\n\nsonar(\n  project_key: \nname.gretzki.awesomeApp\n,\n  project_version: \n1.0\n,\n  project_name: \niOS - AwesomeApp\n,\n  sources_path: File.expand_path(\n../AwesomeApp\n)\n)\n\n\n\n\nIt can process unit test results if formatted as junit report as shown in \nxctest\n action. It can also integrate coverage reports in Cobertura format, which can be transformed into by \nslather\n action.\n\n\nsetup_jenkins\n\n\nThis action helps with Jenkins integration. Creates own derived data for each job. All build results like IPA files and archives will be stored in the \n./output\n directory. The action also works with \nKeychains and Provisioning Profiles Plugin\n, selected keychain will be automatically unlocked and the selected code signing identity will be used. By default this action will only work when fastlane is executed on a CI system.\n\n\nsetup_jenkins\n\n\n\n\nMisc\n\n\nadb\n\n\nLets you execute adb commands.\n\n\nadb(\n  command: \nshell ls\n,\n)\n\n\n\n\nadb_devices\n\n\nReturns an array of all currently connected android devices.\ne.g.: run an adb command on all connected devices.\n\n\nadb_devices.each  do | device |\n  model = adb(command: \nshell getprop ro.product.model\n,\n              serial: device.serial\n             ).strip\n  puts \nModel #{model} is connected\n\nend\n\n\n\n\ntwitter\n\n\nPost a tweet on twitter. Requires you to setup an app on twitter.com and obtain consumer and access_token.\n\n\ntwitter(\n  access_token: \nXXXX\n,\n  access_token_secret: \nxxx\n,\n  consumer_key: \nxxx\n,\n  consumer_secret: \nxxx\n,\n  message: \nYou rock!\n\n)\n\n\n\n\nerb\n\n\nParses a given ERB template file (passes \nplaceholders\n as a binding), and saves the rendered output to destination. If no destination is given, it returns the rendered output as a string.\n\n\nExample \nerb\n template:\n\n\nVariable1 \n%= var1 %\n\nVariable2 \n%= var2 %\n\n\n% for item in var3 %\n\n        \n%= item %\n\n\n% end %\n\n\n\n\n\nerb(\n  template: \n1.erb\n,\n  destination: \n/tmp/rendered.out\n,\n  placeholders: {\n    :var1 =\n 123,\n    :var2 =\n \nstring\n,\n    :var3 =\n [\nelement1\n, \nelement2\n]\n  }\n)\n\n\n\n\nappledoc\n\n\nGenerate Apple-like source code documentation from specially formatted source code comments.\n\n\nappledoc(\n  project_name: \nMyProjectName\n,\n  project_company: \nCompany Name\n,\n  input: \nMyProjectSources\n,\n  ignore: [\n    'ignore/path/1',\n    'ingore/path/2'\n  ],\n  options: \n--keep-intermediate-files --search-undocumented-doc\n,\n  warnings: \n--warn-missing-output-path --warn-missing-company-id\n\n)\n\n\n\n\nUse \nappledoc --help\n to see the list of all command line options.\n\n\ndownload\n\n\nDownload a file from a remote server (e.g. JSON file)\n\n\ndata = download(url: \nhttps://host.com/api.json\n)\n\n# Print information\nputs data[\nusers\n].first[\nname\n]\n\n# Iterate\ndata[\nusers\n].each do |user|\n  puts user[\nname\n]\nend\n\n\n\n\nversion_get_podspec\n\n\nTo receive the current version number from your \n.podspec\n file use\n\n\nversion = version_get_podspec(path: \nTSMessages.podspec\n)\n\n\n\n\nversion_bump_podspec\n\n\nTo increment the version number of your \n.podspec\n use\n\n\nversion = version_bump_podspec(path: \nTSMessages.podspec\n, bump_type: \npatch\n)\n# or\nversion = version_bump_podspec(path: \nTSMessages.podspec\n, version_number: \n1.4\n)\n\n\n\n\nget_info_plist_value\n\n\nGet a value from a plist file, which can be used to fetch the app identifier and more information about your app\n\n\nidentifier = get_info_plist_value(path: './Info.plist', key: 'CFBundleIdentifier')\nputs identifier # =\n com.krausefx.app\n\n\n\n\nset_info_plist_value\n\n\nSet a value of a plist file. You can use this action to update the bundle identifier of your app\n\n\nset_info_plist_value(path: './Info.plist', key: 'CFBundleIdentifier', value: \ncom.krausefx.app.beta\n)\n\n\n\n\nsay\n\n\nTo speak out a text\n\n\nsay \nI can speak\n\n\n\n\n\nclipboard\n\n\nYou can store a string in the clipboard running\n\n\nclipboard(value: \nhttps://github.com/fastlane/fastlane/tree/master/fastlane\n)\n\n\n\n\nThis can be used to store some generated URL or value for easy copy \n paste (e.g. the download link):\n\n\nclipboard(value: lane_context[SharedValues::HOCKEY_DOWNLOAD_LINK])\n\n\n\n\nCLOC\n\n\nYou can generate a Line Count (that is readable by Jenkins - see the \nSLOCCount Plugin\n for more details).  This action is a wrapper around the cloc tool:\n\n\n# Result will be an XML report file: reports/cloc.xml\ncloc(exclude_dir: 'ThirdParty,Resources', output_directory: 'reports', source_directory: 'MyCoolApp')\n\n\n\n\nis_ci?\n\n\nIs the current run being executed on a CI system, like Jenkins or Travis?\n\n\nif is_ci?\n  puts \nI'm a computer\n\nelse\n  say \nHi Human!\n\nend\n\n\n\n\nverify_build\n\n\nVerifies that the built app was built using the expected build resources. This is relevant for people who build on machines that are used to build apps with different profiles, certificates and/or bundle identifiers to guard against configuration mistakes.\n\n\nAdd this action to appropriate lanes and assign some values to verify, like:\n\n\nverify_build(\n  provisioning_type: 'distribution',\n  bundle_identifier: 'com.example.myapp'\n)\n\n\n\n\nYou can verify the following items:\n- app_name\n- bundle_identifier\n- provisioning_type\n- provisioning_uuid\n- team_identifier\n- team_name\n\n\nverify_pod_keys\n\n\nRuns a check against all keys specified in your Podfile to make sure they're more than a single character long. This is to ensure you don't deploy with stubbed keys.\n\n\nverify_pod_keys\n\n\n\n\nWill raise an error if any key is empty or a single character.\n\n\nread_podspec\n\n\nLoads the specified (or the first found) podspec in the folder as JSON, so that you can inspect its \nversion\n, \nfiles\n etc. This can be useful when basing your release process on the version string only stored in one place - in the podspec. As one of the first steps you'd read the podspec and its version and the rest of the workflow can use that version string (when e.g. creating a new git tag or a GitHub Release).\n\n\nspec = read_podspec\nversion = spec['version']\nputs \nUsing Version #{version}\n\n\n\n\n\nThis will find the first podspec in the folder. You can also pass in the specific podspec path.\n\n\nspec = read_podspec(path: \n./XcodeServerSDK.podspec\n)\n\n\n\n\npod_push\n\n\nPush a Podspec to Trunk or a private repository\n\n\n# If no path is supplied then Trunk will attempt to find the first Podspec in the current directory.\npod_push\n\n# Alternatively, supply the Podspec file path\npod_push(path: 'TSMessages.podspec')\n\n# You may also push to a private repo instead of Trunk\npod_push(path: 'TSMessages.podspec', repo: 'MyRepo')\n\n# If the podspec has a dependency on another private pod, then you will have to supply the sources you want the podspec to lint with for pod_push to succeed. Read more here - https://github.com/CocoaPods/CocoaPods/issues/2543.\npod_push(path: 'TMessages.podspec', repo: 'MyRepo', sources: ['https://github.com/MyGithubPage/Specs', 'https://github.com/CocoaPods/Specs'])\n\n\n\n\nclean_cocoapods_cache\n\n\nCleanup the Cocoapods cache.\n\n\n# Clean entire cocoapods cache.\nclean_cocoapods_cache\n\n# Alternatively, supply the name of pod to be removed from cache.\nclean_cocoapods_cache(name: 'CACHED POD')\n\n\n\n\nprompt\n\n\nYou can use \nprompt\n to ask the user for a value or to just let the user confirm the next step.\nThis action also supports multi-line inputs using the \nmulti_line_end_keyword\n option.\n\n\nchangelog = prompt(text: \nChangelog: \n)\n\n\n\n\nchangelog = prompt(\n  text: \nChangelog: \n,\n  multi_line_end_keyword: \nEND\n\n)\n\nhockey(notes: changelog)\n\n\n\n\nbackup_file\n\n\nThis action backs up your file to \n[path].back\n.\n\n\n# copies `file` to `/path/to/file.back`\nbackup_file(path: '/path/to/file')\n\n\n\n\nrestore_file\n\n\nThis action restores a file previously backed up by the \nbackup_file\n action.\n\n\n# copies `file.back` to '/path/to/file'\nrestore_file(path: '/path/to/file')\n\n\n\n\nbackup_xcarchive\n\n\nSave your [zipped] xcarchive elsewhere from default path.\n\n\nbackup_xcarchive(\n  xcarchive: '/path/to/file.xcarchive', # Optional if you use the `xcodebuild` action\n  destination: '/somewhere/else/file.xcarchive', # Where the backup should be created\n  zip: false, # Enable compression of the archive. Defaults to `true`.\n  versioned: true # Create a versioned (date and app version) subfolder where to put the archive. Default value `true`\n)\n\n\n\n\ndebug\n\n\nPrint out an overview of the lane context values.\n\n\ndebug\n\n\n\n\ndotgpg_environment\n\n\nReads in production secrets set in a dotgpg file and puts them in ENV.\n\n\ndotgpg_environment(dotgpg_file: './path/to/gpgfile')\n\n\n\n\nJazzy\n\n\nGenerate docs using \nJazzy\n\n\njazzy\n\n\n\n\nupdate_info_plist\n\n\nUpdate an \nInfo.plist\n with a bundle identifier and display name.\n\n\nupdate_info_plist(\n  xcodeproj: '/path/to/Project.xcodeproj', # Optional. Will pick the first `xcodeproj` in the directory if left blank\n  plist_path: '/path/to/Info.plist', # Path to the info plist file\n  app_identifier: 'com.example.newapp', # Optional. The new App Identifier of your app\n  display_name: 'MyNewApp' # Optional. The new Display Name of your app\n)\n\n\n\n\nfastlane_version\n\n\nAdd this to your \nFastfile\n to require a certain version of \nfastlane\n. Use it if you use an action that just recently came out and you need it\n\n\nfastlane_version \n1.50.0\n\n\n\n\n\ninstall_xcode_plugin\n\n\nInstall an Xcode plugin for the current user\n\n\ninstall_xcode_plugin(url: 'https://example.com/clubmate/plugin.zip')\n\n\n\n\nYou can also let \nfastlane\n pick the latest version of a plugin automatically, if it is hosted on GitHub\n\n\ninstall_xcode_plugin(github: 'https://github.com/contentful/ContentfulXcodePlugin')\n\n\n\n\nopt_out_usage\n\n\nAdd this your \nFastfile\n to not send any data to the fastlane web service. You can also use the \nFASTLANE_OPT_OUT_USAGE\n environment variable. No personal data is shared, more information on \nhttps://github.com/fastlane/enhancer\n\n\nopt_out_usage\n\n\n\n\nrocket\n\n\nPrint an ascii Rocket :rocket:. Useful after using \ncrashlytics\n or \npilot\n to indicate that your new build has been shipped to outer-space.\n\n\nskip_docs\n\n\nTell \nfastlane\n to not automatically create a \nfastlane/README.md\n when running \nfastlane\n. You can always trigger the creation of this file manually by running \nfastlane docs\n\n\nssh\n\n\nLets you execute a series of commands on a remote host, if one of the commands in command-array returns non 0 - it fails.\n\n\nssh(\n  host: \ndev.januschka.com\n,\n  username: \nroot\n,\n  commands: [\n    \ndate\n,\n    \necho 1 \n /tmp/file1\n\n  ]\n)\n\n\n\n\n\nIf one of the commands fails an exception is raised\n\n\nssh(\n  host: \"dev.januschka.com\",\n  username: \"root\",\n  commands: [\n    \"date\",\n    \"false\",\n    \"echo 'i wont be executed'\"\n  ]\n)\n\n\nscp\n\n\nAllows SCP file transfer.\n\n\nUpload file/folder:\n\n\nscp(\n  host: \ndev.januschka.com\n,\n  username: \nroot\n,\n  upload: {\n    src: \n/root/dir1\n,\n    dst: \n/tmp/new_dir\n\n  }\n)\n\n\n\n\nDownload file/folder:\n\n\nscp(\n  host: \ndev.januschka.com\n,\n  username: \nroot\n,\n  download: {\n    src: \n/root/dir1\n,\n    dst: \n/tmp/new_dir\n\n  }\n)\n\n\n\n\nrsync\n\n\na wrapper around rsync, rsync is a tool that lets you synchronize files, including permissions and so on for a more detailed information about rsync please see \nrsync(1)\n manpage.\n\n\nrsync(\n  source: \nroot@host:/tmp/1.txt\n,\n  destination: \n/tmp/local_file.txt\n\n)\n\n\n\n\nzip\n\n\nCompress a file or directory\n\n\nzip(path: \nMyApp.app\n)\n\nzip(path: \nMyApp.app\n, output_path: \nLatest.app.zip\n)\n\n\n\n\nifttt\n\n\nConnect to the IFTTT \nMaker Channel\n. An IFTTT Recipe has two components: a Trigger and an Action. In this case, the Trigger will fire every time the Maker Channel receives a web request (made by this \nfastlane\n action) to notify it of an event. The Action can be anything that IFTTT supports: email, SMS, etc.\n\n\nifttt(\n  api_key: \n...\n,\n  event_name: \n...\n,\n  value1: \nfoo\n,\n  value2: \nbar\n,\n  value3: \nbaz\n\n)\n\n\n\n\nreset_simulators\n\n\nReset all the iOS simulators. Useful with test actions to ensure a clean simulator.\n\n\nreset_simulators\n\n\n\n\ndanger\n\n\nTo run \ndanger\n add this to your \nFastfile\n\n\nlane :danger do\n  danger\nend\n\n\n\n\npod_lib_lint\n\n\nExecute pod lib lint command\n\n\npod_lib_lint\n\n# Allow ouput detail in console\npod_lib_lint(verbose: true)\n\n# Allow warnings during pod lint\npod_lib_lint(allow_warnings: true)\n\n# If the podspec has a dependency on another private pod, then you will have to supply the sources\npod_lib_lint(sources: ['https://github.com/MyGithubPage/Specs', 'https://github.com/CocoaPods/Specs'])\n\n\n\n\nset_pod_key\n\n\nAdds a key to \ncocoapods-keys\n.\n\n\nset_pod_key(\n  key: 'APIToken',\n  value: '1234',\n  project: 'MyProject'\n)", 
            "title": "Actions"
        }, 
        {
            "location": "/actions/Actions/#actions", 
            "text": "There are lots of predefined  fastlane  actions you can use. If you have ideas for more, please  let me know .  To get the most up-to-date information from the command line on your current version you can also run:  fastlane actions: List all available fastlane actions\nfastlane action [action_name]:  You can import another  Fastfile  by using the  import  action. This is useful if you have shared lanes across multiple apps and you want to store a  Fastfile  in a separate folder. The path must be relative to the  Fastfile  this is called from.  import './path/to/other/Fastfile'   Building  Testing  Deploying  Modifying Project  Developer Portal  Using git  Using mercurial  Notifications  Misc", 
            "title": "Actions"
        }, 
        {
            "location": "/actions/Actions/#building", 
            "text": "", 
            "title": "Building"
        }, 
        {
            "location": "/actions/Actions/#bundler", 
            "text": "This will install your Gemfile by executing  bundle install  bundle_install", 
            "title": "Bundler"
        }, 
        {
            "location": "/actions/Actions/#cocoapods", 
            "text": "If you use  CocoaPods  you can use the  cocoapods  integration to run  pod install  before building your app.  cocoapods # this will run pod install", 
            "title": "CocoaPods"
        }, 
        {
            "location": "/actions/Actions/#carthage", 
            "text": "This will execute  carthage bootstrap  carthage  More options are available:  carthage(\n  command:  bootstrap                             # One of: build, bootstrap, update, archive. (default: bootstrap)\n  dependencies: ['Alamofire', 'Notice'],          # Specify which dependencies to update (only for the update command)\n  use_ssh: false,                                 # Use SSH for downloading GitHub repositories.\n  use_submodules: false,                          # Add dependencies as Git submodules.\n  use_binaries: true,                             # Check out dependency repositories even when prebuilt frameworks exist\n  no_build: false,                                # When bootstrapping Carthage do not build\n  no_skip_current: false,                         # Don't skip building the current project (only for frameworks)\n  verbose: false,                                 # Print xcodebuild output inline\n  platform:  all ,                                # Define which platform to build for (one of \u2018all\u2019, \u2018Mac\u2019, \u2018iOS\u2019, \u2018watchOS\u2019, 'tvOS', or comma-separated values of the formers except for \u2018all\u2019)\n  configuration:  Release ,                       # Build configuration to use when building\n  toolchain:  com.apple.dt.toolchain.Swift_2_3    # Specify the xcodebuild toolchain\n)", 
            "title": "Carthage"
        }, 
        {
            "location": "/actions/Actions/#gym", 
            "text": "gym  builds and packages iOS apps for you. It takes care of all the heavy lifting and makes it super easy to generate a signed  ipa  file.  gym(scheme:  MyApp , workspace:  MyApp.xcworkspace )  There are many more options available, you can use  gym --help  to get the latest list of available options.  gym(\n  workspace:  MyApp.xcworkspace ,\n  configuration:  Debug ,\n  scheme:  MyApp ,\n  silent: true,\n  clean: true,\n  output_directory:  path/to/dir , # Destination directory. Defaults to current directory.\n  output_name:  my-app.ipa ,       # specify the name of the .ipa file to generate (including file extension)\n  sdk:  10.0                      # use SDK as the name or path of the base SDK when building the project.\n)  Use  gym --help  to get all available options.  The alternative to  gym  is  ipa  which uses  shenzhen  under the hood.", 
            "title": "gym"
        }, 
        {
            "location": "/actions/Actions/#gradle", 
            "text": "You can use the  gradle  action to integrate your gradle tasks into  fastlane .  Simple usage:  gradle(\n  task: 'assemble',\n  flavor: 'WorldDomination',\n  build_type: 'Release'\n)  In case of an  assemble  task, the signed apk path is accessible in:  lane_context[Actions::SharedValues::GRADLE_APK_OUTPUT_PATH]  You can pass  gradle properties :  gradle(\n  # ...\n\n  properties: {\n    'versionCode' =  100,\n    'versionName' =  '1.0.0',\n    # ...\n  }\n)  If you need to pass sensitive information through the  gradle  action, and don't want the generated command to be printed before it is run, you can suppress that:  gradle(\n  # ...\n  print_command: false\n)  You can also suppress printing the output generated by running the generated Gradle command:  gradle(\n  # ...\n  print_command_output: false\n)  To pass any other CLI flags to gradle use:  gradle(\n  # ...\n\n  flags:  --exitcode --xml file.xml \n)", 
            "title": "gradle"
        }, 
        {
            "location": "/actions/Actions/#verify_xcode", 
            "text": "Verifies that the Xcode installation is properly signed by Apple. This is relevant after recent  attacks targeting Xcode .  Add this action to your  appstore  lane. Keep in mind this action might take several minutes to be completed.  verify_xcode", 
            "title": "verify_xcode"
        }, 
        {
            "location": "/actions/Actions/#screengrab", 
            "text": "screengrab  automates taking localized screenshots of your Android app on every device  screengrab  Other options ( screengrab --help )  screengrab(\n  locales: ['en-US', 'fr-FR', 'ja-JP'],\n  clear_previous_screenshots: true,\n  app_apk_path: 'build/outputs/apk/example-debug.apk',\n  tests_apk_path: 'build/outputs/apk/example-debug-androidTest-unaligned.apk'\n)", 
            "title": "screengrab"
        }, 
        {
            "location": "/actions/Actions/#snapshot", 
            "text": "snapshot  Other options ( snapshot --help )  snapshot(\n  skip_open_summary: true,\n  clean: true\n)  Take a look at the  prefilling data guide  on the  snapshot  documentation.", 
            "title": "snapshot"
        }, 
        {
            "location": "/actions/Actions/#clear_derived_data", 
            "text": "Clears the Xcode Derived Data at path  ~/Library/Developer/Xcode/DerivedData  clear_derived_data", 
            "title": "clear_derived_data"
        }, 
        {
            "location": "/actions/Actions/#ipa", 
            "text": "Note : This action is deprecated, use  gym  instead.  Build your app right inside  fastlane  and the path to the resulting ipa is automatically available to all other actions.  You should check out the  code signing guide .  ipa(\n  workspace:  MyApp.xcworkspace ,\n  configuration:  Debug ,\n  scheme:  MyApp ,\n  # (optionals)\n  clean: true,                     # This means 'Do Clean'. Cleans project before building (the default if not specified).\n  destination:  path/to/dir ,      # Destination directory. Defaults to current directory.\n  ipa:  my-app.ipa ,               # specify the name of the .ipa file to generate (including file extension)\n  xcargs:  MY_ADHOC=0 ,            # pass additional arguments to xcodebuild when building the app.\n  embed:  my.mobileprovision ,     # Sign .ipa file with .mobileprovision\n  identity:  MyIdentity ,          # Identity to be used along with --embed\n  sdk:  10.0 ,                     # use SDK as the name or path of the base SDK when building the project.\n  archive: true                    # this means 'Do Archive'. Archive project after building (the default if not specified).\n)  The  ipa  action uses  shenzhen  under the hood.  The path to the  ipa  is automatically used by  Crashlytics ,  Hockey  and  DeployGate .  Important:  To also use it in  deliver , update your  Deliverfile  and remove all code in the  Building and Testing  section, in particular all  ipa  and  beta_ipa  blocks.  See how  Product Hunt  uses the  ipa  action.", 
            "title": "ipa"
        }, 
        {
            "location": "/actions/Actions/#update_project_provisioning", 
            "text": "You should check out the  code signing guide  before using this action.  Updates your Xcode project to use a specific provisioning profile for code signing, so that you can properly build and sign the .ipa file using the  ipa  action or a CI service.  Since you have to use different provisioning profiles for various targets (WatchKit, Extension, etc.) and configurations (Debug, Release) you can use the  target_filter  and  build_configuration  options:  update_project_provisioning(\n  xcodeproj:  Project.xcodeproj ,\n  profile:  ./watch_app_store.mobileprovision , # optional if you use sigh\n  target_filter:  .*WatchKit Extension.* , # matches name or type of a target\n  build_configuration:  Release \n)  The  target_filter  and  build_configuration  options use standard regex, so if you want an exact match for a target, use  ^MyTargetName$  to prevent a match for the  Pods - MyTargetName  target, for instance.  Example Usage at MindNode", 
            "title": "update_project_provisioning"
        }, 
        {
            "location": "/actions/Actions/#update_app_group_identifiers", 
            "text": "Updates the App Group Identifiers in the given Entitlements file, so you can have app groups for the app store build and app groups for an enterprise build.  update_app_group_identifiers(\n    entitlements_file: '/path/to/entitlements_file.entitlements',\n    app_group_identifiers: ['group.your.app.group.identifier'])", 
            "title": "update_app_group_identifiers"
        }, 
        {
            "location": "/actions/Actions/#update_icloud_container_identifiers", 
            "text": "Updates the iCloud Container Identifiers in the given Entitlements file, so you can use different iCloud containers for different builds like Adhoc, App Store, etc.  update_icloud_container_identifiers(\n  entitlements_file: '/path/to/entitlements_file.entitlements',\n  icloud_container_identifiers: ['iCloud.com.companyname.appname']\n)", 
            "title": "update_icloud_container_identifiers"
        }, 
        {
            "location": "/actions/Actions/#ensure_xcode_version", 
            "text": "Makes sure a specific version of Xcode is selected to be used to build.\nYou can use  ensure_xcode_version  to ensure that a beta version of Xcode is not accidentally selected to build, which would make uploading to TestFlight fail.  ensure_xcode_version(version:  7.2 )", 
            "title": "ensure_xcode_version"
        }, 
        {
            "location": "/actions/Actions/#xcode_install", 
            "text": "Makes sure a specific version of Xcode is installed. If that's not the case, it will automatically be downloaded by the  xcode_install  gem.  This will make sure to use the correct Xcode for later actions.  xcode_install(version:  7.1 )", 
            "title": "xcode_install"
        }, 
        {
            "location": "/actions/Actions/#xcversion", 
            "text": "Finds and selects a version of an installed Xcode that best matches the provided  Gem::Version  requirement specifier .  xcversion version:  7.1  # Selects Xcode 7.1.0\nxcversion version:  ~  7.1.0  # Selects the latest installed version from the 7.1.x set", 
            "title": "xcversion"
        }, 
        {
            "location": "/actions/Actions/#xcode_select", 
            "text": "Select and build with the Xcode installed at the provided path. Use the  xcversion  action if you want to select an Xcode based on a version specifier or you don't have known, stable paths as may happen in a CI environment.  xcode_select  /Applications/Xcode6.1.app", 
            "title": "xcode_select"
        }, 
        {
            "location": "/actions/Actions/#resign", 
            "text": "This will resign an ipa with another signing identity and provisioning profile.  If you have used the  ipa  and  sigh  actions, then this action automatically gets the  ipa  and  provisioning_profile  values respectively from those actions and you don't need to manually set them (although you can always override them).  resign(\n  ipa: 'path/to/ipa', # can omit if using the `ipa` action\n  signing_identity: 'iPhone Distribution: Luka Mirosevic (0123456789)',\n  provisioning_profile: 'path/to/profile', # can omit if using the _sigh_ action\n)  You may provide multiple provisioning profiles if the application contains nested applications or app extensions, which need their own provisioning profile. You can do so by passing an array of provisioning profile strings or a hash that associates provisioning profile values to bundle identifier keys.  resign(\n  ipa: 'path/to/ipa', # can omit if using the `ipa` action\n  signing_identity: 'iPhone Distribution: Luka Mirosevic (0123456789)',\n  provisioning_profile: {\n    'com.example.awesome-app' =  'path/to/profile',\n    'com.example.awesome-app.app-extension' =  'path/to/app-extension/profile'\n  }\n)", 
            "title": "resign"
        }, 
        {
            "location": "/actions/Actions/#create_keychain", 
            "text": "Create a new keychain, which can then be used to import certificates.  create_keychain(\n  name:  KeychainName ,\n  default_keychain: true,\n  unlock: true,\n  timeout: 3600,\n  lock_when_sleeps: true\n)", 
            "title": "create_keychain"
        }, 
        {
            "location": "/actions/Actions/#unlock_keychain", 
            "text": "Unlock an existing keychain and add it to the keychain search list.  unlock_keychain(\n  path:  /path/to/KeychainName.keychain ,\n  password:  mysecret \n)  By default the keychain is added to the existing. To replace them with the selected keychain you may use  :replace .  unlock_keychain(\n  path:  /path/to/KeychainName.keychain ,\n  password:  mysecret ,\n  add_to_search_list: :replace # To only add a keychain use `true` or `:add`.\n)  In addition, the keychain can be selected as a default keychain.  unlock_keychain(\n  path:  /path/to/KeychainName.keychain ,\n  password:  mysecret ,\n  set_default: true\n)  If the keychain file is located in the standard location  ~/Library/Keychains , then it is sufficient to provide the keychain file name, or file name with its suffix.  unlock_keychain(\n  path:  KeychainName ,\n  password:  mysecret \n)", 
            "title": "unlock_keychain"
        }, 
        {
            "location": "/actions/Actions/#get_ipa_info_plist_value", 
            "text": "Returns a value from Info.plist inside a .ipa file  get_ipa_info_plist_value(ipa:  path.ipa , key:  KEY_YOU_READ )", 
            "title": "get_ipa_info_plist_value"
        }, 
        {
            "location": "/actions/Actions/#delete_keychain", 
            "text": "Delete a keychain, can be used after creating one with  create_keychain .  delete_keychain(name:  KeychainName )", 
            "title": "delete_keychain"
        }, 
        {
            "location": "/actions/Actions/#import_certificate", 
            "text": "Import certificates into the current default keychain. Use  create_keychain  to create a new keychain.  import_certificate certificate_path:  certs/AppleWWDRCA.cer \nimport_certificate certificate_path:  certs/dist.p12 , certificate_password: ENV['CERT_PASSWORD']", 
            "title": "import_certificate"
        }, 
        {
            "location": "/actions/Actions/#xcodebuild", 
            "text": "Note :  xcodebuild  is a complex command, so it is recommended to use  gym  for building your ipa file and  scan  for testing your app instead.  Make sure to also read the  code signing guide .  # Create an archive. (./build-dir/MyApp.xcarchive)\nxcodebuild(\n  archive: true,\n  archive_path: './build-dir/MyApp.xcarchive',\n  scheme: 'MyApp',\n  workspace: 'MyApp.xcworkspace'\n)  build_settings  are variables which are exposed inside the build process as ENV variables, and can be used to override project settings, or dynamically set values inside a Plist.  output_style  sets the output format of the console output. Supported options are: 1)  :standard , this is the default and will output pretty colored UTF8, and 2)  :basic , which will output monochrome ASCII, useful for a CI environment like TeamCity that doesn't support color/UTF8.  xcodebuild(\n  workspace:  ... ,\n  scheme:  ... ,\n  build_settings: {\n     CODE_SIGN_IDENTITY  =   iPhone Developer: ... ,\n     PROVISIONING_PROFILE  =   ... ,\n     JOBS  =  16\n  },\n  output_style: :basic\n)  To keep your Fastfile lightweight, there are also alias actions available for\nthe most common  xcodebuild  operations:  xcarchive ,  xcbuild ,  xcclean ,  xctest     xcexport .  To export the IPA files using  xcodebuild  you can provide  :export_options_plist  as a path to plist file or as a hash of values. To get the list of available keys and values please read help page:  xcodebuild --help :  xcexport(\n  archive_path:  ... ,\n  export_options_plist:  /path/to/export_options.plist \n)\n\n# or\nxcexport(\n  archive_path:  ... ,\n  export_options_plist: {\n    method:  ad-hoc ,\n    thinning:  thin-for-all-variants ,\n    manifest: {\n      appURL:  https://example.com/path/MyApp Name.ipa ,\n      displayImageURL:  https://example.com/display image.png ,\n      fullSizeImageURL:  https://example.com/fullSize image.png ,\n    }\n  }\n)  When using  :export_options_plist  as hash, the  :teamID  is read from  Appfile .  :appURL ,  :displayImageURL ,  :fullSizeImageURL ,  :assetPackManifestURL  and  :onDemandResourcesAssetPacksBaseURL  are URI escaped to prevent Xcode errors.  Environment variables may be added to a .env file in place of some parameters:  XCODE_PROJECT= ./MyApp.xcodeproj \nXCODE_WORKSPACE= ./MyApp.xcworkspace \nXCODE_SCHEME= MyApp \nXCODE_BUILD_PATH= ./build   More usage examples (assumes the above .env setup is being used):    # Clean the project\n  xcclean\n\n  # Build the project\n  xcbuild\n\n  # Run tests in given simulator\n  xctest(\n    destination:  name=iPhone 5s,OS=8.1 \n  )\n\n  # Create an archive (./build-dir/MyApp.xcarchive)\n  xcarchive\n\n  # Export a signed binary (./build-dir/MyApp.ipa)\n  xcexport  See how  Wikipedia  uses the  xctest  action to test their app.  Note :  xcodebuild  is a complex command, so it is recommended to use  gym  for building your ipa file and  scan  for testing your app instead.", 
            "title": "xcodebuild"
        }, 
        {
            "location": "/actions/Actions/#copy_artifacts", 
            "text": "This action copies artifacs to a target directory. It's useful if you have a CI that will pick up these artifacts and attach them to the build. Useful e.g. for storing your  .ipa s,  .dSYM.zip s,  .mobileprovision s,  .cert s  Make sure your target_path is gitignored, and if you use  reset_git_repo , make sure the artifacts are added to the exclude list  Example in conjunction with reset_git_repo  # Move our artifacts to a safe location so TeamCity can pick them up\ncopy_artifacts(\n  target_path: 'artifacts',\n  artifacts: ['*.cer', '*.mobileprovision', '*.ipa', '*.dSYM.zip']\n)\n\n# Reset the git repo to a clean state, but leave our artifacts in place\nreset_git_repo(\n  exclude: 'artifacts'\n)", 
            "title": "copy_artifacts"
        }, 
        {
            "location": "/actions/Actions/#clean_build_artifacts", 
            "text": "This action deletes the files that get created in your repo as a result of running the  ipa  and  sigh  commands. It doesn't delete the  fastlane/report.xml  though, this is probably more suited for the .gitignore.  Useful if you quickly want to send out a test build by dropping down to the command line and typing something like  fastlane beta , without leaving your repo in a messy state afterwards.  clean_build_artifacts  See how  Artsy  cleans their build artifacts after building and distributing their app.", 
            "title": "clean_build_artifacts"
        }, 
        {
            "location": "/actions/Actions/#frameit", 
            "text": "By default, the device color will be black  frameit  To use white (sorry, silver) device frames  frameit :silver  See how  MindNode  uses  frameit  to not only frame the screenshots, but also add a title and a background around the screenshots. More information available in their  Fastfile  and the  screenshots folder  ( Framefile.json )", 
            "title": "frameit"
        }, 
        {
            "location": "/actions/Actions/#dsym_zip", 
            "text": "Create a zipped dSYM file from your  .xcarchive , useful if you use the  xcodebuild  action in combination with  crashlytics  or  hockey .  dsym_zip  You can manually specify the path to the xcarchive (not needed if you use  xcodebuild / xcarchive  to build your archive):  dsym_zip(\n  archive_path: 'MyApp.xcarchive'\n)", 
            "title": "dsym_zip"
        }, 
        {
            "location": "/actions/Actions/#splunkmint", 
            "text": "Uploads dSYM.zip file to  Splunk MINT  for crash symbolication.  splunkmint(\n    dsym:  My.app.dSYM.zip ,\n    api_key:  43564d3a ,\n    api_token:  e05456234c4869fb7e0b61 \n)  If you use  gym  the  dsym  parameter is optional.", 
            "title": "splunkmint"
        }, 
        {
            "location": "/actions/Actions/#recreate_schemes", 
            "text": "Recreate shared Xcode project schemes if the  Shared  checkbox was not enabled.  recreate_schemes(\n  project: './path/to/MyApp.xcodeproj'\n)", 
            "title": "recreate_schemes"
        }, 
        {
            "location": "/actions/Actions/#testing", 
            "text": "", 
            "title": "Testing"
        }, 
        {
            "location": "/actions/Actions/#scan", 
            "text": "scan  makes it super easy to run tests of your iOS and Mac applications  scan  You can define all options that are available in  scan --help  scan(\n  workspace:  App.xcworkspace ,\n  scheme:  MyTests ,\n  clean: false\n)", 
            "title": "scan"
        }, 
        {
            "location": "/actions/Actions/#xctest", 
            "text": "Use the  xctest  command to run unit tests.  When running tests, coverage reports can be generated via  xcpretty  reporters:    # Run tests in given simulator\n  xctest(\n    destination:  name=iPhone 5s,OS=8.1 ,\n    destination_timeout: 120, # increase device/simulator timeout, usually used on slow CI boxes\n    reports: [{\n      report: 'html',\n      output: './build-dir/test-report.html',  # will use XCODE_BUILD_PATH/report, if output is not provided\n      screenshots: 1\n    },\n    {\n      report: 'junit',\n      output: './build-dir/test-report.xml'\n    }]\n  )", 
            "title": "xctest"
        }, 
        {
            "location": "/actions/Actions/#xctool", 
            "text": "You can run any  xctool  action. This will require having  xctool  installed through  homebrew .  xctool :test  It is recommended to have the  xctool  configuration stored in a  .xctool-args  file.  If you prefer to have the build configuration stored in the  Fastfile :  xctool :test, [\n       --workspace ,  'AwesomeApp.xcworkspace' ,\n       --scheme ,  'Schema Name' ,\n       --configuration ,  Debug ,\n       --sdk ,  iphonesimulator ,\n       --arch ,  i386 \n    ].join(   )", 
            "title": "xctool"
        }, 
        {
            "location": "/actions/Actions/#slather", 
            "text": "Generate test coverage reports for Xcode projects   hook it into CI.   slather(\n  build_directory: 'foo',\n  input_format: 'bah',\n  scheme: 'Foo',\n  proj: 'foo.xcodeproj'\n)", 
            "title": "slather"
        }, 
        {
            "location": "/actions/Actions/#gcovr", 
            "text": "Generate summarized code coverage reports.  gcovr(\n  html: true,\n  html_details: true,\n  output:  ./code-coverage/report.html \n)", 
            "title": "gcovr"
        }, 
        {
            "location": "/actions/Actions/#lcov", 
            "text": "Generate code coverage reports based on lcov.  lcov(\n  project_name:  yourProjectName ,\n  scheme:  yourScheme ,\n  output_dir:  cov_reports  # This value is optional. Default is coverage_reports\n)", 
            "title": "lcov"
        }, 
        {
            "location": "/actions/Actions/#xcov", 
            "text": "Create nice code coverage reports and post coverage summaries on Slack  (xcov gem is required) .  xcov(\n  workspace:  YourWorkspace.xcworkspace ,\n  scheme:  YourScheme ,\n  output_directory:  xcov_output \n)", 
            "title": "xcov"
        }, 
        {
            "location": "/actions/Actions/#oclint", 
            "text": "Run the static analyzer tool  OCLint  for your project. You need to have a  compile_commands.json  file in your  fastlane  directory or pass a path to your file.  oclint(\n  compile_commands: 'commands.json',    # The JSON compilation database, use xctool reporter 'json-compilation-database'\n  select_regex: /ViewController.m/,     # Select all files matching this regex\n  exclude_regex: /Test.m/,              # Exclude all files matching this regex\n  report_type: 'pmd',                   # The type of the report (default: html)\n  max_priority_1: 10,                   # The max allowed number of priority 1 violations\n  max_priority_2: 100,                  # The max allowed number of priority 2 violations\n  max_priority_3: 1000,                 # The max allowed number of priority 3 violations\n  thresholds: [                         # Override the default behavior of rules\n    'LONG_LINE=200',\n    'LONG_METHOD=200'\n  ],\n  enable_rules: [                       # List of rules to pick explicitly\n    'DoubleNegative',\n     SwitchStatementsDon'TNeedDefaultWhenFullyCovered \n  ],\n  disable_rules: [ GotoStatement ],     # List of rules to disable\n  list_enabled_rules: true,             # List enabled rules\n  enable_clang_static_analyzer: true,   # Enable Clang Static Analyzer, and integrate results into OCLint report\n  enable_global_analysis: true,         # Compile every source, and analyze across global contexts (depends on number of source files, could results in high memory load)\n  allow_duplicated_violations: true     # Allow duplicated violations in the OCLint report\n)", 
            "title": "OCLint"
        }, 
        {
            "location": "/actions/Actions/#swiftlint", 
            "text": "Run SwiftLint for your project.  swiftlint(\n  mode: :lint,                          # SwiftLint mode: :lint (default) or :autocorrect\n  output_file: 'swiftlint.result.json', # The path of the output file (optional)\n  config_file: '.swiftlint-ci.yml',     # The path of the configuration file (optional)\n  files: [                              # List of files to process (optional)\n    'AppDelegate.swift',\n    'path/to/project/Model.swift'\n  ],\n  ignore_exit_status: true              # Allow fastlane to continue even if SwiftLint returns a non-zero exit status\n)", 
            "title": "SwiftLint"
        }, 
        {
            "location": "/actions/Actions/#ensure_no_debug_code", 
            "text": "You don't want any debug code to slip into production. You can use the  ensure_no_debug_code  action to make sure no debug code is in your code base before deploying it:  ensure_no_debug_code(text:  // TODO )  ensure_no_debug_code(text:  NSLog ,\n                     path:  ./lib ,\n                extension:  m )  ensure_no_debug_code(text:  (^#define DEBUG|NSLog) ,\n                     path:  ./lib ,\n                extension:  m )  ensure_no_debug_code(text:  ,\n                     path:  ./lib ,\n               extensions: [ m ,  swift ])", 
            "title": "ensure_no_debug_code"
        }, 
        {
            "location": "/actions/Actions/#appium", 
            "text": "Run UI testing by  Appium::Driver  with RSpec.  appium(\n  app_path:   appium/apps/TargetApp.app ,\n  spec_path:  appium/spec ,\n  platform:   iOS ,\n  caps: {\n    versionNumber:  9.1 ,\n    deviceName:     iPhone 6 \n  }\n)", 
            "title": "Appium"
        }, 
        {
            "location": "/actions/Actions/#deploying", 
            "text": "", 
            "title": "Deploying"
        }, 
        {
            "location": "/actions/Actions/#pilot", 
            "text": "pilot", 
            "title": "pilot"
        }, 
        {
            "location": "/actions/Actions/#options", 
            "text": "If your account is on multiple teams and you need to tell the  iTMSTransporter  which \"provider\" to use, you can set the  itc_provider  option to pass this info.  pilot(\n  username:  felix@krausefx.com ,\n  app_identifier:  com.krausefx.app ,\n  itc_provider: 'abcde12345' # pass a specific value to the iTMSTransporter -itc_provider option\n)  More information about the available options  fastlane action pilot  and a more detailed description on the  pilot project page .", 
            "title": "Options"
        }, 
        {
            "location": "/actions/Actions/#deliver", 
            "text": "deliver  To upload a new build to TestFlight use  pilot  instead.", 
            "title": "deliver"
        }, 
        {
            "location": "/actions/Actions/#options_1", 
            "text": "If you don't want a PDF report for App Store builds, append  :force  to the command. This is useful when running  fastlane  on your Continuous Integration server:  deliver(force: true)  If your account is on multiple teams and you need to tell the  iTMSTransporter  which \"provider\" to use, you can set the  itc_provider  option to pass this info.  Other options  deliver(\n  force: true, # Set to true to skip PDF verification\n  email:  itunes@connect.com  # different Apple ID than the dev portal\n  itc_provider: 'abcde12345' # pass a specific value to the iTMSTransporter -itc_provider option\n)  See how  Product Hunt  automated the building and distributing of a beta version over TestFlight in their  Fastfile .  Note:  There is an action named  appstore  which is a convenience alias to  deliver .", 
            "title": "Options"
        }, 
        {
            "location": "/actions/Actions/#testflight", 
            "text": "To upload a new binary to Apple TestFlight use the  testflight  action:  testflight  This will use  deliver  under the hood.  Additionally you can skip the submission of the new binary to the testers to only upload the build:  testflight(skip_deploy: true)", 
            "title": "TestFlight"
        }, 
        {
            "location": "/actions/Actions/#latest_testflight_build_number", 
            "text": "Fetches most recent build number from TestFlight based on the version number. Provides a way to have  increment_build_number  be based on the latest build you uploaded to iTC.  latest_testflight_build_number(version:  1.3 )  can be used in combination with  increment_build_number  increment_build_number({\n  build_number: latest_testflight_build_number + 1\n})", 
            "title": "latest_testflight_build_number"
        }, 
        {
            "location": "/actions/Actions/#local-device", 
            "text": "", 
            "title": "Local Device"
        }, 
        {
            "location": "/actions/Actions/#install_on_device", 
            "text": "Installs the ipa on the device, if no id is given, the first found iOS device will be used, works via USB or Wi-Fi.\nthis requires  ios-deploy  to be installed please have a look at  ios-deploy . to quickly install it, use  npm -g i ios-deploy  install_on_device(\n  device_id:  a3be6c9ff7e5c3c6028597513243b0f933b876d4 \n  ipa:  ./app.ipa \n)", 
            "title": "install_on_device"
        }, 
        {
            "location": "/actions/Actions/#hockeyapp", 
            "text": "hockey(\n  api_token: '...',\n  ipa: './app.ipa',\n  notes:  Changelog \n)  Symbols will also be uploaded automatically if a  app.dSYM.zip  file is found next to  app.ipa . In case it is located in a different place you can specify the path explicitly in  :dsym  parameter.  More information about the available options can be found in the  HockeyApp Docs .  See how  Artsy  distributes new builds via Hockey in their  Fastfile .", 
            "title": "HockeyApp"
        }, 
        {
            "location": "/actions/Actions/#crashlytics-beta", 
            "text": "crashlytics(\n  crashlytics_path: './Pods/Crashlytics/', # path to your Crashlytics submit binary.\n  api_token: '...',\n  build_secret: '...',\n  ipa_path: './app.ipa'\n)  Additionally you can specify  notes ,  emails ,  groups  and  notifications .", 
            "title": "Crashlytics Beta"
        }, 
        {
            "location": "/actions/Actions/#distributing-to-groups", 
            "text": "When using the  groups  parameter, it's important to use the group  alias  names for each group you'd like to distribute to. A group's alias can be found in the web UI. If you're viewing the Beta page, you can open the groups dialog here:   Each group's alias is then listed here:   There are a couple reasons why aliases exist:   They are restricted to a safer set of characters to try to make command line invocations a bit easier  They are created once when the group is created, but are not affected by later edits to the group. This allows your scripts to be stable, even if you decide to change the group's name.   So, for the example group above, you should specify  groups: [\"dev-team-1\"]  :white_check_mark:  not  groups: [\"Android Devs\"]  :x:", 
            "title": "Distributing to Groups"
        }, 
        {
            "location": "/actions/Actions/#environment-variables", 
            "text": "The following environment variables may be used in place of parameters:  CRASHLYTICS_API_TOKEN ,  CRASHLYTICS_BUILD_SECRET , and  CRASHLYTICS_FRAMEWORK_PATH .", 
            "title": "Environment Variables"
        }, 
        {
            "location": "/actions/Actions/#apteligent", 
            "text": "Uploads dSYM.zip file to  Apteligent  for crash symbolication.  apteligent(\n  app_id: '...',\n  api_key: '...'\n)  If you use  gym  the  dsym  parameter is optional.", 
            "title": "Apteligent"
        }, 
        {
            "location": "/actions/Actions/#download_dsyms", 
            "text": "This action downloads dSYM files from Apple iTunes Connect after the ipa got re-compiled by Apple. Useful if you have Bitcode enabled.  lane :refresh_dsyms do\n  download_dsyms                  # Download dSYM files from iTC\n  upload_symbols_to_crashlytics   # Upload them to Crashlytics\n  clean_build_artifacts           # Delete the local dSYM files\nend", 
            "title": "download_dsyms"
        }, 
        {
            "location": "/actions/Actions/#upload_symbols_to_crashlytics", 
            "text": "This action allows you to upload symbolication files to Crashlytics. It's extra useful if you use it to download the latest dSYM files from Apple when you use Bitcode.  upload_symbols_to_crashlytics(dsym_path:  ./App.dSYM.zip )", 
            "title": "upload_symbols_to_crashlytics"
        }, 
        {
            "location": "/actions/Actions/#upload_symbols_to_sentry", 
            "text": "This action allows you to upload symbolication files to Sentry.  upload_symbols_to_sentry(\n  auth_token: '...',\n  org_slug: '...',\n  project_slug: '...',\n  dsym_path: './App.dSYM.zip'\n)  The following environment variables may be used in place of parameters:  SENTRY_AUTH_TOKEN ,  SENTRY_ORG_SLUG ,  SENTRY_PROJECT_SLUG , and  SENTRY_DSYM_PATH .", 
            "title": "upload_symbols_to_sentry"
        }, 
        {
            "location": "/actions/Actions/#aws-s3-distribution", 
            "text": "Upload a new build to Amazon S3 to distribute the build to beta testers. Works for both Ad Hoc and Enterprise signed applications. This step will generate the necessary HTML, plist, and version files for you.  Add the  s3  action after the  ipa  step:  s3  You can also customize a lot of options:  s3(\n  # All of these are used to make Shenzhen's `ipa distribute:s3` command\n  access_key: ENV['S3_ACCESS_KEY'],               # Required from user.\n  secret_access_key: ENV['S3_SECRET_ACCESS_KEY'], # Required from user.\n  bucket: ENV['S3_BUCKET'],                       # Required from user.\n  ipa: 'AppName.ipa',                             # Optional is you use `ipa` to build\n  dsym: 'AppName.app.dSYM.zip',                   # Optional is you use `ipa` to build\n  path: 'v{CFBundleShortVersionString}_b{CFBundleVersion}/', # This is actually the default.\n  upload_metadata: true,                          # Upload version.json, plist and HTML. Set to false to skip uploading of these files.\n  version_file_name: 'app_version.json',          # Name of the file to upload to S3. Defaults to 'version.json'\n  version_template_path: 'path/to/erb'            # Path to an ERB to configure the structure of the version JSON file\n)  It is recommended to  not  store the AWS access keys in the  Fastfile .  The uploaded  version.json  file provides an easy way for apps to poll if a new update is available. The JSON looks like:  {\n     latestVersion :  %= full_version % ,\n     updateUrl :  itms-services://?action=download-manifest url= %= url % \n}", 
            "title": "AWS S3 Distribution"
        }, 
        {
            "location": "/actions/Actions/#deploygate", 
            "text": "You can retrieve your username and API token on  your settings page .  deploygate(\n  api_token: '...',\n  user: 'target username or organization name',\n  ipa: './ipa_file.ipa',\n  message:  Build #{lane_context[SharedValues::BUILD_NUMBER]} ,\n  distribution_key: '(Optional) Target Distribution Key'\n)  If you put  deploygate  after  ipa  action, you don't have to specify IPA file path, as it is extracted from the lane context automatically.  More information about the available options can be found in the  DeployGate Push API document .", 
            "title": "DeployGate"
        }, 
        {
            "location": "/actions/Actions/#xcode-server", 
            "text": "This action retrieves integration assets ( .xcarchive , logs etc) from your Xcode Server instance over HTTPS.  xcode_server_get_assets(\n    host: '10.99.0.59', # Specify Xcode Server's Host or IP Address\n    bot_name: 'release-1.3.4' # Specify the particular Bot\n  )  This allows you to use Xcode Server for building and testing, which can be useful when your build takes a long time and requires connected iOS devices for testing. This action only requires you specify the  host  and the  bot_name  and it will go and download, unzip and return a path to the downloaded folder. Then you can export an IPA from the archive and upload it with  deliver .  Run  fastlane action xcode_server_get_assets  for the full list of options.", 
            "title": "Xcode Server"
        }, 
        {
            "location": "/actions/Actions/#set_changelog", 
            "text": "To easily set the changelog of an app on iTunes Connect for all languages  set_changelog(app_identifier:  com.krausefx.app , version:  1.0 , changelog:  All Languages )  You can store the changelog in  ./fastlane/changelog.txt  and it will automatically get loaded from there. This integration is useful if you support e.g. 10 languages and want to use the same \"What's new\"-text for all languages.", 
            "title": "set_changelog"
        }, 
        {
            "location": "/actions/Actions/#make_changelog_from_jenkins", 
            "text": "Generate a changelog using the Changes section the running Jenkins job.  make_changelog_from_jenkins(\n  # Optional, lets you set a changelog in the case is not generated on Jenkins or if ran outside of Jenkins\n  fallback_changelog:  Bug fixes and performance enhancements \n)", 
            "title": "make_changelog_from_jenkins"
        }, 
        {
            "location": "/actions/Actions/#github-releases", 
            "text": "This action creates a new release for your repository on GitHub and can also upload specified assets like  .ipa s and  .app s, binary files, changelogs etc.  github_release = set_github_release(\n  repository_name:  fastlane/fastlane ,\n  api_token: ENV['GITHUB_TOKEN'],\n  name:  Super New actions ,\n  tag_name:  v1.22.0 ,\n  description: File.read( changelog ),\n  commitish:  master ,\n  upload_assets: [ example_integration.ipa ,  ./pkg/built.gem ]\n)", 
            "title": "GitHub Releases"
        }, 
        {
            "location": "/actions/Actions/#artifactory", 
            "text": "This allows you to upload your ipa, or any other file you want, to artifactory.  artifactory(\n  username:  username ,\n  password:  password ,\n  endpoint:  https://artifactory.example.com/artifactory/ ,\n  file: 'example.ipa',                                # File to upload\n  repo: 'mobile_artifacts',                           # Artifactory repo\n  repo_path: '/ios/appname/example-major.minor.ipa'   # Path to place the artifact including its filename\n)  To get a list of all available parameters run  fastlane action artifactory", 
            "title": "artifactory"
        }, 
        {
            "location": "/actions/Actions/#nexus_upload", 
            "text": "Upload your ipa, or any other file you want, to Sonatype Nexus platform.  nexus_upload(\n  file:  /path/to/file.ipa ,\n  repo_id:  artefacts ,\n  repo_group_id:  com.fastlane ,\n  repo_project_name:  ipa ,\n  repo_project_version:  1.13 ,\n  repo_classifier:  dSYM , # Optional\n  endpoint:  http://localhost:8081 ,\n  username:  admin ,\n  password:  admin123 \n)", 
            "title": "nexus_upload"
        }, 
        {
            "location": "/actions/Actions/#appetizeio", 
            "text": "Upload your zipped app to Appetize.io to stream your app in the browser.  appetize(\n  path: './MyApp.zip',\n  api_token: 'yourapitoken', # get it from https://appetize.io/docs#request-api-token\n  public_key: 'your_public_key' # get it from https://appetize.io/dashboard\n)  If you provide a  public_key , this will overwrite an existing application. If you want to have this build as a new app version, you shouldn't provide this value.", 
            "title": "Appetize.io"
        }, 
        {
            "location": "/actions/Actions/#device_grid-for-your-pull-requests", 
            "text": "Follow  this guide  to get a grid of devices every time you submit a pull request. The app will be uploaded to  appetize.io  so you can stream and try them right in your browser.  Open the Guide  From within your app, you can check it is currently running on  Appetize.io  using  [[NSUserDefaults standardUserDefaults] objectForKey:@ isAppetize ]", 
            "title": "device_grid for your Pull Requests"
        }, 
        {
            "location": "/actions/Actions/#appaloosa", 
            "text": "Upload your ipa or apk to your private store on Appaloosa.  Add the  appaloosa  action after the  gym  step or use it with your existing  apk .  You can add some options:  appaloosa(\n  # Path tor your IPA or APK\n  binary: '/path/to/binary.ipa',\n  # You can find your store\u2019s id at the bottom of the \u201cSettings\u201d page of your store\n  store_id: 'your_store_id',\n  # You can find your api_token at the bottom of the \u201cSettings\u201d page of your store\n  api_token: 'your_api_key',\n  # User group_ids visibility, if it's not specified we'll publish the app for all users in your store'\n  group_ids: '112, 232, 387',\n  # You can use fastlane/snapshot or specify your own screenshots folder.\n  # If you use snapshot please specify a local and a device to upload your screenshots from.\n  # When multiple values are specified in the Snapfile, we default to 'en-US'\n  locale: 'en-US',\n  # By default, the screenshots from the last device will be used\n  device: 'iPhone6',\n  # Screenshots' filenames should start with device's name like  iphone6-s1.png  if device specified\n  screenshots: '/path/to_your/screenshots'\n  )", 
            "title": "Appaloosa"
        }, 
        {
            "location": "/actions/Actions/#tryoutsio", 
            "text": "Upload your Android or iOS build to  Tryouts.io  tryouts(\n  api_token:  ... ,\n  app_id:  application-id ,\n  build_file:  test.ipa ,\n)  For more information about the available options, run  fastlane action tryouts  or check out the  Tryouts Documentation .", 
            "title": "Tryouts.io"
        }, 
        {
            "location": "/actions/Actions/#installr", 
            "text": "Upload your iOS build to  Installr  installr(\n  api_token:  ... ,\n  ipa:  test.ipa ,\n  notes:  The next great version of the app! ,\n  notify:  dev,qa ,\n  add:  exec,ops \n)  For more information about the available options, run  fastlane action installr  or check out the  Installr Documentation .", 
            "title": "Installr"
        }, 
        {
            "location": "/actions/Actions/#testfairy", 
            "text": "Upload your iOS build to  TestFairy  You can retrieve your API key on  your settings page .  testfairy(\n  api_key: '...',\n  ipa: './ipa_file.ipa',\n  comment:  Build #{lane_context[SharedValues::BUILD_NUMBER]} ,\n)", 
            "title": "TestFairy"
        }, 
        {
            "location": "/actions/Actions/#modifying-project", 
            "text": "", 
            "title": "Modifying Project"
        }, 
        {
            "location": "/actions/Actions/#increment_build_number", 
            "text": "This method will increment the  build number , not the app version. Usually this is just an auto incremented number. You first have to  set up your Xcode project , if you haven't done it already.  increment_build_number # automatically increment by one\nincrement_build_number(\n  build_number: '75' # set a specific number\n)\n\nincrement_build_number(\n  build_number: 75, # specify specific build number (optional, omitting it increments by one)\n  xcodeproj: './path/to/MyApp.xcodeproj' # (optional, you must specify the path to your main Xcode project if it is not in the project root directory)\n)  See how  Wikpedia  uses the  increment_build_number  action.  You can also only receive the build number without modifying it  build_number = get_build_number(xcodeproj:  Project.xcodeproj )", 
            "title": "increment_build_number"
        }, 
        {
            "location": "/actions/Actions/#increment_version_number", 
            "text": "This action will increment the  version number . You first have to  set up your Xcode project , if you haven't done it already.  increment_version_number # Automatically increment patch version number.\nincrement_version_number(\n  bump_type:  patch  # Automatically increment patch version number\n)\nincrement_version_number(\n  bump_type:  minor  # Automatically increment minor version number\n)\nincrement_version_number(\n  bump_type:  major  # Automatically increment major version number\n)\nincrement_version_number(\n  version_number: '2.1.1' # Set a specific version number\n)\n\nincrement_version_number(\n  version_number: '2.1.1',                # specify specific version number (optional, omitting it increments patch version number)\n  xcodeproj: './path/to/MyApp.xcodeproj'  # (optional, you must specify the path to your main Xcode project if it is not in the project root directory)\n)  See how  Wikpedia  uses the  increment_version_number  action.  You can also only receive the version number without modifying it  version = get_version_number(xcodeproj:  Project.xcodeproj )", 
            "title": "increment_version_number"
        }, 
        {
            "location": "/actions/Actions/#get_build_number_repository", 
            "text": "get_build_number_repository  This action will get the  build number  according to what the SCM HEAD reports.\nCurrently supported SCMs are svn (uses root revision), git-svn (uses svn revision) and git (uses short hash) and mercurial (uses short hash or revision number).  There is an option,  :use_hg_revision_number , which allows to use mercurial revision number instead of hash.", 
            "title": "get_build_number_repository"
        }, 
        {
            "location": "/actions/Actions/#set_build_number_repository", 
            "text": "set_build_number_repository  This action will set the  build number  according to what the SCM HEAD reports.\nCurrently supported SCMs are svn (uses root revision), git-svn (uses svn revision) and git (uses short hash) and mercurial (uses short hash or revision number).  There is an option,  :use_hg_revision_number , which allows to use mercurial revision number instead of hash.", 
            "title": "set_build_number_repository"
        }, 
        {
            "location": "/actions/Actions/#update_project_team", 
            "text": "This action allows you to modify the developer team. This may be useful if you want to use a different team for alpha, beta or distribution.  update_project_team(\n  path:  Example.xcodeproj ,\n  teamid:  A3ZZVJ7CNY \n)", 
            "title": "update_project_team"
        }, 
        {
            "location": "/actions/Actions/#update_info_plist", 
            "text": "This action allows you to modify your  Info.plist  file before building. This may be useful if you want a separate build for alpha, beta or nightly builds, but don't want a separate target.  # update app identifier string\nupdate_info_plist(\n  plist_path:  path/to/Info.plist ,\n  app_identifier:  com.example.newappidentifier \n)\n\n# Change the Display Name of your app\nupdate_info_plist(\n  plist_path:  path/to/Info.plist ,\n  display_name:  MyApp-Beta \n)\n\n# Target a specific `xcodeproj` rather than finding the first available one\nupdate_info_plist(\n  xcodeproj:  path/to/Example.proj ,\n  plist_path:  path/to/Info.plist ,\n  display_name:  MyApp-Beta \n)\n\n# Advanced processing: find URL scheme for particular key and replace value\nupdate_info_plist(\n  xcodeproj:  path/to/Example.proj ,\n  plist_path:  path/to/Info.plist ,\n  block: lambda { |plist|\n    urlScheme = plist['CFBundleURLTypes'].find{|scheme| scheme['CFBundleURLName'] == 'com.acme.default-url-handler'}\n    urlScheme[:CFBundleURLSchemes] = ['acme-production']\n  }\n)", 
            "title": "update_info_plist"
        }, 
        {
            "location": "/actions/Actions/#update_url_schemes", 
            "text": "This action allows you to update the URL schemes of the app before building it.\nFor example, you can use this to set a different url scheme for the alpha\nor beta version of the app.  update_url_schemes(path:  path/to/Info.plist ,\n            url_schemes: [ com.myapp ])", 
            "title": "update_url_schemes"
        }, 
        {
            "location": "/actions/Actions/#update_app_identifier", 
            "text": "Update an app identifier by either setting  CFBundleIdentifier  or  PRODUCT_BUNDLE_IDENTIFIER , depending on which is already in use.  update_app_identifier(\n  xcodeproj: 'Example.xcodeproj', # Optional path to xcodeproj, will use the first .xcodeproj if not set\n  plist_path: 'Example/Info.plist', # Path to info plist file, relative to xcodeproj\n  app_identifier: 'com.test.example' # The App Identifier\n)", 
            "title": "update_app_identifier"
        }, 
        {
            "location": "/actions/Actions/#badge", 
            "text": "Modify your app icon and add a badge to it. For more info how to use it see repo.  badge(dark: true) # or\nbadge(alpha: true) # or\nbadge(custom:  /Users/xxx/Desktop/badge.png ) # or\nbadge(shield:  Version-0.0.3-blue , no_badge: true)  Note  If you want to reset the badge back to default you can use  sh \"git checkout --  path /Assets.xcassets/\"", 
            "title": "badge"
        }, 
        {
            "location": "/actions/Actions/#update_urban_airship_configuration", 
            "text": "Easily update the AirshipConfig.plist for different deployment targets.  update_urban_airship_configuration(\n  plist_path:  AirshipConfig.plist ,\n  production_app_key:  PRODKEY ,\n  production_app_secret:  PRODSECRET \n)", 
            "title": "update_urban_airship_configuration"
        }, 
        {
            "location": "/actions/Actions/#developer-portal", 
            "text": "", 
            "title": "Developer Portal"
        }, 
        {
            "location": "/actions/Actions/#match", 
            "text": "Check out  codesigning.guide  for more information about the concept of  match .  match  allows you to easily sync your certificates and profiles across your team using git. More information on  GitHub .  match(type:  appstore , app_identifier:  tools.fastlane.app )\nmatch(type:  development , readonly: true)", 
            "title": "match"
        }, 
        {
            "location": "/actions/Actions/#sigh", 
            "text": "Note : It is recommended to use  match  according to the  codesigning.guide  for generating and maintaining your provisioning profiles. Use  sigh  directly only if you want full control over what's going on and know more about codesigning.  This will generate and download your App Store provisioning profile.  sigh  will store the generated profile in the current folder.  sigh  You can pass all options listed in  sigh --help  in  fastlane :  sigh(\n  adhoc: true,\n  force: true,\n  filename:  myFile.mobileprovision \n)  See how  Wikpedia  uses  sigh  to automatically retrieve the latest provisioning profile.", 
            "title": "sigh"
        }, 
        {
            "location": "/actions/Actions/#pem", 
            "text": "This will generate a new push profile if necessary (the old one is about to expire).  Use it like this:  pem  pem(\n  force: true, # create a new profile, even if the old one is still valid\n  app_identifier: 'net.sunapps.9', # optional app identifier,\n  save_private_key: true,\n  new_profile: proc do |profile_path| # this block gets called when a new profile was generated\n    puts profile_path # the absolute path to the new PEM file\n    # insert the code to upload the PEM file to the server\n  end\n)  Use the  fastlane action pem  command to view all available options.  Product Hunt  uses  PEM  to automatically create a new push profile for Parse.com if necessary before a release.", 
            "title": "PEM"
        }, 
        {
            "location": "/actions/Actions/#cert", 
            "text": "Note : It is recommended to use  match  according to the  codesigning.guide  for generating and maintaining your certificates. Use  cert  directly only if you want full control over what's going on and know more about codesigning.  The  cert  action can be used to make sure to have the latest signing certificate installed. More information on the  cert  project page .  cert  fastlane  will automatically pass the signing certificate to use to  sigh .  You can pass all options listed in  sigh --help  in  fastlane :  cert(\n  development: true,\n  username:  user@email.com \n)", 
            "title": "cert"
        }, 
        {
            "location": "/actions/Actions/#produce", 
            "text": "Create new apps on iTunes Connect and Apple Developer Portal. If the app already exists,  produce  will not do anything.  produce(\n  username: 'felix@krausefx.com',\n  app_identifier: 'com.krausefx.app',\n  app_name: 'MyApp',\n  language: 'English',\n  version: '1.0',\n  sku: 123,\n  team_name: 'SunApps GmbH' # Only necessary when in multiple teams.\n)  SunApps  uses  produce  to automatically generate new apps for new customers.", 
            "title": "produce"
        }, 
        {
            "location": "/actions/Actions/#register_devices", 
            "text": "This will register iOS devices with the Developer Portal so that you can include them in your provisioning profiles.  This is an optimistic action, in that it will only ever add new devices to the member center, and never remove devices. If a device which has already been registered within the member center is not passed to this action, it will be left alone in the member center and continue to work.  The action will connect to the Apple Developer Portal using the username you specified in your  Appfile  with  apple_id , but you can override it using the  username  option, or by setting the env variable  ENV['DELIVER_USER'] .  # Simply provide a list of devices as a Hash\nregister_devices(\n  devices: {\n    'Luka iPhone 6' =  '1234567890123456789012345678901234567890',\n    'Felix iPad Air 2' =  'abcdefghijklmnopqrstvuwxyzabcdefghijklmn',\n  }\n)\n\n# Alternatively provide a standard UDID export .txt file, see the Apple Sample (https://devimages.apple.com.edgekey.net/downloads/devices/Multiple-Upload-Samples.zip)\nregister_devices(\n  devices_file: './devices.txt'\n)\n\n# Advanced\nregister_devices(\n  devices_file: './devices.txt', # You must pass in either `devices_file` or `devices`.\n  team_id: 'XXXXXXXXXX',         # Optional, if you're a member of multiple teams, then you need to pass the team ID here.\n  username: 'luka@goonbee.com'   # Optional, lets you override the Apple Member Center username.\n)", 
            "title": "register_devices"
        }, 
        {
            "location": "/actions/Actions/#using-git", 
            "text": "", 
            "title": "Using git"
        }, 
        {
            "location": "/actions/Actions/#changelog_from_git_commits", 
            "text": "This action turns your git commit history into formatted changelog text.  # Collects commits since your last tag and returns a concatenation of their subjects and bodies\nchangelog_from_git_commits\n\n# Advanced options\nchangelog_from_git_commits(\n  between: ['7b092b3', 'HEAD'], # Optional, lets you specify a revision/tag range between which to collect commit info\n  pretty: '- (%ae) %s', # Optional, lets you provide a custom format to apply to each commit when generating the changelog text\n  tag_match_pattern: nil, # Optional, lets you search for a tag name that matches a glob(7) pattern\n  match_lightweight_tag: false, # Optional, lets you ignore lightweight (non-annotated) tags when searching for the last tag\n  include_merges: true # Optional, lets you filter out merge commits\n)", 
            "title": "changelog_from_git_commits"
        }, 
        {
            "location": "/actions/Actions/#ensure_git_branch", 
            "text": "This action will check if your git repo is checked out to a specific branch. You may only want to make releases from a specific branch, so  ensure_git_branch  will stop a lane if it was accidentally executed on an incorrect branch.  ensure_git_branch # defaults to `master` branch\n\nensure_git_branch(\n  branch: 'develop'\n)", 
            "title": "ensure_git_branch"
        }, 
        {
            "location": "/actions/Actions/#last_git_tag", 
            "text": "Simple action to get the latest git tag  last_git_tag  If you are using this action on a  shallow clone ,  the default with some CI systems like Bamboo , you need to ensure that you have also have pulled all the git tags appropriately.  Assuming your git repo has the correct remote set you can issue  sh(\"git fetch --tags\")    #Only fetch tags if a remote is set\n  remote_count = sh( git remote show | wc -l )\n  if remote_count   0.to_s\n    sh( git fetch --tags )\n    last_git_tag\n  end", 
            "title": "last_git_tag"
        }, 
        {
            "location": "/actions/Actions/#git_branch", 
            "text": "Quickly get the name of the branch you're currently in  git_branch", 
            "title": "git_branch"
        }, 
        {
            "location": "/actions/Actions/#git_tag_exists", 
            "text": "Checks whether the given tag exists in the repo  if git_tag_exists(tag:  1.1.0 )\n  UI.message( Found it \ud83d\ude80 )\nend", 
            "title": "git_tag_exists"
        }, 
        {
            "location": "/actions/Actions/#git_add", 
            "text": "To simply add one file before commit use  git_add(path:  ./version.txt )  To add several files before commit use  git_add(path: [ ./version.txt ,  ./changelog.txt ])", 
            "title": "git_add"
        }, 
        {
            "location": "/actions/Actions/#git_commit", 
            "text": "To simply commit one file with a certain commit message use  git_commit(path:  ./version.txt ,\n        message:  Version Bump )  To commit several files with a certain commit message use  git_commit(path: [ ./version.txt ,  ./changelog.txt ]\n        message:  Version Bump )", 
            "title": "git_commit"
        }, 
        {
            "location": "/actions/Actions/#ensure_git_status_clean", 
            "text": "A sanity check to make sure you are working in a repo that is clean. Especially useful to put at the beginning of your Fastfile in the  before_all  block, if some of your other actions will touch your filesystem, do things to your git repo, or just as a general reminder to save your work. Also needed as a prerequisite for some other actions like  reset_git_repo .  ensure_git_status_clean  Wikipedia  uses  ensure_git_status_clean  to make sure, no uncommited changes are deployed by `fastlane.", 
            "title": "ensure_git_status_clean"
        }, 
        {
            "location": "/actions/Actions/#commit_version_bump", 
            "text": "This action will create a \"Version Bump\" commit in your repo. Useful in conjunction with  increment_build_number .  It checks the repo to make sure that only the relevant files have changed, these are the files that  increment_build_number  ( agvtool ) touches:\n- All .plist files\n- The  .xcodeproj/project.pbxproj  file  Then commits those files to the repo.  Customise the message with the  :message  option, defaults to \"Version Bump\"  If you have other uncommitted changes in your repo, this action will fail. If you started off in a clean repo, and used the  ipa  and or  sigh  actions, then you can use the  clean_build_artifacts  action to clean those temporary files up before running this action.  commit_version_bump\n\ncommit_version_bump(\n  message: 'Version Bump',                    # create a commit with a custom message\n  xcodeproj: './path/to/MyProject.xcodeproj', # optional, if you have multiple Xcode project files, you must specify your main project here\n)  Artsy  uses  fastlane  to automatically commit the version bump, add a new git tag and push everything back to  master .", 
            "title": "commit_version_bump"
        }, 
        {
            "location": "/actions/Actions/#number_of_commits", 
            "text": "You can use this action to get the number of commits of this repo. This is useful if you want to set the build number to the number of commits.  build_number = number_of_commits\nincrement_build_number(build_number: build_number)", 
            "title": "number_of_commits"
        }, 
        {
            "location": "/actions/Actions/#add_git_tag", 
            "text": "This will automatically tag your build with the following format:  grouping / lane / prefix build_number , where:   grouping  is just to keep your tags organised under one \"folder\", defaults to 'builds'  lane  is the name of the current fastlane lane  prefix  is anything you want to stick in front of the version number, e.g. \"v\"  build_number  is the build number, which defaults to the value emitted by the  increment_build_number  action   For example for build 1234 in the \"appstore\" lane it will tag the commit with  builds/appstore/1234  add_git_tag # simple tag with default values\n\nadd_git_tag(\n  grouping: 'fastlane-builds',\n  prefix: 'v',\n  build_number: 123\n)  Alternatively, you can specify your own tag. Note that if you do specify a tag, all other arguments are ignored.  add_git_tag(\n  tag: 'my_custom_tag'\n)  Artsy  uses  fastlane  to automatically commit the version bump, add a new git tag and push everything back to  master .", 
            "title": "add_git_tag"
        }, 
        {
            "location": "/actions/Actions/#git_pull", 
            "text": "Executes a simple  git pull --tags  command", 
            "title": "git_pull"
        }, 
        {
            "location": "/actions/Actions/#push_to_git_remote", 
            "text": "Lets you push your local commits to a remote git repo. Useful if you make local changes such as adding a version bump commit (using  commit_version_bump ) or a git tag (using 'add_git_tag') on a CI server, and you want to push those changes back to your canonical/main repo.  Tags will be pushed as well by default, except when setting the option 'tags' to false.  push_to_git_remote # simple version. pushes 'master' branch to 'origin' remote\n\npush_to_git_remote(\n  remote: 'origin',         # optional, default: 'origin'\n  local_branch: 'develop',  # optional, aliased by 'branch', default: 'master'\n  remote_branch: 'develop', # optional, default is set to local_branch\n  force: true,              # optional, default: false\n  tags: false               # optional, default: true\n)  Artsy  uses  fastlane  to automatically commit the version bump, add a new git tag and push everything back to  master .", 
            "title": "push_to_git_remote"
        }, 
        {
            "location": "/actions/Actions/#push_git_tags", 
            "text": "If you only want to push the tags and nothing else, you can use the  push_git_tags  action:  push_git_tags", 
            "title": "push_git_tags"
        }, 
        {
            "location": "/actions/Actions/#reset_git_repo", 
            "text": "This action will reset your git repo to a clean state, discarding any uncommitted and untracked changes. Useful in case you need to revert the repo back to a clean state, e.g. after the fastlane run.\nUntracked files like  .env  will also be deleted, unless  :skip_clean  is true.  It's a pretty drastic action so it comes with a sort of safety latch. It will only proceed with the reset if either of these conditions are met:   You have called the  ensure_git_status_clean  action prior to calling this action. This ensures that your repo started off in a clean state, so the only things that will get destroyed by this action are files that are created as a byproduct of the fastlane run.  You call it with the  force: true  option, in which case \"you have been warned\".   Also useful for putting in your  error  block, to bring things back to a pristine state (again with the caveat that you have called  ensure_git_status_clean  before)  reset_git_repo\nreset_git_repo(force: true) # If you don't care about warnings and are absolutely sure that you want to discard all changes. This will reset the repo even if you have valuable uncommitted changes, so use with care!\nreset_git_repo(skip_clean: true) # If you want 'git clean' to be skipped, thus NOT deleting untracked files like '.env'. Optional, defaults to false.\n\n# You can also specify a list of files that should be reset.\nreset_git_repo(\n  force: true,\n  files: [\n     ./file.txt \n  ])  MindNode  uses this action to reset temporary changes of the project configuration after successfully building it.", 
            "title": "reset_git_repo"
        }, 
        {
            "location": "/actions/Actions/#get_github_release", 
            "text": "You can easily receive information about a specific release from GitHub.com  release = get_github_release(url:  fastlane/fastlane , version:  1.0.0 )\nputs release['name']  To get a list of all available values run  fastlane action get_github_release .", 
            "title": "get_github_release"
        }, 
        {
            "location": "/actions/Actions/#import_from_git", 
            "text": "Import another Fastfile from a remote git repository to use its lanes.  This is useful if you have shared lanes across multiple apps and you want to store the Fastfile in a remote git repository.  import_from_git(\n  url: 'git@github.com:fastlane/fastlane.git', # The url of the repository to import the Fastfile from.\n  branch: 'HEAD', # The branch to checkout on the repository. Defaults to `HEAD`.\n  path: 'fastlane/Fastfile' # The path of the Fastfile in the repository. Defaults to `fastlane/Fastfile`.\n)", 
            "title": "import_from_git"
        }, 
        {
            "location": "/actions/Actions/#last_git_commit", 
            "text": "Get information about the last git commit, returns the commit hash, the abbreviated commit hash, the author and the git message.  commit = last_git_commit\ncrashlytics(notes: commit[:message]) # message of commit\nauthor = commit[:author] # author of the commit\nhash = commit[:commit_hash] # long sha of commit\nshort_hash = commit[:abbreviated_commit_hash] # short sha of commit", 
            "title": "last_git_commit"
        }, 
        {
            "location": "/actions/Actions/#create_pull_request", 
            "text": "Create a new pull request.  create_pull_request(\n  api_token: ENV['GITHUB_TOKEN'],\n  repo: 'fastlane/fastlane',\n  title: 'Amazing new feature',\n  head: 'my-feature',                 # optional, defaults to current branch name.\n  base: 'master',                     # optional, defaults to 'master'.\n  body: 'Please pull this in!',       # optional\n  api_url: 'http://yourdomain/api/v3' # optional, for Github Enterprise, defaults to 'https://api.github.com'.\n)", 
            "title": "create_pull_request"
        }, 
        {
            "location": "/actions/Actions/#using-mercurial", 
            "text": "", 
            "title": "Using mercurial"
        }, 
        {
            "location": "/actions/Actions/#hg_ensure_clean_status", 
            "text": "Along the same lines as the  ensure_git_status_clean  action, this is a sanity check to ensure the working mercurial repo is clean. Especially useful to put at the beginning of your Fastfile in the  before_all  block.  hg_ensure_clean_status", 
            "title": "hg_ensure_clean_status"
        }, 
        {
            "location": "/actions/Actions/#hg_commit_version_bump", 
            "text": "The mercurial equivalent of the  commit_version_bump  git action. Like the git version, it is useful in conjunction with  increment_build_number .  It checks the repo to make sure that only the relevant files have changed, these are the files that  increment_build_number  ( agvtool ) touches:\n- All .plist files\n- The  .xcodeproj/project.pbxproj  file  Then commits those files to the repo.  Customise the message with the  :message  option, defaults to \"Version Bump\"  If you have other uncommitted changes in your repo, this action will fail. If you started off in a clean repo, and used the  ipa  and or  sigh  actions, then you can use the  clean_build_artifacts  action to clean those temporary files up before running this action.  hg_commit_version_bump\n\nhg_commit_version_bump(\n  message: 'Version Bump',                    # create a commit with a custom message\n  xcodeproj: './path/to/MyProject.xcodeproj', # optional, if you have multiple Xcode project files, you must specify your main project here\n)", 
            "title": "hg_commit_version_bump"
        }, 
        {
            "location": "/actions/Actions/#hg_add_tag", 
            "text": "A simplified version of git action  add_git_tag . It adds a given tag to the mercurial repo.  Specify the tag name with the  :tag  option.  hg_add_tag tag: version_number", 
            "title": "hg_add_tag"
        }, 
        {
            "location": "/actions/Actions/#hg_push", 
            "text": "The mercurial equivalent of  push_to_git_remote  \u2014 pushes your local commits to a remote mercurial repo. Useful when local changes such as adding a version bump commit or adding a tag are part of your lane\u2019s actions.  hg_push # simple version. pushes commits from current branch to default destination\n\nhg_push(\n  destination: 'ssh://hg@repohost.com/owner/repo', # optional\n  force: true,                                     # optional, default: false\n)", 
            "title": "hg_push"
        }, 
        {
            "location": "/actions/Actions/#notifications", 
            "text": "", 
            "title": "Notifications"
        }, 
        {
            "location": "/actions/Actions/#slack", 
            "text": "Create an Incoming WebHook and export this as  SLACK_URL . Can send a message to  #channel  (by default), a direct message to  @username  or a message to a private group  group  with success (green) or failure (red) status.  slack(\n  message:  App successfully released! \n)\n\nslack(\n  message:  App successfully released! ,\n  channel:  #channel ,  # Optional, by default will post to the default channel configured for the POST URL.\n  success: true,        # Optional, defaults to true.\n  payload: {            # Optional, lets you specify any number of your own Slack attachments.\n    'Build Date' =  Time.new.to_s,\n    'Built by' =  'Jenkins',\n  },\n  default_payloads: [:git_branch, :git_author], # Optional, lets you specify a whitelist of default payloads to include. Pass an empty array to suppress all the default payloads. Don't add this key, or pass nil, if you want all the default payloads. The available default payloads are: `lane`, `test_result`, `git_branch`, `git_author`, `last_git_commit_message`.\n  attachment_properties: { # Optional, lets you specify any other properties available for attachments in the slack API (see https://api.slack.com/docs/attachments). This hash is deep merged with the existing properties set using the other properties above. This allows your own fields properties to be appended to the existing fields that were created using the `payload` property for instance.\n    thumb_url: 'http://example.com/path/to/thumb.png',\n    fields: [{\n      title: 'My Field',\n      value: 'My Value',\n      short: true\n    }]\n  }\n)  Take a look at the  example projects  of how you can use the slack action, for example the  MindNode configuration .", 
            "title": "Slack"
        }, 
        {
            "location": "/actions/Actions/#mailgun", 
            "text": "Send email notifications right from  fastlane  using  Mailgun .  ENV['MAILGUN_SANDBOX_POSTMASTER'] ||=  MY_POSTMASTER \nENV['MAILGUN_APIKEY'] =  MY_API_KEY \nENV['MAILGUN_APP_LINK'] =  MY_APP_LINK \n\nmailgun(\n  to:  fastlane@krausefx.com ,\n  success: true,\n  message:  This is the mail's content \n)\n\nor\n\nmailgun(\n  postmaster:  MY_POSTMASTER ,\n  apikey:  MY_API_KEY ,\n  to:  DESTINATION_EMAIL ,\n  from:  EMAIL_FROM_NAME ,\n  success: true,\n  message:  Mail Body ,\n  app_link:  http://www.myapplink.com ,\n  ci_build_link:  http://www.mycibuildlink.com ,\n  template_path:  HTML_TEMPLATE_PATH \n)", 
            "title": "Mailgun"
        }, 
        {
            "location": "/actions/Actions/#hipchat", 
            "text": "Send a message to  room  (by default) or a direct message to  @username  with success (green) or failure (red) status.    ENV[ HIPCHAT_API_TOKEN ] =  Your API token \n  ENV[ HIPCHAT_API_VERSION ] =  1 for API version 1 or 2 for API version 2 \n\n  hipchat(\n    message:  App successfully released! ,\n    message_format:  html , # or  text , defaults to  html \n    channel:  Room or @username ,\n    success: true\n  )", 
            "title": "HipChat"
        }, 
        {
            "location": "/actions/Actions/#typetalk", 
            "text": "Send a message to  topic  with success (:smile:) or failure (:rage:) status. Using Bot's Typetalk Token    typetalk(\n    message:  App successfully released! ,\n    note_path: 'ChangeLog.md',\n    topicId: 1,\n    success: true,\n    typetalk_token: 'Your Typetalk Token'\n  )", 
            "title": "Typetalk"
        }, 
        {
            "location": "/actions/Actions/#chatwork", 
            "text": "Post a message to a  group chat .  How to authenticate ChatWork API    ENV[ CHATWORK_API_TOKEN ] =  Your API token \n\n  chatwork(\n    message:  App successfully released! ,\n    roomid: 12345,\n    success: true\n  )", 
            "title": "ChatWork"
        }, 
        {
            "location": "/actions/Actions/#notification", 
            "text": "Display a notification using the macOS notification center. Uses  terminal-notifier .    notification(subtitle:  Finished Building , message:  Ready to upload... )  ByMyEyes  uses the  notify  action to show a success message after  fastlane  finished executing.", 
            "title": "Notification"
        }, 
        {
            "location": "/actions/Actions/#testmunk", 
            "text": "Run your functional tests on real iOS devices over the cloud (for free on an iPod). With this simple  testcase  you can ensure your app launches and there is no crash at launch. Tests can be extended with  Testmunk's library  or custom steps. More details about this action can be found in  testmunk.rb .  ENV['TESTMUNK_EMAIL'] = 'email@email.com'\n# Additionally, you have to set TESTMUNK_API, TESTMUNK_APP and TESTMUNK_IPA\ntestmunk", 
            "title": "Testmunk"
        }, 
        {
            "location": "/actions/Actions/#podio", 
            "text": "Creates an item within your Podio app. In case an item with the given identifying value already exists within your Podio app, it updates that item. To find out how to get your authentication credentials see  Podio API documentation . To find out how to get your identifying field (external ID) and general info about Podio item see  tutorials .  ENV[ PODIO_ITEM_IDENTIFYING_FIELD ] =  String specifying the field key used for identification of an item \n\npodio_item(\n  identifying_value:  Your unique value ,\n  other_fields: {\n     field1  =   fieldValue ,\n     field2  =   fieldValue2 \n  }\n)  To see all environment values, please run  fastlane action podio_item .", 
            "title": "Podio"
        }, 
        {
            "location": "/actions/Actions/#onesignal", 
            "text": "Create a onesignal app for managing push notifications  ENV[ ONE_SIGNAL_APP_ID ] =  Resulting OneSignal app ID \nENV[ ONE_SIGNAL_APP_AUTH_KEY ] =  Auth key for the created App \n\nonesignal(\n  auth_token:  Your OneSignal Auth Token ,\n  app_name:  Name for OneSignal App ,\n  android_token:  Your Android GCM key (optional) ,\n  apns_p12:  Path to Apple .p12 file (optional) \n  apns_p12_password:  Password for .p12 file (optional) \n  apns_env:  production/sandbox (defaults to production) \n)", 
            "title": "OneSignal"
        }, 
        {
            "location": "/actions/Actions/#flock", 
            "text": "Send a text message to a Flock group.  flock(\n  message:  Hello \n  token:  xxx \n)  To obtain the token, create a new incoming message webhook \nin your Flock admin panel.", 
            "title": "Flock"
        }, 
        {
            "location": "/actions/Actions/#jira", 
            "text": "Leave a comment on a JIRA ticket.  jira(\n  url:  https://bugs.yourdomain.com ,\n  username:  Your username ,\n  password:  Your password ,\n  ticket_id:  Ticket ID, i.e. IOS-123 ,\n  comment_text:  Text to post as a comment \n)", 
            "title": "JIRA"
        }, 
        {
            "location": "/actions/Actions/#other", 
            "text": "", 
            "title": "Other"
        }, 
        {
            "location": "/actions/Actions/#update_fastlane", 
            "text": "This action will look at all installed fastlane tools and update them to the next available minor version - major version updates will not be performed automatically, as they might include breaking changes. If an update was performed, fastlane will be restarted before the run continues.  If you are using rbenv or rvm, everything should be good to go. However, if you are using the system's default ruby, some additional setup is needed for this action to work correctly. In short, fastlane needs to be able to access your gem library without running in  sudo  mode.  The simplest possible fix for this is putting the following lines into your  ~/.bashrc  or  ~/.zshrc  file:  export GEM_HOME=~/.gems\nexport PATH=$PATH:~/.gems/bin  After the above changes, restart your terminal, then run  mkdir $GEM_HOME  to create the new gem directory. After this, you're good to go!  Recommended usage of the  update_fastlane_ action is at the top of the before_all` block, before running any other action:  before_all do\n  update_fastlane\n\n  cocoapods\n  increment_build_number\n  ...\nend", 
            "title": "update_fastlane"
        }, 
        {
            "location": "/actions/Actions/#sonar", 
            "text": "This action will execute  sonar-runner  to run SonarQube analysis on your source code.  sonar(\n  project_key:  name.gretzki.awesomeApp ,\n  project_version:  1.0 ,\n  project_name:  iOS - AwesomeApp ,\n  sources_path: File.expand_path( ../AwesomeApp )\n)  It can process unit test results if formatted as junit report as shown in  xctest  action. It can also integrate coverage reports in Cobertura format, which can be transformed into by  slather  action.", 
            "title": "sonar"
        }, 
        {
            "location": "/actions/Actions/#setup_jenkins", 
            "text": "This action helps with Jenkins integration. Creates own derived data for each job. All build results like IPA files and archives will be stored in the  ./output  directory. The action also works with  Keychains and Provisioning Profiles Plugin , selected keychain will be automatically unlocked and the selected code signing identity will be used. By default this action will only work when fastlane is executed on a CI system.  setup_jenkins", 
            "title": "setup_jenkins"
        }, 
        {
            "location": "/actions/Actions/#misc", 
            "text": "", 
            "title": "Misc"
        }, 
        {
            "location": "/actions/Actions/#adb", 
            "text": "Lets you execute adb commands.  adb(\n  command:  shell ls ,\n)", 
            "title": "adb"
        }, 
        {
            "location": "/actions/Actions/#adb_devices", 
            "text": "Returns an array of all currently connected android devices.\ne.g.: run an adb command on all connected devices.  adb_devices.each  do | device |\n  model = adb(command:  shell getprop ro.product.model ,\n              serial: device.serial\n             ).strip\n  puts  Model #{model} is connected \nend", 
            "title": "adb_devices"
        }, 
        {
            "location": "/actions/Actions/#twitter", 
            "text": "Post a tweet on twitter. Requires you to setup an app on twitter.com and obtain consumer and access_token.  twitter(\n  access_token:  XXXX ,\n  access_token_secret:  xxx ,\n  consumer_key:  xxx ,\n  consumer_secret:  xxx ,\n  message:  You rock! \n)", 
            "title": "twitter"
        }, 
        {
            "location": "/actions/Actions/#erb", 
            "text": "Parses a given ERB template file (passes  placeholders  as a binding), and saves the rendered output to destination. If no destination is given, it returns the rendered output as a string.  Example  erb  template:  Variable1  %= var1 % \nVariable2  %= var2 %  % for item in var3 % \n         %= item %  % end %   erb(\n  template:  1.erb ,\n  destination:  /tmp/rendered.out ,\n  placeholders: {\n    :var1 =  123,\n    :var2 =   string ,\n    :var3 =  [ element1 ,  element2 ]\n  }\n)", 
            "title": "erb"
        }, 
        {
            "location": "/actions/Actions/#appledoc", 
            "text": "Generate Apple-like source code documentation from specially formatted source code comments.  appledoc(\n  project_name:  MyProjectName ,\n  project_company:  Company Name ,\n  input:  MyProjectSources ,\n  ignore: [\n    'ignore/path/1',\n    'ingore/path/2'\n  ],\n  options:  --keep-intermediate-files --search-undocumented-doc ,\n  warnings:  --warn-missing-output-path --warn-missing-company-id \n)  Use  appledoc --help  to see the list of all command line options.", 
            "title": "appledoc"
        }, 
        {
            "location": "/actions/Actions/#download", 
            "text": "Download a file from a remote server (e.g. JSON file)  data = download(url:  https://host.com/api.json )\n\n# Print information\nputs data[ users ].first[ name ]\n\n# Iterate\ndata[ users ].each do |user|\n  puts user[ name ]\nend", 
            "title": "download"
        }, 
        {
            "location": "/actions/Actions/#version_get_podspec", 
            "text": "To receive the current version number from your  .podspec  file use  version = version_get_podspec(path:  TSMessages.podspec )", 
            "title": "version_get_podspec"
        }, 
        {
            "location": "/actions/Actions/#version_bump_podspec", 
            "text": "To increment the version number of your  .podspec  use  version = version_bump_podspec(path:  TSMessages.podspec , bump_type:  patch )\n# or\nversion = version_bump_podspec(path:  TSMessages.podspec , version_number:  1.4 )", 
            "title": "version_bump_podspec"
        }, 
        {
            "location": "/actions/Actions/#get_info_plist_value", 
            "text": "Get a value from a plist file, which can be used to fetch the app identifier and more information about your app  identifier = get_info_plist_value(path: './Info.plist', key: 'CFBundleIdentifier')\nputs identifier # =  com.krausefx.app", 
            "title": "get_info_plist_value"
        }, 
        {
            "location": "/actions/Actions/#set_info_plist_value", 
            "text": "Set a value of a plist file. You can use this action to update the bundle identifier of your app  set_info_plist_value(path: './Info.plist', key: 'CFBundleIdentifier', value:  com.krausefx.app.beta )", 
            "title": "set_info_plist_value"
        }, 
        {
            "location": "/actions/Actions/#say", 
            "text": "To speak out a text  say  I can speak", 
            "title": "say"
        }, 
        {
            "location": "/actions/Actions/#clipboard", 
            "text": "You can store a string in the clipboard running  clipboard(value:  https://github.com/fastlane/fastlane/tree/master/fastlane )  This can be used to store some generated URL or value for easy copy   paste (e.g. the download link):  clipboard(value: lane_context[SharedValues::HOCKEY_DOWNLOAD_LINK])", 
            "title": "clipboard"
        }, 
        {
            "location": "/actions/Actions/#cloc", 
            "text": "You can generate a Line Count (that is readable by Jenkins - see the  SLOCCount Plugin  for more details).  This action is a wrapper around the cloc tool:  # Result will be an XML report file: reports/cloc.xml\ncloc(exclude_dir: 'ThirdParty,Resources', output_directory: 'reports', source_directory: 'MyCoolApp')", 
            "title": "CLOC"
        }, 
        {
            "location": "/actions/Actions/#is_ci", 
            "text": "Is the current run being executed on a CI system, like Jenkins or Travis?  if is_ci?\n  puts  I'm a computer \nelse\n  say  Hi Human! \nend", 
            "title": "is_ci?"
        }, 
        {
            "location": "/actions/Actions/#verify_build", 
            "text": "Verifies that the built app was built using the expected build resources. This is relevant for people who build on machines that are used to build apps with different profiles, certificates and/or bundle identifiers to guard against configuration mistakes.  Add this action to appropriate lanes and assign some values to verify, like:  verify_build(\n  provisioning_type: 'distribution',\n  bundle_identifier: 'com.example.myapp'\n)  You can verify the following items:\n- app_name\n- bundle_identifier\n- provisioning_type\n- provisioning_uuid\n- team_identifier\n- team_name", 
            "title": "verify_build"
        }, 
        {
            "location": "/actions/Actions/#verify_pod_keys", 
            "text": "Runs a check against all keys specified in your Podfile to make sure they're more than a single character long. This is to ensure you don't deploy with stubbed keys.  verify_pod_keys  Will raise an error if any key is empty or a single character.", 
            "title": "verify_pod_keys"
        }, 
        {
            "location": "/actions/Actions/#read_podspec", 
            "text": "Loads the specified (or the first found) podspec in the folder as JSON, so that you can inspect its  version ,  files  etc. This can be useful when basing your release process on the version string only stored in one place - in the podspec. As one of the first steps you'd read the podspec and its version and the rest of the workflow can use that version string (when e.g. creating a new git tag or a GitHub Release).  spec = read_podspec\nversion = spec['version']\nputs  Using Version #{version}   This will find the first podspec in the folder. You can also pass in the specific podspec path.  spec = read_podspec(path:  ./XcodeServerSDK.podspec )", 
            "title": "read_podspec"
        }, 
        {
            "location": "/actions/Actions/#pod_push", 
            "text": "Push a Podspec to Trunk or a private repository  # If no path is supplied then Trunk will attempt to find the first Podspec in the current directory.\npod_push\n\n# Alternatively, supply the Podspec file path\npod_push(path: 'TSMessages.podspec')\n\n# You may also push to a private repo instead of Trunk\npod_push(path: 'TSMessages.podspec', repo: 'MyRepo')\n\n# If the podspec has a dependency on another private pod, then you will have to supply the sources you want the podspec to lint with for pod_push to succeed. Read more here - https://github.com/CocoaPods/CocoaPods/issues/2543.\npod_push(path: 'TMessages.podspec', repo: 'MyRepo', sources: ['https://github.com/MyGithubPage/Specs', 'https://github.com/CocoaPods/Specs'])", 
            "title": "pod_push"
        }, 
        {
            "location": "/actions/Actions/#clean_cocoapods_cache", 
            "text": "Cleanup the Cocoapods cache.  # Clean entire cocoapods cache.\nclean_cocoapods_cache\n\n# Alternatively, supply the name of pod to be removed from cache.\nclean_cocoapods_cache(name: 'CACHED POD')", 
            "title": "clean_cocoapods_cache"
        }, 
        {
            "location": "/actions/Actions/#prompt", 
            "text": "You can use  prompt  to ask the user for a value or to just let the user confirm the next step.\nThis action also supports multi-line inputs using the  multi_line_end_keyword  option.  changelog = prompt(text:  Changelog:  )  changelog = prompt(\n  text:  Changelog:  ,\n  multi_line_end_keyword:  END \n)\n\nhockey(notes: changelog)", 
            "title": "prompt"
        }, 
        {
            "location": "/actions/Actions/#backup_file", 
            "text": "This action backs up your file to  [path].back .  # copies `file` to `/path/to/file.back`\nbackup_file(path: '/path/to/file')", 
            "title": "backup_file"
        }, 
        {
            "location": "/actions/Actions/#restore_file", 
            "text": "This action restores a file previously backed up by the  backup_file  action.  # copies `file.back` to '/path/to/file'\nrestore_file(path: '/path/to/file')", 
            "title": "restore_file"
        }, 
        {
            "location": "/actions/Actions/#backup_xcarchive", 
            "text": "Save your [zipped] xcarchive elsewhere from default path.  backup_xcarchive(\n  xcarchive: '/path/to/file.xcarchive', # Optional if you use the `xcodebuild` action\n  destination: '/somewhere/else/file.xcarchive', # Where the backup should be created\n  zip: false, # Enable compression of the archive. Defaults to `true`.\n  versioned: true # Create a versioned (date and app version) subfolder where to put the archive. Default value `true`\n)", 
            "title": "backup_xcarchive"
        }, 
        {
            "location": "/actions/Actions/#debug", 
            "text": "Print out an overview of the lane context values.  debug", 
            "title": "debug"
        }, 
        {
            "location": "/actions/Actions/#dotgpg_environment", 
            "text": "Reads in production secrets set in a dotgpg file and puts them in ENV.  dotgpg_environment(dotgpg_file: './path/to/gpgfile')", 
            "title": "dotgpg_environment"
        }, 
        {
            "location": "/actions/Actions/#jazzy", 
            "text": "Generate docs using  Jazzy  jazzy", 
            "title": "Jazzy"
        }, 
        {
            "location": "/actions/Actions/#update_info_plist_1", 
            "text": "Update an  Info.plist  with a bundle identifier and display name.  update_info_plist(\n  xcodeproj: '/path/to/Project.xcodeproj', # Optional. Will pick the first `xcodeproj` in the directory if left blank\n  plist_path: '/path/to/Info.plist', # Path to the info plist file\n  app_identifier: 'com.example.newapp', # Optional. The new App Identifier of your app\n  display_name: 'MyNewApp' # Optional. The new Display Name of your app\n)", 
            "title": "update_info_plist"
        }, 
        {
            "location": "/actions/Actions/#fastlane_version", 
            "text": "Add this to your  Fastfile  to require a certain version of  fastlane . Use it if you use an action that just recently came out and you need it  fastlane_version  1.50.0", 
            "title": "fastlane_version"
        }, 
        {
            "location": "/actions/Actions/#install_xcode_plugin", 
            "text": "Install an Xcode plugin for the current user  install_xcode_plugin(url: 'https://example.com/clubmate/plugin.zip')  You can also let  fastlane  pick the latest version of a plugin automatically, if it is hosted on GitHub  install_xcode_plugin(github: 'https://github.com/contentful/ContentfulXcodePlugin')", 
            "title": "install_xcode_plugin"
        }, 
        {
            "location": "/actions/Actions/#opt_out_usage", 
            "text": "Add this your  Fastfile  to not send any data to the fastlane web service. You can also use the  FASTLANE_OPT_OUT_USAGE  environment variable. No personal data is shared, more information on  https://github.com/fastlane/enhancer  opt_out_usage", 
            "title": "opt_out_usage"
        }, 
        {
            "location": "/actions/Actions/#rocket", 
            "text": "Print an ascii Rocket :rocket:. Useful after using  crashlytics  or  pilot  to indicate that your new build has been shipped to outer-space.", 
            "title": "rocket"
        }, 
        {
            "location": "/actions/Actions/#skip_docs", 
            "text": "Tell  fastlane  to not automatically create a  fastlane/README.md  when running  fastlane . You can always trigger the creation of this file manually by running  fastlane docs", 
            "title": "skip_docs"
        }, 
        {
            "location": "/actions/Actions/#ssh", 
            "text": "Lets you execute a series of commands on a remote host, if one of the commands in command-array returns non 0 - it fails.  ssh(\n  host:  dev.januschka.com ,\n  username:  root ,\n  commands: [\n     date ,\n     echo 1   /tmp/file1 \n  ]\n)  If one of the commands fails an exception is raised  ssh(\n  host: \"dev.januschka.com\",\n  username: \"root\",\n  commands: [\n    \"date\",\n    \"false\",\n    \"echo 'i wont be executed'\"\n  ]\n)", 
            "title": "ssh"
        }, 
        {
            "location": "/actions/Actions/#scp", 
            "text": "Allows SCP file transfer.  Upload file/folder:  scp(\n  host:  dev.januschka.com ,\n  username:  root ,\n  upload: {\n    src:  /root/dir1 ,\n    dst:  /tmp/new_dir \n  }\n)  Download file/folder:  scp(\n  host:  dev.januschka.com ,\n  username:  root ,\n  download: {\n    src:  /root/dir1 ,\n    dst:  /tmp/new_dir \n  }\n)", 
            "title": "scp"
        }, 
        {
            "location": "/actions/Actions/#rsync", 
            "text": "a wrapper around rsync, rsync is a tool that lets you synchronize files, including permissions and so on for a more detailed information about rsync please see  rsync(1)  manpage.  rsync(\n  source:  root@host:/tmp/1.txt ,\n  destination:  /tmp/local_file.txt \n)", 
            "title": "rsync"
        }, 
        {
            "location": "/actions/Actions/#zip", 
            "text": "Compress a file or directory  zip(path:  MyApp.app )\n\nzip(path:  MyApp.app , output_path:  Latest.app.zip )", 
            "title": "zip"
        }, 
        {
            "location": "/actions/Actions/#ifttt", 
            "text": "Connect to the IFTTT  Maker Channel . An IFTTT Recipe has two components: a Trigger and an Action. In this case, the Trigger will fire every time the Maker Channel receives a web request (made by this  fastlane  action) to notify it of an event. The Action can be anything that IFTTT supports: email, SMS, etc.  ifttt(\n  api_key:  ... ,\n  event_name:  ... ,\n  value1:  foo ,\n  value2:  bar ,\n  value3:  baz \n)", 
            "title": "ifttt"
        }, 
        {
            "location": "/actions/Actions/#reset_simulators", 
            "text": "Reset all the iOS simulators. Useful with test actions to ensure a clean simulator.  reset_simulators", 
            "title": "reset_simulators"
        }, 
        {
            "location": "/actions/Actions/#danger", 
            "text": "To run  danger  add this to your  Fastfile  lane :danger do\n  danger\nend", 
            "title": "danger"
        }, 
        {
            "location": "/actions/Actions/#pod_lib_lint", 
            "text": "Execute pod lib lint command  pod_lib_lint\n\n# Allow ouput detail in console\npod_lib_lint(verbose: true)\n\n# Allow warnings during pod lint\npod_lib_lint(allow_warnings: true)\n\n# If the podspec has a dependency on another private pod, then you will have to supply the sources\npod_lib_lint(sources: ['https://github.com/MyGithubPage/Specs', 'https://github.com/CocoaPods/Specs'])", 
            "title": "pod_lib_lint"
        }, 
        {
            "location": "/actions/Actions/#set_pod_key", 
            "text": "Adds a key to  cocoapods-keys .  set_pod_key(\n  key: 'APIToken',\n  value: '1234',\n  project: 'MyProject'\n)", 
            "title": "set_pod_key"
        }, 
        {
            "location": "/FAQs/", 
            "text": "FAQs\n\n\nI'm getting an SSL error\n\n\nIf your output contains something like\n\n\nSSL_connect returned=1 errno=0 state=SSLv3 read server certificate B: certificate verify failed\n\n\n\n\nthat usually means you are using an outdated version of OpenSSL. Make sure to install the latest one using \nhomebrew\n.\n\n\nbrew update \n brew upgrade openssl\n\n\n\n\nIf you use \nrvm\n, try the following\n\n\nrvm osx-ssl-certs update all\n\n\n\n\nfastlane is slow (to start)\n\n\nIf you experiennce slow launch times of \nfastlane\n, there are 2 solutions to solve this problem:\n\n\nUninstall unused gems\n\n\n[sudo] gem cleanup\n\n\n\n\nError when running \nfastlane\n with Jenkins\n\n\nThis is usually caused when running Jenkins as its own user. While this is possible, you'll have to take care of creating a temporary Keychain, filling it and then using it when building your application. \n\n\nFor more information about the recommended setup with Jenkins open the \nJenkins Guide\n.\n\n\nCode signing issues\n\n\nCheck out the \ncodesigning.guide\n website for more information on how to properly setup code-signing in your team using \nmatch\n.\n\n\nMultiple targets of the same underlying app\n\n\nIf you have one code base, but multiple branded applications\n\n\nCreate different \n.env\n files for each environment and reference those environment variables in the \nDeliverfile\n, \nFastfile\n, etc. \n\n\nExample: Create a \n.env.app1\n, \n.env.app2\n, and \n.env.app3\n. Define each of these like the following...\n\n\nDLV_FIRST_NAME=Josh\nDLV_LAST_NAME=Holtz\nDLV_PRIM_CATG=Business\nDLV_SCND_CATG=Games\n\n\n\n\nNow your Deliver file should look something like this:\n\n\napp_review_information(\n  first_name: ENV['DLV_FIRST_NAME'],\n  last_name: ENV['DLV_LAST_NAME']\n)\n\nprimary_category ENV['DLV_PRIM_CATG']\nsecondary_category ENV['DLV_SCND_CATG']\n\n\n\n\nNow to run this, all you need to do is specify the environment argument when running \nfastlane\n and it will pull from the \n.env\n file that matches the same name...\nEx: \nfastlane build --env app1\n will use \n.env.app1\n\nEx: \nfastlane build --env app2\n will use \n.env.app2\n\n\nYou can also references these environment variables almost anywhere in \nfastlane\n. \n\n\nYou can even define a lane to perform actions on multiple targets:\n\n\ndesc \nDeploy both versions\n\nlane :deploy_all do\n    sh \nfastlane deploy --env paid\n\n    sh \nfastlane deploy --env free\n\nend\n\n\n\n\nMore on the \n.env\n file can be found \nhere\n.\n\n\nDisable colored output\n\n\nSet the \nFASTLANE_DISABLE_COLORS\n environment variable to disable ANSI colors (e.g. for CI machines)\n\n\nexport FASTLANE_DISABLE_COLORS=1\n\n\n\n\n\"User interaction is not allowed\" when using \nfastlane\n via SSH\n\n\nThis error can occur when you run \nfastlane\n via SSH. To fix it check out \nthis reply on StackOverflow\n.", 
            "title": "FAQs"
        }, 
        {
            "location": "/FAQs/#faqs", 
            "text": "", 
            "title": "FAQs"
        }, 
        {
            "location": "/FAQs/#im-getting-an-ssl-error", 
            "text": "If your output contains something like  SSL_connect returned=1 errno=0 state=SSLv3 read server certificate B: certificate verify failed  that usually means you are using an outdated version of OpenSSL. Make sure to install the latest one using  homebrew .  brew update   brew upgrade openssl  If you use  rvm , try the following  rvm osx-ssl-certs update all", 
            "title": "I'm getting an SSL error"
        }, 
        {
            "location": "/FAQs/#fastlane-is-slow-to-start", 
            "text": "If you experiennce slow launch times of  fastlane , there are 2 solutions to solve this problem:", 
            "title": "fastlane is slow (to start)"
        }, 
        {
            "location": "/FAQs/#uninstall-unused-gems", 
            "text": "[sudo] gem cleanup", 
            "title": "Uninstall unused gems"
        }, 
        {
            "location": "/FAQs/#error-when-running-fastlane-with-jenkins", 
            "text": "This is usually caused when running Jenkins as its own user. While this is possible, you'll have to take care of creating a temporary Keychain, filling it and then using it when building your application.   For more information about the recommended setup with Jenkins open the  Jenkins Guide .", 
            "title": "Error when running fastlane with Jenkins"
        }, 
        {
            "location": "/FAQs/#code-signing-issues", 
            "text": "Check out the  codesigning.guide  website for more information on how to properly setup code-signing in your team using  match .", 
            "title": "Code signing issues"
        }, 
        {
            "location": "/FAQs/#multiple-targets-of-the-same-underlying-app", 
            "text": "If you have one code base, but multiple branded applications  Create different  .env  files for each environment and reference those environment variables in the  Deliverfile ,  Fastfile , etc.   Example: Create a  .env.app1 ,  .env.app2 , and  .env.app3 . Define each of these like the following...  DLV_FIRST_NAME=Josh\nDLV_LAST_NAME=Holtz\nDLV_PRIM_CATG=Business\nDLV_SCND_CATG=Games  Now your Deliver file should look something like this:  app_review_information(\n  first_name: ENV['DLV_FIRST_NAME'],\n  last_name: ENV['DLV_LAST_NAME']\n)\n\nprimary_category ENV['DLV_PRIM_CATG']\nsecondary_category ENV['DLV_SCND_CATG']  Now to run this, all you need to do is specify the environment argument when running  fastlane  and it will pull from the  .env  file that matches the same name...\nEx:  fastlane build --env app1  will use  .env.app1 \nEx:  fastlane build --env app2  will use  .env.app2  You can also references these environment variables almost anywhere in  fastlane .   You can even define a lane to perform actions on multiple targets:  desc  Deploy both versions \nlane :deploy_all do\n    sh  fastlane deploy --env paid \n    sh  fastlane deploy --env free \nend  More on the  .env  file can be found  here .", 
            "title": "Multiple targets of the same underlying app"
        }, 
        {
            "location": "/FAQs/#disable-colored-output", 
            "text": "Set the  FASTLANE_DISABLE_COLORS  environment variable to disable ANSI colors (e.g. for CI machines)  export FASTLANE_DISABLE_COLORS=1", 
            "title": "Disable colored output"
        }, 
        {
            "location": "/FAQs/#user-interaction-is-not-allowed-when-using-fastlane-via-ssh", 
            "text": "This error can occur when you run  fastlane  via SSH. To fix it check out  this reply on StackOverflow .", 
            "title": "\"User interaction is not allowed\" when using fastlane via SSH"
        }, 
        {
            "location": "/codesigning/GettingStarted/", 
            "text": "Codesigning concepts\n\n\nIf you are just starting a new project, it's important to think about how you want to handle code signing. This guide will help you choose the best approach for you.\n\n\nFor existing projects it might make sense to switch from a manual process to the \nmatch approach\n to make it easier for new team-members to onboard.\n\n\nIf you are new to code signing, check out the \nWWDC session\n that describes the fundamentals of code signing in Xcode.\n\n\n\n\nUsing match\n\n\nUsing cert and sigh\n\n\nUsing Xcode's code signing feature\n\n\nManually\n\n\n\n\nUsing \nmatch\n\n\nThe concept of \nmatch\n is described in the \ncodesigning guide\n. \n\n\nWith \nmatch\n you store your private keys and certificates in a git repo to sync them across machines. This makes it easy to onboard new team-members and set up new Mac machines. This approach \nis secure\n and uses technology you already use.\n\n\nGetting started with \nmatch\n requires you to revoke your existing certificates.\n\n\nMake sure to follow \nXcodeProject.md\n to set up your project properly.\n\n\nUsing \ncert\n and \nsigh\n\n\nIf you don't want to revoke your existing certificates, but still want an automated setup, \ncert\n and \nsigh\n are for you. \n\n\n\n\ncert\n will make sure you have a valid certificate and its private key installed on the local machine\n\n\nsigh\n will make sure you have a valid provisioning profile installed locally, that matches the installed certificate\n\n\n\n\nAdd the following lines to your \nFastfile\n\n\nlane :beta do\n  cert\n  sigh\n  gym\nend\n\n\n\n\nMake sure to follow \nXcodeProject.md\n to set up your project properly.\n\n\nUsing Xcode's code signing feature\n\n\nOccasionally the \nAutomatic\n setting as the provisioning profile doesn't work reliably as it will just select the most recently updated provisioning profile, no matter if the certificate is installed. \n\n\nThat's why it is recommended to specify a specific provisioning profile somehow:\n\n\nXcode 7 and lower\n\n\nYou should avoid clicking the \nFix Issue\n button (There is an \nXcode plugin\n that disables the button), as it sometimes revokes existing certificates, and with it the provisioning profiles.\n\n\nUnfortunately you can't specify the name of the provisioning profile in Xcode 7. Instead you can specify the UUID of the profile, which changes every time the profile gets re-generated (e.g. when you add a new device).\n\n\nTo work around this issue, check out \nXcodeProject.md\n on how to pass a provisioning profile to Xcode when building your app.\n\n\nXcode 8 and up\n\n\nApple improved code signing a lot with the release of Xcode 8, the following has changed:\n\n\n\n\nNo more \nFix Issue\n button, instead all code signing processes run in the background and show the log right in Xcode\n\n\nYou can now specify the provisioning profile by name, instead of the UUID (Check out \nXcodeProject.md\n for more information)\n\n\nImproved error messages when something goes wrong. If you run into code signing errors you should always try building and signing with Xcode to get more detailed error information. (Check out \nTroubleshooting.md\n for more information)\n\n\n\n\nManually\n\n\nYou can always manually create and manage your certificates and provisioning profiles using the Apple Developer Portal. Make sure to store the private key (\n.p12\n) of your certificates in a safe place, as they can't be restored if you lose them. \n\n\nYou can always download the certificate (\n.cer\n) and provisioning profile (\n.mobileprovision\n) from the Apple Developer Portal.", 
            "title": "Getting Started"
        }, 
        {
            "location": "/codesigning/GettingStarted/#codesigning-concepts", 
            "text": "If you are just starting a new project, it's important to think about how you want to handle code signing. This guide will help you choose the best approach for you.  For existing projects it might make sense to switch from a manual process to the  match approach  to make it easier for new team-members to onboard.  If you are new to code signing, check out the  WWDC session  that describes the fundamentals of code signing in Xcode.   Using match  Using cert and sigh  Using Xcode's code signing feature  Manually", 
            "title": "Codesigning concepts"
        }, 
        {
            "location": "/codesigning/GettingStarted/#using-match", 
            "text": "The concept of  match  is described in the  codesigning guide .   With  match  you store your private keys and certificates in a git repo to sync them across machines. This makes it easy to onboard new team-members and set up new Mac machines. This approach  is secure  and uses technology you already use.  Getting started with  match  requires you to revoke your existing certificates.  Make sure to follow  XcodeProject.md  to set up your project properly.", 
            "title": "Using match"
        }, 
        {
            "location": "/codesigning/GettingStarted/#using-cert-and-sigh", 
            "text": "If you don't want to revoke your existing certificates, but still want an automated setup,  cert  and  sigh  are for you.    cert  will make sure you have a valid certificate and its private key installed on the local machine  sigh  will make sure you have a valid provisioning profile installed locally, that matches the installed certificate   Add the following lines to your  Fastfile  lane :beta do\n  cert\n  sigh\n  gym\nend  Make sure to follow  XcodeProject.md  to set up your project properly.", 
            "title": "Using cert and sigh"
        }, 
        {
            "location": "/codesigning/GettingStarted/#using-xcodes-code-signing-feature", 
            "text": "Occasionally the  Automatic  setting as the provisioning profile doesn't work reliably as it will just select the most recently updated provisioning profile, no matter if the certificate is installed.   That's why it is recommended to specify a specific provisioning profile somehow:", 
            "title": "Using Xcode's code signing feature"
        }, 
        {
            "location": "/codesigning/GettingStarted/#xcode-7-and-lower", 
            "text": "You should avoid clicking the  Fix Issue  button (There is an  Xcode plugin  that disables the button), as it sometimes revokes existing certificates, and with it the provisioning profiles.  Unfortunately you can't specify the name of the provisioning profile in Xcode 7. Instead you can specify the UUID of the profile, which changes every time the profile gets re-generated (e.g. when you add a new device).  To work around this issue, check out  XcodeProject.md  on how to pass a provisioning profile to Xcode when building your app.", 
            "title": "Xcode 7 and lower"
        }, 
        {
            "location": "/codesigning/GettingStarted/#xcode-8-and-up", 
            "text": "Apple improved code signing a lot with the release of Xcode 8, the following has changed:   No more  Fix Issue  button, instead all code signing processes run in the background and show the log right in Xcode  You can now specify the provisioning profile by name, instead of the UUID (Check out  XcodeProject.md  for more information)  Improved error messages when something goes wrong. If you run into code signing errors you should always try building and signing with Xcode to get more detailed error information. (Check out  Troubleshooting.md  for more information)", 
            "title": "Xcode 8 and up"
        }, 
        {
            "location": "/codesigning/GettingStarted/#manually", 
            "text": "You can always manually create and manage your certificates and provisioning profiles using the Apple Developer Portal. Make sure to store the private key ( .p12 ) of your certificates in a safe place, as they can't be restored if you lose them.   You can always download the certificate ( .cer ) and provisioning profile ( .mobileprovision ) from the Apple Developer Portal.", 
            "title": "Manually"
        }, 
        {
            "location": "/codesigning/XcodeProject/", 
            "text": "Setting up your Xcode Project\n\n\nXcode 8 and up\n\n\nWith Xcode 8 you can set a provisioning profile name for each of your targets instead of a provisioning profile UUID. By doing so, Xcode automatically selects the latest provisioning profile matching its name. This way you don't have to update your Xcode project, every time you re-generate your provisioning profile (e.g. when adding a new device)\n\n\nYou can now specify which provisioning profile to use in the \nGeneral\n tab after disabling \nAutomatically manage signing\n.\n\n\n\n\nAlternatively you can also specify the provisioning profile in the \nBuild Settings\n tab.\n\n\n\n\nIf your provisioning profile is not listed in the drop down, there might be a few reasons:\n\n\n\n\nIt doesn't match the bundle identifier of the target\n\n\nThe associated certificate or its private key is not installed on the local machine\n\n\nThe provisioning profile is not installed on the local machine\n\n\n\n\nCheck out \nTroubleshooting.md\n for more information on how to debug signing issues.\n\n\nBuild settings / Environment variables\n\n\nPreviously you could specify the UUID of the provisioning profile using the \nPROVISIONING_PROFILE\n Xcode settings property, with Xcode 8 you specify it using the \nPROVISIONING_PROFILE_SPECIFIER\n instead:\n\n\nPROVISIONING_PROFILE_SPECIFIER = \n5AA97AAHK2/Themoji_AppStore\n;\nPROVISIONING_PROFILE_SPECIFIER = \n[team_id]/[profile_name]\n;\n\n\n\n\nYou could pass the profile specifier via environment variables too (See Xcode 7 approach below), however in most cases it's enough to define it statically in your project, per target, since usually neither your Team ID, nor the provisioning profile change.\n\n\nXcode 7 and lower\n\n\nNote\n: This approach is deprecated with Xcode 8\n\n\nIf you use \nAutomatic\n value for your provisioning profile, Xcode sometimes selects the wrong profile, resulting in code signing errors at a later point.\n\n\nInstead it is recommended to specify a specific provisioning profile, which can only be done using the UUID (in Xcode 7).\n\n\nSince it is not recommended to update the project file, every time you update your provisioning profile, you can pass the UUID via environment variables.\n\n\nTo do so, open your target settings, open the dropdown for \nProvisioning Profile\n and select \nOther\n:\n\n\n\n\nUsing the \n$(...)\n notation, Xcode will use the provisioning profile matching the UUID, and fallback to \nAutomatic\n if it's not provided. \n\n\nIf you use \nfastlane\n you don't have to do any extra work, since the environment variable for the latest profile are automatically set by \nmatch\n\n\nlane :beta do\n  match(type: \nadhoc\n)\n  gym\nend\n\n\n\n\nYou can also manually set the environment variable using\n\n\nlane :beta do\n  ENV[\nPROVISIONING_PROFILE_TARGET1\n] = \nb01c39c9-1b4a-412e-9ae2-3087ee9ea9d3\n\n  gym\nend", 
            "title": "Xcode Project"
        }, 
        {
            "location": "/codesigning/XcodeProject/#setting-up-your-xcode-project", 
            "text": "", 
            "title": "Setting up your Xcode Project"
        }, 
        {
            "location": "/codesigning/XcodeProject/#xcode-8-and-up", 
            "text": "With Xcode 8 you can set a provisioning profile name for each of your targets instead of a provisioning profile UUID. By doing so, Xcode automatically selects the latest provisioning profile matching its name. This way you don't have to update your Xcode project, every time you re-generate your provisioning profile (e.g. when adding a new device)  You can now specify which provisioning profile to use in the  General  tab after disabling  Automatically manage signing .   Alternatively you can also specify the provisioning profile in the  Build Settings  tab.   If your provisioning profile is not listed in the drop down, there might be a few reasons:   It doesn't match the bundle identifier of the target  The associated certificate or its private key is not installed on the local machine  The provisioning profile is not installed on the local machine   Check out  Troubleshooting.md  for more information on how to debug signing issues.", 
            "title": "Xcode 8 and up"
        }, 
        {
            "location": "/codesigning/XcodeProject/#build-settings-environment-variables", 
            "text": "Previously you could specify the UUID of the provisioning profile using the  PROVISIONING_PROFILE  Xcode settings property, with Xcode 8 you specify it using the  PROVISIONING_PROFILE_SPECIFIER  instead:  PROVISIONING_PROFILE_SPECIFIER =  5AA97AAHK2/Themoji_AppStore ;\nPROVISIONING_PROFILE_SPECIFIER =  [team_id]/[profile_name] ;  You could pass the profile specifier via environment variables too (See Xcode 7 approach below), however in most cases it's enough to define it statically in your project, per target, since usually neither your Team ID, nor the provisioning profile change.", 
            "title": "Build settings / Environment variables"
        }, 
        {
            "location": "/codesigning/XcodeProject/#xcode-7-and-lower", 
            "text": "Note : This approach is deprecated with Xcode 8  If you use  Automatic  value for your provisioning profile, Xcode sometimes selects the wrong profile, resulting in code signing errors at a later point.  Instead it is recommended to specify a specific provisioning profile, which can only be done using the UUID (in Xcode 7).  Since it is not recommended to update the project file, every time you update your provisioning profile, you can pass the UUID via environment variables.  To do so, open your target settings, open the dropdown for  Provisioning Profile  and select  Other :   Using the  $(...)  notation, Xcode will use the provisioning profile matching the UUID, and fallback to  Automatic  if it's not provided.   If you use  fastlane  you don't have to do any extra work, since the environment variable for the latest profile are automatically set by  match  lane :beta do\n  match(type:  adhoc )\n  gym\nend  You can also manually set the environment variable using  lane :beta do\n  ENV[ PROVISIONING_PROFILE_TARGET1 ] =  b01c39c9-1b4a-412e-9ae2-3087ee9ea9d3 \n  gym\nend", 
            "title": "Xcode 7 and lower"
        }, 
        {
            "location": "/codesigning/Troubleshooting/", 
            "text": "Debugging codesigning issues\n\n\nThis guide will help you resolve the most common code signing errors.\n\n\nError message\n\n\nMake sure to find the exact error message in your build output. Many times the error message actually tells you how to resolve the issue. \n\n\nTo get even more details, try archiving using Xcode 8. \n\n\nDifferent machine\n\n\nDoes code signing work on a different Mac, but not on yours? If so, chances are high you don't have the latest private key, the certificate or the provisioning profile. Also follow the \nKeychain\n part of this document to make sure you don't have any expired certificates installed.\n\n\nXcode project\n\n\nMake sure to follow \nXcodeProject.md\n on how to properly set up your project.\n\n\nA check list on what you should verify on your Xcode project\n\n\n\n\nMake sure to have consistent code signing settings across your targets\n\n\nDon't set any code signing settings on your project level, just on the target level\n\n\nMake sure the bundle identifier matches the one of your provisioning profile\n\n\nMake sure the code signing identity is set to \niOS Distribution\n for \nRelease\n builds\n\n\nMake sure to set a provisioning profile for all your targets, e.g. Watch, Today widget, ...\n\n\nCheck your working copy in git - did you make any changes by mistake?\n\n\n\n\nDeveloper Portal\n\n\nIf a certificate gets revoked, all connected provisioning profiles get invalidated. This however might not immediately show up in your local keychain.\n\n\n\n\nOpen the \nDeveloper Portal\n\n\nVerify your certificates are valid, and didn't expire or get revoked\n\n\nSwitch to the Provisioning Profiles and make sure the profiles you want to use are all still valid\n\n\nIf your profile is invalid or expired, you can easily fix it:\n\n\nIf you're using \nmatch\n, run \nmatch\n with \nforce\n enabled\n\n\nIf you're using \nsigh\n, run \nsigh\n with \nforce\n enabled\n\n\nIf you're doing manual code signing, edit the provisioning profile, and click on \nGenerate\n on the bottom of the screen. Make sure to select the correct certificate, then download and open the new provisioning profile\n\n\n\n\n\n\nIf your profile is valid, but you still have issues make sure\n\n\nthat the certificate matches the certificate you have installed locally. You can view the used certificate by editing the profile (Don't click \nGenerate\n, unless you want to re-generate the provisioning profile)\n\n\nthat all devices you need are included (Development and Ad-Hoc only)\n\n\nthat you are actually looking at the correct provisioning profile, that matches the bundle identifier of your app. You might have multiple provisioning profiles for the same app / certificate combination. By default Xcode will use the last modified one.\n\n\n\n\n\n\n\n\nKeychain\n\n\n\n\nRun \nsecurity find-identity -v -p codesigning\n to get a list of locally installed code signing identities. Does yours show up?\n\n\nOpen the \nKeychain Access\n app, switch to \nCertificates\n and find your \niOS Developer\n or \niOS Distribution\n entry and unfold the entry to verify the private key is locally installed: \n\n\n  \n\n\n\n\nMake sure to have deleted all expired WWDR certificates, more information \nhere\n. There might be 2 expired WWDR certificates, one in the \nlogin\n, and one in the \nsystem\n keychain\n\n\n\n\nHave you tried turning it off and on again?\n\n\nAs funny as it sounds, sometimes restarting your Mac helps.\n\n\nfastlane\n\n\nRun \nfastlane\n in verbose mode to get even more debug information:\n\n\nfastlane [lane] --verbose\n\n\n\n\nCommon Issues\n\n\nCheck out \nCommonIssues.md\n for the most common code signing issues and how you can solve them.", 
            "title": "Troubleshooting"
        }, 
        {
            "location": "/codesigning/Troubleshooting/#debugging-codesigning-issues", 
            "text": "This guide will help you resolve the most common code signing errors.", 
            "title": "Debugging codesigning issues"
        }, 
        {
            "location": "/codesigning/Troubleshooting/#error-message", 
            "text": "Make sure to find the exact error message in your build output. Many times the error message actually tells you how to resolve the issue.   To get even more details, try archiving using Xcode 8.", 
            "title": "Error message"
        }, 
        {
            "location": "/codesigning/Troubleshooting/#different-machine", 
            "text": "Does code signing work on a different Mac, but not on yours? If so, chances are high you don't have the latest private key, the certificate or the provisioning profile. Also follow the  Keychain  part of this document to make sure you don't have any expired certificates installed.", 
            "title": "Different machine"
        }, 
        {
            "location": "/codesigning/Troubleshooting/#xcode-project", 
            "text": "Make sure to follow  XcodeProject.md  on how to properly set up your project.  A check list on what you should verify on your Xcode project   Make sure to have consistent code signing settings across your targets  Don't set any code signing settings on your project level, just on the target level  Make sure the bundle identifier matches the one of your provisioning profile  Make sure the code signing identity is set to  iOS Distribution  for  Release  builds  Make sure to set a provisioning profile for all your targets, e.g. Watch, Today widget, ...  Check your working copy in git - did you make any changes by mistake?", 
            "title": "Xcode project"
        }, 
        {
            "location": "/codesigning/Troubleshooting/#developer-portal", 
            "text": "If a certificate gets revoked, all connected provisioning profiles get invalidated. This however might not immediately show up in your local keychain.   Open the  Developer Portal  Verify your certificates are valid, and didn't expire or get revoked  Switch to the Provisioning Profiles and make sure the profiles you want to use are all still valid  If your profile is invalid or expired, you can easily fix it:  If you're using  match , run  match  with  force  enabled  If you're using  sigh , run  sigh  with  force  enabled  If you're doing manual code signing, edit the provisioning profile, and click on  Generate  on the bottom of the screen. Make sure to select the correct certificate, then download and open the new provisioning profile    If your profile is valid, but you still have issues make sure  that the certificate matches the certificate you have installed locally. You can view the used certificate by editing the profile (Don't click  Generate , unless you want to re-generate the provisioning profile)  that all devices you need are included (Development and Ad-Hoc only)  that you are actually looking at the correct provisioning profile, that matches the bundle identifier of your app. You might have multiple provisioning profiles for the same app / certificate combination. By default Xcode will use the last modified one.", 
            "title": "Developer Portal"
        }, 
        {
            "location": "/codesigning/Troubleshooting/#keychain", 
            "text": "Run  security find-identity -v -p codesigning  to get a list of locally installed code signing identities. Does yours show up?  Open the  Keychain Access  app, switch to  Certificates  and find your  iOS Developer  or  iOS Distribution  entry and unfold the entry to verify the private key is locally installed:  \n     Make sure to have deleted all expired WWDR certificates, more information  here . There might be 2 expired WWDR certificates, one in the  login , and one in the  system  keychain", 
            "title": "Keychain"
        }, 
        {
            "location": "/codesigning/Troubleshooting/#have-you-tried-turning-it-off-and-on-again", 
            "text": "As funny as it sounds, sometimes restarting your Mac helps.", 
            "title": "Have you tried turning it off and on again?"
        }, 
        {
            "location": "/codesigning/Troubleshooting/#fastlane", 
            "text": "Run  fastlane  in verbose mode to get even more debug information:  fastlane [lane] --verbose", 
            "title": "fastlane"
        }, 
        {
            "location": "/codesigning/Troubleshooting/#common-issues", 
            "text": "Check out  CommonIssues.md  for the most common code signing issues and how you can solve them.", 
            "title": "Common Issues"
        }, 
        {
            "location": "/codesigning/CommonIssues/", 
            "text": "Common code signing issues\n\n\nXcode errors\n\n\n\n\nCode Sign error: No matching provisioning profiles found: No provisioning profiles with a valid signing identity (i.e. certificate and private key pair) matching the bundle identifier \"X\" were found.\n\n\n\n\nThe provisioning profile for the given app identifier \"X\" is not available on the local machine. Make sure you have a valid provisioning profile for the correct distribution type (App Store, Development or Ad Hoc) on the Apple Developer Portal, download and install it, and select the profile in the Xcode settings (See \nXcodeProject.md\n).\n\n\nYou might have the provisioning profile installed locally, but miss the private key or certificate for it. \n\n\n\n\nNo matching codesigning identity found: No codesigning identities (i.e. certificate and private key pairs) matching \"iPhone Distribution: X\" were found\n\n\n\n\nThe code signing identity you specified in the Xcode project can't be found in your local keychain. Make sure to transfer the certificate and private key from another Mac (or wherever you store the private key), or to update the project file to use the correct code signing identity.\n\n\n\n\nError Domain=IDEDistributionErrorDomain Code=1 \"The operation couldn\u2019t be completed. (IDEDistributionErrorDomain error 1.)\"\n\n\n\n\nThis error can have a lot of reasons, some things you should try:\n\n\n\n\nVerify your Keychain is valid and you don't have an expired WWDR certificate using \nthis guide\n\n\nVerify both your certificate and provisioning profile are valid in both your Keychain and on the Apple Developer Portal (Check out \nTroubleshooting.md\n for more information)\n\n\nIf you're using \ngym\n, try using the \nuse_legacy_build_api\n flag to fallback to the Xcode 6 build API\n\n\nFollow the other steps of \nTroubleshooting.md\n\n\n\n\n\n\nProvisioning profile does not match bundle identifier: The provisioning profile specified in your build settings (\"X\") has an AppID of \"Y\" which does not match your bundle identifier \"Z\"\n\n\n\n\nYour project defines a provisioning profile that doesn't match the bundle identifier of your app. There is mismatch between the bundle identifiers, this might happen if you specify the wrong provisioning profile in your target.\n\n\n\n\nYour build settings specify a provisioning profile with the UUID \"X\", however, no such provisioning profile was found.\n\n\n\n\nYour project defines a provisioning profile which doesn't exist on your local machine. Check out \nXcodeProject.md\n for more information how to properly specify a provisioning profile to avoid hard coded UUIDs in your project.\n\n\n\n\nCodeSign Error: code signing is required for product type 'Application'...\n\n\n\n\nMake sure to have a valid code signing identity defined in your project targets. This might happen when you select \nDon't Code Sign\n as Code Signing Identity.\n\n\nfastlane errors\n\n\n\n\nCould not find a matching code signing identity for type 'X'\n\n\n\n\nThere are no certificates available on the Apple Developer Portal. This could either mean someone revoked a certificate, or you don't have access to it.", 
            "title": "Common Issues"
        }, 
        {
            "location": "/codesigning/CommonIssues/#common-code-signing-issues", 
            "text": "", 
            "title": "Common code signing issues"
        }, 
        {
            "location": "/codesigning/CommonIssues/#xcode-errors", 
            "text": "Code Sign error: No matching provisioning profiles found: No provisioning profiles with a valid signing identity (i.e. certificate and private key pair) matching the bundle identifier \"X\" were found.   The provisioning profile for the given app identifier \"X\" is not available on the local machine. Make sure you have a valid provisioning profile for the correct distribution type (App Store, Development or Ad Hoc) on the Apple Developer Portal, download and install it, and select the profile in the Xcode settings (See  XcodeProject.md ).  You might have the provisioning profile installed locally, but miss the private key or certificate for it.    No matching codesigning identity found: No codesigning identities (i.e. certificate and private key pairs) matching \"iPhone Distribution: X\" were found   The code signing identity you specified in the Xcode project can't be found in your local keychain. Make sure to transfer the certificate and private key from another Mac (or wherever you store the private key), or to update the project file to use the correct code signing identity.   Error Domain=IDEDistributionErrorDomain Code=1 \"The operation couldn\u2019t be completed. (IDEDistributionErrorDomain error 1.)\"   This error can have a lot of reasons, some things you should try:   Verify your Keychain is valid and you don't have an expired WWDR certificate using  this guide  Verify both your certificate and provisioning profile are valid in both your Keychain and on the Apple Developer Portal (Check out  Troubleshooting.md  for more information)  If you're using  gym , try using the  use_legacy_build_api  flag to fallback to the Xcode 6 build API  Follow the other steps of  Troubleshooting.md    Provisioning profile does not match bundle identifier: The provisioning profile specified in your build settings (\"X\") has an AppID of \"Y\" which does not match your bundle identifier \"Z\"   Your project defines a provisioning profile that doesn't match the bundle identifier of your app. There is mismatch between the bundle identifiers, this might happen if you specify the wrong provisioning profile in your target.   Your build settings specify a provisioning profile with the UUID \"X\", however, no such provisioning profile was found.   Your project defines a provisioning profile which doesn't exist on your local machine. Check out  XcodeProject.md  for more information how to properly specify a provisioning profile to avoid hard coded UUIDs in your project.   CodeSign Error: code signing is required for product type 'Application'...   Make sure to have a valid code signing identity defined in your project targets. This might happen when you select  Don't Code Sign  as Code Signing Identity.", 
            "title": "Xcode errors"
        }, 
        {
            "location": "/codesigning/CommonIssues/#fastlane-errors", 
            "text": "Could not find a matching code signing identity for type 'X'   There are no certificates available on the Apple Developer Portal. This could either mean someone revoked a certificate, or you don't have access to it.", 
            "title": "fastlane errors"
        }, 
        {
            "location": "/plugins/AvailablePlugins/", 
            "text": "Available Plugins\n\n\nTo get an up to date list of all available plugins run\n\n\nfastlane search_plugins\n\n\n\n\nTo search for a specific plugin\n\n\nfastlane search_plugins [search_query]\n\n\n\n\nYou can find more information about how to start using plugins in \nPlugins.md\n.\n\n\nList of plugins\n\n\n\n\n\n\n\n\nPlugin Name\n\n\nDescription\n\n\nDownloads\n\n\n\n\n\n\n\n\n\n\n\n\nchangelog\n\n\nAutomate changes to your project CHANGELOG.md\n\n\n1711\n\n\n\n\n\n\n\n\npolidea\n\n\nPolidea's fastlane action\n\n\n1573\n\n\n\n\n\n\n\n\nautomated_test_emulator_run\n\n\nAllows to wrap gradle task or shell command that runs integrated tests that prepare and starts single AVD before test run. After tests are finished, emulator is killed and deleted.\n\n\n1239\n\n\n\n\n\n\n\n\nxcake\n\n\nCreate your Xcode projects automatically using a stupid simple DSL.\n\n\n1117\n\n\n\n\n\n\n\n\ninstrumented_tests\n\n\nNew action to run instrumented tests for android. This basically creates and boots an emulator before running an gradle commands so that you can run instrumented tests against that emulator. After the gradle command is executed, the avd gets shut down and deleted. This is really helpful on CI services, keeping them clean and always having a fresh avd for testing.\n\n\n1072\n\n\n\n\n\n\n\n\nbranding\n\n\nAdd some branding to your fastlane output\n\n\n1019\n\n\n\n\n\n\n\n\nruby\n\n\nUseful fastlane actions for Ruby projects\n\n\n999\n\n\n\n\n\n\n\n\nversioning\n\n\nAllows to work set/get app version directly to/from Info.plist\n\n\n996\n\n\n\n\n\n\n\n\nincrement_version_code\n\n\nIncrement the version code of your android project.\n\n\n856\n\n\n\n\n\n\n\n\ntpa\n\n\nTPA gives you advanced user behaviour analytics, app distribution, crash analytics and more\n\n\n850\n\n\n\n\n\n\n\n\nxamarin_build\n\n\nBuild xamarin android\\ios projects\n\n\n819\n\n\n\n\n\n\n\n\nappicon\n\n\nGenerate required icon sizes and iconset from a master application icon.\n\n\n765\n\n\n\n\n\n\n\n\napplivery\n\n\nUpload new build to Applivery\n\n\n751\n\n\n\n\n\n\n\n\ncarthage_cache\n\n\nA Fastlane plugin that allows to cache Carthage/Build folder in Amazon S3.\n\n\n742\n\n\n\n\n\n\n\n\ncommit_android_version_bump\n\n\nThis Android plugins allow you to commit every modification done in your build.gradle file during the execution of a lane. In fast, it do the same as the commit_version_bump action, but for Android\n\n\n695\n\n\n\n\n\n\n\n\ntrainer\n\n\nConvert xcodebuild plist files to JUnit reports\n\n\n689\n\n\n\n\n\n\n\n\nupload_folder_to_s3\n\n\nUpload a folder to S3\n\n\n653\n\n\n\n\n\n\n\n\ngoodify_info_plist\n\n\nThis plugin will update the plist so that the built application can be deployed and managed within BlackBerry's Good Dynamics Control Center for Enterprise Mobility Management.\n\n\n647\n\n\n\n\n\n\n\n\nsynx\n\n\nOrganise your Xcode project folder to match your Xcode groups.\n\n\n620\n\n\n\n\n\n\n\n\ninstabug\n\n\nUploads dSYM to Instabug\n\n\n613\n\n\n\n\n\n\n\n\nno_u\n\n\nno u\n\n\n585\n\n\n\n\n\n\n\n\nget_version_code\n\n\nGet the version code of anAndroid project. This action will return the version code of your project according to the one set in your build.gradle file\n\n\n561\n\n\n\n\n\n\n\n\napprepo\n\n\nexperimental fastlane plugin based on https://github.com/suculent/apprepo SFTP uploader\n\n\n558\n\n\n\n\n\n\n\n\nemoji_fetcher\n\n\nFetch the emoji font file and copy it to a local directory\n\n\n548\n\n\n\n\n\n\n\n\nupload_symbols_to_hockey\n\n\nUpload dSYM symbolication files to Hockey\n\n\n547\n\n\n\n\n\n\n\n\nclubmate\n\n\nPrint the Club Mate logo in your build output\n\n\n527\n\n\n\n\n\n\n\n\nftp\n\n\nSimple ftp upload and download for Fastlane\n\n\n525\n\n\n\n\n\n\n\n\ngithub_status\n\n\nProvides the ability to display and act upon GitHub server status as part of your build\n\n\n524\n\n\n\n\n\n\n\n\npoeditor_export\n\n\nExports translations from POEditor.com\n\n\n503\n\n\n\n\n\n\n\n\nversion_from_last_tag\n\n\nPerform a regex on last (latest) git tag and perform a regex to extract a version number such as Release 1.2.3\n\n\n474", 
            "title": "AvailablePlugins"
        }, 
        {
            "location": "/plugins/AvailablePlugins/#available-plugins", 
            "text": "To get an up to date list of all available plugins run  fastlane search_plugins  To search for a specific plugin  fastlane search_plugins [search_query]  You can find more information about how to start using plugins in  Plugins.md .", 
            "title": "Available Plugins"
        }, 
        {
            "location": "/plugins/AvailablePlugins/#list-of-plugins", 
            "text": "Plugin Name  Description  Downloads       changelog  Automate changes to your project CHANGELOG.md  1711     polidea  Polidea's fastlane action  1573     automated_test_emulator_run  Allows to wrap gradle task or shell command that runs integrated tests that prepare and starts single AVD before test run. After tests are finished, emulator is killed and deleted.  1239     xcake  Create your Xcode projects automatically using a stupid simple DSL.  1117     instrumented_tests  New action to run instrumented tests for android. This basically creates and boots an emulator before running an gradle commands so that you can run instrumented tests against that emulator. After the gradle command is executed, the avd gets shut down and deleted. This is really helpful on CI services, keeping them clean and always having a fresh avd for testing.  1072     branding  Add some branding to your fastlane output  1019     ruby  Useful fastlane actions for Ruby projects  999     versioning  Allows to work set/get app version directly to/from Info.plist  996     increment_version_code  Increment the version code of your android project.  856     tpa  TPA gives you advanced user behaviour analytics, app distribution, crash analytics and more  850     xamarin_build  Build xamarin android\\ios projects  819     appicon  Generate required icon sizes and iconset from a master application icon.  765     applivery  Upload new build to Applivery  751     carthage_cache  A Fastlane plugin that allows to cache Carthage/Build folder in Amazon S3.  742     commit_android_version_bump  This Android plugins allow you to commit every modification done in your build.gradle file during the execution of a lane. In fast, it do the same as the commit_version_bump action, but for Android  695     trainer  Convert xcodebuild plist files to JUnit reports  689     upload_folder_to_s3  Upload a folder to S3  653     goodify_info_plist  This plugin will update the plist so that the built application can be deployed and managed within BlackBerry's Good Dynamics Control Center for Enterprise Mobility Management.  647     synx  Organise your Xcode project folder to match your Xcode groups.  620     instabug  Uploads dSYM to Instabug  613     no_u  no u  585     get_version_code  Get the version code of anAndroid project. This action will return the version code of your project according to the one set in your build.gradle file  561     apprepo  experimental fastlane plugin based on https://github.com/suculent/apprepo SFTP uploader  558     emoji_fetcher  Fetch the emoji font file and copy it to a local directory  548     upload_symbols_to_hockey  Upload dSYM symbolication files to Hockey  547     clubmate  Print the Club Mate logo in your build output  527     ftp  Simple ftp upload and download for Fastlane  525     github_status  Provides the ability to display and act upon GitHub server status as part of your build  524     poeditor_export  Exports translations from POEditor.com  503     version_from_last_tag  Perform a regex on last (latest) git tag and perform a regex to extract a version number such as Release 1.2.3  474", 
            "title": "List of plugins"
        }, 
        {
            "location": "/plugins/CreatePlugin/", 
            "text": "fastlane Plugins\n\n\nThe instructions below require \nfastlane\n 1.93.0 or higher\n\n\nLocal actions\n\n\nYou can create your own actions to extend the functionality of fastlane for your project. The action you create will behave exactly like the built in actions.\n\n\nJust run \nfastlane new_action\n, enter the name of the action and edit the generated Ruby file in \nfastlane/actions/[action_name].rb\n. After you finished writing your action, add it to your version control, so it is available for your whole team.\n\n\nFrom then on, you can just use your action in your \nFastfile\n, just like any other action.\n\n\nSubmitting the action to the fastlane main repo\n\n\nPlease be aware we may not accept all actions submitted to be bundled with \nfastlane\n. Before you submit a pull request adding the action to the \nfastlane\n code base, submit an issue proposing the new action and why it should be built-in.\n\n\nIn general we tend to accept actions that\n\n\n\n\nGenerally usable for a big majority of developers (e.g. basic interactions with git)\n\n\nSolve pain points for mobile app developers (iOS and Android)\n\n\nhave an easy to read documentation and great test coverage\n\n\n\n\nIn general, we might not accept actions that\n\n\n\n\nSolve specific use-cases for only a small subset of developers\n\n\nAccess the API of a third party service, the third party service should own and maintain the action\n\n\nComplex actions, that will require a lot of work to maintain in the future\n\n\nEverything that isn't mobile developer related\n\n\n\n\nPlugins\n\n\nfastlane\n is an open platform and we enable every developer to extend it to fit their needs. That's why we built a plugin system that allows you and your company to provide \nfastlane\n plugins to other \nfastlane\n users. You have the full power and responsibility of maintaining your plugin and keeping it up to date. This is useful if you maintain your own library or web service, and want to make sure the \nfastlane\n plugin is always up to date.\n\n\nFind a plugin\n\n\nHead over the \nAvailablePlugins.md\n for a list of plugins you can use.\n\n\nList all available plugins using\n\n\nfastlane search_plugins\n\n\n\n\nTo search for something specific \n\n\nfastlane search_plugins [query]\n\n\n\n\nAdd a plugin to your project\n\n\nfastlane add_plugin [name]\n\n\n\n\nfastlane\n will assist you on setting up your project to start using plugins.\n\n\nThis will:\n\n\n\n\nAdd the plugin to \nfastlane/Pluginfile\n\n\nMake sure your \nfastlane/Pluginfile\n is properly referenced from your \n./Gemfile\n\n\nRun \nfastlane install_plugins\n to make sure all required dependencies are installed on your local machine (this step might ask for your admin password to install Ruby gems)\n\n\nYou'll have 3 new files, that should all be checked into version control: \nGemfile\n, \nGemfile.lock\n and \nfastlane/Pluginfile\n\n\n\n\nPlugin Source\n\n\nYour \nfastlane/Pluginfile\n contains the list of all \nfastlane\n plugins your project uses. The \nPluginfile\n is a \nGemfile\n that gets imported from your main \nGemfile\n.\nYou specificy all dependencies, including the required version numbers:\n\n\n# Fetched from RubyGems.org\ngem \nfastlane-plugin-xcversion\n\n\n# Fetched from GitHub\ngem \nfastlane-plugin-xcversion\n, git: \nhttps://github.com/fastlane/fastlane-plugin-xcversion\n\n\n# Fetched from a local directory\ngem \nfastlane-plugin-xcversion\n, path: \n../fastlane-plugin-xcversion\n\n\n# Specify a version requirements\ngem \nfastlane-plugin-xcversion\n, \n1.1.0\n\ngem \nfastlane-plugin-xcversion\n, \n= 1.0\n\n\n\n\n\nMore information about a Gemfile\n\n\nInstall plugins on another machine\n\n\nTo make sure all plugins are installed on the local machine, run\n\n\nfastlane install_plugins\n\n\n\n\nRemove a plugin\n\n\nOpen your \nfastlane/Pluginfile\n and remove the line that looks like this\n\n\ngem \nfastlane-plugin-[plugin_name]\n\n\n\n\n\nCreate your own plugin\n\n\ncd ~/new/folder/\n\nfastlane new_plugin [plugin_name]\n\n\n\n\n\n\nfastlane\n creates the directory structure that's needed to be a valid Ruby gem\n\n\nEdit the \nlib/fastlane/plugin/[plugin_name]/actions/[plugin_name].rb\n and implement your action\n\n\nEasily test the plugin locally by running \nfastlane add_plugin\n in your project's directory and specifying the local path when asked for it\n\n\n\n\nNew plugin for existing gem\n\n\nIf you already have an exiting gem you want to provide a \nfastlane\n plugin for, you'll still have to create a new Ruby gem. The reason for that is the way plugins are imported.\n\n\nThe example project \nxcake\n contains a folder named \nfastlane-plugin-xcake\n.\n\n\nAll you have to do if you have an exiting gem:\n\n\n\n\nNavigate to your gem\n\n\nfastlane new_plugin [plugin_name]\n\n\nInside the newly created folder, edit the \nfastlane-plugin-[plugin_name].gemspec\n and add your gem as a dependency. It is recommended to also specify a version number requirement\n\n\n\n\nPublishing your plugin\n\n\nRubyGems\n\n\nThe recommended way to publish your plugin is to publish it on \nRubyGems.org\n. Follow the steps below to publish your plugin.\n\n\n\n\nCreate an account at \nRubyGems.org\n\n\nPublish your plugin to a \nGitHub\n repo\n\n\nUpdate the \nfastlane-plugin-[plugin_name].gemspec\n file so that the \nspec.homepage\n points to your github repo.\n\n\nPublish the first release of your plugin:\n\n\n\n\nbundle install\nrake install\nrake release\n\n\n\n\nNow all your users can run \nfastlane add_plugin [plugin_name]\n to install and use your plugin.\n\n\nGitHub\n\n\nIf for some reason you don't want to use RubyGems, you can also make your plugin available on GitHub. Your users then need to add the following to the \nPluginfile\n\n\ngem \nfastlane-plugin-[plugin_name]\n, git: \nhttps://github.com/[user]/[plugin_name]\n\n\n\n\n\nAdvanced\n\n\nMultiple actions in one plugin\n\n\nLet's assume you work on a \nfastlane\n plugin for project management software. You could call it \nfastlane-plugin-pm\n and it may contain any number of actions and helpers, just add them to your \nactions\n folder. Make sure to mention the available actions in your plugin's \nREADME.md\n.", 
            "title": "Create your own plugin"
        }, 
        {
            "location": "/plugins/CreatePlugin/#fastlane-plugins", 
            "text": "The instructions below require  fastlane  1.93.0 or higher", 
            "title": "fastlane Plugins"
        }, 
        {
            "location": "/plugins/CreatePlugin/#local-actions", 
            "text": "You can create your own actions to extend the functionality of fastlane for your project. The action you create will behave exactly like the built in actions.  Just run  fastlane new_action , enter the name of the action and edit the generated Ruby file in  fastlane/actions/[action_name].rb . After you finished writing your action, add it to your version control, so it is available for your whole team.  From then on, you can just use your action in your  Fastfile , just like any other action.", 
            "title": "Local actions"
        }, 
        {
            "location": "/plugins/CreatePlugin/#submitting-the-action-to-the-fastlane-main-repo", 
            "text": "Please be aware we may not accept all actions submitted to be bundled with  fastlane . Before you submit a pull request adding the action to the  fastlane  code base, submit an issue proposing the new action and why it should be built-in.  In general we tend to accept actions that   Generally usable for a big majority of developers (e.g. basic interactions with git)  Solve pain points for mobile app developers (iOS and Android)  have an easy to read documentation and great test coverage   In general, we might not accept actions that   Solve specific use-cases for only a small subset of developers  Access the API of a third party service, the third party service should own and maintain the action  Complex actions, that will require a lot of work to maintain in the future  Everything that isn't mobile developer related", 
            "title": "Submitting the action to the fastlane main repo"
        }, 
        {
            "location": "/plugins/CreatePlugin/#plugins", 
            "text": "fastlane  is an open platform and we enable every developer to extend it to fit their needs. That's why we built a plugin system that allows you and your company to provide  fastlane  plugins to other  fastlane  users. You have the full power and responsibility of maintaining your plugin and keeping it up to date. This is useful if you maintain your own library or web service, and want to make sure the  fastlane  plugin is always up to date.", 
            "title": "Plugins"
        }, 
        {
            "location": "/plugins/CreatePlugin/#find-a-plugin", 
            "text": "Head over the  AvailablePlugins.md  for a list of plugins you can use.  List all available plugins using  fastlane search_plugins  To search for something specific   fastlane search_plugins [query]", 
            "title": "Find a plugin"
        }, 
        {
            "location": "/plugins/CreatePlugin/#add-a-plugin-to-your-project", 
            "text": "fastlane add_plugin [name]  fastlane  will assist you on setting up your project to start using plugins.  This will:   Add the plugin to  fastlane/Pluginfile  Make sure your  fastlane/Pluginfile  is properly referenced from your  ./Gemfile  Run  fastlane install_plugins  to make sure all required dependencies are installed on your local machine (this step might ask for your admin password to install Ruby gems)  You'll have 3 new files, that should all be checked into version control:  Gemfile ,  Gemfile.lock  and  fastlane/Pluginfile", 
            "title": "Add a plugin to your project"
        }, 
        {
            "location": "/plugins/CreatePlugin/#plugin-source", 
            "text": "Your  fastlane/Pluginfile  contains the list of all  fastlane  plugins your project uses. The  Pluginfile  is a  Gemfile  that gets imported from your main  Gemfile .\nYou specificy all dependencies, including the required version numbers:  # Fetched from RubyGems.org\ngem  fastlane-plugin-xcversion \n\n# Fetched from GitHub\ngem  fastlane-plugin-xcversion , git:  https://github.com/fastlane/fastlane-plugin-xcversion \n\n# Fetched from a local directory\ngem  fastlane-plugin-xcversion , path:  ../fastlane-plugin-xcversion \n\n# Specify a version requirements\ngem  fastlane-plugin-xcversion ,  1.1.0 \ngem  fastlane-plugin-xcversion ,  = 1.0   More information about a Gemfile", 
            "title": "Plugin Source"
        }, 
        {
            "location": "/plugins/CreatePlugin/#install-plugins-on-another-machine", 
            "text": "To make sure all plugins are installed on the local machine, run  fastlane install_plugins", 
            "title": "Install plugins on another machine"
        }, 
        {
            "location": "/plugins/CreatePlugin/#remove-a-plugin", 
            "text": "Open your  fastlane/Pluginfile  and remove the line that looks like this  gem  fastlane-plugin-[plugin_name]", 
            "title": "Remove a plugin"
        }, 
        {
            "location": "/plugins/CreatePlugin/#create-your-own-plugin", 
            "text": "cd ~/new/folder/\n\nfastlane new_plugin [plugin_name]   fastlane  creates the directory structure that's needed to be a valid Ruby gem  Edit the  lib/fastlane/plugin/[plugin_name]/actions/[plugin_name].rb  and implement your action  Easily test the plugin locally by running  fastlane add_plugin  in your project's directory and specifying the local path when asked for it", 
            "title": "Create your own plugin"
        }, 
        {
            "location": "/plugins/CreatePlugin/#new-plugin-for-existing-gem", 
            "text": "If you already have an exiting gem you want to provide a  fastlane  plugin for, you'll still have to create a new Ruby gem. The reason for that is the way plugins are imported.  The example project  xcake  contains a folder named  fastlane-plugin-xcake .  All you have to do if you have an exiting gem:   Navigate to your gem  fastlane new_plugin [plugin_name]  Inside the newly created folder, edit the  fastlane-plugin-[plugin_name].gemspec  and add your gem as a dependency. It is recommended to also specify a version number requirement", 
            "title": "New plugin for existing gem"
        }, 
        {
            "location": "/plugins/CreatePlugin/#publishing-your-plugin", 
            "text": "", 
            "title": "Publishing your plugin"
        }, 
        {
            "location": "/plugins/CreatePlugin/#rubygems", 
            "text": "The recommended way to publish your plugin is to publish it on  RubyGems.org . Follow the steps below to publish your plugin.   Create an account at  RubyGems.org  Publish your plugin to a  GitHub  repo  Update the  fastlane-plugin-[plugin_name].gemspec  file so that the  spec.homepage  points to your github repo.  Publish the first release of your plugin:   bundle install\nrake install\nrake release  Now all your users can run  fastlane add_plugin [plugin_name]  to install and use your plugin.", 
            "title": "RubyGems"
        }, 
        {
            "location": "/plugins/CreatePlugin/#github", 
            "text": "If for some reason you don't want to use RubyGems, you can also make your plugin available on GitHub. Your users then need to add the following to the  Pluginfile  gem  fastlane-plugin-[plugin_name] , git:  https://github.com/[user]/[plugin_name]", 
            "title": "GitHub"
        }, 
        {
            "location": "/plugins/CreatePlugin/#advanced", 
            "text": "", 
            "title": "Advanced"
        }, 
        {
            "location": "/plugins/CreatePlugin/#multiple-actions-in-one-plugin", 
            "text": "Let's assume you work on a  fastlane  plugin for project management software. You could call it  fastlane-plugin-pm  and it may contain any number of actions and helpers, just add them to your  actions  folder. Make sure to mention the available actions in your plugin's  README.md .", 
            "title": "Multiple actions in one plugin"
        }, 
        {
            "location": "/plugins/PluginsTroubleshooting/", 
            "text": "fastlane plugins troubleshooting\n\n\nIf you're having trouble calling a plugin action, here is a simple guide on how to resolve the issue:\n\n\nMake sure fastlane is up to date\n\n\nRun \nfastlane -v\n and \nbundle exec fastlane -v\n and make sure it's at least version 1.93.0.\n\n\nUpdate your plugins\n\n\nRun \nfastlane update_plugins\n to make sure to have all the latest plugins and their dependencies installed.\n\n\nUse \nbundle exec\n\n\nRun \nfastlane\n using \nbundle exec fastlane [lane]\n to make sure your plugins are properly loaded.\n\n\nThis is required when you use plugins from a local path or a git remote.\n\n\nUse the \n--verbose\n mode\n\n\nRunning \nfastlane [lane] --verbose\n will show a lot more information that might be useful to resolve the issue.\n\n\nMake sure the action name is correct\n\n\nA plugin can contain any number of actions. Make sure to read the docs for the plugin itself!\n\n\nAdditionally check out the source code of the plugin:\n\n\nlib/fastlane/plugin/[plugin_name]/actions/[action_name].rb\n\n\n\n\nOpen the \n[action_name].rb\n file and make sure the name of the class on line 3 looks like this:\n\n\nclass [ActionName]Action \n Action\n\n\n\n\nNote how the name of the class should be capitalised and have \nAction\n appended in the name. Additionally this class must be a subclass of \nAction\n.\n\n\nGemfile and Pluginfile\n\n\nYour \nGemfile\n should look something like this:\n\n\ngem \nfastlane\n\n\nplugins_path = File.join(File.dirname(__FILE__), 'fastlane', 'Pluginfile')\neval(File.read(plugins_path), binding) if File.exist?(plugins_path)\n\n\n\n\nYour \nPluginfile\n should look something like this\n\n\n# Autogenerated by fastlane\n\ngem 'fastlane-plugin-ruby'\n\n\n\n\nBuilding your own plugin\n\n\nIf you have issues with running your local plugins during plugin development, make sure to run\n\n\nbundle install --with development\n\n\n\n\nto install all required development dependencies\n\n\nMore help\n\n\nIf it's still not working for you, please \nsubmit a new GitHub issue\n with your \nGemfile\n, \nGemfile.lock\n, \nPluginfile\n, \nFastfile\n and terminal output when running \nfastlane\n using the \n--verbose\n flag.", 
            "title": "Plugins Troubleshooting"
        }, 
        {
            "location": "/plugins/PluginsTroubleshooting/#fastlane-plugins-troubleshooting", 
            "text": "If you're having trouble calling a plugin action, here is a simple guide on how to resolve the issue:", 
            "title": "fastlane plugins troubleshooting"
        }, 
        {
            "location": "/plugins/PluginsTroubleshooting/#make-sure-fastlane-is-up-to-date", 
            "text": "Run  fastlane -v  and  bundle exec fastlane -v  and make sure it's at least version 1.93.0.", 
            "title": "Make sure fastlane is up to date"
        }, 
        {
            "location": "/plugins/PluginsTroubleshooting/#update-your-plugins", 
            "text": "Run  fastlane update_plugins  to make sure to have all the latest plugins and their dependencies installed.", 
            "title": "Update your plugins"
        }, 
        {
            "location": "/plugins/PluginsTroubleshooting/#use-bundle-exec", 
            "text": "Run  fastlane  using  bundle exec fastlane [lane]  to make sure your plugins are properly loaded.  This is required when you use plugins from a local path or a git remote.", 
            "title": "Use bundle exec"
        }, 
        {
            "location": "/plugins/PluginsTroubleshooting/#use-the-verbose-mode", 
            "text": "Running  fastlane [lane] --verbose  will show a lot more information that might be useful to resolve the issue.", 
            "title": "Use the --verbose mode"
        }, 
        {
            "location": "/plugins/PluginsTroubleshooting/#make-sure-the-action-name-is-correct", 
            "text": "A plugin can contain any number of actions. Make sure to read the docs for the plugin itself!  Additionally check out the source code of the plugin:  lib/fastlane/plugin/[plugin_name]/actions/[action_name].rb  Open the  [action_name].rb  file and make sure the name of the class on line 3 looks like this:  class [ActionName]Action   Action  Note how the name of the class should be capitalised and have  Action  appended in the name. Additionally this class must be a subclass of  Action .", 
            "title": "Make sure the action name is correct"
        }, 
        {
            "location": "/plugins/PluginsTroubleshooting/#gemfile-and-pluginfile", 
            "text": "Your  Gemfile  should look something like this:  gem  fastlane \n\nplugins_path = File.join(File.dirname(__FILE__), 'fastlane', 'Pluginfile')\neval(File.read(plugins_path), binding) if File.exist?(plugins_path)  Your  Pluginfile  should look something like this  # Autogenerated by fastlane\n\ngem 'fastlane-plugin-ruby'", 
            "title": "Gemfile and Pluginfile"
        }, 
        {
            "location": "/plugins/PluginsTroubleshooting/#building-your-own-plugin", 
            "text": "If you have issues with running your local plugins during plugin development, make sure to run  bundle install --with development  to install all required development dependencies", 
            "title": "Building your own plugin"
        }, 
        {
            "location": "/plugins/PluginsTroubleshooting/#more-help", 
            "text": "If it's still not working for you, please  submit a new GitHub issue  with your  Gemfile ,  Gemfile.lock ,  Pluginfile ,  Fastfile  and terminal output when running  fastlane  using the  --verbose  flag.", 
            "title": "More help"
        }, 
        {
            "location": "/best-practices/Gitignore/", 
            "text": "Gitignore\n\n\nIf you use git, it is recommended to keep the \nfastlane\n configuration files in your repository. You may want to add the following lines to your \n.gitignore\n file to exclude some generated and temporary files:\n\n\n# fastlane specific\nfastlane/report.xml\n\n# deliver temporary files\nfastlane/Preview.html\n\n# snapshot generated screenshots\nfastlane/screenshots\n\n# scan temporary files\nfastlane/test_output\n\n\n\n\nIt is recommended to not store the screenshots in the git repo. Instead, use fastlane to re-generate the screenshots whenever they are needed.", 
            "title": "Gitignore"
        }, 
        {
            "location": "/best-practices/Gitignore/#gitignore", 
            "text": "If you use git, it is recommended to keep the  fastlane  configuration files in your repository. You may want to add the following lines to your  .gitignore  file to exclude some generated and temporary files:  # fastlane specific\nfastlane/report.xml\n\n# deliver temporary files\nfastlane/Preview.html\n\n# snapshot generated screenshots\nfastlane/screenshots\n\n# scan temporary files\nfastlane/test_output  It is recommended to not store the screenshots in the git repo. Instead, use fastlane to re-generate the screenshots whenever they are needed.", 
            "title": "Gitignore"
        }, 
        {
            "location": "/best-practices/ContinuousIntegration/", 
            "text": "Continuous Integration\n\n\nJenkins Integration\n\n\n(or any other Continuous Integration system)\n\n\nDeploying from your own computer isn't cool. You know what's cool? Letting a remote server publish app updates for you.\n\n\nfastlane\n automatically generates a JUnit report for you. This allows Continuous Integration systems, like \nJenkins\n, access the results of your deployment.\n\n\nInstallation\n\n\nThe recommended way to install \nJenkins\n is through \nhomebrew\n:\n\n\nbrew update \n brew install jenkins\n\n\nFrom now on start \nJenkins\n by running:\n\n\njenkins\n\n\n\n\nTo store the password in the Keychain of your remote machine, I recommend running \nsigh\n or \ndeliver\n using ssh or remote desktop at least once.\n\n\nDeploy Strategy\n\n\nYou should \nnot\n deploy a new App Store update after every commit, since you still have to wait 1-2 weeks for the review. Instead I recommend using Git Tags, or custom triggers to deploy a new update.\n\n\nYou can set up your own \nRelease\n job, which is only triggered manually.\n\n\nPlugins\n\n\nI recommend the following plugins:\n\n\n\n\nHTML Publisher Plugin\n:\n Can be used to show the generated screenshots right inside Jenkins.\n\n\nAnsiColor Plugin\n:\n Used to show the coloured output of the fastlane tools. Don\u2019t forget to enable \nColor ANSI Console Output\n in the \nBuild Environment\n or your project.\n\n\nRebuild Plugin\n:\n This plugin will save you a lot of time.\n\n\nKeychains and Provisioning Profiles Plugin\n:\n Manages keychains across Jenkins installations.\n\n\n\n\nBuild Step\n\n\nUse the following as your build step:\n\n\nfastlane appstore\n\n\n\n\nReplace \nappstore\n with the lane you want to use.\n\n\nsetup_jenkins\n\n\nYou can use \nsetup_jenkins\n action which integrates well with the \nKeychains and Provisioning Profiles Plugin\n. Selected keychain will automatically unlocked and the selected code signing identity will be used. Also all build results, like IPA files, archives, dSYMs and result bundles will be stored in the \n./output\n folder in the job workspace. In additions \nsetup_jenkins\n will create separate derived data folder for each job (in the \n./derivedData\n).\n\n\nUnder the hood \nsetup_jenkins\n configures other actions like: \ngym\n, \nscan\n, \nxcodebuild\n, \nbackup_xcarchive\n and \nclear_derived_data\n.\n\n\nTest Results and Screenshots\n\n\nTo show the \ndeployment result\n right in \nJenkins\n\n\n\n\nAdd post-build action\n\n\nPublish JUnit test result report\n\n\nTest report XMLs\n: \nfastlane/report.xml\n\n\n\n\nTo show the \ngenerated screenhots\n right in \nJenkins\n\n\n\n\nAdd post-build action\n\n\nPublish HTML reports\n\n\nHTML directory to archive\n: \nfastlane/screenshots\n\n\nIndex page\n: \nscreenshots.html\n\n\n\n\nSave and run. The result should look like this:\n\n\n\n\nCircle Integration\n\n\nTo run fastlane on Circle as your CI, first create a \nGemfile\n in the root of your project with the following content\n\n\nsource \nhttps://rubygems.org\n\n\ngem \nfastlane\n\n\n\n\n\nand run\n\n\ngem install bundler \n bundle update\n\n\n\n\nThis will create a \nGemfile.lock\n, that defines all Ruby dependencies. Make sure to commit both files to version control.\n\n\nNext, use the following \ncircle.yml\n file\n\n\nmachine:\n  xcode:\n    version: \n7.3\n\ndependencies:\n  override:\n    - bundle check --path=vendor/bundle || bundle install --path=vendor/bundle --jobs=4 --retry=3 --without development\n  cache_directories:\n    - vendor/bundle\ntest:\n  override:\n    - bundle exec fastlane test\n\n\n\n\nThis will automatically cache the installed gems on Circle, making your CI builds much faster :rocket:\n\n\nBamboo Integration\n\n\nRepository setup\n\n\nIn bamboo under \nLinked Repositories\n (where you configure your git repo) under \nAdvanced Settings\n is an option called \nExclude changesets\n\n\nThis dialog will allow you to enter a regular expression that if a commit matches, a build will not be triggered.  \n\n\nFor example, if your \nFastfile\n is configured to make a commit message in the style of \n\n\nBuild Version bump by fastlane to Version [0.3] Build [8]\n\n\n\n\nThen you could use the following regex to ignore these commits\n\n\n^.*Build Version bump by fastlane.*$\n\n\n\n\nSetting repository remote\n\n\nBy default bamboo will do an anonymous shallow clone of the repo.  This will not preserve the  \ngit remote\n information nor the list of tags.  If you are using bamboo to create commits you may want to use a code block similar to the following:\n\n\n# In prep for eventually committing a version/build bump - set the git params\nsh('git config user.name \nCOMMITTER USERNAME\n')\nsh('git config user.email \nCOMITTER EMAIL\n')   \n\n# Bamboo does an anonymous checkout so in order to update the build versions must set the git repo URL\ngit_remote_cmd = 'git remote set-url origin ' + ENV['bamboo_repository_git_repositoryUrl']\nsh(git_remote_cmd) \n\n\n\n\nSpeeding up build times with carthage\n\n\nCarthage is a wonderful dependency manager but once you are start using a large number of frameworks, things can start to slow down, especially if your CI server has to run \ncarthage\n EVERY time you check in a small line of code.\n\n\nOne way to make build times faster is to break your work up into two separate build plans (\nthis can get even more funky if you start having multiple branches\n)\n\n\nThe general idea is to make a build plan: \nProject - Artifacts\n that builds the \nCarthage\n directory and stores it as a shared artifact.  Then you create a second build plan \nProject - Fastlane\n that pulls down the \nCarthage\n directory and runs \nfastlane\n.  \n\n\nArtifact Plan\n\n\nUse a very simple setup to create this build plan.  First off you want to make sure this plan is manually triggered only - because you only need to run it whenever the \nCartfile\n changes as opposed to after ever single commit.  It could also be on a nightly build perhaps if you desire.\n\n\nStages / Jobs / Tasks\n\n\nThis plan consists of 1 Job, 1 Stage and 2 Tasks\n\n\n\n\nTask 1: \nSource Code Checkout\n\n\nTask 2: \nScript\n (\ncarthage update\n)\n\n\n\n\nArtifact definitions\n\n\nCreate a shared artifact with the following info:\n\n\n\n\nName:\n CarthageFolder\n\n\nLocation:\n (leave blank) \n\n\nCopy Pattern:\n Carthage/Build/** \n\n\n\n\nOptional\n: You may want to automatically make the \nFastlane Plan\n trigger whenever this plan is built\n\n\nFastlane Plan\n\n\nWhen configuring fastlane to run in this setup you need to make sure that you are not calling either:\n\n\nreset_git_repo(force: true)\n\n\n\n\nor\n\n\nensure_git_status_clean\n\n\n\n\nas these calls will either fail the build or delete the \nCarthage\n directory.  Additionally you want to remove any \ncarthage\n tasks from inside your \nFastfile\n as \ncarthage\n is now happening externally to the build.\n\n\nBuild plan setup\n\n\nWhat this build plan does is it checks out the source code, then it downloads the entire \nCarthage/Build/\n directory into your local project - which is exactly what would be created from \ncarthage bootstrap\n and then it runs \nfastlane\n\n\n\n\nTask 1: \nSource Code Checkout\n\n\nTask 2: \nArtifact Download\n\n\nTask 3: \nFastlane", 
            "title": "Continuous Integration"
        }, 
        {
            "location": "/best-practices/ContinuousIntegration/#continuous-integration", 
            "text": "", 
            "title": "Continuous Integration"
        }, 
        {
            "location": "/best-practices/ContinuousIntegration/#jenkins-integration", 
            "text": "(or any other Continuous Integration system)  Deploying from your own computer isn't cool. You know what's cool? Letting a remote server publish app updates for you.  fastlane  automatically generates a JUnit report for you. This allows Continuous Integration systems, like  Jenkins , access the results of your deployment.", 
            "title": "Jenkins Integration"
        }, 
        {
            "location": "/best-practices/ContinuousIntegration/#installation", 
            "text": "The recommended way to install  Jenkins  is through  homebrew :  brew update   brew install jenkins  From now on start  Jenkins  by running:  jenkins  To store the password in the Keychain of your remote machine, I recommend running  sigh  or  deliver  using ssh or remote desktop at least once.", 
            "title": "Installation"
        }, 
        {
            "location": "/best-practices/ContinuousIntegration/#deploy-strategy", 
            "text": "You should  not  deploy a new App Store update after every commit, since you still have to wait 1-2 weeks for the review. Instead I recommend using Git Tags, or custom triggers to deploy a new update.  You can set up your own  Release  job, which is only triggered manually.", 
            "title": "Deploy Strategy"
        }, 
        {
            "location": "/best-practices/ContinuousIntegration/#plugins", 
            "text": "I recommend the following plugins:   HTML Publisher Plugin :  Can be used to show the generated screenshots right inside Jenkins.  AnsiColor Plugin :  Used to show the coloured output of the fastlane tools. Don\u2019t forget to enable  Color ANSI Console Output  in the  Build Environment  or your project.  Rebuild Plugin :  This plugin will save you a lot of time.  Keychains and Provisioning Profiles Plugin :  Manages keychains across Jenkins installations.", 
            "title": "Plugins"
        }, 
        {
            "location": "/best-practices/ContinuousIntegration/#build-step", 
            "text": "Use the following as your build step:  fastlane appstore  Replace  appstore  with the lane you want to use.", 
            "title": "Build Step"
        }, 
        {
            "location": "/best-practices/ContinuousIntegration/#setup_jenkins", 
            "text": "You can use  setup_jenkins  action which integrates well with the  Keychains and Provisioning Profiles Plugin . Selected keychain will automatically unlocked and the selected code signing identity will be used. Also all build results, like IPA files, archives, dSYMs and result bundles will be stored in the  ./output  folder in the job workspace. In additions  setup_jenkins  will create separate derived data folder for each job (in the  ./derivedData ).  Under the hood  setup_jenkins  configures other actions like:  gym ,  scan ,  xcodebuild ,  backup_xcarchive  and  clear_derived_data .", 
            "title": "setup_jenkins"
        }, 
        {
            "location": "/best-practices/ContinuousIntegration/#test-results-and-screenshots", 
            "text": "To show the  deployment result  right in  Jenkins   Add post-build action  Publish JUnit test result report  Test report XMLs :  fastlane/report.xml   To show the  generated screenhots  right in  Jenkins   Add post-build action  Publish HTML reports  HTML directory to archive :  fastlane/screenshots  Index page :  screenshots.html   Save and run. The result should look like this:", 
            "title": "Test Results and Screenshots"
        }, 
        {
            "location": "/best-practices/ContinuousIntegration/#circle-integration", 
            "text": "To run fastlane on Circle as your CI, first create a  Gemfile  in the root of your project with the following content  source  https://rubygems.org \n\ngem  fastlane   and run  gem install bundler   bundle update  This will create a  Gemfile.lock , that defines all Ruby dependencies. Make sure to commit both files to version control.  Next, use the following  circle.yml  file  machine:\n  xcode:\n    version:  7.3 \ndependencies:\n  override:\n    - bundle check --path=vendor/bundle || bundle install --path=vendor/bundle --jobs=4 --retry=3 --without development\n  cache_directories:\n    - vendor/bundle\ntest:\n  override:\n    - bundle exec fastlane test  This will automatically cache the installed gems on Circle, making your CI builds much faster :rocket:", 
            "title": "Circle Integration"
        }, 
        {
            "location": "/best-practices/ContinuousIntegration/#bamboo-integration", 
            "text": "", 
            "title": "Bamboo Integration"
        }, 
        {
            "location": "/best-practices/ContinuousIntegration/#repository-setup", 
            "text": "In bamboo under  Linked Repositories  (where you configure your git repo) under  Advanced Settings  is an option called  Exclude changesets  This dialog will allow you to enter a regular expression that if a commit matches, a build will not be triggered.    For example, if your  Fastfile  is configured to make a commit message in the style of   Build Version bump by fastlane to Version [0.3] Build [8]  Then you could use the following regex to ignore these commits  ^.*Build Version bump by fastlane.*$", 
            "title": "Repository setup"
        }, 
        {
            "location": "/best-practices/ContinuousIntegration/#setting-repository-remote", 
            "text": "By default bamboo will do an anonymous shallow clone of the repo.  This will not preserve the   git remote  information nor the list of tags.  If you are using bamboo to create commits you may want to use a code block similar to the following:  # In prep for eventually committing a version/build bump - set the git params\nsh('git config user.name  COMMITTER USERNAME ')\nsh('git config user.email  COMITTER EMAIL ')   \n\n# Bamboo does an anonymous checkout so in order to update the build versions must set the git repo URL\ngit_remote_cmd = 'git remote set-url origin ' + ENV['bamboo_repository_git_repositoryUrl']\nsh(git_remote_cmd)", 
            "title": "Setting repository remote"
        }, 
        {
            "location": "/best-practices/ContinuousIntegration/#speeding-up-build-times-with-carthage", 
            "text": "Carthage is a wonderful dependency manager but once you are start using a large number of frameworks, things can start to slow down, especially if your CI server has to run  carthage  EVERY time you check in a small line of code.  One way to make build times faster is to break your work up into two separate build plans ( this can get even more funky if you start having multiple branches )  The general idea is to make a build plan:  Project - Artifacts  that builds the  Carthage  directory and stores it as a shared artifact.  Then you create a second build plan  Project - Fastlane  that pulls down the  Carthage  directory and runs  fastlane .", 
            "title": "Speeding up build times with carthage"
        }, 
        {
            "location": "/best-practices/ContinuousIntegration/#artifact-plan", 
            "text": "Use a very simple setup to create this build plan.  First off you want to make sure this plan is manually triggered only - because you only need to run it whenever the  Cartfile  changes as opposed to after ever single commit.  It could also be on a nightly build perhaps if you desire.", 
            "title": "Artifact Plan"
        }, 
        {
            "location": "/best-practices/ContinuousIntegration/#stages-jobs-tasks", 
            "text": "This plan consists of 1 Job, 1 Stage and 2 Tasks   Task 1:  Source Code Checkout  Task 2:  Script  ( carthage update )", 
            "title": "Stages / Jobs / Tasks"
        }, 
        {
            "location": "/best-practices/ContinuousIntegration/#artifact-definitions", 
            "text": "Create a shared artifact with the following info:   Name:  CarthageFolder  Location:  (leave blank)   Copy Pattern:  Carthage/Build/**    Optional : You may want to automatically make the  Fastlane Plan  trigger whenever this plan is built", 
            "title": "Artifact definitions"
        }, 
        {
            "location": "/best-practices/ContinuousIntegration/#fastlane-plan", 
            "text": "When configuring fastlane to run in this setup you need to make sure that you are not calling either:  reset_git_repo(force: true)  or  ensure_git_status_clean  as these calls will either fail the build or delete the  Carthage  directory.  Additionally you want to remove any  carthage  tasks from inside your  Fastfile  as  carthage  is now happening externally to the build.", 
            "title": "Fastlane Plan"
        }, 
        {
            "location": "/best-practices/ContinuousIntegration/#build-plan-setup", 
            "text": "What this build plan does is it checks out the source code, then it downloads the entire  Carthage/Build/  directory into your local project - which is exactly what would be created from  carthage bootstrap  and then it runs  fastlane   Task 1:  Source Code Checkout  Task 2:  Artifact Download  Task 3:  Fastlane", 
            "title": "Build plan setup"
        }, 
        {
            "location": "/best-practices/Keys/", 
            "text": "fastlane keys\n\n\nThis guide will show you the best ways to store and use your keys for services like Crashlytics, Slack, etc.\n\n\nIn your \nFastfile\n\n\nlane :beta do\n  crashlytics(api_token: \n123abc\n, build_secret: \nsecret_key\n)\nend\n\n\n\n\nor if you want to only define the keys once and use it multiple times\n\n\nENV[\nCRASHLYTICS_API_TOKEN\n] = \n123abc\n\nENV[\nCRASHLYTICS_BUILD_SECRET\n] = \nsecret_key\n\n\nlane :beta do\n  crashlytics\nend\n\n\n\n\nThis is the most straight forward and easiest solution, but might cause a few issues:\n\n\n\n\nIf you ever decide to open source your application you'll have to make sure to remove the keys from your git history\n\n\nIf your keys got invalidated for whatever reason and you decide to rollback your code base to an earlier stage the keys will also be rolled back\n\n\n\n\nTo get the name of the available environment variables, run \nfastlane action [action_name]\n.\n\n\nBash Profile\n\n\nTo not store your keys in \ngit\n, you can pass all parameters of all actions using environment variables.\n\n\nYou can edit your \n~/.bash_profile\n to include something like\n\n\nexport SLACK_URL=\nhttps://hooks.slack.com/services/T03NA19Q5/...\n\nexport CRASHLYTICS_API_TOKEN=\n123abc\n\n\n\n\n\nIf you use a different shell (e.g. \nzshell\n) you'll need to edit \n~/.zshrc\n instead.\n\n\nAfter editing the \n.bash_profile\n you need to either re-open your terminal session or run \nsource ~/.bash_profile\n.\n\n\nDisadvantages\n\n\n\n\nEvery terminal tool you run gets access to your environment variables. \n\n\nYou have to edit your bash profile on every computer you want to run \nfastlane\n from\n\n\nThe bash profile isn't automatically loaded by some CI-systems like Jenkins\n\n\n\n\nTo get the name of the available environment variables, run \nfastlane action [action_name]\n.\n\n\ndotenv\n\n\ndotenv\n is a system to store your environment in a file that is project specific. Basically you have a hidden file in your project containing all the environment variables for your project.\n\n\nYou can store a default configuration in \n.env.default\n which will be loaded by \nfastlane\n automatically.\n\n\nSLACK_URL=\nhttps://hooks.slack.com/services/T03NA19Q5/...\n\nCRASHLYTICS_API_TOKEN=\n123abc\n\n\n\n\n\nYou might want different configurations depending on your environment.\n\n\nfastlane beta --env development\n\n\n\n\nand store the configuration in \n.env.development\n with all keys for the development environment.\n\n\nInstall \n[sudo] gem install dotenv\n or add \ndotenv\n to your \nGemfile\n. More information about the \nrecommend way to install gems\n.\n\n\nTo get the name of the available environment variables, run \nfastlane action [action_name]\n.", 
            "title": "Keys"
        }, 
        {
            "location": "/best-practices/Keys/#fastlane-keys", 
            "text": "This guide will show you the best ways to store and use your keys for services like Crashlytics, Slack, etc.", 
            "title": "fastlane keys"
        }, 
        {
            "location": "/best-practices/Keys/#in-your-fastfile", 
            "text": "lane :beta do\n  crashlytics(api_token:  123abc , build_secret:  secret_key )\nend  or if you want to only define the keys once and use it multiple times  ENV[ CRASHLYTICS_API_TOKEN ] =  123abc \nENV[ CRASHLYTICS_BUILD_SECRET ] =  secret_key \n\nlane :beta do\n  crashlytics\nend  This is the most straight forward and easiest solution, but might cause a few issues:   If you ever decide to open source your application you'll have to make sure to remove the keys from your git history  If your keys got invalidated for whatever reason and you decide to rollback your code base to an earlier stage the keys will also be rolled back   To get the name of the available environment variables, run  fastlane action [action_name] .", 
            "title": "In your Fastfile"
        }, 
        {
            "location": "/best-practices/Keys/#bash-profile", 
            "text": "To not store your keys in  git , you can pass all parameters of all actions using environment variables.  You can edit your  ~/.bash_profile  to include something like  export SLACK_URL= https://hooks.slack.com/services/T03NA19Q5/... \nexport CRASHLYTICS_API_TOKEN= 123abc   If you use a different shell (e.g.  zshell ) you'll need to edit  ~/.zshrc  instead.  After editing the  .bash_profile  you need to either re-open your terminal session or run  source ~/.bash_profile .  Disadvantages   Every terminal tool you run gets access to your environment variables.   You have to edit your bash profile on every computer you want to run  fastlane  from  The bash profile isn't automatically loaded by some CI-systems like Jenkins   To get the name of the available environment variables, run  fastlane action [action_name] .", 
            "title": "Bash Profile"
        }, 
        {
            "location": "/best-practices/Keys/#dotenv", 
            "text": "dotenv  is a system to store your environment in a file that is project specific. Basically you have a hidden file in your project containing all the environment variables for your project.  You can store a default configuration in  .env.default  which will be loaded by  fastlane  automatically.  SLACK_URL= https://hooks.slack.com/services/T03NA19Q5/... \nCRASHLYTICS_API_TOKEN= 123abc   You might want different configurations depending on your environment.  fastlane beta --env development  and store the configuration in  .env.development  with all keys for the development environment.  Install  [sudo] gem install dotenv  or add  dotenv  to your  Gemfile . More information about the  recommend way to install gems .  To get the name of the available environment variables, run  fastlane action [action_name] .", 
            "title": "dotenv"
        }, 
        {
            "location": "/Advanced/", 
            "text": "Advanced fastlane\n\n\nPassing Parameters\n\n\nTo pass parameters from the command line to your lane, use the following syntax:\n\n\nfastlane [lane] key:value key2:value2\n\nfastlane deploy submit:false build_number:24\n\n\n\n\nTo access those values, change your lane declaration to also include \n|options|\n\n\nbefore_all do |lane, options|\n  ...\nend\n\nbefore_each do |lane, options|\n  ...\nend\n\nlane :deploy do |options|\n  ...\n  if options[:submit]\n    # Only when submit is true\n  end\n  ...\n  increment_build_number(build_number: options[:build_number])\n  ...\nend\n\nafter_all do |lane, options|\n  ...\nend\n\nafter_each do |lane, options|\n  ...\nend\n\nerror do |lane, exception, options|\n  if options[:debug]\n    puts \nHi :)\n\n  end\nend\n\n\n\n\nSwitching lanes\n\n\nTo switch lanes while executing a lane, use the following code:\n\n\nlane :deploy do |options|\n  ...\n  build(release: true) # that's the important bit\n  hockey\n  ...\nend\n\nlane :staging do |options|\n  ...\n  build # it also works when you don't pass parameters\n  hockey\n  ...\nend\n\nlane :build do |options|\n  scheme = (options[:release] ? \nRelease\n : \nStaging\n)\n  ipa(scheme: scheme)\nend\n\n\n\n\nfastlane\n takes care of all the magic for you. You can call lanes of the same platform or a general lane outside of the \nplatform\n definition.\n\n\nPassing parameters is optional.\n\n\nReturning values\n\n\nAdditionally, you can retrieve the return value. In Ruby, the last line of the \nlane\n definition is the return value. Here is an example:\n\n\nlane :deploy do |options|\n  value = calculate(value: 3)\n  puts value # =\n 5\nend\n\nlane :calculate do |options|\n  ...\n  2 + options[:value] # the last line will always be the return value\nend\n\n\n\n\nbefore_each\n and \nafter_each\n blocks\n\n\nbefore_each\n blocks are called before any lane is called. This would include being called before each lane you've switched to.\n\n\nbefore_each do |lane, options|\n  ...\nend\n\n\n\n\nafter_each\n blocks are called after any lane is called. This would include being called after each lane you've switched to.\nJust like \nafter_all\n, \nafter_each\n is not called if an error occurs. The \nerror\n block should be used in this case.\n\n\nafter_each do |lane, options|\n  ...\nend\n\n\n\n\ne.g. With this scenario, \nbefore_each\n and \nafter_each\n would be called 4 times: before the \ndeploy\n lane, before the switch to \narchive\n, \nsign\n, and \nupload\n, and after each of these lanes as well.\n\n\nlane :deploy do\n  archive\n  sign\n  upload\nend\n\nlane :archive do\n  ...\nend\n\nlane :sign do\n  ...\nend\n\nlane :upload do\n  ...\nend\n\n\n\n\nRun actions directly\n\n\nIf you just want to try an action without adding them to your \nFastfile\n yet, you can use\n\n\nfastlane run notification message:\nMy Text\n title:\nThe Title\n\n\n\n\n\nTo get the avaiable options for any action run \nfastlane action [action_name]\n. You might not be able to set some kind of parameters using this method.\n\n\nShell values\n\n\nYou can get value from shell commands:\n\n\noutput = sh(\npod update\n)\n\n\n\n\nPriorities of parameters and options\n\n\nThe order in which \nfastlane\n tools take their values from\n\n\n\n\nCLI parameter (e.g. \ngym --scheme Example\n) or Fastfile (e.g. \ngym(scheme: 'Example')\n)\n\n\nEnvironment variable (e.g. \nGYM_SCHEME\n)\n\n\nTool specific config file (e.g. \nGymfile\n containing \nscheme 'Example'\n)\n\n\nDefault value (which might be taken from the \nAppfile\n, e.g. \napp_identifier\n from the \nAppfile\n)\n\n\nIf this value is required, you'll be asked for it (e.g. you have multiple schemes, you'll be asked for it)\n\n\n\n\nImporting another Fastfile\n\n\nWithin your \nFastfile\n you can import another \nFastfile\n using 2 methods:\n\n\nimport\n\n\nImport a \nFastfile\n from a local path\n\n\nimport \n../GeneralFastfile\n\n\noverride_lane :from_general do\n  ...\nend\n\n\n\n\nimport_from_git\n\n\nImport from another git repository, which you can use to have one git repo with a default \nFastfile\n for all your project\n\n\nimport_from_git(url: 'https://github.com/fastlane/fastlane/tree/master/fastlane')\n# or\nimport_from_git(url: 'git@github.com:MyAwesomeRepo/MyAwesomeFastlaneStandardSetup.git',\n               path: 'fastlane/Fastfile')\n\nlane :new_main_lane do\n  ...\nend\n\n\n\n\nThis will also automatically import all the local actions from this repo.\n\n\nNote\n\n\nYou should import the other \nFastfile\n on the top above your lane declarations. When defining a new lane \nfastlane\n will make sure to not run into any name conflicts. If you want to overwrite an existing lane (from the imported one), use the \noverride_lane\n keyword. \n\n\nEnvironment Variables\n\n\nYou can define environment variables in a \n.env\n or \n.env.default\n file in the same directory as your \nFastfile\n. Environment variables are loading using \ndotenv\n. Here's an example.\n\n\nWORKSPACE=YourApp.xcworkspace\nHOCKEYAPP_API_TOKEN=your-hockey-api-token\n\n\n\n\nfastlane\n also has a \n--env\n option that allows loading of environment specific \ndotenv\n files. \n.env\n and \n.env.default\n will be loaded before environment specific \ndotenv\n files are loaded. The naming convention for environment specific \ndotenv\n files is \n.env.\nenvironment\n\n\nFor example, \nfastlane \nlane-name\n --env development\n will load \n.env\n, \n.env.default\n, and \n.env.development\n\n\nLane Context\n\n\nThe different actions can \ncommunicate\n with each other using a shared hash. You can access them in your lanes with the following code.\n\n\nReplace \nVARIABLE_NAME_HERE\n with any of the following.\n\n\nlane_context[SharedValues::LANE_NAME]                 # The name of the current lane (stays the same when switching lanes)\nlane_context[SharedValues::BUILD_NUMBER]              # Generated by `increment_build_number`\nlane_context[SharedValues::VERSION_NUMBER]            # Generated by `increment_version_number`\nlane_context[SharedValues::SNAPSHOT_SCREENSHOTS_PATH] # Generated by _snapshot_\nlane_context[SharedValues::PRODUCE_APPLE_ID]          # The Apple ID of the newly created app\nlane_context[SharedValues::IPA_OUTPUT_PATH]           # Generated by _gym_\nlane_context[SharedValues::DSYM_OUTPUT_PATH]          # Generated by _gym_\nlane_context[SharedValues::SIGH_PROFILE_PATH]         # Generated by _sigh_\nlane_context[SharedValues::SIGH_UDID]                 # The UDID of the generated provisioning profile\nlane_context[SharedValues::HOCKEY_DOWNLOAD_LINK]      # Generated by `hockey`\n\n\n\n\nTo get information about the available lane variables, run \nfastlane action [action_name]\n.\n\n\nPrivate lanes\n\n\nSometimes you might have a lane that is used from different lanes, for example:\n\n\nlane :production do\n  ...\n  build(release: true)\n  appstore # Deploy to the AppStore\n  ...\nend\n\nlane :beta do\n  ...\n  build(release: false)\n  crashlytics # Distribute to testers\n  ...\nend\n\nlane :build do |options|\n  ...\n  ipa\n  ...\nend\n\n\n\n\nIt probably doesn't make sense to execute the \nbuild\n lane directly using \nfastlane build\n. You can hide this lane using\n\n\nprivate_lane :build do |options|\n  ...\nend\n\n\n\n\nThis will hide the lane from:\n\n\n\n\nfastlane lanes\n\n\nfastlane list\n\n\nfastlane docs\n\n\n\n\nAnd also, you can't call the private lane using \nfastlane build\n.\n\n\nThe resulting private lane can only be called from another lane using the lane switching technology.\n\n\nLoad own actions from external folder\n\n\nAdd this to the top of your \nFastfile\n.\n\n\nactions_path '../custom_actions_folder/'\n\n\n\n\nSkip update check when launching \nfastlane\n\n\nYou can set the environment variable \nFASTLANE_SKIP_UPDATE_CHECK\n to skip the update check.\n\n\nAdding Credentials\n\n\nYou can add credentials for use by \nfastlane\n to your keychain using the \nCredentialsManager\n command line interface. This is useful for situations like CI environments.\n\n\nAdding a Credential\n\n\nfastlane-credentials add --username felix@krausefx.com\nPassword: *********\nCredential felix@krausefx.com:********* added to keychain.\n\n\n\n\nRemoving a Credential\n\n\nfastlane-credentials remove --username felix@krausefx.com\npassword has been deleted.", 
            "title": "Advanced"
        }, 
        {
            "location": "/Advanced/#advanced-fastlane", 
            "text": "", 
            "title": "Advanced fastlane"
        }, 
        {
            "location": "/Advanced/#passing-parameters", 
            "text": "To pass parameters from the command line to your lane, use the following syntax:  fastlane [lane] key:value key2:value2\n\nfastlane deploy submit:false build_number:24  To access those values, change your lane declaration to also include  |options|  before_all do |lane, options|\n  ...\nend\n\nbefore_each do |lane, options|\n  ...\nend\n\nlane :deploy do |options|\n  ...\n  if options[:submit]\n    # Only when submit is true\n  end\n  ...\n  increment_build_number(build_number: options[:build_number])\n  ...\nend\n\nafter_all do |lane, options|\n  ...\nend\n\nafter_each do |lane, options|\n  ...\nend\n\nerror do |lane, exception, options|\n  if options[:debug]\n    puts  Hi :) \n  end\nend", 
            "title": "Passing Parameters"
        }, 
        {
            "location": "/Advanced/#switching-lanes", 
            "text": "To switch lanes while executing a lane, use the following code:  lane :deploy do |options|\n  ...\n  build(release: true) # that's the important bit\n  hockey\n  ...\nend\n\nlane :staging do |options|\n  ...\n  build # it also works when you don't pass parameters\n  hockey\n  ...\nend\n\nlane :build do |options|\n  scheme = (options[:release] ?  Release  :  Staging )\n  ipa(scheme: scheme)\nend  fastlane  takes care of all the magic for you. You can call lanes of the same platform or a general lane outside of the  platform  definition.  Passing parameters is optional.", 
            "title": "Switching lanes"
        }, 
        {
            "location": "/Advanced/#returning-values", 
            "text": "Additionally, you can retrieve the return value. In Ruby, the last line of the  lane  definition is the return value. Here is an example:  lane :deploy do |options|\n  value = calculate(value: 3)\n  puts value # =  5\nend\n\nlane :calculate do |options|\n  ...\n  2 + options[:value] # the last line will always be the return value\nend", 
            "title": "Returning values"
        }, 
        {
            "location": "/Advanced/#before_each-and-after_each-blocks", 
            "text": "before_each  blocks are called before any lane is called. This would include being called before each lane you've switched to.  before_each do |lane, options|\n  ...\nend  after_each  blocks are called after any lane is called. This would include being called after each lane you've switched to.\nJust like  after_all ,  after_each  is not called if an error occurs. The  error  block should be used in this case.  after_each do |lane, options|\n  ...\nend  e.g. With this scenario,  before_each  and  after_each  would be called 4 times: before the  deploy  lane, before the switch to  archive ,  sign , and  upload , and after each of these lanes as well.  lane :deploy do\n  archive\n  sign\n  upload\nend\n\nlane :archive do\n  ...\nend\n\nlane :sign do\n  ...\nend\n\nlane :upload do\n  ...\nend", 
            "title": "before_each and after_each blocks"
        }, 
        {
            "location": "/Advanced/#run-actions-directly", 
            "text": "If you just want to try an action without adding them to your  Fastfile  yet, you can use  fastlane run notification message: My Text  title: The Title   To get the avaiable options for any action run  fastlane action [action_name] . You might not be able to set some kind of parameters using this method.", 
            "title": "Run actions directly"
        }, 
        {
            "location": "/Advanced/#shell-values", 
            "text": "You can get value from shell commands:  output = sh( pod update )", 
            "title": "Shell values"
        }, 
        {
            "location": "/Advanced/#priorities-of-parameters-and-options", 
            "text": "The order in which  fastlane  tools take their values from   CLI parameter (e.g.  gym --scheme Example ) or Fastfile (e.g.  gym(scheme: 'Example') )  Environment variable (e.g.  GYM_SCHEME )  Tool specific config file (e.g.  Gymfile  containing  scheme 'Example' )  Default value (which might be taken from the  Appfile , e.g.  app_identifier  from the  Appfile )  If this value is required, you'll be asked for it (e.g. you have multiple schemes, you'll be asked for it)", 
            "title": "Priorities of parameters and options"
        }, 
        {
            "location": "/Advanced/#importing-another-fastfile", 
            "text": "Within your  Fastfile  you can import another  Fastfile  using 2 methods:", 
            "title": "Importing another Fastfile"
        }, 
        {
            "location": "/Advanced/#import", 
            "text": "Import a  Fastfile  from a local path  import  ../GeneralFastfile \n\noverride_lane :from_general do\n  ...\nend", 
            "title": "import"
        }, 
        {
            "location": "/Advanced/#import_from_git", 
            "text": "Import from another git repository, which you can use to have one git repo with a default  Fastfile  for all your project  import_from_git(url: 'https://github.com/fastlane/fastlane/tree/master/fastlane')\n# or\nimport_from_git(url: 'git@github.com:MyAwesomeRepo/MyAwesomeFastlaneStandardSetup.git',\n               path: 'fastlane/Fastfile')\n\nlane :new_main_lane do\n  ...\nend  This will also automatically import all the local actions from this repo.", 
            "title": "import_from_git"
        }, 
        {
            "location": "/Advanced/#note", 
            "text": "You should import the other  Fastfile  on the top above your lane declarations. When defining a new lane  fastlane  will make sure to not run into any name conflicts. If you want to overwrite an existing lane (from the imported one), use the  override_lane  keyword.", 
            "title": "Note"
        }, 
        {
            "location": "/Advanced/#environment-variables", 
            "text": "You can define environment variables in a  .env  or  .env.default  file in the same directory as your  Fastfile . Environment variables are loading using  dotenv . Here's an example.  WORKSPACE=YourApp.xcworkspace\nHOCKEYAPP_API_TOKEN=your-hockey-api-token  fastlane  also has a  --env  option that allows loading of environment specific  dotenv  files.  .env  and  .env.default  will be loaded before environment specific  dotenv  files are loaded. The naming convention for environment specific  dotenv  files is  .env. environment  For example,  fastlane  lane-name  --env development  will load  .env ,  .env.default , and  .env.development", 
            "title": "Environment Variables"
        }, 
        {
            "location": "/Advanced/#lane-context", 
            "text": "The different actions can  communicate  with each other using a shared hash. You can access them in your lanes with the following code.  Replace  VARIABLE_NAME_HERE  with any of the following.  lane_context[SharedValues::LANE_NAME]                 # The name of the current lane (stays the same when switching lanes)\nlane_context[SharedValues::BUILD_NUMBER]              # Generated by `increment_build_number`\nlane_context[SharedValues::VERSION_NUMBER]            # Generated by `increment_version_number`\nlane_context[SharedValues::SNAPSHOT_SCREENSHOTS_PATH] # Generated by _snapshot_\nlane_context[SharedValues::PRODUCE_APPLE_ID]          # The Apple ID of the newly created app\nlane_context[SharedValues::IPA_OUTPUT_PATH]           # Generated by _gym_\nlane_context[SharedValues::DSYM_OUTPUT_PATH]          # Generated by _gym_\nlane_context[SharedValues::SIGH_PROFILE_PATH]         # Generated by _sigh_\nlane_context[SharedValues::SIGH_UDID]                 # The UDID of the generated provisioning profile\nlane_context[SharedValues::HOCKEY_DOWNLOAD_LINK]      # Generated by `hockey`  To get information about the available lane variables, run  fastlane action [action_name] .", 
            "title": "Lane Context"
        }, 
        {
            "location": "/Advanced/#private-lanes", 
            "text": "Sometimes you might have a lane that is used from different lanes, for example:  lane :production do\n  ...\n  build(release: true)\n  appstore # Deploy to the AppStore\n  ...\nend\n\nlane :beta do\n  ...\n  build(release: false)\n  crashlytics # Distribute to testers\n  ...\nend\n\nlane :build do |options|\n  ...\n  ipa\n  ...\nend  It probably doesn't make sense to execute the  build  lane directly using  fastlane build . You can hide this lane using  private_lane :build do |options|\n  ...\nend  This will hide the lane from:   fastlane lanes  fastlane list  fastlane docs   And also, you can't call the private lane using  fastlane build .  The resulting private lane can only be called from another lane using the lane switching technology.", 
            "title": "Private lanes"
        }, 
        {
            "location": "/Advanced/#load-own-actions-from-external-folder", 
            "text": "Add this to the top of your  Fastfile .  actions_path '../custom_actions_folder/'", 
            "title": "Load own actions from external folder"
        }, 
        {
            "location": "/Advanced/#skip-update-check-when-launching-fastlane", 
            "text": "You can set the environment variable  FASTLANE_SKIP_UPDATE_CHECK  to skip the update check.", 
            "title": "Skip update check when launching fastlane"
        }, 
        {
            "location": "/Advanced/#adding-credentials", 
            "text": "You can add credentials for use by  fastlane  to your keychain using the  CredentialsManager  command line interface. This is useful for situations like CI environments.  Adding a Credential  fastlane-credentials add --username felix@krausefx.com\nPassword: *********\nCredential felix@krausefx.com:********* added to keychain.  Removing a Credential  fastlane-credentials remove --username felix@krausefx.com\npassword has been deleted.", 
            "title": "Adding Credentials"
        }, 
        {
            "location": "/contributing/UI/", 
            "text": "fastlane user interface\n\n\nTimestamps\n\n\nTo hide timestamps in each row, set the \nFASTLANE_HIDE_TIMESTAMP\n environment variable.\n\n\nInteracting with the user\n\n\nInstead of using \nputs\n, \nraise\n and \ngets\n, please use the helper class \nUI\n across all fastlane tools:\n\n\nUI.message \nNeutral message (usually white)\n\nUI.success \nSuccesully finished processing (usually green)\n\nUI.error \nWahaha, what's going on here! (usually red)\n\nUI.important \nMake sure to use Windows (usually yellow)\n\n\nUI.header \nInputs\n # a big box\n\nname = UI.input(\nWhat's your name? \n)\nif UI.confirm(\nAre you '#{name}'?\n)\n  UI.success \nOh yeah\n\nelse\n  UI.error \nWups, invalid\n\nend\n\nUI.password(\nYour password please: \n) # password inputs are hidden\n\n###### A \nDropdown\n for the user\nproject = UI.select(\nSelect your project: \n, [\nTest Project\n, \nTest Workspace\n])\n\nUI.success(\nOkay #{name}, you selected '#{project}'\n)\n\n###### To run a command use\nFastlaneCore::CommandExecutor.execute(command: \nls\n,\n                                    print_all: true,\n                                        error: proc do |error_output|\n                                          # handle error here\n                                        end)\n\n###### or if you just want to receive a simple value use this only if the command doesn't take long\ndiff = Helper.backticks(\ngit diff\n)\n\n###### fastlane \ncrash\n because of a user error everything that is caused by the user and is not unexpected\nUI.user_error!(\nYou don't have a project in the current directory\n)\n\n###### an actual crash when something unexpected happened\nUI.crash!(\nNetwork timeout\n)\n\n###### a deprecation message\nUI.deprecated(\nThe '--key' parameter is deprecated\n)\n\n\n\n\nThe output will look like this", 
            "title": "UI"
        }, 
        {
            "location": "/contributing/UI/#fastlane-user-interface", 
            "text": "", 
            "title": "fastlane user interface"
        }, 
        {
            "location": "/contributing/UI/#timestamps", 
            "text": "To hide timestamps in each row, set the  FASTLANE_HIDE_TIMESTAMP  environment variable.", 
            "title": "Timestamps"
        }, 
        {
            "location": "/contributing/UI/#interacting-with-the-user", 
            "text": "Instead of using  puts ,  raise  and  gets , please use the helper class  UI  across all fastlane tools:  UI.message  Neutral message (usually white) \nUI.success  Succesully finished processing (usually green) \nUI.error  Wahaha, what's going on here! (usually red) \nUI.important  Make sure to use Windows (usually yellow) \n\nUI.header  Inputs  # a big box\n\nname = UI.input( What's your name?  )\nif UI.confirm( Are you '#{name}'? )\n  UI.success  Oh yeah \nelse\n  UI.error  Wups, invalid \nend\n\nUI.password( Your password please:  ) # password inputs are hidden\n\n###### A  Dropdown  for the user\nproject = UI.select( Select your project:  , [ Test Project ,  Test Workspace ])\n\nUI.success( Okay #{name}, you selected '#{project}' )\n\n###### To run a command use\nFastlaneCore::CommandExecutor.execute(command:  ls ,\n                                    print_all: true,\n                                        error: proc do |error_output|\n                                          # handle error here\n                                        end)\n\n###### or if you just want to receive a simple value use this only if the command doesn't take long\ndiff = Helper.backticks( git diff )\n\n###### fastlane  crash  because of a user error everything that is caused by the user and is not unexpected\nUI.user_error!( You don't have a project in the current directory )\n\n###### an actual crash when something unexpected happened\nUI.crash!( Network timeout )\n\n###### a deprecation message\nUI.deprecated( The '--key' parameter is deprecated )  The output will look like this", 
            "title": "Interacting with the user"
        }, 
        {
            "location": "/contributing/CONTRIBUTING/", 
            "text": "Contributing to \nfastlane\n\n\nGetting started\n\n\nMake sure you have \nbundler\n installed using \ngem install bundler\n\n\n\n\nOpen the GitHub page of the _fastlane_repository  (e.g. \nhttps://github.com/fastlane/fastlane\n)\n\n\nCreate an issue to discuss your idea/feature/enhancement.\n\n\nClick on \nFork\n on the top right\n\n\nThen clone your new repo locally \ngit clone https://github.com/[my_user]/fastlane.git\n\n\nOn your terminal, navigate to the project and run \ngit remote add upstream https://github.com/fastlane/fastlane\n (or use the \ngit\n URL if you use private key auth)\n\n\nCreate your feature branch (\ngit checkout -b my-new-feature\n).\n\n\nCommit your changes (\ngit commit -am 'Add some feature'\n).\n\n\nPush to the branch (\ngit push origin my-new-feature\n).\n\n\nCreate a new Pull Request.\n\n\n\n\nBefore working on something, make sure to have pulled the latest changes. To pull the changes run\n\n\ngit pull master\n\n\n\n\nNew Issues\n\n\nBefore submitting a new issue, do the following:\n\n\n\n\nVerify you're running the latest version by running \nfastlane -v\n and compare it with the \nproject page on GitHub\n.\n\n\nVerify you have Xcode tools installed by running \nxcode-select --install\n.\n\n\nMake sure to read through the \nREADME\n of the project.\n\n\n\n\nWhen submitting a new issue, please provide the following information:\n\n\n\n\nThe full stack trace and output when running \nfastlane\n.\n\n\nThe command and parameters you used to launch it.\n\n\nYour \nFastfile\n and all other configuration files you are using.\n\n\n\n\nBy providing this information it's much faster and easier to help you\n\n\nHelping to Resolve Existing Issues\n\n\nIf you're motivated to help out at a level beyond reporting issues, we really appreciate it! :+1: We use the \nhelp wanted\n label to mark things that we think it would be great to have community help in resolving, so that's a great place to start! In addition, working on the following things are super valuable:\n\n\nVerifying Bug Reports\n\n\nAre you able to reproduce this problem on your computer? If so, chime in! If the original issue report is a bit vague, but you have some additional details, please contribute them! If you find a bug report without an example script or configuration, contribute one that can be used to reproduce it.\n\n\nIf you're comfortable diving into the code a bit, see if you can produce a failing test that illustrates the bad behavior in the problematic area of the code! Tests live in the \nspec/\n directory, and are generally named relative to the source code files whose functionality they test. Once you are done, \ngit diff \n my_patch.diff\n can be used to produce a patch file containing the details of your changes, which can be added to the issue.\n\n\nTesting Proposed Fixes\n\n\nAnother way to help out is to verify submitted pull requests. To do that, you'll need to be able to get the author's proposed changes onto your machine. Start by giving yourself a new branch to work in:\n\n\ngit checkout -b testing_branch\n\n\n\n\nNext, you'll need to tell git where to find this contributor's fastlane fork and branch. Let's say that the contributor's username is \nJohnSmith\n and their topic branch is called \nnew_fastlane_action\n located at \nhttps://github.com/JohnSmith/fastlane\n. You can use the following commands to pull their work:\n\n\ngit remote add JohnSmith https://github.com/JohnSmith/fastlane.git\ngit pull JohnSmith new_fastlane_action\n\n\n\n\nOnce you have their changes locally, there's many things worth checking on:\n\n\n\n\nDoes the change work?\n\n\nAre there adequate tests to cover the changes or new functionality? Are the tests clear and testing the right things?\n\n\nIs the related documentation updated? New actions get described in \ndocs/Actions.md\n, for example.\n\n\nHow does the code look to you? Can you think of a nicer or more performant way to implement part of it?\n\n\n\n\nIf you're happy with what you see, leave a comment on the GitHub issue stating your approval. If not, leave a polite suggestion for what you think could be improved and how. The more you can show that you've reviewed the content seriously, the more valuable it will be to the author and other reviewers!\n\n\nPull Requests (PRs)\n\n\nPull requests are always welcome :smile:\n\n\nPRs should reference an open GitHub issue (preferably those marked with the \nhelp wanted\n label). Referring to the issue in the description of your PR is required and is really helpful for establishing the context needed for review.\n\n\nIf you're considering contributing new functionality, please open a new issue explaining the functionality desired first so that we can discuss as a community. We'll add the \nhelp wanted\n label if we believe this to be a meaningful contribution that will benefit other fastlane users and you go ahead with the pull request. :raised_hands:\n\n\n\n\nAdding automated tests that cover your changes and/or new functionality is important!\n\n\nfastlane\n has a lot of moving parts and receives contributions from many developers. The best way to ensure that your contributions keep working is to ensure that there will be failing tests if something accidentally gets broken.\n\n\nYou can run the tests by executing \nbundle install\n and then \nbundle exec rspec\n.\n\n\n\n\n\n\nYour code editor should indent using spaces with a tab size of 2 spaces.\n\n\n\n\nTo submit the changes to the fastlane repo, you have to do the following:\n\n\n\n\nRun \ngit push upstream master\n.\n\n\nOpen \nhttps://github.com/fastlane/fastlane\n in your browser and click the green \"Create Pull Request\" button\n\n\n\n\nWhat Do All These Labels Mean?\n\n\nGreat question! Check out the \nGitHub Labels\n document for a quick summary of the labels we use and what they mean.\n\n\nWhy Did My Issue/PR Get Closed?\n\n\nIt's not you, it's us! fastlane and its related tools receive a lot of issues and PRs. In order to effectively work through them and give each the prompt attention it deserves, we need to keep a sharp focus on the work we have outstanding.\n\n\nOne way we do this is by closing issues that we don't feel are immediately actionable. This might mean that we need more information in order to investigate (Have you provided enough information for us to reproduce the problem? The \nNew Issues\n section has the details!). Or, it might mean that we haven't been able to reproduce it using the provided info. In this case we might close the issue while we wait for others to reproduce the problem and possibly provide some more info that unlocks the mystery.\n\n\nIn any case, \na closed issue is not necessarily the end of the story!\n If more info becomes available after an issue is closed, it can be reopened for further consideration.\n\n\nOne of the best ways we can keep fastlane an approachable, stable, and dependable tool is to be deliberate about how we choose to modify it. If we don't adopt your changes or new feature into fastlane, that doesn't mean it was bad work! It may be that the fastlane philosophy about how to accomplish a particular task doesn't align well with your approach. The best way to make sure that your time is well spent in contributing to fastlane is to \nstart your work\n on a modification or new feature \nby opening an issue to discuss the problem or shortcoming with the community\n. The fastlane maintainers will do our best to give early feedback about whether a particular goal and approach is likely to be something we want to adopt!\n\n\nContributing New Actions\n\n\nThere are different approaches to build your own \nfastlane\n actions. You can either build your own local actions, or provide your own fastlane plugin. For more information, check out \nPlugins.md\n.\n\n\nDeveloping\n\n\nWhen working on something, directly edit the Ruby files in the project folders. Make sure to switch your text editor to use spaces and indentations should be 2 spaces.\n\n\nTo run the modified version of the tool, run the following in the project directory\n\n\n.[tool_name]/bin/[tool_name]\n\n\n\n\nor install the local copy (might require \nsudo\n)\n\n\nbundle install \n rake install\n\n\n\n\nDebugging\n\n\nI personally use a plain Sublime Text with a terminal. Debugging is pretty easy, just insert the following code to where you want to jump in:\n\n\nrequire 'pry'\nbinding.pry\n\n\n\n\nYou then jump into an interactive debugger that allows you to print out variables, call methods and much more. Continue running the original script using \ncontrol\n + \nd\n\n\nRunning tests\n\n\nIn the directory of one project, run the tests using\n\n\nrake test_all\n\n\nThis will do a few things:\n\n\n\n\nRuns the tests (you can run them via \nrspec\n too)\n\n\nMakes sure no debug code (like \npry\n) is still there\n\n\nThe \n--help\n command works as expected\n\n\n\n\nThe tests are executed using \nfastlane\n :rocket:\n\n\nTo run only a subset of the tests, you can add the \nnow: true\n keyword to the test\n\n\nit \nraises an exception if it rains\n, now: true do\n  ...\nend\n\n\n\n\nand then run these tests only using\n\n\nrspec -t now\n\n\n\n\nrubocop validation\n\n\nThe \nfastlane\n repos use \nrubocop\n to validate the code style.\n\n\nThe style validation is automatically done when running \nrake test_all\n.\n\n\nTo automatically fix common code style issues (e.g. wrong spacing), run \nrubocop -a\n\n\nNeed help?\n\n\nPlease submit an \nissue\n on GitHub and provide information about your setup\n\n\nCode of Conduct\n\n\nHelp us keep \nfastlane\n open and inclusive. Please read and follow our \nCode of Conduct\n.\n\n\nAbove All, Thanks for Your Contributions\n\n\nThank you for reading to the end, and for taking the time to contribute to the project! If you include the \ud83d\udd11 emoji at the top of the body of your issue or pull request, we'll know that you've given this your full attention and are doing your best to help!\n\n\nLicense\n\n\nThis project is licensed under the terms of the MIT license. See the LICENSE file.\n\n\n\n\nThis project and all fastlane tools are in no way affiliated with Apple Inc. This project is open source under the MIT license, which means you have full access to the source code and can modify it to fit your own needs. All fastlane tools run on your own computer or server, so your credentials or other sensitive information will never leave your own computer. You are responsible for how you use fastlane tools.", 
            "title": "Contribution Guidelines"
        }, 
        {
            "location": "/contributing/CONTRIBUTING/#contributing-to-fastlane", 
            "text": "", 
            "title": "Contributing to fastlane"
        }, 
        {
            "location": "/contributing/CONTRIBUTING/#getting-started", 
            "text": "Make sure you have  bundler  installed using  gem install bundler   Open the GitHub page of the _fastlane_repository  (e.g.  https://github.com/fastlane/fastlane )  Create an issue to discuss your idea/feature/enhancement.  Click on  Fork  on the top right  Then clone your new repo locally  git clone https://github.com/[my_user]/fastlane.git  On your terminal, navigate to the project and run  git remote add upstream https://github.com/fastlane/fastlane  (or use the  git  URL if you use private key auth)  Create your feature branch ( git checkout -b my-new-feature ).  Commit your changes ( git commit -am 'Add some feature' ).  Push to the branch ( git push origin my-new-feature ).  Create a new Pull Request.   Before working on something, make sure to have pulled the latest changes. To pull the changes run  git pull master", 
            "title": "Getting started"
        }, 
        {
            "location": "/contributing/CONTRIBUTING/#new-issues", 
            "text": "Before submitting a new issue, do the following:   Verify you're running the latest version by running  fastlane -v  and compare it with the  project page on GitHub .  Verify you have Xcode tools installed by running  xcode-select --install .  Make sure to read through the  README  of the project.   When submitting a new issue, please provide the following information:   The full stack trace and output when running  fastlane .  The command and parameters you used to launch it.  Your  Fastfile  and all other configuration files you are using.   By providing this information it's much faster and easier to help you", 
            "title": "New Issues"
        }, 
        {
            "location": "/contributing/CONTRIBUTING/#helping-to-resolve-existing-issues", 
            "text": "If you're motivated to help out at a level beyond reporting issues, we really appreciate it! :+1: We use the  help wanted  label to mark things that we think it would be great to have community help in resolving, so that's a great place to start! In addition, working on the following things are super valuable:", 
            "title": "Helping to Resolve Existing Issues"
        }, 
        {
            "location": "/contributing/CONTRIBUTING/#verifying-bug-reports", 
            "text": "Are you able to reproduce this problem on your computer? If so, chime in! If the original issue report is a bit vague, but you have some additional details, please contribute them! If you find a bug report without an example script or configuration, contribute one that can be used to reproduce it.  If you're comfortable diving into the code a bit, see if you can produce a failing test that illustrates the bad behavior in the problematic area of the code! Tests live in the  spec/  directory, and are generally named relative to the source code files whose functionality they test. Once you are done,  git diff   my_patch.diff  can be used to produce a patch file containing the details of your changes, which can be added to the issue.", 
            "title": "Verifying Bug Reports"
        }, 
        {
            "location": "/contributing/CONTRIBUTING/#testing-proposed-fixes", 
            "text": "Another way to help out is to verify submitted pull requests. To do that, you'll need to be able to get the author's proposed changes onto your machine. Start by giving yourself a new branch to work in:  git checkout -b testing_branch  Next, you'll need to tell git where to find this contributor's fastlane fork and branch. Let's say that the contributor's username is  JohnSmith  and their topic branch is called  new_fastlane_action  located at  https://github.com/JohnSmith/fastlane . You can use the following commands to pull their work:  git remote add JohnSmith https://github.com/JohnSmith/fastlane.git\ngit pull JohnSmith new_fastlane_action  Once you have their changes locally, there's many things worth checking on:   Does the change work?  Are there adequate tests to cover the changes or new functionality? Are the tests clear and testing the right things?  Is the related documentation updated? New actions get described in  docs/Actions.md , for example.  How does the code look to you? Can you think of a nicer or more performant way to implement part of it?   If you're happy with what you see, leave a comment on the GitHub issue stating your approval. If not, leave a polite suggestion for what you think could be improved and how. The more you can show that you've reviewed the content seriously, the more valuable it will be to the author and other reviewers!", 
            "title": "Testing Proposed Fixes"
        }, 
        {
            "location": "/contributing/CONTRIBUTING/#pull-requests-prs", 
            "text": "Pull requests are always welcome :smile:  PRs should reference an open GitHub issue (preferably those marked with the  help wanted  label). Referring to the issue in the description of your PR is required and is really helpful for establishing the context needed for review.  If you're considering contributing new functionality, please open a new issue explaining the functionality desired first so that we can discuss as a community. We'll add the  help wanted  label if we believe this to be a meaningful contribution that will benefit other fastlane users and you go ahead with the pull request. :raised_hands:   Adding automated tests that cover your changes and/or new functionality is important!  fastlane  has a lot of moving parts and receives contributions from many developers. The best way to ensure that your contributions keep working is to ensure that there will be failing tests if something accidentally gets broken.  You can run the tests by executing  bundle install  and then  bundle exec rspec .    Your code editor should indent using spaces with a tab size of 2 spaces.   To submit the changes to the fastlane repo, you have to do the following:   Run  git push upstream master .  Open  https://github.com/fastlane/fastlane  in your browser and click the green \"Create Pull Request\" button", 
            "title": "Pull Requests (PRs)"
        }, 
        {
            "location": "/contributing/CONTRIBUTING/#what-do-all-these-labels-mean", 
            "text": "Great question! Check out the  GitHub Labels  document for a quick summary of the labels we use and what they mean.", 
            "title": "What Do All These Labels Mean?"
        }, 
        {
            "location": "/contributing/CONTRIBUTING/#why-did-my-issuepr-get-closed", 
            "text": "It's not you, it's us! fastlane and its related tools receive a lot of issues and PRs. In order to effectively work through them and give each the prompt attention it deserves, we need to keep a sharp focus on the work we have outstanding.  One way we do this is by closing issues that we don't feel are immediately actionable. This might mean that we need more information in order to investigate (Have you provided enough information for us to reproduce the problem? The  New Issues  section has the details!). Or, it might mean that we haven't been able to reproduce it using the provided info. In this case we might close the issue while we wait for others to reproduce the problem and possibly provide some more info that unlocks the mystery.  In any case,  a closed issue is not necessarily the end of the story!  If more info becomes available after an issue is closed, it can be reopened for further consideration.  One of the best ways we can keep fastlane an approachable, stable, and dependable tool is to be deliberate about how we choose to modify it. If we don't adopt your changes or new feature into fastlane, that doesn't mean it was bad work! It may be that the fastlane philosophy about how to accomplish a particular task doesn't align well with your approach. The best way to make sure that your time is well spent in contributing to fastlane is to  start your work  on a modification or new feature  by opening an issue to discuss the problem or shortcoming with the community . The fastlane maintainers will do our best to give early feedback about whether a particular goal and approach is likely to be something we want to adopt!", 
            "title": "Why Did My Issue/PR Get Closed?"
        }, 
        {
            "location": "/contributing/CONTRIBUTING/#contributing-new-actions", 
            "text": "There are different approaches to build your own  fastlane  actions. You can either build your own local actions, or provide your own fastlane plugin. For more information, check out  Plugins.md .", 
            "title": "Contributing New Actions"
        }, 
        {
            "location": "/contributing/CONTRIBUTING/#developing", 
            "text": "When working on something, directly edit the Ruby files in the project folders. Make sure to switch your text editor to use spaces and indentations should be 2 spaces.  To run the modified version of the tool, run the following in the project directory  .[tool_name]/bin/[tool_name]  or install the local copy (might require  sudo )  bundle install   rake install", 
            "title": "Developing"
        }, 
        {
            "location": "/contributing/CONTRIBUTING/#debugging", 
            "text": "I personally use a plain Sublime Text with a terminal. Debugging is pretty easy, just insert the following code to where you want to jump in:  require 'pry'\nbinding.pry  You then jump into an interactive debugger that allows you to print out variables, call methods and much more. Continue running the original script using  control  +  d", 
            "title": "Debugging"
        }, 
        {
            "location": "/contributing/CONTRIBUTING/#running-tests", 
            "text": "In the directory of one project, run the tests using  rake test_all  This will do a few things:   Runs the tests (you can run them via  rspec  too)  Makes sure no debug code (like  pry ) is still there  The  --help  command works as expected   The tests are executed using  fastlane  :rocket:  To run only a subset of the tests, you can add the  now: true  keyword to the test  it  raises an exception if it rains , now: true do\n  ...\nend  and then run these tests only using  rspec -t now", 
            "title": "Running tests"
        }, 
        {
            "location": "/contributing/CONTRIBUTING/#rubocop-validation", 
            "text": "The  fastlane  repos use  rubocop  to validate the code style.  The style validation is automatically done when running  rake test_all .  To automatically fix common code style issues (e.g. wrong spacing), run  rubocop -a", 
            "title": "rubocop validation"
        }, 
        {
            "location": "/contributing/CONTRIBUTING/#need-help", 
            "text": "Please submit an  issue  on GitHub and provide information about your setup", 
            "title": "Need help?"
        }, 
        {
            "location": "/contributing/CONTRIBUTING/#code-of-conduct", 
            "text": "Help us keep  fastlane  open and inclusive. Please read and follow our  Code of Conduct .", 
            "title": "Code of Conduct"
        }, 
        {
            "location": "/contributing/CONTRIBUTING/#above-all-thanks-for-your-contributions", 
            "text": "Thank you for reading to the end, and for taking the time to contribute to the project! If you include the \ud83d\udd11 emoji at the top of the body of your issue or pull request, we'll know that you've given this your full attention and are doing your best to help!", 
            "title": "Above All, Thanks for Your Contributions"
        }, 
        {
            "location": "/contributing/CONTRIBUTING/#license", 
            "text": "This project is licensed under the terms of the MIT license. See the LICENSE file.   This project and all fastlane tools are in no way affiliated with Apple Inc. This project is open source under the MIT license, which means you have full access to the source code and can modify it to fit your own needs. All fastlane tools run on your own computer or server, so your credentials or other sensitive information will never leave your own computer. You are responsible for how you use fastlane tools.", 
            "title": "License"
        }
    ]
}