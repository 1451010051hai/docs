{
    "docs": [
        {
            "location": "/", 
            "text": "fastlane\n\n\n\n\n\n\n\n\n\n\nfastlane\n is \nthe\n tool to release your iOS and Android app \ud83d\ude80 It handles all tedious tasks, like generating screenshots, deadling with code signing, and releasing your application.\n\n\nTODO: Alternative\n\n\nfastlane\n is a tool for iOS, Mac, and Android developers to automate tedious tasks like generating screenshots, dealing with provisioning profiles, and releasing your application.\n\n\nYou create a so-called \nFastfile\n in your repository, that defines how your beta or App Store release process:\n\n\nlane :beta do\n  increment_build_number\n  gym                       # Build your app\n  testflight                # Upload to TestFlight\nend\n\nlane :appstore do\n  snapshot                  # Generate screenshots for the App Store\n  gym                       # Build your app\n  deliver                   # Upload the screenshots and the binary to iTunes\n  slack                     # Let your team-mates know the new version is live\nend\n\n\n\n\nYou just defined 2 different lanes, one for beta deployment, one for App Store. To releaes your app in the App Store, all you have to do is\n\n\nfastlane appstore\n\n\n\n\nWhy fastlane?\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\u2728\n\n\nConnect all iOS, Mac, and Android build tools into one workflow\n\n\n\n\n\n\n\ud83d\ude9d\n\n\nDefine different \nlanes\n for App Store deployment, beta builds, or testing\n\n\n\n\n\n\n\ud83d\udea2\n\n\nDeploy from any computer, including a CI server\n\n\n\n\n\n\n\ud83d\udd27\n\n\nExtend and customise fastlane to fit your needs\n\n\n\n\n\n\n\ud83d\udcad\n\n\nNever remember any difficult commands, just \nfastlane\n\n\n\n\n\n\n\ud83c\udfa9\n\n\nEasy setup assistant to get started in a few minutes\n\n\n\n\n\n\n\u2709\ufe0f\n\n\nfastlane\n automatically passes information between build steps\n\n\n\n\n\n\n\ud83d\udcc3\n\n\nStore \neverything\n in Git. Never lookup build commands in \nJenkins\n configs again\n\n\n\n\n\n\n\ud83d\ude80\n\n\nSaves you \nhours\n for every app update you release\n\n\n\n\n\n\n\u270f\ufe0f\n\n\nFlexible configuration using a fully customisable \nFastfile\n\n\n\n\n\n\n\ud83d\udea0\n\n\nImplement a fully working Continuous Delivery process\n\n\n\n\n\n\n\ud83d\udc7b\n\n\nIntegrates with all major CI systems\n\n\n\n\n\n\n\ud83d\udc23\n\n\nOver 170 built-in integrations available\n\n\n\n\n\n\n\ud83d\udda5\n\n\nSupports iOS, Mac, and Android apps\n\n\n\n\n\n\n\ud83d\udd76\n\n\nFull Git and Mercurial support\n\n\n\n\n\n\n\n\nGetting Started\n\n\nMake sure you have the latest version of the Xcode command line tools installed:\n\n\nxcode-select --install\n\n\n\n\nUsing the terminal\n\n\nsudo gem install fastlane --verbose\n\n\n\n\nNavigate to your iOS or Android app and run\n\n\nfastlane init\n\n\n\n\nfastlane\n will automatically detect your project, and ask for any missing information.\n\n\nFor more details about how to get up and running, check out the \nfastlane guide\n.\n\n\nUsing the Fabric app\n\n\nIf you're not familiar with the terminal and prefer a graphical user interface, download the \nFabric app\n and use the built-in \nfastlane\n button.\n\n\nQuestions and support\n\n\nAll fastlane related questions, problems and feature ideas should be posted as \nGitHub issue\n. This way, other users can search existing discussions, and everybody can jump in.\n\n\nSystem requirements\n\n\nfastlane\n requires macOS or Linux with Ruby 2.0.0 or above\n\n\nCode of Conduct\n\n\nHelp us keep \nfastlane\n open and inclusive. Please read and follow our \nCode of Conduct\n.\n\n\nLicense\n\n\nThis project is licensed under the terms of the MIT license. See the \nLICENSE\n file.\n\n\n\n\nThis project and all fastlane tools are in no way affiliated with Apple Inc or Google. This project is open source under the MIT license, which means you have full access to the source code and can modify it to fit your own needs. All fastlane tools run on your own computer or server, so your credentials or other sensitive information will never leave your own computer. You are responsible for how you use fastlane tools.", 
            "title": "Home"
        }, 
        {
            "location": "/#fastlane", 
            "text": "fastlane  is  the  tool to release your iOS and Android app \ud83d\ude80 It handles all tedious tasks, like generating screenshots, deadling with code signing, and releasing your application.  TODO: Alternative  fastlane  is a tool for iOS, Mac, and Android developers to automate tedious tasks like generating screenshots, dealing with provisioning profiles, and releasing your application.  You create a so-called  Fastfile  in your repository, that defines how your beta or App Store release process:  lane :beta do\n  increment_build_number\n  gym                       # Build your app\n  testflight                # Upload to TestFlight\nend\n\nlane :appstore do\n  snapshot                  # Generate screenshots for the App Store\n  gym                       # Build your app\n  deliver                   # Upload the screenshots and the binary to iTunes\n  slack                     # Let your team-mates know the new version is live\nend  You just defined 2 different lanes, one for beta deployment, one for App Store. To releaes your app in the App Store, all you have to do is  fastlane appstore", 
            "title": "fastlane"
        }, 
        {
            "location": "/#why-fastlane", 
            "text": "\u2728  Connect all iOS, Mac, and Android build tools into one workflow    \ud83d\ude9d  Define different  lanes  for App Store deployment, beta builds, or testing    \ud83d\udea2  Deploy from any computer, including a CI server    \ud83d\udd27  Extend and customise fastlane to fit your needs    \ud83d\udcad  Never remember any difficult commands, just  fastlane    \ud83c\udfa9  Easy setup assistant to get started in a few minutes    \u2709\ufe0f  fastlane  automatically passes information between build steps    \ud83d\udcc3  Store  everything  in Git. Never lookup build commands in  Jenkins  configs again    \ud83d\ude80  Saves you  hours  for every app update you release    \u270f\ufe0f  Flexible configuration using a fully customisable  Fastfile    \ud83d\udea0  Implement a fully working Continuous Delivery process    \ud83d\udc7b  Integrates with all major CI systems    \ud83d\udc23  Over 170 built-in integrations available    \ud83d\udda5  Supports iOS, Mac, and Android apps    \ud83d\udd76  Full Git and Mercurial support", 
            "title": "Why fastlane?"
        }, 
        {
            "location": "/#getting-started", 
            "text": "Make sure you have the latest version of the Xcode command line tools installed:  xcode-select --install", 
            "title": "Getting Started"
        }, 
        {
            "location": "/#using-the-terminal", 
            "text": "sudo gem install fastlane --verbose  Navigate to your iOS or Android app and run  fastlane init  fastlane  will automatically detect your project, and ask for any missing information.  For more details about how to get up and running, check out the  fastlane guide .", 
            "title": "Using the terminal"
        }, 
        {
            "location": "/#using-the-fabric-app", 
            "text": "If you're not familiar with the terminal and prefer a graphical user interface, download the  Fabric app  and use the built-in  fastlane  button.", 
            "title": "Using the Fabric app"
        }, 
        {
            "location": "/#questions-and-support", 
            "text": "All fastlane related questions, problems and feature ideas should be posted as  GitHub issue . This way, other users can search existing discussions, and everybody can jump in.", 
            "title": "Questions and support"
        }, 
        {
            "location": "/#system-requirements", 
            "text": "fastlane  requires macOS or Linux with Ruby 2.0.0 or above", 
            "title": "System requirements"
        }, 
        {
            "location": "/#code-of-conduct", 
            "text": "Help us keep  fastlane  open and inclusive. Please read and follow our  Code of Conduct .", 
            "title": "Code of Conduct"
        }, 
        {
            "location": "/#license", 
            "text": "This project is licensed under the terms of the MIT license. See the  LICENSE  file.   This project and all fastlane tools are in no way affiliated with Apple Inc or Google. This project is open source under the MIT license, which means you have full access to the source code and can modify it to fit your own needs. All fastlane tools run on your own computer or server, so your credentials or other sensitive information will never leave your own computer. You are responsible for how you use fastlane tools.", 
            "title": "License"
        }, 
        {
            "location": "/codesigning/CommonIssues/", 
            "text": "Common code signing issues\n\n\nXcode errors\n\n\n\n\nCode Sign error: No matching provisioning profiles found: No provisioning profiles with a valid signing identity (i.e. certificate and private key pair) matching the bundle identifier \"X\" were found.\n\n\n\n\nThe provisioning profile for the given app identifier \"X\" is not available on the local machine. Make sure you have a valid provisioning profile for the correct distribution type (App Store, Development or Ad Hoc) on the Apple Developer Portal, download and install it, and select the profile in the Xcode settings (See \nXcodeProject.md\n).\n\n\nYou might have the provisioning profile installed locally, but miss the private key or certificate for it. \n\n\n\n\nNo matching codesigning identity found: No codesigning identities (i.e. certificate and private key pairs) matching \"iPhone Distribution: X\" were found\n\n\n\n\nThe code signing identity you specified in the Xcode project can't be found in your local keychain. Make sure to transfer the certificate and private key from another Mac (or wherever you store the private key), or to update the project file to use the correct code signing identity.\n\n\n\n\nError Domain=IDEDistributionErrorDomain Code=1 \"The operation couldn\u2019t be completed. (IDEDistributionErrorDomain error 1.)\"\n\n\n\n\nThis error can have a lot of reasons, some things you should try:\n\n\n\n\nVerify your Keychain is valid and you don't have an expired WWDR certificate using \nthis guide\n\n\nVerify both your certificate and provisioning profile are valid in both your Keychain and on the Apple Developer Portal (Check out \nTroubleshooting.md\n for more information)\n\n\nIf you're using \ngym\n, try using the \nuse_legacy_build_api\n flag to fallback to the Xcode 6 build API\n\n\nFollow the other steps of \nTroubleshooting.md\n\n\n\n\n\n\nProvisioning profile does not match bundle identifier: The provisioning profile specified in your build settings (\"X\") has an AppID of \"Y\" which does not match your bundle identifier \"Z\"\n\n\n\n\nYour project defines a provisioning profile that doesn't match the bundle identifier of your app. There is mismatch between the bundle identifiers, this might happen if you specify the wrong provisioning profile in your target.\n\n\n\n\nYour build settings specify a provisioning profile with the UUID \"X\", however, no such provisioning profile was found.\n\n\n\n\nYour project defines a provisioning profile which doesn't exist on your local machine. Check out \nXcodeProject.md\n for more information how to properly specify a provisioning profile to avoid hard coded UUIDs in your project.\n\n\n\n\nCodeSign Error: code signing is required for product type 'Application'...\n\n\n\n\nMake sure to have a valid code signing identity defined in your project targets. This might happen when you select \nDon't Code Sign\n as Code Signing Identity.\n\n\nfastlane errors\n\n\n\n\nCould not find a matching code signing identity for type 'X'\n\n\n\n\nThere are no certificates available on the Apple Developer Portal. This could either mean someone revoked a certificate, or you don't have access to it.", 
            "title": "CommonIssues"
        }, 
        {
            "location": "/codesigning/CommonIssues/#common-code-signing-issues", 
            "text": "", 
            "title": "Common code signing issues"
        }, 
        {
            "location": "/codesigning/CommonIssues/#xcode-errors", 
            "text": "Code Sign error: No matching provisioning profiles found: No provisioning profiles with a valid signing identity (i.e. certificate and private key pair) matching the bundle identifier \"X\" were found.   The provisioning profile for the given app identifier \"X\" is not available on the local machine. Make sure you have a valid provisioning profile for the correct distribution type (App Store, Development or Ad Hoc) on the Apple Developer Portal, download and install it, and select the profile in the Xcode settings (See  XcodeProject.md ).  You might have the provisioning profile installed locally, but miss the private key or certificate for it.    No matching codesigning identity found: No codesigning identities (i.e. certificate and private key pairs) matching \"iPhone Distribution: X\" were found   The code signing identity you specified in the Xcode project can't be found in your local keychain. Make sure to transfer the certificate and private key from another Mac (or wherever you store the private key), or to update the project file to use the correct code signing identity.   Error Domain=IDEDistributionErrorDomain Code=1 \"The operation couldn\u2019t be completed. (IDEDistributionErrorDomain error 1.)\"   This error can have a lot of reasons, some things you should try:   Verify your Keychain is valid and you don't have an expired WWDR certificate using  this guide  Verify both your certificate and provisioning profile are valid in both your Keychain and on the Apple Developer Portal (Check out  Troubleshooting.md  for more information)  If you're using  gym , try using the  use_legacy_build_api  flag to fallback to the Xcode 6 build API  Follow the other steps of  Troubleshooting.md    Provisioning profile does not match bundle identifier: The provisioning profile specified in your build settings (\"X\") has an AppID of \"Y\" which does not match your bundle identifier \"Z\"   Your project defines a provisioning profile that doesn't match the bundle identifier of your app. There is mismatch between the bundle identifiers, this might happen if you specify the wrong provisioning profile in your target.   Your build settings specify a provisioning profile with the UUID \"X\", however, no such provisioning profile was found.   Your project defines a provisioning profile which doesn't exist on your local machine. Check out  XcodeProject.md  for more information how to properly specify a provisioning profile to avoid hard coded UUIDs in your project.   CodeSign Error: code signing is required for product type 'Application'...   Make sure to have a valid code signing identity defined in your project targets. This might happen when you select  Don't Code Sign  as Code Signing Identity.", 
            "title": "Xcode errors"
        }, 
        {
            "location": "/codesigning/CommonIssues/#fastlane-errors", 
            "text": "Could not find a matching code signing identity for type 'X'   There are no certificates available on the Apple Developer Portal. This could either mean someone revoked a certificate, or you don't have access to it.", 
            "title": "fastlane errors"
        }, 
        {
            "location": "/codesigning/GettingStarted/", 
            "text": "Codesigning concepts\n\n\n\ud83d\ude80\n\n\nIf you are just starting a new project, it's important to think about how you want to handle code signing. This guide will help you choose the best approach for you.\n\n\nFor existing projects it might make sense to switch from a manual process to the \nmatch approach\n to make it easier for new team-members to onboard.\n\n\nIf you are new to code signing, check out the \nWWDC session\n that describes the fundamentals of code signing in Xcode.\n\n\n\n\nUsing match\n\n\nUsing cert and sigh\n\n\nUsing Xcode's code signing feature\n\n\nManually\n\n\n\n\nUsing \nmatch\n\n\nThe concept of \nmatch\n is described in the \ncodesigning guide\n. \n\n\nWith \nmatch\n you store your private keys and certificates in a git repo to sync them across machines. This makes it easy to onboard new team-members and set up new Mac machines. This approach \nis secure\n and uses technology you already use.\n\n\nGetting started with \nmatch\n requires you to revoke your existing certificates.\n\n\nMake sure to follow \nXcodeProject.md\n to set up your project properly.\n\n\nUsing \ncert\n and \nsigh\n\n\nIf you don't want to revoke your existing certificates, but still want an automated setup, \ncert\n and \nsigh\n are for you. \n\n\n\n\ncert\n will make sure you have a valid certificate and its private key installed on the local machine\n\n\nsigh\n will make sure you have a valid provisioning profile installed locally, that matches the installed certificate\n\n\n\n\nAdd the following lines to your \nFastfile\n\n\nlane :beta do\n  cert\n  sigh\n  gym\nend\n\n\n\n\nMake sure to follow \nXcodeProject.md\n to set up your project properly.\n\n\nUsing Xcode's code signing feature\n\n\nOccasionally the \nAutomatic\n setting as the provisioning profile doesn't work reliably as it will just select the most recently updated provisioning profile, no matter if the certificate is installed. \n\n\nThat's why it is recommended to specify a specific provisioning profile somehow:\n\n\nXcode 7 and lower\n\n\nYou should avoid clicking the \nFix Issue\n button (There is an \nXcode plugin\n that disables the button), as it sometimes revokes existing certificates, and with it the provisioning profiles.\n\n\nUnfortunately you can't specify the name of the provisioning profile in Xcode 7. Instead you can specify the UUID of the profile, which changes every time the profile gets re-generated (e.g. when you add a new device).\n\n\nTo work around this issue, check out \nXcodeProject.md\n on how to pass a provisioning profile to Xcode when building your app.\n\n\nXcode 8 and up\n\n\nApple improved code signing a lot with the release of Xcode 8, the following has changed:\n\n\n\n\nNo more \nFix Issue\n button, instead all code signing processes run in the background and show the log right in Xcode\n\n\nYou can now specify the provisioning profile by name, instead of the UUID (Check out \nXcodeProject.md\n for more information)\n\n\nImproved error messages when something goes wrong. If you run into code signing errors you should always try building and signing with Xcode to get more detailed error information. (Check out \nTroubleshooting.md\n for more information)\n\n\n\n\nManually\n\n\nYou can always manually create and manage your certificates and provisioning profiles using the Apple Developer Portal. Make sure to store the private key (\n.p12\n) of your certificates in a safe place, as they can't be restored if you lose them. \n\n\nYou can always download the certificate (\n.cer\n) and provisioning profile (\n.mobileprovision\n) from the Apple Developer Portal.", 
            "title": "GettingStarted"
        }, 
        {
            "location": "/codesigning/GettingStarted/#codesigning-concepts", 
            "text": "\ud83d\ude80  If you are just starting a new project, it's important to think about how you want to handle code signing. This guide will help you choose the best approach for you.  For existing projects it might make sense to switch from a manual process to the  match approach  to make it easier for new team-members to onboard.  If you are new to code signing, check out the  WWDC session  that describes the fundamentals of code signing in Xcode.   Using match  Using cert and sigh  Using Xcode's code signing feature  Manually", 
            "title": "Codesigning concepts"
        }, 
        {
            "location": "/codesigning/GettingStarted/#using-match", 
            "text": "The concept of  match  is described in the  codesigning guide .   With  match  you store your private keys and certificates in a git repo to sync them across machines. This makes it easy to onboard new team-members and set up new Mac machines. This approach  is secure  and uses technology you already use.  Getting started with  match  requires you to revoke your existing certificates.  Make sure to follow  XcodeProject.md  to set up your project properly.", 
            "title": "Using match"
        }, 
        {
            "location": "/codesigning/GettingStarted/#using-cert-and-sigh", 
            "text": "If you don't want to revoke your existing certificates, but still want an automated setup,  cert  and  sigh  are for you.    cert  will make sure you have a valid certificate and its private key installed on the local machine  sigh  will make sure you have a valid provisioning profile installed locally, that matches the installed certificate   Add the following lines to your  Fastfile  lane :beta do\n  cert\n  sigh\n  gym\nend  Make sure to follow  XcodeProject.md  to set up your project properly.", 
            "title": "Using cert and sigh"
        }, 
        {
            "location": "/codesigning/GettingStarted/#using-xcodes-code-signing-feature", 
            "text": "Occasionally the  Automatic  setting as the provisioning profile doesn't work reliably as it will just select the most recently updated provisioning profile, no matter if the certificate is installed.   That's why it is recommended to specify a specific provisioning profile somehow:", 
            "title": "Using Xcode's code signing feature"
        }, 
        {
            "location": "/codesigning/GettingStarted/#xcode-7-and-lower", 
            "text": "You should avoid clicking the  Fix Issue  button (There is an  Xcode plugin  that disables the button), as it sometimes revokes existing certificates, and with it the provisioning profiles.  Unfortunately you can't specify the name of the provisioning profile in Xcode 7. Instead you can specify the UUID of the profile, which changes every time the profile gets re-generated (e.g. when you add a new device).  To work around this issue, check out  XcodeProject.md  on how to pass a provisioning profile to Xcode when building your app.", 
            "title": "Xcode 7 and lower"
        }, 
        {
            "location": "/codesigning/GettingStarted/#xcode-8-and-up", 
            "text": "Apple improved code signing a lot with the release of Xcode 8, the following has changed:   No more  Fix Issue  button, instead all code signing processes run in the background and show the log right in Xcode  You can now specify the provisioning profile by name, instead of the UUID (Check out  XcodeProject.md  for more information)  Improved error messages when something goes wrong. If you run into code signing errors you should always try building and signing with Xcode to get more detailed error information. (Check out  Troubleshooting.md  for more information)", 
            "title": "Xcode 8 and up"
        }, 
        {
            "location": "/codesigning/GettingStarted/#manually", 
            "text": "You can always manually create and manage your certificates and provisioning profiles using the Apple Developer Portal. Make sure to store the private key ( .p12 ) of your certificates in a safe place, as they can't be restored if you lose them.   You can always download the certificate ( .cer ) and provisioning profile ( .mobileprovision ) from the Apple Developer Portal.", 
            "title": "Manually"
        }, 
        {
            "location": "/codesigning/Troubleshooting/", 
            "text": "Debugging codesigning issues\n\n\nThis guide will help you resolve the most common code signing errors.\n\n\nError message\n\n\nMake sure to find the exact error message in your build output. Many times the error message actually tells you how to resolve the issue. \n\n\nTo get even more details, try archiving using Xcode 8. \n\n\nDifferent machine\n\n\nDoes code signing work on a different Mac, but not on yours? If so, chances are high you don't have the latest private key, the certificate or the provisioning profile. Also follow the \nKeychain\n part of this document to make sure you don't have any expired certificates installed.\n\n\nXcode project\n\n\nMake sure to follow \nXcodeProject.md\n on how to properly set up your project.\n\n\nA check list on what you should verify on your Xcode project\n\n\n\n\nMake sure to have consistent code signing settings across your targets\n\n\nDon't set any code signing settings on your project level, just on the target level\n\n\nMake sure the bundle identifier matches the one of your provisioning profile\n\n\nMake sure the code signing identity is set to \niOS Distribution\n for \nRelease\n builds\n\n\nMake sure to set a provisioning profile for all your targets, e.g. Watch, Today widget, ...\n\n\nCheck your working copy in git - did you make any changes by mistake?\n\n\n\n\nDeveloper Portal\n\n\nIf a certificate gets revoked, all connected provisioning profiles get invalidated. This however might not immediately show up in your local keychain.\n\n\n\n\nOpen the \nDeveloper Portal\n\n\nVerify your certificates are valid, and didn't expire or get revoked\n\n\nSwitch to the Provisioning Profiles and make sure the profiles you want to use are all still valid\n\n\nIf your profile is invalid or expired, you can easily fix it:\n\n\nIf you're using \nmatch\n, run \nmatch\n with \nforce\n enabled\n\n\nIf you're using \nsigh\n, run \nsigh\n with \nforce\n enabled\n\n\nIf you're doing manual code signing, edit the provisioning profile, and click on \nGenerate\n on the bottom of the screen. Make sure to select the correct certificate, then download and open the new provisioning profile\n\n\n\n\n\n\nIf your profile is valid, but you still have issues make sure\n\n\nthat the certificate matches the certificate you have installed locally. You can view the used certificate by editing the profile (Don't click \nGenerate\n, unless you want to re-generate the provisioning profile)\n\n\nthat all devices you need are included (Development and Ad-Hoc only)\n\n\nthat you are actually looking at the correct provisioning profile, that matches the bundle identifier of your app. You might have multiple provisioning profiles for the same app / certificate combination. By default Xcode will use the last modified one.\n\n\n\n\n\n\n\n\nKeychain\n\n\n\n\nRun \nsecurity find-identity -v -p codesigning\n to get a list of locally installed code signing identities. Does yours show up?\n\n\nOpen the \nKeychain Access\n app, switch to \nCertificates\n and find your \niOS Developer\n or \niOS Distribution\n entry and unfold the entry to verify the private key is locally installed: \n\n\n  \n\n\n\n\nMake sure to have deleted all expired WWDR certificates, more information \nhere\n. There might be 2 expired WWDR certificates, one in the \nlogin\n, and one in the \nsystem\n keychain\n\n\n\n\nHave you tried turning it off and on again?\n\n\nAs funny as it sounds, sometimes restarting your Mac helps.\n\n\nfastlane\n\n\nRun \nfastlane\n in verbose mode to get even more debug information:\n\n\nfastlane [lane] --verbose\n\n\n\n\nCommon Issues\n\n\nCheck out \nCommonIssues.md\n for the most common code signing issues and how you can solve them.", 
            "title": "Troubleshooting"
        }, 
        {
            "location": "/codesigning/Troubleshooting/#debugging-codesigning-issues", 
            "text": "This guide will help you resolve the most common code signing errors.", 
            "title": "Debugging codesigning issues"
        }, 
        {
            "location": "/codesigning/Troubleshooting/#error-message", 
            "text": "Make sure to find the exact error message in your build output. Many times the error message actually tells you how to resolve the issue.   To get even more details, try archiving using Xcode 8.", 
            "title": "Error message"
        }, 
        {
            "location": "/codesigning/Troubleshooting/#different-machine", 
            "text": "Does code signing work on a different Mac, but not on yours? If so, chances are high you don't have the latest private key, the certificate or the provisioning profile. Also follow the  Keychain  part of this document to make sure you don't have any expired certificates installed.", 
            "title": "Different machine"
        }, 
        {
            "location": "/codesigning/Troubleshooting/#xcode-project", 
            "text": "Make sure to follow  XcodeProject.md  on how to properly set up your project.  A check list on what you should verify on your Xcode project   Make sure to have consistent code signing settings across your targets  Don't set any code signing settings on your project level, just on the target level  Make sure the bundle identifier matches the one of your provisioning profile  Make sure the code signing identity is set to  iOS Distribution  for  Release  builds  Make sure to set a provisioning profile for all your targets, e.g. Watch, Today widget, ...  Check your working copy in git - did you make any changes by mistake?", 
            "title": "Xcode project"
        }, 
        {
            "location": "/codesigning/Troubleshooting/#developer-portal", 
            "text": "If a certificate gets revoked, all connected provisioning profiles get invalidated. This however might not immediately show up in your local keychain.   Open the  Developer Portal  Verify your certificates are valid, and didn't expire or get revoked  Switch to the Provisioning Profiles and make sure the profiles you want to use are all still valid  If your profile is invalid or expired, you can easily fix it:  If you're using  match , run  match  with  force  enabled  If you're using  sigh , run  sigh  with  force  enabled  If you're doing manual code signing, edit the provisioning profile, and click on  Generate  on the bottom of the screen. Make sure to select the correct certificate, then download and open the new provisioning profile    If your profile is valid, but you still have issues make sure  that the certificate matches the certificate you have installed locally. You can view the used certificate by editing the profile (Don't click  Generate , unless you want to re-generate the provisioning profile)  that all devices you need are included (Development and Ad-Hoc only)  that you are actually looking at the correct provisioning profile, that matches the bundle identifier of your app. You might have multiple provisioning profiles for the same app / certificate combination. By default Xcode will use the last modified one.", 
            "title": "Developer Portal"
        }, 
        {
            "location": "/codesigning/Troubleshooting/#keychain", 
            "text": "Run  security find-identity -v -p codesigning  to get a list of locally installed code signing identities. Does yours show up?  Open the  Keychain Access  app, switch to  Certificates  and find your  iOS Developer  or  iOS Distribution  entry and unfold the entry to verify the private key is locally installed:  \n     Make sure to have deleted all expired WWDR certificates, more information  here . There might be 2 expired WWDR certificates, one in the  login , and one in the  system  keychain", 
            "title": "Keychain"
        }, 
        {
            "location": "/codesigning/Troubleshooting/#have-you-tried-turning-it-off-and-on-again", 
            "text": "As funny as it sounds, sometimes restarting your Mac helps.", 
            "title": "Have you tried turning it off and on again?"
        }, 
        {
            "location": "/codesigning/Troubleshooting/#fastlane", 
            "text": "Run  fastlane  in verbose mode to get even more debug information:  fastlane [lane] --verbose", 
            "title": "fastlane"
        }, 
        {
            "location": "/codesigning/Troubleshooting/#common-issues", 
            "text": "Check out  CommonIssues.md  for the most common code signing issues and how you can solve them.", 
            "title": "Common Issues"
        }, 
        {
            "location": "/codesigning/XcodeProject/", 
            "text": "Setting up your Xcode Project\n\n\nXcode 8 and up\n\n\nWith Xcode 8 you can set a provisioning profile name for each of your targets instead of a provisioning profile UUID. By doing so, Xcode automatically selects the latest provisioning profile matching its name. This way you don't have to update your Xcode project, every time you re-generate your provisioning profile (e.g. when adding a new device)\n\n\nYou can now specify which provisioning profile to use in the \nGeneral\n tab after disabling \nAutomatically manage signing\n.\n\n\n\n\nAlternatively you can also specify the provisioning profile in the \nBuild Settings\n tab.\n\n\n\n\nIf your provisioning profile is not listed in the drop down, there might be a few reasons:\n\n\n\n\nIt doesn't match the bundle identifier of the target\n\n\nThe associated certificate or its private key is not installed on the local machine\n\n\nThe provisioning profile is not installed on the local machine\n\n\n\n\nCheck out \nTroubleshooting.md\n for more information on how to debug signing issues.\n\n\nBuild settings / Environment variables\n\n\nPreviously you could specify the UUID of the provisioning profile using the \nPROVISIONING_PROFILE\n Xcode settings property, with Xcode 8 you specify it using the \nPROVISIONING_PROFILE_SPECIFIER\n instead:\n\n\nPROVISIONING_PROFILE_SPECIFIER = \n5AA97AAHK2/Themoji_AppStore\n;\nPROVISIONING_PROFILE_SPECIFIER = \n[team_id]/[profile_name]\n;\n````\n\nYou could pass the profile specifier via environment variables too (See Xcode 7 approach below), however in most cases it's enough to define it statically in your project, per target, since usually neither your Team ID, nor the provisioning profile change.\n\n## Xcode 7 and lower\n\n**Note**: This approach is deprecated with Xcode 8\n\nIf you use `Automatic` value for your provisioning profile, Xcode sometimes selects the wrong profile, resulting in code signing errors at a later point.\n\nInstead it is recommended to specify a specific provisioning profile, which can only be done using the UUID (in Xcode 7).\n\nSince it is not recommended to update the project file, every time you update your provisioning profile, you can pass the UUID via environment variables.\n\nTo do so, open your target settings, open the dropdown for `Provisioning Profile` and select `Other`:\n\n\nimg src=\n/match/assets/XcodeProjectSettings.png\n width=\n700\n /\n\n\nUsing the `$(...)` notation, Xcode will use the provisioning profile matching the UUID, and fallback to `Automatic` if it's not provided. \n\nIf you use [fastlane](https://fastlane.tools) you don't have to do any extra work, since the environment variable for the latest profile are automatically set by [match](https://fastlane.tools/match)\n\n```ruby\nlane :beta do\n  match(type: \nadhoc\n)\n  gym\nend\n\n\n\n\nYou can also manually set the environment variable using\n\n\nlane :beta do\n  ENV[\nPROVISIONING_PROFILE_TARGET1\n] = \nb01c39c9-1b4a-412e-9ae2-3087ee9ea9d3\n\n  gym\nend", 
            "title": "XcodeProject"
        }, 
        {
            "location": "/codesigning/XcodeProject/#setting-up-your-xcode-project", 
            "text": "", 
            "title": "Setting up your Xcode Project"
        }, 
        {
            "location": "/codesigning/XcodeProject/#xcode-8-and-up", 
            "text": "With Xcode 8 you can set a provisioning profile name for each of your targets instead of a provisioning profile UUID. By doing so, Xcode automatically selects the latest provisioning profile matching its name. This way you don't have to update your Xcode project, every time you re-generate your provisioning profile (e.g. when adding a new device)  You can now specify which provisioning profile to use in the  General  tab after disabling  Automatically manage signing .   Alternatively you can also specify the provisioning profile in the  Build Settings  tab.   If your provisioning profile is not listed in the drop down, there might be a few reasons:   It doesn't match the bundle identifier of the target  The associated certificate or its private key is not installed on the local machine  The provisioning profile is not installed on the local machine   Check out  Troubleshooting.md  for more information on how to debug signing issues.", 
            "title": "Xcode 8 and up"
        }, 
        {
            "location": "/codesigning/XcodeProject/#build-settings-environment-variables", 
            "text": "Previously you could specify the UUID of the provisioning profile using the  PROVISIONING_PROFILE  Xcode settings property, with Xcode 8 you specify it using the  PROVISIONING_PROFILE_SPECIFIER  instead:  PROVISIONING_PROFILE_SPECIFIER =  5AA97AAHK2/Themoji_AppStore ;\nPROVISIONING_PROFILE_SPECIFIER =  [team_id]/[profile_name] ;\n````\n\nYou could pass the profile specifier via environment variables too (See Xcode 7 approach below), however in most cases it's enough to define it statically in your project, per target, since usually neither your Team ID, nor the provisioning profile change.\n\n## Xcode 7 and lower\n\n**Note**: This approach is deprecated with Xcode 8\n\nIf you use `Automatic` value for your provisioning profile, Xcode sometimes selects the wrong profile, resulting in code signing errors at a later point.\n\nInstead it is recommended to specify a specific provisioning profile, which can only be done using the UUID (in Xcode 7).\n\nSince it is not recommended to update the project file, every time you update your provisioning profile, you can pass the UUID via environment variables.\n\nTo do so, open your target settings, open the dropdown for `Provisioning Profile` and select `Other`: img src= /match/assets/XcodeProjectSettings.png  width= 700  / \n\nUsing the `$(...)` notation, Xcode will use the provisioning profile matching the UUID, and fallback to `Automatic` if it's not provided. \n\nIf you use [fastlane](https://fastlane.tools) you don't have to do any extra work, since the environment variable for the latest profile are automatically set by [match](https://fastlane.tools/match)\n\n```ruby\nlane :beta do\n  match(type:  adhoc )\n  gym\nend  You can also manually set the environment variable using  lane :beta do\n  ENV[ PROVISIONING_PROFILE_TARGET1 ] =  b01c39c9-1b4a-412e-9ae2-3087ee9ea9d3 \n  gym\nend", 
            "title": "Build settings / Environment variables"
        }
    ]
}